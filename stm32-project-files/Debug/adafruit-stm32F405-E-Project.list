
adafruit-stm32F405-E-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a840  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800a9c8  0800a9c8  0001a9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa4c  0800aa4c  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa4c  0800aa4c  0001aa4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa54  0800aa54  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa54  0800aa54  0001aa54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa58  0800aa58  0001aa58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800aa5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002380  20000180  0800abdc  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002500  0800abdc  00022500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001efc0  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043ea  00000000  00000000  0003f170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  00043560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  000447e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000238ad  00000000  00000000  000458c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018639  00000000  00000000  00069175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1fe2  00000000  00000000  000817ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00143790  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ac8  00000000  00000000  001437e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a9b0 	.word	0x0800a9b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	0800a9b0 	.word	0x0800a9b0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
//	Note: trying to write to file inside this function doesnt work for some reason.
	CDC_Transmit_FS((uint8_t*)GPSbuff, 512);
 80004c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004cc:	4803      	ldr	r0, [pc, #12]	; (80004dc <HAL_UART_RxCpltCallback+0x1c>)
 80004ce:	f009 fde7 	bl	800a0a0 <CDC_Transmit_FS>
//	GPSbuffCplt = 1;
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	200004d8 	.word	0x200004d8

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fbdc 	bl	8000ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f818 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f908 	bl	8000700 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f0:	f000 f8c8 	bl	8000684 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80004f4:	f009 fcd6 	bl	8009ea4 <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 80004f8:	f000 f87a 	bl	80005f0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80004fc:	f007 fd8c 	bl	8008018 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 8000500:	f000 f896 	bl	8000630 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart3, (uint8_t*)GPSbuff, 512);
 8000504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000508:	4902      	ldr	r1, [pc, #8]	; (8000514 <main+0x34>)
 800050a:	4803      	ldr	r0, [pc, #12]	; (8000518 <main+0x38>)
 800050c:	f004 fc92 	bl	8004e34 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	e7fe      	b.n	8000510 <main+0x30>
 8000512:	bf00      	nop
 8000514:	200004d8 	.word	0x200004d8
 8000518:	20000494 	.word	0x20000494

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f00a fa38 	bl	800a9a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <SystemClock_Config+0xcc>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SystemClock_Config+0xd0>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800058c:	2306      	movs	r3, #6
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000590:	23a8      	movs	r3, #168	; 0xa8
 8000592:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000598:	2307      	movs	r3, #7
 800059a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 fc83 	bl	8002eac <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ac:	f000 f924 	bl	80007f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2302      	movs	r3, #2
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2105      	movs	r1, #5
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fee4 	bl	800339c <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005da:	f000 f90d 	bl	80007f8 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	; 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_SDIO_SD_Init+0x38>)
 80005f6:	4a0d      	ldr	r2, [pc, #52]	; (800062c <MX_SDIO_SD_Init+0x3c>)
 80005f8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_SDIO_SD_Init+0x38>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_SDIO_SD_Init+0x38>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_SDIO_SD_Init+0x38>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_SDIO_SD_Init+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <MX_SDIO_SD_Init+0x38>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <MX_SDIO_SD_Init+0x38>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	20000738 	.word	0x20000738
 800062c:	40012c00 	.word	0x40012c00

08000630 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_USART3_UART_Init+0x4c>)
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <MX_USART3_UART_Init+0x50>)
 8000638:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <MX_USART3_UART_Init+0x4c>)
 800063c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000640:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_USART3_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_USART3_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <MX_USART3_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_USART3_UART_Init+0x4c>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <MX_USART3_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_USART3_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_USART3_UART_Init+0x4c>)
 8000668:	f004 fb97 	bl	8004d9a <HAL_UART_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000672:	f000 f8c1 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000494 	.word	0x20000494
 8000680:	40004800 	.word	0x40004800

08000684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_DMA_Init+0x78>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a1a      	ldr	r2, [pc, #104]	; (80006fc <MX_DMA_Init+0x78>)
 8000694:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <MX_DMA_Init+0x78>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_DMA_Init+0x78>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a13      	ldr	r2, [pc, #76]	; (80006fc <MX_DMA_Init+0x78>)
 80006b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_DMA_Init+0x78>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	200c      	movs	r0, #12
 80006c8:	f000 fc5b 	bl	8000f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80006cc:	200c      	movs	r0, #12
 80006ce:	f000 fc74 	bl	8000fba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	203b      	movs	r0, #59	; 0x3b
 80006d8:	f000 fc53 	bl	8000f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80006dc:	203b      	movs	r0, #59	; 0x3b
 80006de:	f000 fc6c 	bl	8000fba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2100      	movs	r1, #0
 80006e6:	2045      	movs	r0, #69	; 0x45
 80006e8:	f000 fc4b 	bl	8000f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80006ec:	2045      	movs	r0, #69	; 0x45
 80006ee:	f000 fc64 	bl	8000fba <HAL_NVIC_EnableIRQ>

}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b34      	ldr	r3, [pc, #208]	; (80007ec <MX_GPIO_Init+0xec>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a33      	ldr	r2, [pc, #204]	; (80007ec <MX_GPIO_Init+0xec>)
 8000720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b31      	ldr	r3, [pc, #196]	; (80007ec <MX_GPIO_Init+0xec>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <MX_GPIO_Init+0xec>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a2c      	ldr	r2, [pc, #176]	; (80007ec <MX_GPIO_Init+0xec>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b2a      	ldr	r3, [pc, #168]	; (80007ec <MX_GPIO_Init+0xec>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	4b26      	ldr	r3, [pc, #152]	; (80007ec <MX_GPIO_Init+0xec>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a25      	ldr	r2, [pc, #148]	; (80007ec <MX_GPIO_Init+0xec>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b23      	ldr	r3, [pc, #140]	; (80007ec <MX_GPIO_Init+0xec>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <MX_GPIO_Init+0xec>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a1e      	ldr	r2, [pc, #120]	; (80007ec <MX_GPIO_Init+0xec>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <MX_GPIO_Init+0xec>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_GPIO_Init+0xec>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a17      	ldr	r2, [pc, #92]	; (80007ec <MX_GPIO_Init+0xec>)
 8000790:	f043 0308 	orr.w	r3, r3, #8
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_GPIO_Init+0xec>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2102      	movs	r1, #2
 80007a6:	4812      	ldr	r0, [pc, #72]	; (80007f0 <MX_GPIO_Init+0xf0>)
 80007a8:	f001 f9e4 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 80007ac:	2302      	movs	r3, #2
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	480b      	ldr	r0, [pc, #44]	; (80007f0 <MX_GPIO_Init+0xf0>)
 80007c4:	f001 f822 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_GPIO_Init+0xf4>)
 80007de:	f001 f815 	bl	800180c <HAL_GPIO_Init>

}
 80007e2:	bf00      	nop
 80007e4:	3728      	adds	r7, #40	; 0x28
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020800 	.word	0x40020800
 80007f4:	40020400 	.word	0x40020400

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000800:	e7fe      	b.n	8000800 <Error_Handler+0x8>
	...

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <HAL_MspInit+0x4c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <HAL_MspInit+0x4c>)
 8000814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000818:	6453      	str	r3, [r2, #68]	; 0x44
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <HAL_MspInit+0x4c>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <HAL_MspInit+0x4c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	4a08      	ldr	r2, [pc, #32]	; (8000850 <HAL_MspInit+0x4c>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	6413      	str	r3, [r2, #64]	; 0x40
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_MspInit+0x4c>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800

08000854 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a70      	ldr	r2, [pc, #448]	; (8000a34 <HAL_SD_MspInit+0x1e0>)
 8000872:	4293      	cmp	r3, r2
 8000874:	f040 80da 	bne.w	8000a2c <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	4b6e      	ldr	r3, [pc, #440]	; (8000a38 <HAL_SD_MspInit+0x1e4>)
 800087e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000880:	4a6d      	ldr	r2, [pc, #436]	; (8000a38 <HAL_SD_MspInit+0x1e4>)
 8000882:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000886:	6453      	str	r3, [r2, #68]	; 0x44
 8000888:	4b6b      	ldr	r3, [pc, #428]	; (8000a38 <HAL_SD_MspInit+0x1e4>)
 800088a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	4b67      	ldr	r3, [pc, #412]	; (8000a38 <HAL_SD_MspInit+0x1e4>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	4a66      	ldr	r2, [pc, #408]	; (8000a38 <HAL_SD_MspInit+0x1e4>)
 800089e:	f043 0304 	orr.w	r3, r3, #4
 80008a2:	6313      	str	r3, [r2, #48]	; 0x30
 80008a4:	4b64      	ldr	r3, [pc, #400]	; (8000a38 <HAL_SD_MspInit+0x1e4>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	f003 0304 	and.w	r3, r3, #4
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	4b60      	ldr	r3, [pc, #384]	; (8000a38 <HAL_SD_MspInit+0x1e4>)
 80008b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b8:	4a5f      	ldr	r2, [pc, #380]	; (8000a38 <HAL_SD_MspInit+0x1e4>)
 80008ba:	f043 0308 	orr.w	r3, r3, #8
 80008be:	6313      	str	r3, [r2, #48]	; 0x30
 80008c0:	4b5d      	ldr	r3, [pc, #372]	; (8000a38 <HAL_SD_MspInit+0x1e4>)
 80008c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c4:	f003 0308 	and.w	r3, r3, #8
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80008cc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80008d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008de:	230c      	movs	r3, #12
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	4854      	ldr	r0, [pc, #336]	; (8000a3c <HAL_SD_MspInit+0x1e8>)
 80008ea:	f000 ff8f 	bl	800180c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000900:	230c      	movs	r3, #12
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	484c      	ldr	r0, [pc, #304]	; (8000a3c <HAL_SD_MspInit+0x1e8>)
 800090c:	f000 ff7e 	bl	800180c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000910:	2304      	movs	r3, #4
 8000912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000918:	2301      	movs	r3, #1
 800091a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000920:	230c      	movs	r3, #12
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4845      	ldr	r0, [pc, #276]	; (8000a40 <HAL_SD_MspInit+0x1ec>)
 800092c:	f000 ff6e 	bl	800180c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000930:	4b44      	ldr	r3, [pc, #272]	; (8000a44 <HAL_SD_MspInit+0x1f0>)
 8000932:	4a45      	ldr	r2, [pc, #276]	; (8000a48 <HAL_SD_MspInit+0x1f4>)
 8000934:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000936:	4b43      	ldr	r3, [pc, #268]	; (8000a44 <HAL_SD_MspInit+0x1f0>)
 8000938:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800093c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800093e:	4b41      	ldr	r3, [pc, #260]	; (8000a44 <HAL_SD_MspInit+0x1f0>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000944:	4b3f      	ldr	r3, [pc, #252]	; (8000a44 <HAL_SD_MspInit+0x1f0>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800094a:	4b3e      	ldr	r3, [pc, #248]	; (8000a44 <HAL_SD_MspInit+0x1f0>)
 800094c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000950:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000952:	4b3c      	ldr	r3, [pc, #240]	; (8000a44 <HAL_SD_MspInit+0x1f0>)
 8000954:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000958:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800095a:	4b3a      	ldr	r3, [pc, #232]	; (8000a44 <HAL_SD_MspInit+0x1f0>)
 800095c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000960:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000962:	4b38      	ldr	r3, [pc, #224]	; (8000a44 <HAL_SD_MspInit+0x1f0>)
 8000964:	2220      	movs	r2, #32
 8000966:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000968:	4b36      	ldr	r3, [pc, #216]	; (8000a44 <HAL_SD_MspInit+0x1f0>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800096e:	4b35      	ldr	r3, [pc, #212]	; (8000a44 <HAL_SD_MspInit+0x1f0>)
 8000970:	2204      	movs	r2, #4
 8000972:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000974:	4b33      	ldr	r3, [pc, #204]	; (8000a44 <HAL_SD_MspInit+0x1f0>)
 8000976:	2203      	movs	r2, #3
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800097a:	4b32      	ldr	r3, [pc, #200]	; (8000a44 <HAL_SD_MspInit+0x1f0>)
 800097c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000980:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000982:	4b30      	ldr	r3, [pc, #192]	; (8000a44 <HAL_SD_MspInit+0x1f0>)
 8000984:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000988:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800098a:	482e      	ldr	r0, [pc, #184]	; (8000a44 <HAL_SD_MspInit+0x1f0>)
 800098c:	f000 fb30 	bl	8000ff0 <HAL_DMA_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8000996:	f7ff ff2f 	bl	80007f8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a29      	ldr	r2, [pc, #164]	; (8000a44 <HAL_SD_MspInit+0x1f0>)
 800099e:	641a      	str	r2, [r3, #64]	; 0x40
 80009a0:	4a28      	ldr	r2, [pc, #160]	; (8000a44 <HAL_SD_MspInit+0x1f0>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80009a6:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <HAL_SD_MspInit+0x1f8>)
 80009a8:	4a29      	ldr	r2, [pc, #164]	; (8000a50 <HAL_SD_MspInit+0x1fc>)
 80009aa:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80009ac:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <HAL_SD_MspInit+0x1f8>)
 80009ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009b2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009b4:	4b25      	ldr	r3, [pc, #148]	; (8000a4c <HAL_SD_MspInit+0x1f8>)
 80009b6:	2240      	movs	r2, #64	; 0x40
 80009b8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ba:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <HAL_SD_MspInit+0x1f8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009c0:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <HAL_SD_MspInit+0x1f8>)
 80009c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009c6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009c8:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <HAL_SD_MspInit+0x1f8>)
 80009ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ce:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <HAL_SD_MspInit+0x1f8>)
 80009d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009d6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <HAL_SD_MspInit+0x1f8>)
 80009da:	2220      	movs	r2, #32
 80009dc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <HAL_SD_MspInit+0x1f8>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <HAL_SD_MspInit+0x1f8>)
 80009e6:	2204      	movs	r2, #4
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_SD_MspInit+0x1f8>)
 80009ec:	2203      	movs	r2, #3
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <HAL_SD_MspInit+0x1f8>)
 80009f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <HAL_SD_MspInit+0x1f8>)
 80009fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80009fe:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000a00:	4812      	ldr	r0, [pc, #72]	; (8000a4c <HAL_SD_MspInit+0x1f8>)
 8000a02:	f000 faf5 	bl	8000ff0 <HAL_DMA_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8000a0c:	f7ff fef4 	bl	80007f8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <HAL_SD_MspInit+0x1f8>)
 8000a14:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a16:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <HAL_SD_MspInit+0x1f8>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2031      	movs	r0, #49	; 0x31
 8000a22:	f000 faae 	bl	8000f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000a26:	2031      	movs	r0, #49	; 0x31
 8000a28:	f000 fac7 	bl	8000fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000a2c:	bf00      	nop
 8000a2e:	3728      	adds	r7, #40	; 0x28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40012c00 	.word	0x40012c00
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020800 	.word	0x40020800
 8000a40:	40020c00 	.word	0x40020c00
 8000a44:	200003d4 	.word	0x200003d4
 8000a48:	40026458 	.word	0x40026458
 8000a4c:	200006d8 	.word	0x200006d8
 8000a50:	400264a0 	.word	0x400264a0

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a35      	ldr	r2, [pc, #212]	; (8000b48 <HAL_UART_MspInit+0xf4>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d163      	bne.n	8000b3e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b34      	ldr	r3, [pc, #208]	; (8000b4c <HAL_UART_MspInit+0xf8>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a33      	ldr	r2, [pc, #204]	; (8000b4c <HAL_UART_MspInit+0xf8>)
 8000a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <HAL_UART_MspInit+0xf8>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <HAL_UART_MspInit+0xf8>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a2c      	ldr	r2, [pc, #176]	; (8000b4c <HAL_UART_MspInit+0xf8>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <HAL_UART_MspInit+0xf8>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000aae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4821      	ldr	r0, [pc, #132]	; (8000b50 <HAL_UART_MspInit+0xfc>)
 8000acc:	f000 fe9e 	bl	800180c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000ad0:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <HAL_UART_MspInit+0x100>)
 8000ad2:	4a21      	ldr	r2, [pc, #132]	; (8000b58 <HAL_UART_MspInit+0x104>)
 8000ad4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <HAL_UART_MspInit+0x100>)
 8000ad8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000adc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ade:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <HAL_UART_MspInit+0x100>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <HAL_UART_MspInit+0x100>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <HAL_UART_MspInit+0x100>)
 8000aec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000af0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <HAL_UART_MspInit+0x100>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <HAL_UART_MspInit+0x100>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_UART_MspInit+0x100>)
 8000b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b04:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <HAL_UART_MspInit+0x100>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <HAL_UART_MspInit+0x100>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000b12:	4810      	ldr	r0, [pc, #64]	; (8000b54 <HAL_UART_MspInit+0x100>)
 8000b14:	f000 fa6c 	bl	8000ff0 <HAL_DMA_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000b1e:	f7ff fe6b 	bl	80007f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <HAL_UART_MspInit+0x100>)
 8000b26:	639a      	str	r2, [r3, #56]	; 0x38
 8000b28:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <HAL_UART_MspInit+0x100>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	2027      	movs	r0, #39	; 0x27
 8000b34:	f000 fa25 	bl	8000f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b38:	2027      	movs	r0, #39	; 0x27
 8000b3a:	f000 fa3e 	bl	8000fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b3e:	bf00      	nop
 8000b40:	3728      	adds	r7, #40	; 0x28
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40004800 	.word	0x40004800
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020400 	.word	0x40020400
 8000b54:	20000434 	.word	0x20000434
 8000b58:	40026028 	.word	0x40026028

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <NMI_Handler+0x4>

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <MemManage_Handler+0x4>

08000b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba8:	f000 f8cc 	bl	8000d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <DMA1_Stream1_IRQHandler+0x10>)
 8000bb6:	f000 fbb3 	bl	8001320 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000434 	.word	0x20000434

08000bc4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <USART3_IRQHandler+0x10>)
 8000bca:	f004 f963 	bl	8004e94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000494 	.word	0x20000494

08000bd8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <SDIO_IRQHandler+0x10>)
 8000bde:	f003 f823 	bl	8003c28 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000738 	.word	0x20000738

08000bec <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <DMA2_Stream3_IRQHandler+0x10>)
 8000bf2:	f000 fb95 	bl	8001320 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200003d4 	.word	0x200003d4

08000c00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <OTG_FS_IRQHandler+0x10>)
 8000c06:	f001 f91e 	bl	8001e46 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200020f8 	.word	0x200020f8

08000c14 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <DMA2_Stream6_IRQHandler+0x10>)
 8000c1a:	f000 fb81 	bl	8001320 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200006d8 	.word	0x200006d8

08000c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <SystemInit+0x20>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <SystemInit+0x20>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c52:	490e      	ldr	r1, [pc, #56]	; (8000c8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c54:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c68:	4c0b      	ldr	r4, [pc, #44]	; (8000c98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c76:	f7ff ffd7 	bl	8000c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f009 fe6d 	bl	800a958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7e:	f7ff fc2f 	bl	80004e0 <main>
  bx  lr    
 8000c82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000c90:	0800aa5c 	.word	0x0800aa5c
  ldr r2, =_sbss
 8000c94:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000c98:	20002500 	.word	0x20002500

08000c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC_IRQHandler>
	...

08000ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <HAL_Init+0x40>)
 8000caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_Init+0x40>)
 8000cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <HAL_Init+0x40>)
 8000cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 f94f 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 f808 	bl	8000ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd4:	f7ff fd96 	bl	8000804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023c00 	.word	0x40023c00

08000ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_InitTick+0x54>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_InitTick+0x58>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f967 	bl	8000fd6 <HAL_SYSTICK_Config>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00e      	b.n	8000d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d80a      	bhi.n	8000d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f000 f92f 	bl	8000f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d24:	4a06      	ldr	r2, [pc, #24]	; (8000d40 <HAL_InitTick+0x5c>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e000      	b.n	8000d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	20000004 	.word	0x20000004

08000d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x20>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x24>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HAL_IncTick+0x24>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008
 8000d68:	200007bc 	.word	0x200007bc

08000d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <HAL_GetTick+0x14>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	200007bc 	.word	0x200007bc

08000d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d8c:	f7ff ffee 	bl	8000d6c <HAL_GetTick>
 8000d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d9c:	d005      	beq.n	8000daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <HAL_Delay+0x44>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4413      	add	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000daa:	bf00      	nop
 8000dac:	f7ff ffde 	bl	8000d6c <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d8f7      	bhi.n	8000dac <HAL_Delay+0x28>
  {
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008

08000dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de8:	4013      	ands	r3, r2
 8000dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	60d3      	str	r3, [r2, #12]
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <__NVIC_GetPriorityGrouping+0x18>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	f003 0307 	and.w	r3, r3, #7
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	db0b      	blt.n	8000e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	f003 021f 	and.w	r2, r3, #31
 8000e48:	4907      	ldr	r1, [pc, #28]	; (8000e68 <__NVIC_EnableIRQ+0x38>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	095b      	lsrs	r3, r3, #5
 8000e50:	2001      	movs	r0, #1
 8000e52:	fa00 f202 	lsl.w	r2, r0, r2
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000e100 	.word	0xe000e100

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db0a      	blt.n	8000e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	490c      	ldr	r1, [pc, #48]	; (8000eb8 <__NVIC_SetPriority+0x4c>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	440b      	add	r3, r1
 8000e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e94:	e00a      	b.n	8000eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4908      	ldr	r1, [pc, #32]	; (8000ebc <__NVIC_SetPriority+0x50>)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	0112      	lsls	r2, r2, #4
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	761a      	strb	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f1c3 0307 	rsb	r3, r3, #7
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	bf28      	it	cs
 8000ede:	2304      	movcs	r3, #4
 8000ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	2b06      	cmp	r3, #6
 8000ee8:	d902      	bls.n	8000ef0 <NVIC_EncodePriority+0x30>
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3b03      	subs	r3, #3
 8000eee:	e000      	b.n	8000ef2 <NVIC_EncodePriority+0x32>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43da      	mvns	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	401a      	ands	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43d9      	mvns	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	4313      	orrs	r3, r2
         );
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3724      	adds	r7, #36	; 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f38:	d301      	bcc.n	8000f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00f      	b.n	8000f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <SysTick_Config+0x40>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f46:	210f      	movs	r1, #15
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f7ff ff8e 	bl	8000e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <SysTick_Config+0x40>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <SysTick_Config+0x40>)
 8000f58:	2207      	movs	r2, #7
 8000f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	e000e010 	.word	0xe000e010

08000f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff29 	bl	8000dcc <__NVIC_SetPriorityGrouping>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f94:	f7ff ff3e 	bl	8000e14 <__NVIC_GetPriorityGrouping>
 8000f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	6978      	ldr	r0, [r7, #20]
 8000fa0:	f7ff ff8e 	bl	8000ec0 <NVIC_EncodePriority>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff5d 	bl	8000e6c <__NVIC_SetPriority>
}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff31 	bl	8000e30 <__NVIC_EnableIRQ>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffa2 	bl	8000f28 <SysTick_Config>
 8000fe4:	4603      	mov	r3, r0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff feb6 	bl	8000d6c <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e099      	b.n	8001140 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2202      	movs	r2, #2
 8001010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0201 	bic.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800102c:	e00f      	b.n	800104e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800102e:	f7ff fe9d 	bl	8000d6c <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b05      	cmp	r3, #5
 800103a:	d908      	bls.n	800104e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2220      	movs	r2, #32
 8001040:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2203      	movs	r2, #3
 8001046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e078      	b.n	8001140 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1e8      	bne.n	800102e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	4b38      	ldr	r3, [pc, #224]	; (8001148 <HAL_DMA_Init+0x158>)
 8001068:	4013      	ands	r3, r2
 800106a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800107a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001086:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001092:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	4313      	orrs	r3, r2
 800109e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	d107      	bne.n	80010b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b0:	4313      	orrs	r3, r2
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	f023 0307 	bic.w	r3, r3, #7
 80010ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010de:	2b04      	cmp	r3, #4
 80010e0:	d117      	bne.n	8001112 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00e      	beq.n	8001112 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f000 fb0d 	bl	8001714 <DMA_CheckFifoParam>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d008      	beq.n	8001112 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2240      	movs	r2, #64	; 0x40
 8001104:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2201      	movs	r2, #1
 800110a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800110e:	2301      	movs	r3, #1
 8001110:	e016      	b.n	8001140 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 fac4 	bl	80016a8 <DMA_CalcBaseAndBitshift>
 8001120:	4603      	mov	r3, r0
 8001122:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001128:	223f      	movs	r2, #63	; 0x3f
 800112a:	409a      	lsls	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	f010803f 	.word	0xf010803f

0800114c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001162:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <HAL_DMA_Start_IT+0x26>
 800116e:	2302      	movs	r3, #2
 8001170:	e040      	b.n	80011f4 <HAL_DMA_Start_IT+0xa8>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d12f      	bne.n	80011e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2202      	movs	r2, #2
 800118a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2200      	movs	r2, #0
 8001192:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f000 fa56 	bl	800164c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a4:	223f      	movs	r2, #63	; 0x3f
 80011a6:	409a      	lsls	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f042 0216 	orr.w	r2, r2, #22
 80011ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d007      	beq.n	80011d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0208 	orr.w	r2, r2, #8
 80011d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0201 	orr.w	r2, r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	e005      	b.n	80011f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80011ee:	2302      	movs	r3, #2
 80011f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80011f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001208:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800120a:	f7ff fdaf 	bl	8000d6c <HAL_GetTick>
 800120e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d008      	beq.n	800122e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e052      	b.n	80012d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 0216 	bic.w	r2, r2, #22
 800123c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	695a      	ldr	r2, [r3, #20]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800124c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	2b00      	cmp	r3, #0
 8001254:	d103      	bne.n	800125e <HAL_DMA_Abort+0x62>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800125a:	2b00      	cmp	r3, #0
 800125c:	d007      	beq.n	800126e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0208 	bic.w	r2, r2, #8
 800126c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 0201 	bic.w	r2, r2, #1
 800127c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800127e:	e013      	b.n	80012a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001280:	f7ff fd74 	bl	8000d6c <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b05      	cmp	r3, #5
 800128c:	d90c      	bls.n	80012a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2220      	movs	r2, #32
 8001292:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2203      	movs	r2, #3
 8001298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e015      	b.n	80012d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1e4      	bne.n	8001280 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ba:	223f      	movs	r2, #63	; 0x3f
 80012bc:	409a      	lsls	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d004      	beq.n	80012fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00c      	b.n	8001314 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2205      	movs	r2, #5
 80012fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0201 	bic.w	r2, r2, #1
 8001310:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800132c:	4b92      	ldr	r3, [pc, #584]	; (8001578 <HAL_DMA_IRQHandler+0x258>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a92      	ldr	r2, [pc, #584]	; (800157c <HAL_DMA_IRQHandler+0x25c>)
 8001332:	fba2 2303 	umull	r2, r3, r2, r3
 8001336:	0a9b      	lsrs	r3, r3, #10
 8001338:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134a:	2208      	movs	r2, #8
 800134c:	409a      	lsls	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4013      	ands	r3, r2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d01a      	beq.n	800138c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	d013      	beq.n	800138c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0204 	bic.w	r2, r2, #4
 8001372:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001378:	2208      	movs	r2, #8
 800137a:	409a      	lsls	r2, r3
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001384:	f043 0201 	orr.w	r2, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001390:	2201      	movs	r2, #1
 8001392:	409a      	lsls	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4013      	ands	r3, r2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d012      	beq.n	80013c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00b      	beq.n	80013c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ae:	2201      	movs	r2, #1
 80013b0:	409a      	lsls	r2, r3
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ba:	f043 0202 	orr.w	r2, r3, #2
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c6:	2204      	movs	r2, #4
 80013c8:	409a      	lsls	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4013      	ands	r3, r2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d012      	beq.n	80013f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00b      	beq.n	80013f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e4:	2204      	movs	r2, #4
 80013e6:	409a      	lsls	r2, r3
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f0:	f043 0204 	orr.w	r2, r3, #4
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fc:	2210      	movs	r2, #16
 80013fe:	409a      	lsls	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4013      	ands	r3, r2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d043      	beq.n	8001490 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	2b00      	cmp	r3, #0
 8001414:	d03c      	beq.n	8001490 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141a:	2210      	movs	r2, #16
 800141c:	409a      	lsls	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d018      	beq.n	8001462 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d108      	bne.n	8001450 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	2b00      	cmp	r3, #0
 8001444:	d024      	beq.n	8001490 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	4798      	blx	r3
 800144e:	e01f      	b.n	8001490 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001454:	2b00      	cmp	r3, #0
 8001456:	d01b      	beq.n	8001490 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	4798      	blx	r3
 8001460:	e016      	b.n	8001490 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146c:	2b00      	cmp	r3, #0
 800146e:	d107      	bne.n	8001480 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0208 	bic.w	r2, r2, #8
 800147e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001494:	2220      	movs	r2, #32
 8001496:	409a      	lsls	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4013      	ands	r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 808e 	beq.w	80015be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0310 	and.w	r3, r3, #16
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 8086 	beq.w	80015be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b6:	2220      	movs	r2, #32
 80014b8:	409a      	lsls	r2, r3
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b05      	cmp	r3, #5
 80014c8:	d136      	bne.n	8001538 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0216 	bic.w	r2, r2, #22
 80014d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d103      	bne.n	80014fa <HAL_DMA_IRQHandler+0x1da>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d007      	beq.n	800150a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0208 	bic.w	r2, r2, #8
 8001508:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150e:	223f      	movs	r2, #63	; 0x3f
 8001510:	409a      	lsls	r2, r3
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800152a:	2b00      	cmp	r3, #0
 800152c:	d07d      	beq.n	800162a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	4798      	blx	r3
        }
        return;
 8001536:	e078      	b.n	800162a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d01c      	beq.n	8001580 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d108      	bne.n	8001566 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001558:	2b00      	cmp	r3, #0
 800155a:	d030      	beq.n	80015be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	4798      	blx	r3
 8001564:	e02b      	b.n	80015be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800156a:	2b00      	cmp	r3, #0
 800156c:	d027      	beq.n	80015be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	4798      	blx	r3
 8001576:	e022      	b.n	80015be <HAL_DMA_IRQHandler+0x29e>
 8001578:	20000000 	.word	0x20000000
 800157c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10f      	bne.n	80015ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 0210 	bic.w	r2, r2, #16
 800159c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d032      	beq.n	800162c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d022      	beq.n	8001618 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2205      	movs	r2, #5
 80015d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0201 	bic.w	r2, r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	3301      	adds	r3, #1
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d307      	bcc.n	8001606 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f2      	bne.n	80015ea <HAL_DMA_IRQHandler+0x2ca>
 8001604:	e000      	b.n	8001608 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001606:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	4798      	blx	r3
 8001628:	e000      	b.n	800162c <HAL_DMA_IRQHandler+0x30c>
        return;
 800162a:	bf00      	nop
    }
  }
}
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop

08001634 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001668:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b40      	cmp	r3, #64	; 0x40
 8001678:	d108      	bne.n	800168c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800168a:	e007      	b.n	800169c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	60da      	str	r2, [r3, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	3b10      	subs	r3, #16
 80016b8:	4a14      	ldr	r2, [pc, #80]	; (800170c <DMA_CalcBaseAndBitshift+0x64>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	091b      	lsrs	r3, r3, #4
 80016c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016c2:	4a13      	ldr	r2, [pc, #76]	; (8001710 <DMA_CalcBaseAndBitshift+0x68>)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4413      	add	r3, r2
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d909      	bls.n	80016ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016de:	f023 0303 	bic.w	r3, r3, #3
 80016e2:	1d1a      	adds	r2, r3, #4
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	659a      	str	r2, [r3, #88]	; 0x58
 80016e8:	e007      	b.n	80016fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016f2:	f023 0303 	bic.w	r3, r3, #3
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	aaaaaaab 	.word	0xaaaaaaab
 8001710:	0800aa30 	.word	0x0800aa30

08001714 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001724:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d11f      	bne.n	800176e <DMA_CheckFifoParam+0x5a>
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	2b03      	cmp	r3, #3
 8001732:	d856      	bhi.n	80017e2 <DMA_CheckFifoParam+0xce>
 8001734:	a201      	add	r2, pc, #4	; (adr r2, 800173c <DMA_CheckFifoParam+0x28>)
 8001736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173a:	bf00      	nop
 800173c:	0800174d 	.word	0x0800174d
 8001740:	0800175f 	.word	0x0800175f
 8001744:	0800174d 	.word	0x0800174d
 8001748:	080017e3 	.word	0x080017e3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d046      	beq.n	80017e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800175c:	e043      	b.n	80017e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001766:	d140      	bne.n	80017ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800176c:	e03d      	b.n	80017ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001776:	d121      	bne.n	80017bc <DMA_CheckFifoParam+0xa8>
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d837      	bhi.n	80017ee <DMA_CheckFifoParam+0xda>
 800177e:	a201      	add	r2, pc, #4	; (adr r2, 8001784 <DMA_CheckFifoParam+0x70>)
 8001780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001784:	08001795 	.word	0x08001795
 8001788:	0800179b 	.word	0x0800179b
 800178c:	08001795 	.word	0x08001795
 8001790:	080017ad 	.word	0x080017ad
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
      break;
 8001798:	e030      	b.n	80017fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d025      	beq.n	80017f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017aa:	e022      	b.n	80017f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017b4:	d11f      	bne.n	80017f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017ba:	e01c      	b.n	80017f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d903      	bls.n	80017ca <DMA_CheckFifoParam+0xb6>
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d003      	beq.n	80017d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017c8:	e018      	b.n	80017fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]
      break;
 80017ce:	e015      	b.n	80017fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00e      	beq.n	80017fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
      break;
 80017e0:	e00b      	b.n	80017fa <DMA_CheckFifoParam+0xe6>
      break;
 80017e2:	bf00      	nop
 80017e4:	e00a      	b.n	80017fc <DMA_CheckFifoParam+0xe8>
      break;
 80017e6:	bf00      	nop
 80017e8:	e008      	b.n	80017fc <DMA_CheckFifoParam+0xe8>
      break;
 80017ea:	bf00      	nop
 80017ec:	e006      	b.n	80017fc <DMA_CheckFifoParam+0xe8>
      break;
 80017ee:	bf00      	nop
 80017f0:	e004      	b.n	80017fc <DMA_CheckFifoParam+0xe8>
      break;
 80017f2:	bf00      	nop
 80017f4:	e002      	b.n	80017fc <DMA_CheckFifoParam+0xe8>
      break;   
 80017f6:	bf00      	nop
 80017f8:	e000      	b.n	80017fc <DMA_CheckFifoParam+0xe8>
      break;
 80017fa:	bf00      	nop
    }
  } 
  
  return status; 
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop

0800180c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	e16b      	b.n	8001b00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001828:	2201      	movs	r2, #1
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	429a      	cmp	r2, r3
 8001842:	f040 815a 	bne.w	8001afa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b01      	cmp	r3, #1
 8001850:	d005      	beq.n	800185e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800185a:	2b02      	cmp	r3, #2
 800185c:	d130      	bne.n	80018c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	2203      	movs	r2, #3
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001894:	2201      	movs	r2, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 0201 	and.w	r2, r3, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	d017      	beq.n	80018fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d123      	bne.n	8001950 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	08da      	lsrs	r2, r3, #3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3208      	adds	r2, #8
 8001910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001914:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	220f      	movs	r2, #15
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	08da      	lsrs	r2, r3, #3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3208      	adds	r2, #8
 800194a:	69b9      	ldr	r1, [r7, #24]
 800194c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	2203      	movs	r2, #3
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0203 	and.w	r2, r3, #3
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80b4 	beq.w	8001afa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b60      	ldr	r3, [pc, #384]	; (8001b18 <HAL_GPIO_Init+0x30c>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	4a5f      	ldr	r2, [pc, #380]	; (8001b18 <HAL_GPIO_Init+0x30c>)
 800199c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a0:	6453      	str	r3, [r2, #68]	; 0x44
 80019a2:	4b5d      	ldr	r3, [pc, #372]	; (8001b18 <HAL_GPIO_Init+0x30c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ae:	4a5b      	ldr	r2, [pc, #364]	; (8001b1c <HAL_GPIO_Init+0x310>)
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	089b      	lsrs	r3, r3, #2
 80019b4:	3302      	adds	r3, #2
 80019b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	220f      	movs	r2, #15
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a52      	ldr	r2, [pc, #328]	; (8001b20 <HAL_GPIO_Init+0x314>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d02b      	beq.n	8001a32 <HAL_GPIO_Init+0x226>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a51      	ldr	r2, [pc, #324]	; (8001b24 <HAL_GPIO_Init+0x318>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d025      	beq.n	8001a2e <HAL_GPIO_Init+0x222>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a50      	ldr	r2, [pc, #320]	; (8001b28 <HAL_GPIO_Init+0x31c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d01f      	beq.n	8001a2a <HAL_GPIO_Init+0x21e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a4f      	ldr	r2, [pc, #316]	; (8001b2c <HAL_GPIO_Init+0x320>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d019      	beq.n	8001a26 <HAL_GPIO_Init+0x21a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4e      	ldr	r2, [pc, #312]	; (8001b30 <HAL_GPIO_Init+0x324>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d013      	beq.n	8001a22 <HAL_GPIO_Init+0x216>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4d      	ldr	r2, [pc, #308]	; (8001b34 <HAL_GPIO_Init+0x328>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d00d      	beq.n	8001a1e <HAL_GPIO_Init+0x212>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4c      	ldr	r2, [pc, #304]	; (8001b38 <HAL_GPIO_Init+0x32c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d007      	beq.n	8001a1a <HAL_GPIO_Init+0x20e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4b      	ldr	r2, [pc, #300]	; (8001b3c <HAL_GPIO_Init+0x330>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d101      	bne.n	8001a16 <HAL_GPIO_Init+0x20a>
 8001a12:	2307      	movs	r3, #7
 8001a14:	e00e      	b.n	8001a34 <HAL_GPIO_Init+0x228>
 8001a16:	2308      	movs	r3, #8
 8001a18:	e00c      	b.n	8001a34 <HAL_GPIO_Init+0x228>
 8001a1a:	2306      	movs	r3, #6
 8001a1c:	e00a      	b.n	8001a34 <HAL_GPIO_Init+0x228>
 8001a1e:	2305      	movs	r3, #5
 8001a20:	e008      	b.n	8001a34 <HAL_GPIO_Init+0x228>
 8001a22:	2304      	movs	r3, #4
 8001a24:	e006      	b.n	8001a34 <HAL_GPIO_Init+0x228>
 8001a26:	2303      	movs	r3, #3
 8001a28:	e004      	b.n	8001a34 <HAL_GPIO_Init+0x228>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e002      	b.n	8001a34 <HAL_GPIO_Init+0x228>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <HAL_GPIO_Init+0x228>
 8001a32:	2300      	movs	r3, #0
 8001a34:	69fa      	ldr	r2, [r7, #28]
 8001a36:	f002 0203 	and.w	r2, r2, #3
 8001a3a:	0092      	lsls	r2, r2, #2
 8001a3c:	4093      	lsls	r3, r2
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a44:	4935      	ldr	r1, [pc, #212]	; (8001b1c <HAL_GPIO_Init+0x310>)
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	089b      	lsrs	r3, r3, #2
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a52:	4b3b      	ldr	r3, [pc, #236]	; (8001b40 <HAL_GPIO_Init+0x334>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a76:	4a32      	ldr	r2, [pc, #200]	; (8001b40 <HAL_GPIO_Init+0x334>)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a7c:	4b30      	ldr	r3, [pc, #192]	; (8001b40 <HAL_GPIO_Init+0x334>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aa0:	4a27      	ldr	r2, [pc, #156]	; (8001b40 <HAL_GPIO_Init+0x334>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa6:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <HAL_GPIO_Init+0x334>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aca:	4a1d      	ldr	r2, [pc, #116]	; (8001b40 <HAL_GPIO_Init+0x334>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <HAL_GPIO_Init+0x334>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af4:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <HAL_GPIO_Init+0x334>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3301      	adds	r3, #1
 8001afe:	61fb      	str	r3, [r7, #28]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	2b0f      	cmp	r3, #15
 8001b04:	f67f ae90 	bls.w	8001828 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	3724      	adds	r7, #36	; 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40013800 	.word	0x40013800
 8001b20:	40020000 	.word	0x40020000
 8001b24:	40020400 	.word	0x40020400
 8001b28:	40020800 	.word	0x40020800
 8001b2c:	40020c00 	.word	0x40020c00
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40021400 	.word	0x40021400
 8001b38:	40021800 	.word	0x40021800
 8001b3c:	40021c00 	.word	0x40021c00
 8001b40:	40013c00 	.word	0x40013c00

08001b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e001      	b.n	8001b66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	807b      	strh	r3, [r7, #2]
 8001b80:	4613      	mov	r3, r2
 8001b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b84:	787b      	ldrb	r3, [r7, #1]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b8a:	887a      	ldrh	r2, [r7, #2]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b90:	e003      	b.n	8001b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b92:	887b      	ldrh	r3, [r7, #2]
 8001b94:	041a      	lsls	r2, r3, #16
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	619a      	str	r2, [r3, #24]
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ba6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba8:	b08f      	sub	sp, #60	; 0x3c
 8001baa:	af0a      	add	r7, sp, #40	; 0x28
 8001bac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e10f      	b.n	8001dd8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d106      	bne.n	8001bd8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f008 fbac 	bl	800a330 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2203      	movs	r2, #3
 8001bdc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d102      	bne.n	8001bf2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f004 ffa9 	bl	8006b4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	687e      	ldr	r6, [r7, #4]
 8001c04:	466d      	mov	r5, sp
 8001c06:	f106 0410 	add.w	r4, r6, #16
 8001c0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c16:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c1a:	1d33      	adds	r3, r6, #4
 8001c1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c1e:	6838      	ldr	r0, [r7, #0]
 8001c20:	f004 fe80 	bl	8006924 <USB_CoreInit>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e0d0      	b.n	8001dd8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f004 ff97 	bl	8006b70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	73fb      	strb	r3, [r7, #15]
 8001c46:	e04a      	b.n	8001cde <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c48:	7bfa      	ldrb	r2, [r7, #15]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	1a9b      	subs	r3, r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	333d      	adds	r3, #61	; 0x3d
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	333c      	adds	r3, #60	; 0x3c
 8001c6c:	7bfa      	ldrb	r2, [r7, #15]
 8001c6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	b298      	uxth	r0, r3
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	1a9b      	subs	r3, r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	3342      	adds	r3, #66	; 0x42
 8001c84:	4602      	mov	r2, r0
 8001c86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c88:	7bfa      	ldrb	r2, [r7, #15]
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	1a9b      	subs	r3, r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	333f      	adds	r3, #63	; 0x3f
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c9c:	7bfa      	ldrb	r2, [r7, #15]
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	3344      	adds	r3, #68	; 0x44
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cb0:	7bfa      	ldrb	r2, [r7, #15]
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	1a9b      	subs	r3, r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	3348      	adds	r3, #72	; 0x48
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cc4:	7bfa      	ldrb	r2, [r7, #15]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	1a9b      	subs	r3, r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	3350      	adds	r3, #80	; 0x50
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
 8001cde:	7bfa      	ldrb	r2, [r7, #15]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d3af      	bcc.n	8001c48 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	73fb      	strb	r3, [r7, #15]
 8001cec:	e044      	b.n	8001d78 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	1a9b      	subs	r3, r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001d16:	7bfa      	ldrb	r2, [r7, #15]
 8001d18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d1a:	7bfa      	ldrb	r2, [r7, #15]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	1a9b      	subs	r3, r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d30:	7bfa      	ldrb	r2, [r7, #15]
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	1a9b      	subs	r3, r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d46:	7bfa      	ldrb	r2, [r7, #15]
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	1a9b      	subs	r3, r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	3301      	adds	r3, #1
 8001d76:	73fb      	strb	r3, [r7, #15]
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d3b5      	bcc.n	8001cee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	687e      	ldr	r6, [r7, #4]
 8001d8a:	466d      	mov	r5, sp
 8001d8c:	f106 0410 	add.w	r4, r6, #16
 8001d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001da0:	1d33      	adds	r3, r6, #4
 8001da2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001da4:	6838      	ldr	r0, [r7, #0]
 8001da6:	f004 ff2f 	bl	8006c08 <USB_DevInit>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e00d      	b.n	8001dd8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f005 ffab 	bl	8007d2c <USB_DevDisconnect>

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001de0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_PCD_Start+0x1c>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e020      	b.n	8001e3e <HAL_PCD_Start+0x5e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d109      	bne.n	8001e20 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d005      	beq.n	8001e20 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f004 fe81 	bl	8006b2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f005 ff5b 	bl	8007cea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e46:	b590      	push	{r4, r7, lr}
 8001e48:	b08d      	sub	sp, #52	; 0x34
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f006 f819 	bl	8007e94 <USB_GetMode>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f040 839d 	bne.w	80025a4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f005 ff7d 	bl	8007d6e <USB_ReadInterrupts>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 8393 	beq.w	80025a2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f005 ff74 	bl	8007d6e <USB_ReadInterrupts>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d107      	bne.n	8001ea0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f002 0202 	and.w	r2, r2, #2
 8001e9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f005 ff62 	bl	8007d6e <USB_ReadInterrupts>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f003 0310 	and.w	r3, r3, #16
 8001eb0:	2b10      	cmp	r3, #16
 8001eb2:	d161      	bne.n	8001f78 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699a      	ldr	r2, [r3, #24]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0210 	bic.w	r2, r2, #16
 8001ec2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	f003 020f 	and.w	r2, r3, #15
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	0c5b      	lsrs	r3, r3, #17
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d124      	bne.n	8001f3a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d035      	beq.n	8001f68 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	6a38      	ldr	r0, [r7, #32]
 8001f10:	f005 fd99 	bl	8007a46 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f20:	441a      	add	r2, r3
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	699a      	ldr	r2, [r3, #24]
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f32:	441a      	add	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	619a      	str	r2, [r3, #24]
 8001f38:	e016      	b.n	8001f68 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	0c5b      	lsrs	r3, r3, #17
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	2b06      	cmp	r3, #6
 8001f44:	d110      	bne.n	8001f68 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f4c:	2208      	movs	r2, #8
 8001f4e:	4619      	mov	r1, r3
 8001f50:	6a38      	ldr	r0, [r7, #32]
 8001f52:	f005 fd78 	bl	8007a46 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	699a      	ldr	r2, [r3, #24]
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f62:	441a      	add	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699a      	ldr	r2, [r3, #24]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0210 	orr.w	r2, r2, #16
 8001f76:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f005 fef6 	bl	8007d6e <USB_ReadInterrupts>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f8c:	d16e      	bne.n	800206c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f005 fefc 	bl	8007d94 <USB_ReadDevAllOutEpInterrupt>
 8001f9c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f9e:	e062      	b.n	8002066 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d057      	beq.n	800205a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f005 ff21 	bl	8007dfc <USB_ReadDevOutEPInterrupt>
 8001fba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00c      	beq.n	8001fe0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001fd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fdb0 	bl	8002b40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00c      	beq.n	8002004 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	2308      	movs	r3, #8
 8001ffa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ffc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 feaa 	bl	8002d58 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	f003 0310 	and.w	r3, r3, #16
 800200a:	2b00      	cmp	r3, #0
 800200c:	d008      	beq.n	8002020 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	4413      	add	r3, r2
 8002016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800201a:	461a      	mov	r2, r3
 800201c:	2310      	movs	r3, #16
 800201e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	f003 0320 	and.w	r3, r3, #32
 8002026:	2b00      	cmp	r3, #0
 8002028:	d008      	beq.n	800203c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	015a      	lsls	r2, r3, #5
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	4413      	add	r3, r2
 8002032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002036:	461a      	mov	r2, r3
 8002038:	2320      	movs	r3, #32
 800203a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	015a      	lsls	r2, r3, #5
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	4413      	add	r3, r2
 800204e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002052:	461a      	mov	r2, r3
 8002054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002058:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	3301      	adds	r3, #1
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002062:	085b      	lsrs	r3, r3, #1
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002068:	2b00      	cmp	r3, #0
 800206a:	d199      	bne.n	8001fa0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f005 fe7c 	bl	8007d6e <USB_ReadInterrupts>
 8002076:	4603      	mov	r3, r0
 8002078:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800207c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002080:	f040 80c0 	bne.w	8002204 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f005 fe9d 	bl	8007dc8 <USB_ReadDevAllInEpInterrupt>
 800208e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002094:	e0b2      	b.n	80021fc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 80a7 	beq.w	80021f0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f005 fec3 	bl	8007e38 <USB_ReadDevInEPInterrupt>
 80020b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d057      	beq.n	800216e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	2201      	movs	r2, #1
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69f9      	ldr	r1, [r7, #28]
 80020da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020de:	4013      	ands	r3, r2
 80020e0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020ee:	461a      	mov	r2, r3
 80020f0:	2301      	movs	r3, #1
 80020f2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d132      	bne.n	8002162 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002100:	4613      	mov	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	3348      	adds	r3, #72	; 0x48
 800210c:	6819      	ldr	r1, [r3, #0]
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4403      	add	r3, r0
 800211c:	3344      	adds	r3, #68	; 0x44
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4419      	add	r1, r3
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4403      	add	r3, r0
 8002130:	3348      	adds	r3, #72	; 0x48
 8002132:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	2b00      	cmp	r3, #0
 8002138:	d113      	bne.n	8002162 <HAL_PCD_IRQHandler+0x31c>
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213e:	4613      	mov	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	1a9b      	subs	r3, r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	3350      	adds	r3, #80	; 0x50
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d108      	bne.n	8002162 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800215a:	461a      	mov	r2, r3
 800215c:	2101      	movs	r1, #1
 800215e:	f005 fecb 	bl	8007ef8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	b2db      	uxtb	r3, r3
 8002166:	4619      	mov	r1, r3
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f008 f962 	bl	800a432 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d008      	beq.n	800218a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	4413      	add	r3, r2
 8002180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002184:	461a      	mov	r2, r3
 8002186:	2308      	movs	r3, #8
 8002188:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	4413      	add	r3, r2
 800219c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021a0:	461a      	mov	r2, r3
 80021a2:	2310      	movs	r3, #16
 80021a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021bc:	461a      	mov	r2, r3
 80021be:	2340      	movs	r3, #64	; 0x40
 80021c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021d8:	461a      	mov	r2, r3
 80021da:	2302      	movs	r3, #2
 80021dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80021e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 fc1b 	bl	8002a26 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	3301      	adds	r3, #1
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f8:	085b      	lsrs	r3, r3, #1
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f47f af49 	bne.w	8002096 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f005 fdb0 	bl	8007d6e <USB_ReadInterrupts>
 800220e:	4603      	mov	r3, r0
 8002210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002218:	d122      	bne.n	8002260 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002234:	2b01      	cmp	r3, #1
 8002236:	d108      	bne.n	800224a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002240:	2100      	movs	r1, #0
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 fe26 	bl	8002e94 <HAL_PCDEx_LPM_Callback>
 8002248:	e002      	b.n	8002250 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f008 f968 	bl	800a520 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800225e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f005 fd82 	bl	8007d6e <USB_ReadInterrupts>
 800226a:	4603      	mov	r3, r0
 800226c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002274:	d112      	bne.n	800229c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b01      	cmp	r3, #1
 8002284:	d102      	bne.n	800228c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f008 f924 	bl	800a4d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800229a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f005 fd64 	bl	8007d6e <USB_ReadInterrupts>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b0:	f040 80c7 	bne.w	8002442 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	69fa      	ldr	r2, [r7, #28]
 80022be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2110      	movs	r1, #16
 80022ce:	4618      	mov	r0, r3
 80022d0:	f004 fdfe 	bl	8006ed0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d4:	2300      	movs	r3, #0
 80022d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d8:	e056      	b.n	8002388 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80022da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022e6:	461a      	mov	r2, r3
 80022e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022ec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80022ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022fe:	0151      	lsls	r1, r2, #5
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	440a      	add	r2, r1
 8002304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002308:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800230c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800230e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	4413      	add	r3, r2
 8002316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800231e:	0151      	lsls	r1, r2, #5
 8002320:	69fa      	ldr	r2, [r7, #28]
 8002322:	440a      	add	r2, r1
 8002324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002328:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800232c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	4413      	add	r3, r2
 8002336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800233a:	461a      	mov	r2, r3
 800233c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002340:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	4413      	add	r3, r2
 800234a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002352:	0151      	lsls	r1, r2, #5
 8002354:	69fa      	ldr	r2, [r7, #28]
 8002356:	440a      	add	r2, r1
 8002358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800235c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002360:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	4413      	add	r3, r2
 800236a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002372:	0151      	lsls	r1, r2, #5
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	440a      	add	r2, r1
 8002378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800237c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002380:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002384:	3301      	adds	r3, #1
 8002386:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800238e:	429a      	cmp	r2, r3
 8002390:	d3a3      	bcc.n	80022da <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	69fa      	ldr	r2, [r7, #28]
 800239c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023a0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80023a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d016      	beq.n	80023dc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023be:	f043 030b 	orr.w	r3, r3, #11
 80023c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023d4:	f043 030b 	orr.w	r3, r3, #11
 80023d8:	6453      	str	r3, [r2, #68]	; 0x44
 80023da:	e015      	b.n	8002408 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023ee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80023f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002402:	f043 030b 	orr.w	r3, r3, #11
 8002406:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002416:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800241a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800242c:	461a      	mov	r2, r3
 800242e:	f005 fd63 	bl	8007ef8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695a      	ldr	r2, [r3, #20]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002440:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f005 fc91 	bl	8007d6e <USB_ReadInterrupts>
 800244c:	4603      	mov	r3, r0
 800244e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002456:	d124      	bne.n	80024a2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f005 fd27 	bl	8007eb0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f004 fd8f 	bl	8006f8a <USB_GetDevSpeed>
 800246c:	4603      	mov	r3, r0
 800246e:	461a      	mov	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681c      	ldr	r4, [r3, #0]
 8002478:	f001 f92c 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 800247c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002482:	b2db      	uxtb	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	4620      	mov	r0, r4
 8002488:	f004 faae 	bl	80069e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f007 fff8 	bl	800a482 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695a      	ldr	r2, [r3, #20]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80024a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f005 fc61 	bl	8007d6e <USB_ReadInterrupts>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d10a      	bne.n	80024cc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f007 ffd5 	bl	800a466 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695a      	ldr	r2, [r3, #20]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f002 0208 	and.w	r2, r2, #8
 80024ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f005 fc4c 	bl	8007d6e <USB_ReadInterrupts>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024e0:	d10f      	bne.n	8002502 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	4619      	mov	r1, r3
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f008 f837 	bl	800a560 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002500:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f005 fc31 	bl	8007d6e <USB_ReadInterrupts>
 800250c:	4603      	mov	r3, r0
 800250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002512:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002516:	d10f      	bne.n	8002538 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	b2db      	uxtb	r3, r3
 8002520:	4619      	mov	r1, r3
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f008 f80a 	bl	800a53c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002536:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f005 fc16 	bl	8007d6e <USB_ReadInterrupts>
 8002542:	4603      	mov	r3, r0
 8002544:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254c:	d10a      	bne.n	8002564 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f008 f818 	bl	800a584 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002562:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f005 fc00 	bl	8007d6e <USB_ReadInterrupts>
 800256e:	4603      	mov	r3, r0
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b04      	cmp	r3, #4
 8002576:	d115      	bne.n	80025a4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f008 f808 	bl	800a5a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6859      	ldr	r1, [r3, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	430a      	orrs	r2, r1
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	e000      	b.n	80025a4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80025a2:	bf00      	nop
    }
  }
}
 80025a4:	3734      	adds	r7, #52	; 0x34
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd90      	pop	{r4, r7, pc}

080025aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	460b      	mov	r3, r1
 80025b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_PCD_SetAddress+0x1a>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e013      	b.n	80025ec <HAL_PCD_SetAddress+0x42>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	78fa      	ldrb	r2, [r7, #3]
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f005 fb5e 	bl	8007c9e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	4608      	mov	r0, r1
 80025fe:	4611      	mov	r1, r2
 8002600:	461a      	mov	r2, r3
 8002602:	4603      	mov	r3, r0
 8002604:	70fb      	strb	r3, [r7, #3]
 8002606:	460b      	mov	r3, r1
 8002608:	803b      	strh	r3, [r7, #0]
 800260a:	4613      	mov	r3, r2
 800260c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002612:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002616:	2b00      	cmp	r3, #0
 8002618:	da0f      	bge.n	800263a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	f003 020f 	and.w	r2, r3, #15
 8002620:	4613      	mov	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	1a9b      	subs	r3, r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	3338      	adds	r3, #56	; 0x38
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	3304      	adds	r3, #4
 8002630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	705a      	strb	r2, [r3, #1]
 8002638:	e00f      	b.n	800265a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800263a:	78fb      	ldrb	r3, [r7, #3]
 800263c:	f003 020f 	and.w	r2, r3, #15
 8002640:	4613      	mov	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	4413      	add	r3, r2
 8002650:	3304      	adds	r3, #4
 8002652:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	b2da      	uxtb	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002666:	883a      	ldrh	r2, [r7, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	78ba      	ldrb	r2, [r7, #2]
 8002670:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	785b      	ldrb	r3, [r3, #1]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d004      	beq.n	8002684 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002684:	78bb      	ldrb	r3, [r7, #2]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d102      	bne.n	8002690 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_PCD_EP_Open+0xaa>
 800269a:	2302      	movs	r3, #2
 800269c:	e00e      	b.n	80026bc <HAL_PCD_EP_Open+0xc8>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68f9      	ldr	r1, [r7, #12]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f004 fc91 	bl	8006fd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80026ba:	7afb      	ldrb	r3, [r7, #11]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	da0f      	bge.n	80026f8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	f003 020f 	and.w	r2, r3, #15
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	3338      	adds	r3, #56	; 0x38
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	4413      	add	r3, r2
 80026ec:	3304      	adds	r3, #4
 80026ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2201      	movs	r2, #1
 80026f4:	705a      	strb	r2, [r3, #1]
 80026f6:	e00f      	b.n	8002718 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	f003 020f 	and.w	r2, r3, #15
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	3304      	adds	r3, #4
 8002710:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	b2da      	uxtb	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <HAL_PCD_EP_Close+0x6e>
 800272e:	2302      	movs	r3, #2
 8002730:	e00e      	b.n	8002750 <HAL_PCD_EP_Close+0x8c>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68f9      	ldr	r1, [r7, #12]
 8002740:	4618      	mov	r0, r3
 8002742:	f004 fccf 	bl	80070e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	607a      	str	r2, [r7, #4]
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	460b      	mov	r3, r1
 8002766:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002768:	7afb      	ldrb	r3, [r7, #11]
 800276a:	f003 020f 	and.w	r2, r3, #15
 800276e:	4613      	mov	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4413      	add	r3, r2
 800277e:	3304      	adds	r3, #4
 8002780:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	2200      	movs	r2, #0
 8002798:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800279a:	7afb      	ldrb	r3, [r7, #11]
 800279c:	f003 030f 	and.w	r3, r3, #15
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d102      	bne.n	80027b4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027b4:	7afb      	ldrb	r3, [r7, #11]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d109      	bne.n	80027d2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	6979      	ldr	r1, [r7, #20]
 80027cc:	f004 ffaa 	bl	8007724 <USB_EP0StartXfer>
 80027d0:	e008      	b.n	80027e4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	6979      	ldr	r1, [r7, #20]
 80027e0:	f004 fd5c 	bl	800729c <USB_EPStartXfer>
  }

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	460b      	mov	r3, r1
 80027f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	f003 020f 	and.w	r2, r3, #15
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002810:	681b      	ldr	r3, [r3, #0]
}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	460b      	mov	r3, r1
 800282c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800282e:	7afb      	ldrb	r3, [r7, #11]
 8002830:	f003 020f 	and.w	r2, r3, #15
 8002834:	4613      	mov	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	3338      	adds	r3, #56	; 0x38
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4413      	add	r3, r2
 8002842:	3304      	adds	r3, #4
 8002844:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2200      	movs	r2, #0
 8002856:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	2201      	movs	r2, #1
 800285c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800285e:	7afb      	ldrb	r3, [r7, #11]
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	b2da      	uxtb	r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d102      	bne.n	8002878 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002878:	7afb      	ldrb	r3, [r7, #11]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	6979      	ldr	r1, [r7, #20]
 8002890:	f004 ff48 	bl	8007724 <USB_EP0StartXfer>
 8002894:	e008      	b.n	80028a8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	6979      	ldr	r1, [r7, #20]
 80028a4:	f004 fcfa 	bl	800729c <USB_EPStartXfer>
  }

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028be:	78fb      	ldrb	r3, [r7, #3]
 80028c0:	f003 020f 	and.w	r2, r3, #15
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d901      	bls.n	80028d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e050      	b.n	8002972 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	da0f      	bge.n	80028f8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	f003 020f 	and.w	r2, r3, #15
 80028de:	4613      	mov	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	3338      	adds	r3, #56	; 0x38
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	4413      	add	r3, r2
 80028ec:	3304      	adds	r3, #4
 80028ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2201      	movs	r2, #1
 80028f4:	705a      	strb	r2, [r3, #1]
 80028f6:	e00d      	b.n	8002914 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028f8:	78fa      	ldrb	r2, [r7, #3]
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	4413      	add	r3, r2
 800290a:	3304      	adds	r3, #4
 800290c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2201      	movs	r2, #1
 8002918:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800291a:	78fb      	ldrb	r3, [r7, #3]
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	b2da      	uxtb	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_PCD_EP_SetStall+0x82>
 8002930:	2302      	movs	r3, #2
 8002932:	e01e      	b.n	8002972 <HAL_PCD_EP_SetStall+0xc0>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68f9      	ldr	r1, [r7, #12]
 8002942:	4618      	mov	r0, r3
 8002944:	f005 f8d7 	bl	8007af6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10a      	bne.n	8002968 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	b2d9      	uxtb	r1, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002962:	461a      	mov	r2, r3
 8002964:	f005 fac8 	bl	8007ef8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b084      	sub	sp, #16
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	460b      	mov	r3, r1
 8002984:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	f003 020f 	and.w	r2, r3, #15
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	429a      	cmp	r2, r3
 8002992:	d901      	bls.n	8002998 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e042      	b.n	8002a1e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002998:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800299c:	2b00      	cmp	r3, #0
 800299e:	da0f      	bge.n	80029c0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	f003 020f 	and.w	r2, r3, #15
 80029a6:	4613      	mov	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	3338      	adds	r3, #56	; 0x38
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	4413      	add	r3, r2
 80029b4:	3304      	adds	r3, #4
 80029b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	705a      	strb	r2, [r3, #1]
 80029be:	e00f      	b.n	80029e0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	f003 020f 	and.w	r2, r3, #15
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	3304      	adds	r3, #4
 80029d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029e6:	78fb      	ldrb	r3, [r7, #3]
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_PCD_EP_ClrStall+0x86>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e00e      	b.n	8002a1e <HAL_PCD_EP_ClrStall+0xa4>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68f9      	ldr	r1, [r7, #12]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f005 f8df 	bl	8007bd2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b08a      	sub	sp, #40	; 0x28
 8002a2a:	af02      	add	r7, sp, #8
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	3338      	adds	r3, #56	; 0x38
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d901      	bls.n	8002a5e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e06c      	b.n	8002b38 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d902      	bls.n	8002a7a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3303      	adds	r3, #3
 8002a7e:	089b      	lsrs	r3, r3, #2
 8002a80:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a82:	e02b      	b.n	8002adc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	695a      	ldr	r2, [r3, #20]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	69fa      	ldr	r2, [r7, #28]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d902      	bls.n	8002aa0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	3303      	adds	r3, #3
 8002aa4:	089b      	lsrs	r3, r3, #2
 8002aa6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	68d9      	ldr	r1, [r3, #12]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	4603      	mov	r3, r0
 8002abe:	6978      	ldr	r0, [r7, #20]
 8002ac0:	f004 ff83 	bl	80079ca <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	441a      	add	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	699a      	ldr	r2, [r3, #24]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	441a      	add	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d809      	bhi.n	8002b06 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	699a      	ldr	r2, [r3, #24]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d203      	bcs.n	8002b06 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1be      	bne.n	8002a84 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d811      	bhi.n	8002b36 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	2201      	movs	r2, #1
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	6939      	ldr	r1, [r7, #16]
 8002b2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b32:	4013      	ands	r3, r2
 8002b34:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3720      	adds	r7, #32
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	333c      	adds	r3, #60	; 0x3c
 8002b58:	3304      	adds	r3, #4
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	f040 80a0 	bne.w	8002cb8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d015      	beq.n	8002bae <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4a72      	ldr	r2, [pc, #456]	; (8002d50 <PCD_EP_OutXfrComplete_int+0x210>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	f240 80dd 	bls.w	8002d46 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 80d7 	beq.w	8002d46 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002baa:	6093      	str	r3, [r2, #8]
 8002bac:	e0cb      	b.n	8002d46 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d009      	beq.n	8002bcc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	2320      	movs	r3, #32
 8002bc8:	6093      	str	r3, [r2, #8]
 8002bca:	e0bc      	b.n	8002d46 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f040 80b7 	bne.w	8002d46 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4a5d      	ldr	r2, [pc, #372]	; (8002d50 <PCD_EP_OutXfrComplete_int+0x210>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d90f      	bls.n	8002c00 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bfc:	6093      	str	r3, [r2, #8]
 8002bfe:	e0a2      	b.n	8002d46 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c12:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	0159      	lsls	r1, r3, #5
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002c26:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	1a9b      	subs	r3, r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4403      	add	r3, r0
 8002c36:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002c3a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c4e:	6819      	ldr	r1, [r3, #0]
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	4613      	mov	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4403      	add	r3, r0
 8002c5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4419      	add	r1, r3
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4403      	add	r3, r0
 8002c74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c78:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d114      	bne.n	8002caa <PCD_EP_OutXfrComplete_int+0x16a>
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d108      	bne.n	8002caa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	f005 f927 	bl	8007ef8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	4619      	mov	r1, r3
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f007 fba3 	bl	800a3fc <HAL_PCD_DataOutStageCallback>
 8002cb6:	e046      	b.n	8002d46 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4a26      	ldr	r2, [pc, #152]	; (8002d54 <PCD_EP_OutXfrComplete_int+0x214>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d124      	bne.n	8002d0a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cdc:	6093      	str	r3, [r2, #8]
 8002cde:	e032      	b.n	8002d46 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d008      	beq.n	8002cfc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	2320      	movs	r3, #32
 8002cfa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	4619      	mov	r1, r3
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f007 fb7a 	bl	800a3fc <HAL_PCD_DataOutStageCallback>
 8002d08:	e01d      	b.n	8002d46 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d114      	bne.n	8002d3a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	4613      	mov	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d108      	bne.n	8002d3a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d32:	461a      	mov	r2, r3
 8002d34:	2100      	movs	r1, #0
 8002d36:	f005 f8df 	bl	8007ef8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	4619      	mov	r1, r3
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f007 fb5b 	bl	800a3fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	4f54300a 	.word	0x4f54300a
 8002d54:	4f54310a 	.word	0x4f54310a

08002d58 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	333c      	adds	r3, #60	; 0x3c
 8002d70:	3304      	adds	r3, #4
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4a15      	ldr	r2, [pc, #84]	; (8002de0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d90e      	bls.n	8002dac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d009      	beq.n	8002dac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002da4:	461a      	mov	r2, r3
 8002da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002daa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f007 fb13 	bl	800a3d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d90c      	bls.n	8002dd4 <PCD_EP_OutSetupPacket_int+0x7c>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d108      	bne.n	8002dd4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2101      	movs	r1, #1
 8002dd0:	f005 f892 	bl	8007ef8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	4f54300a 	.word	0x4f54300a

08002de4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	70fb      	strb	r3, [r7, #3]
 8002df0:	4613      	mov	r3, r2
 8002df2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d107      	bne.n	8002e12 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e02:	883b      	ldrh	r3, [r7, #0]
 8002e04:	0419      	lsls	r1, r3, #16
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e10:	e028      	b.n	8002e64 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e18:	0c1b      	lsrs	r3, r3, #16
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
 8002e24:	e00d      	b.n	8002e42 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	3340      	adds	r3, #64	; 0x40
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	0c1b      	lsrs	r3, r3, #16
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	4413      	add	r3, r2
 8002e3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	73fb      	strb	r3, [r7, #15]
 8002e42:	7bfa      	ldrb	r2, [r7, #15]
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d3ec      	bcc.n	8002e26 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e4c:	883b      	ldrh	r3, [r7, #0]
 8002e4e:	0418      	lsls	r0, r3, #16
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6819      	ldr	r1, [r3, #0]
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	4302      	orrs	r2, r0
 8002e5c:	3340      	adds	r3, #64	; 0x40
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	887a      	ldrh	r2, [r7, #2]
 8002e84:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e264      	b.n	8003388 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d075      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eca:	4ba3      	ldr	r3, [pc, #652]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d00c      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ed6:	4ba0      	ldr	r3, [pc, #640]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ede:	2b08      	cmp	r3, #8
 8002ee0:	d112      	bne.n	8002f08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee2:	4b9d      	ldr	r3, [pc, #628]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eee:	d10b      	bne.n	8002f08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef0:	4b99      	ldr	r3, [pc, #612]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d05b      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x108>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d157      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e23f      	b.n	8003388 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f10:	d106      	bne.n	8002f20 <HAL_RCC_OscConfig+0x74>
 8002f12:	4b91      	ldr	r3, [pc, #580]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a90      	ldr	r2, [pc, #576]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e01d      	b.n	8002f5c <HAL_RCC_OscConfig+0xb0>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCC_OscConfig+0x98>
 8002f2a:	4b8b      	ldr	r3, [pc, #556]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a8a      	ldr	r2, [pc, #552]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8002f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	4b88      	ldr	r3, [pc, #544]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a87      	ldr	r2, [pc, #540]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e00b      	b.n	8002f5c <HAL_RCC_OscConfig+0xb0>
 8002f44:	4b84      	ldr	r3, [pc, #528]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a83      	ldr	r2, [pc, #524]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8002f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	4b81      	ldr	r3, [pc, #516]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a80      	ldr	r2, [pc, #512]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8002f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d013      	beq.n	8002f8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7fd ff02 	bl	8000d6c <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7fd fefe 	bl	8000d6c <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e204      	b.n	8003388 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	4b76      	ldr	r3, [pc, #472]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0xc0>
 8002f8a:	e014      	b.n	8002fb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8c:	f7fd feee 	bl	8000d6c <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f94:	f7fd feea 	bl	8000d6c <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b64      	cmp	r3, #100	; 0x64
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e1f0      	b.n	8003388 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa6:	4b6c      	ldr	r3, [pc, #432]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0xe8>
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d063      	beq.n	800308a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fc2:	4b65      	ldr	r3, [pc, #404]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00b      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fce:	4b62      	ldr	r3, [pc, #392]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d11c      	bne.n	8003014 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fda:	4b5f      	ldr	r3, [pc, #380]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d116      	bne.n	8003014 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe6:	4b5c      	ldr	r3, [pc, #368]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_RCC_OscConfig+0x152>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d001      	beq.n	8002ffe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e1c4      	b.n	8003388 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffe:	4b56      	ldr	r3, [pc, #344]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4952      	ldr	r1, [pc, #328]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 800300e:	4313      	orrs	r3, r2
 8003010:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003012:	e03a      	b.n	800308a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d020      	beq.n	800305e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800301c:	4b4f      	ldr	r3, [pc, #316]	; (800315c <HAL_RCC_OscConfig+0x2b0>)
 800301e:	2201      	movs	r2, #1
 8003020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003022:	f7fd fea3 	bl	8000d6c <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800302a:	f7fd fe9f 	bl	8000d6c <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e1a5      	b.n	8003388 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303c:	4b46      	ldr	r3, [pc, #280]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003048:	4b43      	ldr	r3, [pc, #268]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4940      	ldr	r1, [pc, #256]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8003058:	4313      	orrs	r3, r2
 800305a:	600b      	str	r3, [r1, #0]
 800305c:	e015      	b.n	800308a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305e:	4b3f      	ldr	r3, [pc, #252]	; (800315c <HAL_RCC_OscConfig+0x2b0>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fd fe82 	bl	8000d6c <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800306c:	f7fd fe7e 	bl	8000d6c <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e184      	b.n	8003388 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307e:	4b36      	ldr	r3, [pc, #216]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d030      	beq.n	80030f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d016      	beq.n	80030cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800309e:	4b30      	ldr	r3, [pc, #192]	; (8003160 <HAL_RCC_OscConfig+0x2b4>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a4:	f7fd fe62 	bl	8000d6c <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ac:	f7fd fe5e 	bl	8000d6c <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e164      	b.n	8003388 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030be:	4b26      	ldr	r3, [pc, #152]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x200>
 80030ca:	e015      	b.n	80030f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030cc:	4b24      	ldr	r3, [pc, #144]	; (8003160 <HAL_RCC_OscConfig+0x2b4>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d2:	f7fd fe4b 	bl	8000d6c <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030da:	f7fd fe47 	bl	8000d6c <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e14d      	b.n	8003388 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ec:	4b1a      	ldr	r3, [pc, #104]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 80030ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1f0      	bne.n	80030da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80a0 	beq.w	8003246 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003106:	2300      	movs	r3, #0
 8003108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800310a:	4b13      	ldr	r3, [pc, #76]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10f      	bne.n	8003136 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	4a0e      	ldr	r2, [pc, #56]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8003120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003124:	6413      	str	r3, [r2, #64]	; 0x40
 8003126:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <HAL_RCC_OscConfig+0x2ac>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003132:	2301      	movs	r3, #1
 8003134:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003136:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCC_OscConfig+0x2b8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313e:	2b00      	cmp	r3, #0
 8003140:	d121      	bne.n	8003186 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003142:	4b08      	ldr	r3, [pc, #32]	; (8003164 <HAL_RCC_OscConfig+0x2b8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a07      	ldr	r2, [pc, #28]	; (8003164 <HAL_RCC_OscConfig+0x2b8>)
 8003148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314e:	f7fd fe0d 	bl	8000d6c <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003154:	e011      	b.n	800317a <HAL_RCC_OscConfig+0x2ce>
 8003156:	bf00      	nop
 8003158:	40023800 	.word	0x40023800
 800315c:	42470000 	.word	0x42470000
 8003160:	42470e80 	.word	0x42470e80
 8003164:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003168:	f7fd fe00 	bl	8000d6c <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e106      	b.n	8003388 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317a:	4b85      	ldr	r3, [pc, #532]	; (8003390 <HAL_RCC_OscConfig+0x4e4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d106      	bne.n	800319c <HAL_RCC_OscConfig+0x2f0>
 800318e:	4b81      	ldr	r3, [pc, #516]	; (8003394 <HAL_RCC_OscConfig+0x4e8>)
 8003190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003192:	4a80      	ldr	r2, [pc, #512]	; (8003394 <HAL_RCC_OscConfig+0x4e8>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	6713      	str	r3, [r2, #112]	; 0x70
 800319a:	e01c      	b.n	80031d6 <HAL_RCC_OscConfig+0x32a>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b05      	cmp	r3, #5
 80031a2:	d10c      	bne.n	80031be <HAL_RCC_OscConfig+0x312>
 80031a4:	4b7b      	ldr	r3, [pc, #492]	; (8003394 <HAL_RCC_OscConfig+0x4e8>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a8:	4a7a      	ldr	r2, [pc, #488]	; (8003394 <HAL_RCC_OscConfig+0x4e8>)
 80031aa:	f043 0304 	orr.w	r3, r3, #4
 80031ae:	6713      	str	r3, [r2, #112]	; 0x70
 80031b0:	4b78      	ldr	r3, [pc, #480]	; (8003394 <HAL_RCC_OscConfig+0x4e8>)
 80031b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b4:	4a77      	ldr	r2, [pc, #476]	; (8003394 <HAL_RCC_OscConfig+0x4e8>)
 80031b6:	f043 0301 	orr.w	r3, r3, #1
 80031ba:	6713      	str	r3, [r2, #112]	; 0x70
 80031bc:	e00b      	b.n	80031d6 <HAL_RCC_OscConfig+0x32a>
 80031be:	4b75      	ldr	r3, [pc, #468]	; (8003394 <HAL_RCC_OscConfig+0x4e8>)
 80031c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c2:	4a74      	ldr	r2, [pc, #464]	; (8003394 <HAL_RCC_OscConfig+0x4e8>)
 80031c4:	f023 0301 	bic.w	r3, r3, #1
 80031c8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ca:	4b72      	ldr	r3, [pc, #456]	; (8003394 <HAL_RCC_OscConfig+0x4e8>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	4a71      	ldr	r2, [pc, #452]	; (8003394 <HAL_RCC_OscConfig+0x4e8>)
 80031d0:	f023 0304 	bic.w	r3, r3, #4
 80031d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d015      	beq.n	800320a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031de:	f7fd fdc5 	bl	8000d6c <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e4:	e00a      	b.n	80031fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e6:	f7fd fdc1 	bl	8000d6c <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e0c5      	b.n	8003388 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fc:	4b65      	ldr	r3, [pc, #404]	; (8003394 <HAL_RCC_OscConfig+0x4e8>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0ee      	beq.n	80031e6 <HAL_RCC_OscConfig+0x33a>
 8003208:	e014      	b.n	8003234 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320a:	f7fd fdaf 	bl	8000d6c <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003210:	e00a      	b.n	8003228 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003212:	f7fd fdab 	bl	8000d6c <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003220:	4293      	cmp	r3, r2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e0af      	b.n	8003388 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003228:	4b5a      	ldr	r3, [pc, #360]	; (8003394 <HAL_RCC_OscConfig+0x4e8>)
 800322a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1ee      	bne.n	8003212 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003234:	7dfb      	ldrb	r3, [r7, #23]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d105      	bne.n	8003246 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800323a:	4b56      	ldr	r3, [pc, #344]	; (8003394 <HAL_RCC_OscConfig+0x4e8>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	4a55      	ldr	r2, [pc, #340]	; (8003394 <HAL_RCC_OscConfig+0x4e8>)
 8003240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003244:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 809b 	beq.w	8003386 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003250:	4b50      	ldr	r3, [pc, #320]	; (8003394 <HAL_RCC_OscConfig+0x4e8>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 030c 	and.w	r3, r3, #12
 8003258:	2b08      	cmp	r3, #8
 800325a:	d05c      	beq.n	8003316 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d141      	bne.n	80032e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003264:	4b4c      	ldr	r3, [pc, #304]	; (8003398 <HAL_RCC_OscConfig+0x4ec>)
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326a:	f7fd fd7f 	bl	8000d6c <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003272:	f7fd fd7b 	bl	8000d6c <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e081      	b.n	8003388 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003284:	4b43      	ldr	r3, [pc, #268]	; (8003394 <HAL_RCC_OscConfig+0x4e8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f0      	bne.n	8003272 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69da      	ldr	r2, [r3, #28]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	019b      	lsls	r3, r3, #6
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	085b      	lsrs	r3, r3, #1
 80032a8:	3b01      	subs	r3, #1
 80032aa:	041b      	lsls	r3, r3, #16
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	061b      	lsls	r3, r3, #24
 80032b4:	4937      	ldr	r1, [pc, #220]	; (8003394 <HAL_RCC_OscConfig+0x4e8>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ba:	4b37      	ldr	r3, [pc, #220]	; (8003398 <HAL_RCC_OscConfig+0x4ec>)
 80032bc:	2201      	movs	r2, #1
 80032be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7fd fd54 	bl	8000d6c <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c8:	f7fd fd50 	bl	8000d6c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e056      	b.n	8003388 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032da:	4b2e      	ldr	r3, [pc, #184]	; (8003394 <HAL_RCC_OscConfig+0x4e8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0x41c>
 80032e6:	e04e      	b.n	8003386 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e8:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <HAL_RCC_OscConfig+0x4ec>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ee:	f7fd fd3d 	bl	8000d6c <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f6:	f7fd fd39 	bl	8000d6c <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e03f      	b.n	8003388 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003308:	4b22      	ldr	r3, [pc, #136]	; (8003394 <HAL_RCC_OscConfig+0x4e8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f0      	bne.n	80032f6 <HAL_RCC_OscConfig+0x44a>
 8003314:	e037      	b.n	8003386 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e032      	b.n	8003388 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003322:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <HAL_RCC_OscConfig+0x4e8>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d028      	beq.n	8003382 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333a:	429a      	cmp	r2, r3
 800333c:	d121      	bne.n	8003382 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d11a      	bne.n	8003382 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003352:	4013      	ands	r3, r2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003358:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800335a:	4293      	cmp	r3, r2
 800335c:	d111      	bne.n	8003382 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003368:	085b      	lsrs	r3, r3, #1
 800336a:	3b01      	subs	r3, #1
 800336c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800336e:	429a      	cmp	r2, r3
 8003370:	d107      	bne.n	8003382 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d001      	beq.n	8003386 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40007000 	.word	0x40007000
 8003394:	40023800 	.word	0x40023800
 8003398:	42470060 	.word	0x42470060

0800339c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0cc      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033b0:	4b68      	ldr	r3, [pc, #416]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d90c      	bls.n	80033d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033be:	4b65      	ldr	r3, [pc, #404]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c6:	4b63      	ldr	r3, [pc, #396]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0b8      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d020      	beq.n	8003426 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f0:	4b59      	ldr	r3, [pc, #356]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	4a58      	ldr	r2, [pc, #352]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003408:	4b53      	ldr	r3, [pc, #332]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	4a52      	ldr	r2, [pc, #328]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003412:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003414:	4b50      	ldr	r3, [pc, #320]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	494d      	ldr	r1, [pc, #308]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	4313      	orrs	r3, r2
 8003424:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d044      	beq.n	80034bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d107      	bne.n	800344a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343a:	4b47      	ldr	r3, [pc, #284]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d119      	bne.n	800347a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e07f      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d003      	beq.n	800345a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003456:	2b03      	cmp	r3, #3
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345a:	4b3f      	ldr	r3, [pc, #252]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e06f      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346a:	4b3b      	ldr	r3, [pc, #236]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e067      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800347a:	4b37      	ldr	r3, [pc, #220]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f023 0203 	bic.w	r2, r3, #3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4934      	ldr	r1, [pc, #208]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	4313      	orrs	r3, r2
 800348a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800348c:	f7fd fc6e 	bl	8000d6c <HAL_GetTick>
 8003490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003492:	e00a      	b.n	80034aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003494:	f7fd fc6a 	bl	8000d6c <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e04f      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034aa:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 020c 	and.w	r2, r3, #12
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d1eb      	bne.n	8003494 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034bc:	4b25      	ldr	r3, [pc, #148]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d20c      	bcs.n	80034e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ca:	4b22      	ldr	r3, [pc, #136]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d2:	4b20      	ldr	r3, [pc, #128]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e032      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f0:	4b19      	ldr	r3, [pc, #100]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	4916      	ldr	r1, [pc, #88]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d009      	beq.n	8003522 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800350e:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	490e      	ldr	r1, [pc, #56]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003522:	f000 f821 	bl	8003568 <HAL_RCC_GetSysClockFreq>
 8003526:	4602      	mov	r2, r0
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	091b      	lsrs	r3, r3, #4
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	490a      	ldr	r1, [pc, #40]	; (800355c <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	5ccb      	ldrb	r3, [r1, r3]
 8003536:	fa22 f303 	lsr.w	r3, r2, r3
 800353a:	4a09      	ldr	r2, [pc, #36]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 800353c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800353e:	4b09      	ldr	r3, [pc, #36]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7fd fbce 	bl	8000ce4 <HAL_InitTick>

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40023c00 	.word	0x40023c00
 8003558:	40023800 	.word	0x40023800
 800355c:	0800aa18 	.word	0x0800aa18
 8003560:	20000000 	.word	0x20000000
 8003564:	20000004 	.word	0x20000004

08003568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003568:	b5b0      	push	{r4, r5, r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800356e:	2100      	movs	r1, #0
 8003570:	6079      	str	r1, [r7, #4]
 8003572:	2100      	movs	r1, #0
 8003574:	60f9      	str	r1, [r7, #12]
 8003576:	2100      	movs	r1, #0
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800357a:	2100      	movs	r1, #0
 800357c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800357e:	4952      	ldr	r1, [pc, #328]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003580:	6889      	ldr	r1, [r1, #8]
 8003582:	f001 010c 	and.w	r1, r1, #12
 8003586:	2908      	cmp	r1, #8
 8003588:	d00d      	beq.n	80035a6 <HAL_RCC_GetSysClockFreq+0x3e>
 800358a:	2908      	cmp	r1, #8
 800358c:	f200 8094 	bhi.w	80036b8 <HAL_RCC_GetSysClockFreq+0x150>
 8003590:	2900      	cmp	r1, #0
 8003592:	d002      	beq.n	800359a <HAL_RCC_GetSysClockFreq+0x32>
 8003594:	2904      	cmp	r1, #4
 8003596:	d003      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0x38>
 8003598:	e08e      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800359a:	4b4c      	ldr	r3, [pc, #304]	; (80036cc <HAL_RCC_GetSysClockFreq+0x164>)
 800359c:	60bb      	str	r3, [r7, #8]
       break;
 800359e:	e08e      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035a0:	4b4b      	ldr	r3, [pc, #300]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x168>)
 80035a2:	60bb      	str	r3, [r7, #8]
      break;
 80035a4:	e08b      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035a6:	4948      	ldr	r1, [pc, #288]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035a8:	6849      	ldr	r1, [r1, #4]
 80035aa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80035ae:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035b0:	4945      	ldr	r1, [pc, #276]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035b2:	6849      	ldr	r1, [r1, #4]
 80035b4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80035b8:	2900      	cmp	r1, #0
 80035ba:	d024      	beq.n	8003606 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035bc:	4942      	ldr	r1, [pc, #264]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035be:	6849      	ldr	r1, [r1, #4]
 80035c0:	0989      	lsrs	r1, r1, #6
 80035c2:	4608      	mov	r0, r1
 80035c4:	f04f 0100 	mov.w	r1, #0
 80035c8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80035cc:	f04f 0500 	mov.w	r5, #0
 80035d0:	ea00 0204 	and.w	r2, r0, r4
 80035d4:	ea01 0305 	and.w	r3, r1, r5
 80035d8:	493d      	ldr	r1, [pc, #244]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x168>)
 80035da:	fb01 f003 	mul.w	r0, r1, r3
 80035de:	2100      	movs	r1, #0
 80035e0:	fb01 f102 	mul.w	r1, r1, r2
 80035e4:	1844      	adds	r4, r0, r1
 80035e6:	493a      	ldr	r1, [pc, #232]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x168>)
 80035e8:	fba2 0101 	umull	r0, r1, r2, r1
 80035ec:	1863      	adds	r3, r4, r1
 80035ee:	4619      	mov	r1, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	461a      	mov	r2, r3
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	f7fc fde6 	bl	80001c8 <__aeabi_uldivmod>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4613      	mov	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	e04a      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003606:	4b30      	ldr	r3, [pc, #192]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	099b      	lsrs	r3, r3, #6
 800360c:	461a      	mov	r2, r3
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003616:	f04f 0100 	mov.w	r1, #0
 800361a:	ea02 0400 	and.w	r4, r2, r0
 800361e:	ea03 0501 	and.w	r5, r3, r1
 8003622:	4620      	mov	r0, r4
 8003624:	4629      	mov	r1, r5
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	014b      	lsls	r3, r1, #5
 8003630:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003634:	0142      	lsls	r2, r0, #5
 8003636:	4610      	mov	r0, r2
 8003638:	4619      	mov	r1, r3
 800363a:	1b00      	subs	r0, r0, r4
 800363c:	eb61 0105 	sbc.w	r1, r1, r5
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	018b      	lsls	r3, r1, #6
 800364a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800364e:	0182      	lsls	r2, r0, #6
 8003650:	1a12      	subs	r2, r2, r0
 8003652:	eb63 0301 	sbc.w	r3, r3, r1
 8003656:	f04f 0000 	mov.w	r0, #0
 800365a:	f04f 0100 	mov.w	r1, #0
 800365e:	00d9      	lsls	r1, r3, #3
 8003660:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003664:	00d0      	lsls	r0, r2, #3
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	1912      	adds	r2, r2, r4
 800366c:	eb45 0303 	adc.w	r3, r5, r3
 8003670:	f04f 0000 	mov.w	r0, #0
 8003674:	f04f 0100 	mov.w	r1, #0
 8003678:	0299      	lsls	r1, r3, #10
 800367a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800367e:	0290      	lsls	r0, r2, #10
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4610      	mov	r0, r2
 8003686:	4619      	mov	r1, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	461a      	mov	r2, r3
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	f7fc fd9a 	bl	80001c8 <__aeabi_uldivmod>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4613      	mov	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800369c:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	0c1b      	lsrs	r3, r3, #16
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	3301      	adds	r3, #1
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b4:	60bb      	str	r3, [r7, #8]
      break;
 80036b6:	e002      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036b8:	4b04      	ldr	r3, [pc, #16]	; (80036cc <HAL_RCC_GetSysClockFreq+0x164>)
 80036ba:	60bb      	str	r3, [r7, #8]
      break;
 80036bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036be:	68bb      	ldr	r3, [r7, #8]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bdb0      	pop	{r4, r5, r7, pc}
 80036c8:	40023800 	.word	0x40023800
 80036cc:	00f42400 	.word	0x00f42400
 80036d0:	00b71b00 	.word	0x00b71b00

080036d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036da:	681b      	ldr	r3, [r3, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20000000 	.word	0x20000000

080036ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036f0:	f7ff fff0 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 80036f4:	4602      	mov	r2, r0
 80036f6:	4b05      	ldr	r3, [pc, #20]	; (800370c <HAL_RCC_GetPCLK1Freq+0x20>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	0a9b      	lsrs	r3, r3, #10
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	4903      	ldr	r1, [pc, #12]	; (8003710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003702:	5ccb      	ldrb	r3, [r1, r3]
 8003704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003708:	4618      	mov	r0, r3
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40023800 	.word	0x40023800
 8003710:	0800aa28 	.word	0x0800aa28

08003714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003718:	f7ff ffdc 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 800371c:	4602      	mov	r2, r0
 800371e:	4b05      	ldr	r3, [pc, #20]	; (8003734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	0b5b      	lsrs	r3, r3, #13
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	4903      	ldr	r1, [pc, #12]	; (8003738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800372a:	5ccb      	ldrb	r3, [r1, r3]
 800372c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003730:	4618      	mov	r0, r3
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40023800 	.word	0x40023800
 8003738:	0800aa28 	.word	0x0800aa28

0800373c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e022      	b.n	8003794 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d105      	bne.n	8003766 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7fd f877 	bl	8000854 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2203      	movs	r2, #3
 800376a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f814 	bl	800379c <HAL_SD_InitCard>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e00a      	b.n	8003794 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800379c:	b5b0      	push	{r4, r5, r7, lr}
 800379e:	b08e      	sub	sp, #56	; 0x38
 80037a0:	af04      	add	r7, sp, #16
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80037a8:	2300      	movs	r3, #0
 80037aa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80037ac:	2300      	movs	r3, #0
 80037ae:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80037b8:	2376      	movs	r3, #118	; 0x76
 80037ba:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681d      	ldr	r5, [r3, #0]
 80037c0:	466c      	mov	r4, sp
 80037c2:	f107 0314 	add.w	r3, r7, #20
 80037c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80037ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80037ce:	f107 0308 	add.w	r3, r7, #8
 80037d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037d4:	4628      	mov	r0, r5
 80037d6:	f002 fb31 	bl	8005e3c <SDIO_Init>
 80037da:	4603      	mov	r3, r0
 80037dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80037e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e04c      	b.n	8003886 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80037ec:	4b28      	ldr	r3, [pc, #160]	; (8003890 <HAL_SD_InitCard+0xf4>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f002 fb69 	bl	8005ece <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80037fc:	4b24      	ldr	r3, [pc, #144]	; (8003890 <HAL_SD_InitCard+0xf4>)
 80037fe:	2201      	movs	r2, #1
 8003800:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f001 f804 	bl	8004810 <SD_PowerON>
 8003808:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00b      	beq.n	8003828 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e02e      	b.n	8003886 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 ff25 	bl	8004678 <SD_InitCard>
 800382e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00b      	beq.n	800384e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e01b      	b.n	8003886 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003856:	4618      	mov	r0, r3
 8003858:	f002 fbcc 	bl	8005ff4 <SDMMC_CmdBlockLength>
 800385c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00f      	beq.n	8003884 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a0a      	ldr	r2, [pc, #40]	; (8003894 <HAL_SD_InitCard+0xf8>)
 800386a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3728      	adds	r7, #40	; 0x28
 800388a:	46bd      	mov	sp, r7
 800388c:	bdb0      	pop	{r4, r5, r7, pc}
 800388e:	bf00      	nop
 8003890:	422580a0 	.word	0x422580a0
 8003894:	004005ff 	.word	0x004005ff

08003898 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08c      	sub	sp, #48	; 0x30
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d107      	bne.n	80038c0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0c0      	b.n	8003a42 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	f040 80b9 	bne.w	8003a40 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80038d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	441a      	add	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038de:	429a      	cmp	r2, r3
 80038e0:	d907      	bls.n	80038f2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e0a7      	b.n	8003a42 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2203      	movs	r2, #3
 80038f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2200      	movs	r2, #0
 8003900:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003910:	f043 0302 	orr.w	r3, r3, #2
 8003914:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	4a4c      	ldr	r2, [pc, #304]	; (8003a4c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800391c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	4a4b      	ldr	r2, [pc, #300]	; (8003a50 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003924:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	2200      	movs	r2, #0
 800392c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3380      	adds	r3, #128	; 0x80
 800395c:	4619      	mov	r1, r3
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	025b      	lsls	r3, r3, #9
 8003964:	089b      	lsrs	r3, r3, #2
 8003966:	f7fd fbf1 	bl	800114c <HAL_DMA_Start_IT>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d017      	beq.n	80039a0 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800397e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a33      	ldr	r2, [pc, #204]	; (8003a54 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003986:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e050      	b.n	8003a42 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80039a0:	4b2d      	ldr	r3, [pc, #180]	; (8003a58 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d002      	beq.n	80039b4 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80039ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b0:	025b      	lsls	r3, r3, #9
 80039b2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80039b4:	f04f 33ff 	mov.w	r3, #4294967295
 80039b8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	025b      	lsls	r3, r3, #9
 80039be:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80039c0:	2390      	movs	r3, #144	; 0x90
 80039c2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80039c4:	2302      	movs	r3, #2
 80039c6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80039cc:	2301      	movs	r3, #1
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f107 0210 	add.w	r2, r7, #16
 80039d8:	4611      	mov	r1, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f002 fade 	bl	8005f9c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d90a      	bls.n	80039fc <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2282      	movs	r2, #130	; 0x82
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039f2:	4618      	mov	r0, r3
 80039f4:	f002 fb42 	bl	800607c <SDMMC_CmdReadMultiBlock>
 80039f8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80039fa:	e009      	b.n	8003a10 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2281      	movs	r2, #129	; 0x81
 8003a00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f002 fb15 	bl	8006038 <SDMMC_CmdReadSingleBlock>
 8003a0e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d012      	beq.n	8003a3c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a0e      	ldr	r2, [pc, #56]	; (8003a54 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003a1c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a24:	431a      	orrs	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e002      	b.n	8003a42 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	e000      	b.n	8003a42 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003a40:	2302      	movs	r3, #2
  }
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3730      	adds	r7, #48	; 0x30
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	08004487 	.word	0x08004487
 8003a50:	080044f9 	.word	0x080044f9
 8003a54:	004005ff 	.word	0x004005ff
 8003a58:	4225858c 	.word	0x4225858c

08003a5c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08c      	sub	sp, #48	; 0x30
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d107      	bne.n	8003a84 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0c5      	b.n	8003c10 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	f040 80be 	bne.w	8003c0e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	441a      	add	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d907      	bls.n	8003ab6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aaa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e0ac      	b.n	8003c10 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2203      	movs	r2, #3
 8003aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003ad4:	f043 0302 	orr.w	r3, r3, #2
 8003ad8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ade:	4a4e      	ldr	r2, [pc, #312]	; (8003c18 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003ae0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae6:	4a4d      	ldr	r2, [pc, #308]	; (8003c1c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003ae8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aee:	2200      	movs	r2, #0
 8003af0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d002      	beq.n	8003b00 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afc:	025b      	lsls	r3, r3, #9
 8003afe:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d90a      	bls.n	8003b1c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	22a0      	movs	r2, #160	; 0xa0
 8003b0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b12:	4618      	mov	r0, r3
 8003b14:	f002 faf6 	bl	8006104 <SDMMC_CmdWriteMultiBlock>
 8003b18:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003b1a:	e009      	b.n	8003b30 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2290      	movs	r2, #144	; 0x90
 8003b20:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f002 fac9 	bl	80060c0 <SDMMC_CmdWriteSingleBlock>
 8003b2e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d012      	beq.n	8003b5c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a39      	ldr	r2, [pc, #228]	; (8003c20 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003b3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b44:	431a      	orrs	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e059      	b.n	8003c10 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003b5c:	4b31      	ldr	r3, [pc, #196]	; (8003c24 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b66:	2240      	movs	r2, #64	; 0x40
 8003b68:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003b8a:	68b9      	ldr	r1, [r7, #8]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3380      	adds	r3, #128	; 0x80
 8003b92:	461a      	mov	r2, r3
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	025b      	lsls	r3, r3, #9
 8003b98:	089b      	lsrs	r3, r3, #2
 8003b9a:	f7fd fad7 	bl	800114c <HAL_DMA_Start_IT>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01c      	beq.n	8003bde <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	6812      	ldr	r2, [r2, #0]
 8003bae:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8003bb2:	f023 0302 	bic.w	r3, r3, #2
 8003bb6:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a18      	ldr	r2, [pc, #96]	; (8003c20 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003bbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e018      	b.n	8003c10 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003bde:	f04f 33ff 	mov.w	r3, #4294967295
 8003be2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	025b      	lsls	r3, r3, #9
 8003be8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003bea:	2390      	movs	r3, #144	; 0x90
 8003bec:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f107 0210 	add.w	r2, r7, #16
 8003c02:	4611      	mov	r1, r2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f002 f9c9 	bl	8005f9c <SDIO_ConfigData>

      return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e000      	b.n	8003c10 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003c0e:	2302      	movs	r3, #2
  }
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3730      	adds	r7, #48	; 0x30
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	0800445d 	.word	0x0800445d
 8003c1c:	080044f9 	.word	0x080044f9
 8003c20:	004005ff 	.word	0x004005ff
 8003c24:	4225858c 	.word	0x4225858c

08003c28 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_SD_IRQHandler+0x2e>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fffd 	bl	8004c4e <SD_Read_IT>
 8003c54:	e165      	b.n	8003f22 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 808f 	beq.w	8003d84 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c6e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003c7e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003c82:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0201 	bic.w	r2, r2, #1
 8003c92:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d039      	beq.n	8003d12 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d104      	bne.n	8003cb2 <HAL_SD_IRQHandler+0x8a>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d011      	beq.n	8003cd6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f002 fa46 	bl	8006148 <SDMMC_CmdStopTransfer>
 8003cbc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f92f 	bl	8003f34 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f240 523a 	movw	r2, #1338	; 0x53a
 8003cde:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d104      	bne.n	8003d02 <HAL_SD_IRQHandler+0xda>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f004 fa26 	bl	8008154 <HAL_SD_RxCpltCallback>
 8003d08:	e10b      	b.n	8003f22 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f004 fa18 	bl	8008140 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d10:	e107      	b.n	8003f22 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 8102 	beq.w	8003f22 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d011      	beq.n	8003d4c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f002 fa0b 	bl	8006148 <SDMMC_CmdStopTransfer>
 8003d32:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f8f4 	bl	8003f34 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f040 80e5 	bne.w	8003f22 <HAL_SD_IRQHandler+0x2fa>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f040 80df 	bne.w	8003f22 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0208 	bic.w	r2, r2, #8
 8003d72:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f004 f9df 	bl	8008140 <HAL_SD_TxCpltCallback>
}
 8003d82:	e0ce      	b.n	8003f22 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d008      	beq.n	8003da4 <HAL_SD_IRQHandler+0x17c>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 ffa7 	bl	8004cf0 <SD_Write_IT>
 8003da2:	e0be      	b.n	8003f22 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003daa:	f240 233a 	movw	r3, #570	; 0x23a
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 80b6 	beq.w	8003f22 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc8:	f043 0202 	orr.w	r2, r3, #2
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d005      	beq.n	8003dea <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	f043 0208 	orr.w	r2, r3, #8
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d005      	beq.n	8003e04 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfc:	f043 0220 	orr.w	r2, r3, #32
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d005      	beq.n	8003e1e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	f043 0210 	orr.w	r2, r3, #16
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e30:	f043 0208 	orr.w	r2, r3, #8
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f240 723a 	movw	r2, #1850	; 0x73a
 8003e40:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003e50:	f023 0302 	bic.w	r3, r3, #2
 8003e54:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f002 f974 	bl	8006148 <SDMMC_CmdStopTransfer>
 8003e60:	4602      	mov	r2, r0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f855 	bl	8003f34 <HAL_SD_ErrorCallback>
}
 8003e8a:	e04a      	b.n	8003f22 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d045      	beq.n	8003f22 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f003 0310 	and.w	r3, r3, #16
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d104      	bne.n	8003eaa <HAL_SD_IRQHandler+0x282>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d011      	beq.n	8003ece <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eae:	4a1f      	ldr	r2, [pc, #124]	; (8003f2c <HAL_SD_IRQHandler+0x304>)
 8003eb0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fd fa10 	bl	80012dc <HAL_DMA_Abort_IT>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d02f      	beq.n	8003f22 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fb68 	bl	800459c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003ecc:	e029      	b.n	8003f22 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d104      	bne.n	8003ee2 <HAL_SD_IRQHandler+0x2ba>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d011      	beq.n	8003f06 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <HAL_SD_IRQHandler+0x308>)
 8003ee8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fd f9f4 	bl	80012dc <HAL_DMA_Abort_IT>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d013      	beq.n	8003f22 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fb83 	bl	800460a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003f04:	e00d      	b.n	8003f22 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f004 f906 	bl	800812c <HAL_SD_AbortCallback>
}
 8003f20:	e7ff      	b.n	8003f22 <HAL_SD_IRQHandler+0x2fa>
 8003f22:	bf00      	nop
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	0800459d 	.word	0x0800459d
 8003f30:	0800460b 	.word	0x0800460b

08003f34 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f56:	0f9b      	lsrs	r3, r3, #30
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f62:	0e9b      	lsrs	r3, r3, #26
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f74:	0e1b      	lsrs	r3, r3, #24
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	f003 0303 	and.w	r3, r3, #3
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f86:	0c1b      	lsrs	r3, r3, #16
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f92:	0a1b      	lsrs	r3, r3, #8
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fa8:	0d1b      	lsrs	r3, r3, #20
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fb4:	0c1b      	lsrs	r3, r3, #16
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fc6:	0bdb      	lsrs	r3, r3, #15
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd8:	0b9b      	lsrs	r3, r3, #14
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fea:	0b5b      	lsrs	r3, r3, #13
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ffc:	0b1b      	lsrs	r3, r3, #12
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	b2da      	uxtb	r2, r3
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2200      	movs	r2, #0
 800400e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004014:	2b00      	cmp	r3, #0
 8004016:	d163      	bne.n	80040e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800401c:	009a      	lsls	r2, r3, #2
 800401e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004022:	4013      	ands	r3, r2
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004028:	0f92      	lsrs	r2, r2, #30
 800402a:	431a      	orrs	r2, r3
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004034:	0edb      	lsrs	r3, r3, #27
 8004036:	b2db      	uxtb	r3, r3
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	b2da      	uxtb	r2, r3
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004046:	0e1b      	lsrs	r3, r3, #24
 8004048:	b2db      	uxtb	r3, r3
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	b2da      	uxtb	r2, r3
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004058:	0d5b      	lsrs	r3, r3, #21
 800405a:	b2db      	uxtb	r3, r3
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	b2da      	uxtb	r2, r3
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800406a:	0c9b      	lsrs	r3, r3, #18
 800406c:	b2db      	uxtb	r3, r3
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	b2da      	uxtb	r2, r3
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800407c:	0bdb      	lsrs	r3, r3, #15
 800407e:	b2db      	uxtb	r3, r3
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	b2da      	uxtb	r2, r3
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	7e1b      	ldrb	r3, [r3, #24]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	3302      	adds	r3, #2
 80040a0:	2201      	movs	r2, #1
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80040aa:	fb02 f203 	mul.w	r2, r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	7a1b      	ldrb	r3, [r3, #8]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	f003 030f 	and.w	r3, r3, #15
 80040bc:	2201      	movs	r2, #1
 80040be:	409a      	lsls	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80040cc:	0a52      	lsrs	r2, r2, #9
 80040ce:	fb02 f203 	mul.w	r2, r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040dc:	661a      	str	r2, [r3, #96]	; 0x60
 80040de:	e031      	b.n	8004144 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d11d      	bne.n	8004124 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ec:	041b      	lsls	r3, r3, #16
 80040ee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040f6:	0c1b      	lsrs	r3, r3, #16
 80040f8:	431a      	orrs	r2, r3
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	3301      	adds	r3, #1
 8004104:	029a      	lsls	r2, r3, #10
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004118:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	661a      	str	r2, [r3, #96]	; 0x60
 8004122:	e00f      	b.n	8004144 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a58      	ldr	r2, [pc, #352]	; (800428c <HAL_SD_GetCardCSD+0x344>)
 800412a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e09d      	b.n	8004280 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004148:	0b9b      	lsrs	r3, r3, #14
 800414a:	b2db      	uxtb	r3, r3
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	b2da      	uxtb	r2, r3
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800415a:	09db      	lsrs	r3, r3, #7
 800415c:	b2db      	uxtb	r3, r3
 800415e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004162:	b2da      	uxtb	r2, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416c:	b2db      	uxtb	r3, r3
 800416e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004172:	b2da      	uxtb	r2, r3
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417c:	0fdb      	lsrs	r3, r3, #31
 800417e:	b2da      	uxtb	r2, r3
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004188:	0f5b      	lsrs	r3, r3, #29
 800418a:	b2db      	uxtb	r3, r3
 800418c:	f003 0303 	and.w	r3, r3, #3
 8004190:	b2da      	uxtb	r2, r3
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	0e9b      	lsrs	r3, r3, #26
 800419c:	b2db      	uxtb	r3, r3
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ac:	0d9b      	lsrs	r3, r3, #22
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041be:	0d5b      	lsrs	r3, r3, #21
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041da:	0c1b      	lsrs	r3, r3, #16
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ee:	0bdb      	lsrs	r3, r3, #15
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004202:	0b9b      	lsrs	r3, r3, #14
 8004204:	b2db      	uxtb	r3, r3
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	b2da      	uxtb	r2, r3
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	0b5b      	lsrs	r3, r3, #13
 8004218:	b2db      	uxtb	r3, r3
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	b2da      	uxtb	r2, r3
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	0b1b      	lsrs	r3, r3, #12
 800422c:	b2db      	uxtb	r3, r3
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	b2da      	uxtb	r2, r3
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423e:	0a9b      	lsrs	r3, r3, #10
 8004240:	b2db      	uxtb	r3, r3
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	b2da      	uxtb	r2, r3
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	0a1b      	lsrs	r3, r3, #8
 8004254:	b2db      	uxtb	r3, r3
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	b2da      	uxtb	r2, r3
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	085b      	lsrs	r3, r3, #1
 8004268:	b2db      	uxtb	r3, r3
 800426a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800426e:	b2da      	uxtb	r2, r3
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	004005ff 	.word	0x004005ff

08004290 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80042e8:	b5b0      	push	{r4, r5, r7, lr}
 80042ea:	b08e      	sub	sp, #56	; 0x38
 80042ec:	af04      	add	r7, sp, #16
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2203      	movs	r2, #3
 80042fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004304:	2b03      	cmp	r3, #3
 8004306:	d02e      	beq.n	8004366 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430e:	d106      	bne.n	800431e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004314:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	639a      	str	r2, [r3, #56]	; 0x38
 800431c:	e029      	b.n	8004372 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004324:	d10a      	bne.n	800433c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 fb28 	bl	800497c <SD_WideBus_Enable>
 800432c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	639a      	str	r2, [r3, #56]	; 0x38
 800433a:	e01a      	b.n	8004372 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10a      	bne.n	8004358 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fb65 	bl	8004a12 <SD_WideBus_Disable>
 8004348:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	639a      	str	r2, [r3, #56]	; 0x38
 8004356:	e00c      	b.n	8004372 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
 8004364:	e005      	b.n	8004372 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00b      	beq.n	8004392 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a26      	ldr	r2, [pc, #152]	; (8004418 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004380:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004390:	e01f      	b.n	80043d2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681d      	ldr	r5, [r3, #0]
 80043b8:	466c      	mov	r4, sp
 80043ba:	f107 0314 	add.w	r3, r7, #20
 80043be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80043c6:	f107 0308 	add.w	r3, r7, #8
 80043ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043cc:	4628      	mov	r0, r5
 80043ce:	f001 fd35 	bl	8005e3c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043da:	4618      	mov	r0, r3
 80043dc:	f001 fe0a 	bl	8005ff4 <SDMMC_CmdBlockLength>
 80043e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00c      	beq.n	8004402 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a0a      	ldr	r2, [pc, #40]	; (8004418 <HAL_SD_ConfigWideBusOperation+0x130>)
 80043ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800440a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800440e:	4618      	mov	r0, r3
 8004410:	3728      	adds	r7, #40	; 0x28
 8004412:	46bd      	mov	sp, r7
 8004414:	bdb0      	pop	{r4, r5, r7, pc}
 8004416:	bf00      	nop
 8004418:	004005ff 	.word	0x004005ff

0800441c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004424:	2300      	movs	r3, #0
 8004426:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004428:	f107 030c 	add.w	r3, r7, #12
 800442c:	4619      	mov	r1, r3
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fa7c 	bl	800492c <SD_SendStatus>
 8004434:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	0a5b      	lsrs	r3, r3, #9
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004452:	693b      	ldr	r3, [r7, #16]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004478:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800447a:	bf00      	nop
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004492:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	2b82      	cmp	r3, #130	; 0x82
 800449a:	d111      	bne.n	80044c0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f001 fe51 	bl	8006148 <SDMMC_CmdStopTransfer>
 80044a6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d008      	beq.n	80044c0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	431a      	orrs	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f7ff fd3a 	bl	8003f34 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0208 	bic.w	r2, r2, #8
 80044ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f240 523a 	movw	r2, #1338	; 0x53a
 80044d8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f003 fe33 	bl	8008154 <HAL_SD_RxCpltCallback>
#endif
}
 80044ee:	bf00      	nop
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004504:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fd f894 	bl	8001634 <HAL_DMA_GetError>
 800450c:	4603      	mov	r3, r0
 800450e:	2b02      	cmp	r3, #2
 8004510:	d03e      	beq.n	8004590 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004518:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d002      	beq.n	800452e <SD_DMAError+0x36>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d12d      	bne.n	800458a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a19      	ldr	r2, [pc, #100]	; (8004598 <SD_DMAError+0xa0>)
 8004534:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004544:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004552:	6978      	ldr	r0, [r7, #20]
 8004554:	f7ff ff62 	bl	800441c <HAL_SD_GetCardState>
 8004558:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b06      	cmp	r3, #6
 800455e:	d002      	beq.n	8004566 <SD_DMAError+0x6e>
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b05      	cmp	r3, #5
 8004564:	d10a      	bne.n	800457c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f001 fdec 	bl	8006148 <SDMMC_CmdStopTransfer>
 8004570:	4602      	mov	r2, r0
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	431a      	orrs	r2, r3
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2200      	movs	r2, #0
 8004588:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800458a:	6978      	ldr	r0, [r7, #20]
 800458c:	f7ff fcd2 	bl	8003f34 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004590:	bf00      	nop
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	004005ff 	.word	0x004005ff

0800459c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f240 523a 	movw	r2, #1338	; 0x53a
 80045b2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f7ff ff31 	bl	800441c <HAL_SD_GetCardState>
 80045ba:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b06      	cmp	r3, #6
 80045ce:	d002      	beq.n	80045d6 <SD_DMATxAbort+0x3a>
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b05      	cmp	r3, #5
 80045d4:	d10a      	bne.n	80045ec <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f001 fdb4 	bl	8006148 <SDMMC_CmdStopTransfer>
 80045e0:	4602      	mov	r2, r0
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	431a      	orrs	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d103      	bne.n	80045fc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f003 fd99 	bl	800812c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80045fa:	e002      	b.n	8004602 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7ff fc99 	bl	8003f34 <HAL_SD_ErrorCallback>
}
 8004602:	bf00      	nop
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b084      	sub	sp, #16
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004620:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f7ff fefa 	bl	800441c <HAL_SD_GetCardState>
 8004628:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b06      	cmp	r3, #6
 800463c:	d002      	beq.n	8004644 <SD_DMARxAbort+0x3a>
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b05      	cmp	r3, #5
 8004642:	d10a      	bne.n	800465a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f001 fd7d 	bl	8006148 <SDMMC_CmdStopTransfer>
 800464e:	4602      	mov	r2, r0
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	431a      	orrs	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	2b00      	cmp	r3, #0
 8004660:	d103      	bne.n	800466a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f003 fd62 	bl	800812c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004668:	e002      	b.n	8004670 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f7ff fc62 	bl	8003f34 <HAL_SD_ErrorCallback>
}
 8004670:	bf00      	nop
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004678:	b5b0      	push	{r4, r5, r7, lr}
 800467a:	b094      	sub	sp, #80	; 0x50
 800467c:	af04      	add	r7, sp, #16
 800467e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004680:	2301      	movs	r3, #1
 8004682:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f001 fc2f 	bl	8005eec <SDIO_GetPowerState>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d102      	bne.n	800469a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004694:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004698:	e0b6      	b.n	8004808 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469e:	2b03      	cmp	r3, #3
 80046a0:	d02f      	beq.n	8004702 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f001 fe58 	bl	800635c <SDMMC_CmdSendCID>
 80046ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80046ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <SD_InitCard+0x40>
    {
      return errorstate;
 80046b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b6:	e0a7      	b.n	8004808 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2100      	movs	r1, #0
 80046be:	4618      	mov	r0, r3
 80046c0:	f001 fc59 	bl	8005f76 <SDIO_GetResponse>
 80046c4:	4602      	mov	r2, r0
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2104      	movs	r1, #4
 80046d0:	4618      	mov	r0, r3
 80046d2:	f001 fc50 	bl	8005f76 <SDIO_GetResponse>
 80046d6:	4602      	mov	r2, r0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2108      	movs	r1, #8
 80046e2:	4618      	mov	r0, r3
 80046e4:	f001 fc47 	bl	8005f76 <SDIO_GetResponse>
 80046e8:	4602      	mov	r2, r0
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	210c      	movs	r1, #12
 80046f4:	4618      	mov	r0, r3
 80046f6:	f001 fc3e 	bl	8005f76 <SDIO_GetResponse>
 80046fa:	4602      	mov	r2, r0
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004706:	2b03      	cmp	r3, #3
 8004708:	d00d      	beq.n	8004726 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f107 020e 	add.w	r2, r7, #14
 8004712:	4611      	mov	r1, r2
 8004714:	4618      	mov	r0, r3
 8004716:	f001 fe5e 	bl	80063d6 <SDMMC_CmdSetRelAdd>
 800471a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800471c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <SD_InitCard+0xae>
    {
      return errorstate;
 8004722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004724:	e070      	b.n	8004808 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472a:	2b03      	cmp	r3, #3
 800472c:	d036      	beq.n	800479c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800472e:	89fb      	ldrh	r3, [r7, #14]
 8004730:	461a      	mov	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473e:	041b      	lsls	r3, r3, #16
 8004740:	4619      	mov	r1, r3
 8004742:	4610      	mov	r0, r2
 8004744:	f001 fe28 	bl	8006398 <SDMMC_CmdSendCSD>
 8004748:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800474a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004752:	e059      	b.n	8004808 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2100      	movs	r1, #0
 800475a:	4618      	mov	r0, r3
 800475c:	f001 fc0b 	bl	8005f76 <SDIO_GetResponse>
 8004760:	4602      	mov	r2, r0
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2104      	movs	r1, #4
 800476c:	4618      	mov	r0, r3
 800476e:	f001 fc02 	bl	8005f76 <SDIO_GetResponse>
 8004772:	4602      	mov	r2, r0
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2108      	movs	r1, #8
 800477e:	4618      	mov	r0, r3
 8004780:	f001 fbf9 	bl	8005f76 <SDIO_GetResponse>
 8004784:	4602      	mov	r2, r0
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	210c      	movs	r1, #12
 8004790:	4618      	mov	r0, r3
 8004792:	f001 fbf0 	bl	8005f76 <SDIO_GetResponse>
 8004796:	4602      	mov	r2, r0
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2104      	movs	r1, #4
 80047a2:	4618      	mov	r0, r3
 80047a4:	f001 fbe7 	bl	8005f76 <SDIO_GetResponse>
 80047a8:	4603      	mov	r3, r0
 80047aa:	0d1a      	lsrs	r2, r3, #20
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80047b0:	f107 0310 	add.w	r3, r7, #16
 80047b4:	4619      	mov	r1, r3
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff fbc6 	bl	8003f48 <HAL_SD_GetCardCSD>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80047c6:	e01f      	b.n	8004808 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6819      	ldr	r1, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d0:	041b      	lsls	r3, r3, #16
 80047d2:	461a      	mov	r2, r3
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	4608      	mov	r0, r1
 80047da:	f001 fcd7 	bl	800618c <SDMMC_CmdSelDesel>
 80047de:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80047e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <SD_InitCard+0x172>
  {
    return errorstate;
 80047e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e8:	e00e      	b.n	8004808 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681d      	ldr	r5, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	466c      	mov	r4, sp
 80047f2:	f103 0210 	add.w	r2, r3, #16
 80047f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80047f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80047fc:	3304      	adds	r3, #4
 80047fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004800:	4628      	mov	r0, r5
 8004802:	f001 fb1b 	bl	8005e3c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3740      	adds	r7, #64	; 0x40
 800480c:	46bd      	mov	sp, r7
 800480e:	bdb0      	pop	{r4, r5, r7, pc}

08004810 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	2300      	movs	r3, #0
 8004822:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f001 fcd2 	bl	80061d2 <SDMMC_CmdGoIdleState>
 800482e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	e072      	b.n	8004920 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f001 fce5 	bl	800620e <SDMMC_CmdOperCond>
 8004844:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00d      	beq.n	8004868 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f001 fcbb 	bl	80061d2 <SDMMC_CmdGoIdleState>
 800485c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d004      	beq.n	800486e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	e05b      	b.n	8004920 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004872:	2b01      	cmp	r3, #1
 8004874:	d137      	bne.n	80048e6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2100      	movs	r1, #0
 800487c:	4618      	mov	r0, r3
 800487e:	f001 fce5 	bl	800624c <SDMMC_CmdAppCommand>
 8004882:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d02d      	beq.n	80048e6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800488a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800488e:	e047      	b.n	8004920 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2100      	movs	r1, #0
 8004896:	4618      	mov	r0, r3
 8004898:	f001 fcd8 	bl	800624c <SDMMC_CmdAppCommand>
 800489c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <SD_PowerON+0x98>
    {
      return errorstate;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	e03b      	b.n	8004920 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	491e      	ldr	r1, [pc, #120]	; (8004928 <SD_PowerON+0x118>)
 80048ae:	4618      	mov	r0, r3
 80048b0:	f001 fcee 	bl	8006290 <SDMMC_CmdAppOperCommand>
 80048b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d002      	beq.n	80048c2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80048c0:	e02e      	b.n	8004920 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2100      	movs	r1, #0
 80048c8:	4618      	mov	r0, r3
 80048ca:	f001 fb54 	bl	8005f76 <SDIO_GetResponse>
 80048ce:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	0fdb      	lsrs	r3, r3, #31
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <SD_PowerON+0xcc>
 80048d8:	2301      	movs	r3, #1
 80048da:	e000      	b.n	80048de <SD_PowerON+0xce>
 80048dc:	2300      	movs	r3, #0
 80048de:	613b      	str	r3, [r7, #16]

    count++;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	3301      	adds	r3, #1
 80048e4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d802      	bhi.n	80048f6 <SD_PowerON+0xe6>
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0cc      	beq.n	8004890 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d902      	bls.n	8004906 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004900:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004904:	e00c      	b.n	8004920 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	645a      	str	r2, [r3, #68]	; 0x44
 8004916:	e002      	b.n	800491e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	c1100000 	.word	0xc1100000

0800492c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d102      	bne.n	8004942 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800493c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004940:	e018      	b.n	8004974 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800494a:	041b      	lsls	r3, r3, #16
 800494c:	4619      	mov	r1, r3
 800494e:	4610      	mov	r0, r2
 8004950:	f001 fd62 	bl	8006418 <SDMMC_CmdSendStatus>
 8004954:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <SD_SendStatus+0x34>
  {
    return errorstate;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	e009      	b.n	8004974 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2100      	movs	r1, #0
 8004966:	4618      	mov	r0, r3
 8004968:	f001 fb05 	bl	8005f76 <SDIO_GetResponse>
 800496c:	4602      	mov	r2, r0
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	2300      	movs	r3, #0
 800498a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2100      	movs	r1, #0
 8004992:	4618      	mov	r0, r3
 8004994:	f001 faef 	bl	8005f76 <SDIO_GetResponse>
 8004998:	4603      	mov	r3, r0
 800499a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049a2:	d102      	bne.n	80049aa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80049a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049a8:	e02f      	b.n	8004a0a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80049aa:	f107 030c 	add.w	r3, r7, #12
 80049ae:	4619      	mov	r1, r3
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f879 	bl	8004aa8 <SD_FindSCR>
 80049b6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	e023      	b.n	8004a0a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01c      	beq.n	8004a06 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d4:	041b      	lsls	r3, r3, #16
 80049d6:	4619      	mov	r1, r3
 80049d8:	4610      	mov	r0, r2
 80049da:	f001 fc37 	bl	800624c <SDMMC_CmdAppCommand>
 80049de:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	e00f      	b.n	8004a0a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2102      	movs	r1, #2
 80049f0:	4618      	mov	r0, r3
 80049f2:	f001 fc70 	bl	80062d6 <SDMMC_CmdBusWidth>
 80049f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	e003      	b.n	8004a0a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004a02:	2300      	movs	r3, #0
 8004a04:	e001      	b.n	8004a0a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004a06:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b086      	sub	sp, #24
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2100      	movs	r1, #0
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f001 faa4 	bl	8005f76 <SDIO_GetResponse>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a38:	d102      	bne.n	8004a40 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004a3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a3e:	e02f      	b.n	8004aa0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004a40:	f107 030c 	add.w	r3, r7, #12
 8004a44:	4619      	mov	r1, r3
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f82e 	bl	8004aa8 <SD_FindSCR>
 8004a4c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	e023      	b.n	8004aa0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01c      	beq.n	8004a9c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6a:	041b      	lsls	r3, r3, #16
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	f001 fbec 	bl	800624c <SDMMC_CmdAppCommand>
 8004a74:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	e00f      	b.n	8004aa0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2100      	movs	r1, #0
 8004a86:	4618      	mov	r0, r3
 8004a88:	f001 fc25 	bl	80062d6 <SDMMC_CmdBusWidth>
 8004a8c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	e003      	b.n	8004aa0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	e001      	b.n	8004aa0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004a9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004aa8:	b590      	push	{r4, r7, lr}
 8004aaa:	b08f      	sub	sp, #60	; 0x3c
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004ab2:	f7fc f95b 	bl	8000d6c <HAL_GetTick>
 8004ab6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004abc:	2300      	movs	r3, #0
 8004abe:	60bb      	str	r3, [r7, #8]
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2108      	movs	r1, #8
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f001 fa90 	bl	8005ff4 <SDMMC_CmdBlockLength>
 8004ad4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	e0b2      	b.n	8004c46 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae8:	041b      	lsls	r3, r3, #16
 8004aea:	4619      	mov	r1, r3
 8004aec:	4610      	mov	r0, r2
 8004aee:	f001 fbad 	bl	800624c <SDMMC_CmdAppCommand>
 8004af2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <SD_FindSCR+0x56>
  {
    return errorstate;
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	e0a3      	b.n	8004c46 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004afe:	f04f 33ff 	mov.w	r3, #4294967295
 8004b02:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004b04:	2308      	movs	r3, #8
 8004b06:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004b08:	2330      	movs	r3, #48	; 0x30
 8004b0a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004b14:	2301      	movs	r3, #1
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f107 0210 	add.w	r2, r7, #16
 8004b20:	4611      	mov	r1, r2
 8004b22:	4618      	mov	r0, r3
 8004b24:	f001 fa3a 	bl	8005f9c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f001 fbf4 	bl	800631a <SDMMC_CmdSendSCR>
 8004b32:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d02a      	beq.n	8004b90 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3c:	e083      	b.n	8004c46 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00f      	beq.n	8004b6c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6819      	ldr	r1, [r3, #0]
 8004b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	f107 0208 	add.w	r2, r7, #8
 8004b58:	18d4      	adds	r4, r2, r3
 8004b5a:	4608      	mov	r0, r1
 8004b5c:	f001 f999 	bl	8005e92 <SDIO_ReadFIFO>
 8004b60:	4603      	mov	r3, r0
 8004b62:	6023      	str	r3, [r4, #0]
      index++;
 8004b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b66:	3301      	adds	r3, #1
 8004b68:	637b      	str	r3, [r7, #52]	; 0x34
 8004b6a:	e006      	b.n	8004b7a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d012      	beq.n	8004ba0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004b7a:	f7fc f8f7 	bl	8000d6c <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b88:	d102      	bne.n	8004b90 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004b8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b8e:	e05a      	b.n	8004c46 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b96:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0cf      	beq.n	8004b3e <SD_FindSCR+0x96>
 8004b9e:	e000      	b.n	8004ba2 <SD_FindSCR+0xfa>
      break;
 8004ba0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba8:	f003 0308 	and.w	r3, r3, #8
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d005      	beq.n	8004bbc <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2208      	movs	r2, #8
 8004bb6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004bb8:	2308      	movs	r3, #8
 8004bba:	e044      	b.n	8004c46 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d005      	beq.n	8004bd6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e037      	b.n	8004c46 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bdc:	f003 0320 	and.w	r3, r3, #32
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2220      	movs	r2, #32
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004bec:	2320      	movs	r3, #32
 8004bee:	e02a      	b.n	8004c46 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f240 523a 	movw	r2, #1338	; 0x53a
 8004bf8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	061a      	lsls	r2, r3, #24
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c06:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	0a1b      	lsrs	r3, r3, #8
 8004c0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004c10:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	0e1b      	lsrs	r3, r3, #24
 8004c16:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1a:	601a      	str	r2, [r3, #0]
    scr++;
 8004c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1e:	3304      	adds	r3, #4
 8004c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	061a      	lsls	r2, r3, #24
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	021b      	lsls	r3, r3, #8
 8004c2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c2e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	0a1b      	lsrs	r3, r3, #8
 8004c34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004c38:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	0e1b      	lsrs	r3, r3, #24
 8004c3e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c42:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	373c      	adds	r7, #60	; 0x3c
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd90      	pop	{r4, r7, pc}

08004c4e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b086      	sub	sp, #24
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d03f      	beq.n	8004ce8 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	e033      	b.n	8004cd6 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f001 f90d 	bl	8005e92 <SDIO_ReadFIFO>
 8004c78:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3301      	adds	r3, #1
 8004c86:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	0a1b      	lsrs	r3, r3, #8
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	0c1b      	lsrs	r3, r3, #16
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	0e1b      	lsrs	r3, r3, #24
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2b07      	cmp	r3, #7
 8004cda:	d9c8      	bls.n	8004c6e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004ce8:	bf00      	nop
 8004cea:	3718      	adds	r7, #24
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d043      	beq.n	8004d92 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	e037      	b.n	8004d80 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	021a      	lsls	r2, r3, #8
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3301      	adds	r3, #1
 8004d32:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	041a      	lsls	r2, r3, #16
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	061a      	lsls	r2, r3, #24
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3301      	adds	r3, #1
 8004d62:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f107 0208 	add.w	r2, r7, #8
 8004d72:	4611      	mov	r1, r2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f001 f899 	bl	8005eac <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2b07      	cmp	r3, #7
 8004d84:	d9c4      	bls.n	8004d10 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004d92:	bf00      	nop
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b082      	sub	sp, #8
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e03f      	b.n	8004e2c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d106      	bne.n	8004dc6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7fb fe47 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2224      	movs	r2, #36	; 0x24
 8004dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ddc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fe64 	bl	8005aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691a      	ldr	r2, [r3, #16]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004df2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695a      	ldr	r2, [r3, #20]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e02:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e12:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b20      	cmp	r3, #32
 8004e4c:	d11d      	bne.n	8004e8a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <HAL_UART_Receive_DMA+0x26>
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e016      	b.n	8004e8c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_UART_Receive_DMA+0x38>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e00f      	b.n	8004e8c <HAL_UART_Receive_DMA+0x58>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004e7a:	88fb      	ldrh	r3, [r7, #6]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	68b9      	ldr	r1, [r7, #8]
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 fbb7 	bl	80055f4 <UART_Start_Receive_DMA>
 8004e86:	4603      	mov	r3, r0
 8004e88:	e000      	b.n	8004e8c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004e8a:	2302      	movs	r3, #2
  }
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b0ba      	sub	sp, #232	; 0xe8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004ed2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10f      	bne.n	8004efa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ede:	f003 0320 	and.w	r3, r3, #32
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d009      	beq.n	8004efa <HAL_UART_IRQHandler+0x66>
 8004ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fd1f 	bl	8005936 <UART_Receive_IT>
      return;
 8004ef8:	e256      	b.n	80053a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004efa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 80de 	beq.w	80050c0 <HAL_UART_IRQHandler+0x22c>
 8004f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d106      	bne.n	8004f1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 80d1 	beq.w	80050c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00b      	beq.n	8004f42 <HAL_UART_IRQHandler+0xae>
 8004f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d005      	beq.n	8004f42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	f043 0201 	orr.w	r2, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00b      	beq.n	8004f66 <HAL_UART_IRQHandler+0xd2>
 8004f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d005      	beq.n	8004f66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	f043 0202 	orr.w	r2, r3, #2
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00b      	beq.n	8004f8a <HAL_UART_IRQHandler+0xf6>
 8004f72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f043 0204 	orr.w	r2, r3, #4
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d011      	beq.n	8004fba <HAL_UART_IRQHandler+0x126>
 8004f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d105      	bne.n	8004fae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d005      	beq.n	8004fba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	f043 0208 	orr.w	r2, r3, #8
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 81ed 	beq.w	800539e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc8:	f003 0320 	and.w	r3, r3, #32
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d008      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x14e>
 8004fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd4:	f003 0320 	and.w	r3, r3, #32
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 fcaa 	bl	8005936 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fec:	2b40      	cmp	r3, #64	; 0x40
 8004fee:	bf0c      	ite	eq
 8004ff0:	2301      	moveq	r3, #1
 8004ff2:	2300      	movne	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f003 0308 	and.w	r3, r3, #8
 8005002:	2b00      	cmp	r3, #0
 8005004:	d103      	bne.n	800500e <HAL_UART_IRQHandler+0x17a>
 8005006:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800500a:	2b00      	cmp	r3, #0
 800500c:	d04f      	beq.n	80050ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 fbb2 	bl	8005778 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501e:	2b40      	cmp	r3, #64	; 0x40
 8005020:	d141      	bne.n	80050a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3314      	adds	r3, #20
 8005028:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005030:	e853 3f00 	ldrex	r3, [r3]
 8005034:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005038:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800503c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3314      	adds	r3, #20
 800504a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800504e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005052:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005056:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800505a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800505e:	e841 2300 	strex	r3, r2, [r1]
 8005062:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005066:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1d9      	bne.n	8005022 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	2b00      	cmp	r3, #0
 8005074:	d013      	beq.n	800509e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	4a7d      	ldr	r2, [pc, #500]	; (8005270 <HAL_UART_IRQHandler+0x3dc>)
 800507c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	4618      	mov	r0, r3
 8005084:	f7fc f92a 	bl	80012dc <HAL_DMA_Abort_IT>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d016      	beq.n	80050bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005098:	4610      	mov	r0, r2
 800509a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800509c:	e00e      	b.n	80050bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f99a 	bl	80053d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a4:	e00a      	b.n	80050bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f996 	bl	80053d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ac:	e006      	b.n	80050bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f992 	bl	80053d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80050ba:	e170      	b.n	800539e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050bc:	bf00      	nop
    return;
 80050be:	e16e      	b.n	800539e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	f040 814a 	bne.w	800535e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80050ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ce:	f003 0310 	and.w	r3, r3, #16
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 8143 	beq.w	800535e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80050d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050dc:	f003 0310 	and.w	r3, r3, #16
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 813c 	beq.w	800535e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050e6:	2300      	movs	r3, #0
 80050e8:	60bb      	str	r3, [r7, #8]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	60bb      	str	r3, [r7, #8]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	60bb      	str	r3, [r7, #8]
 80050fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005106:	2b40      	cmp	r3, #64	; 0x40
 8005108:	f040 80b4 	bne.w	8005274 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005118:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 8140 	beq.w	80053a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800512a:	429a      	cmp	r2, r3
 800512c:	f080 8139 	bcs.w	80053a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005136:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005142:	f000 8088 	beq.w	8005256 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	330c      	adds	r3, #12
 800514c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005150:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005154:	e853 3f00 	ldrex	r3, [r3]
 8005158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800515c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005164:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330c      	adds	r3, #12
 800516e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005172:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800517e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005182:	e841 2300 	strex	r3, r2, [r1]
 8005186:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800518a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1d9      	bne.n	8005146 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3314      	adds	r3, #20
 8005198:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80051a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051a4:	f023 0301 	bic.w	r3, r3, #1
 80051a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3314      	adds	r3, #20
 80051b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80051b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80051ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80051be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80051c2:	e841 2300 	strex	r3, r2, [r1]
 80051c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80051c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1e1      	bne.n	8005192 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3314      	adds	r3, #20
 80051d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051d8:	e853 3f00 	ldrex	r3, [r3]
 80051dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80051de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3314      	adds	r3, #20
 80051ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80051f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051fa:	e841 2300 	strex	r3, r2, [r1]
 80051fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1e3      	bne.n	80051ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	330c      	adds	r3, #12
 800521a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800521e:	e853 3f00 	ldrex	r3, [r3]
 8005222:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005226:	f023 0310 	bic.w	r3, r3, #16
 800522a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	330c      	adds	r3, #12
 8005234:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005238:	65ba      	str	r2, [r7, #88]	; 0x58
 800523a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800523e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005240:	e841 2300 	strex	r3, r2, [r1]
 8005244:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1e3      	bne.n	8005214 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	4618      	mov	r0, r3
 8005252:	f7fb ffd3 	bl	80011fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800525e:	b29b      	uxth	r3, r3
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	b29b      	uxth	r3, r3
 8005264:	4619      	mov	r1, r3
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f8c0 	bl	80053ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800526c:	e099      	b.n	80053a2 <HAL_UART_IRQHandler+0x50e>
 800526e:	bf00      	nop
 8005270:	0800583f 	.word	0x0800583f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800527c:	b29b      	uxth	r3, r3
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 808b 	beq.w	80053a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005290:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 8086 	beq.w	80053a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	330c      	adds	r3, #12
 80052a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	330c      	adds	r3, #12
 80052ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80052be:	647a      	str	r2, [r7, #68]	; 0x44
 80052c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1e3      	bne.n	800529a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3314      	adds	r3, #20
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	623b      	str	r3, [r7, #32]
   return(result);
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	f023 0301 	bic.w	r3, r3, #1
 80052e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3314      	adds	r3, #20
 80052f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80052f6:	633a      	str	r2, [r7, #48]	; 0x30
 80052f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1e3      	bne.n	80052d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	330c      	adds	r3, #12
 800531e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	60fb      	str	r3, [r7, #12]
   return(result);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0310 	bic.w	r3, r3, #16
 800532e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	330c      	adds	r3, #12
 8005338:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800533c:	61fa      	str	r2, [r7, #28]
 800533e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005340:	69b9      	ldr	r1, [r7, #24]
 8005342:	69fa      	ldr	r2, [r7, #28]
 8005344:	e841 2300 	strex	r3, r2, [r1]
 8005348:	617b      	str	r3, [r7, #20]
   return(result);
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e3      	bne.n	8005318 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005350:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005354:	4619      	mov	r1, r3
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f848 	bl	80053ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800535c:	e023      	b.n	80053a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800535e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005366:	2b00      	cmp	r3, #0
 8005368:	d009      	beq.n	800537e <HAL_UART_IRQHandler+0x4ea>
 800536a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800536e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fa75 	bl	8005866 <UART_Transmit_IT>
    return;
 800537c:	e014      	b.n	80053a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800537e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00e      	beq.n	80053a8 <HAL_UART_IRQHandler+0x514>
 800538a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800538e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d008      	beq.n	80053a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fab5 	bl	8005906 <UART_EndTransmit_IT>
    return;
 800539c:	e004      	b.n	80053a8 <HAL_UART_IRQHandler+0x514>
    return;
 800539e:	bf00      	nop
 80053a0:	e002      	b.n	80053a8 <HAL_UART_IRQHandler+0x514>
      return;
 80053a2:	bf00      	nop
 80053a4:	e000      	b.n	80053a8 <HAL_UART_IRQHandler+0x514>
      return;
 80053a6:	bf00      	nop
  }
}
 80053a8:	37e8      	adds	r7, #232	; 0xe8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop

080053b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	460b      	mov	r3, r1
 80053f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b09c      	sub	sp, #112	; 0x70
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541c:	2b00      	cmp	r3, #0
 800541e:	d172      	bne.n	8005506 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005422:	2200      	movs	r2, #0
 8005424:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	330c      	adds	r3, #12
 800542c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005430:	e853 3f00 	ldrex	r3, [r3]
 8005434:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800543c:	66bb      	str	r3, [r7, #104]	; 0x68
 800543e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	330c      	adds	r3, #12
 8005444:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005446:	65ba      	str	r2, [r7, #88]	; 0x58
 8005448:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800544c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800544e:	e841 2300 	strex	r3, r2, [r1]
 8005452:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1e5      	bne.n	8005426 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3314      	adds	r3, #20
 8005460:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800546a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546c:	f023 0301 	bic.w	r3, r3, #1
 8005470:	667b      	str	r3, [r7, #100]	; 0x64
 8005472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3314      	adds	r3, #20
 8005478:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800547a:	647a      	str	r2, [r7, #68]	; 0x44
 800547c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005480:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e5      	bne.n	800545a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800548e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3314      	adds	r3, #20
 8005494:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	623b      	str	r3, [r7, #32]
   return(result);
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054a4:	663b      	str	r3, [r7, #96]	; 0x60
 80054a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3314      	adds	r3, #20
 80054ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054ae:	633a      	str	r2, [r7, #48]	; 0x30
 80054b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e5      	bne.n	800548e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d119      	bne.n	8005506 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	330c      	adds	r3, #12
 80054d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	e853 3f00 	ldrex	r3, [r3]
 80054e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f023 0310 	bic.w	r3, r3, #16
 80054e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	330c      	adds	r3, #12
 80054f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054f2:	61fa      	str	r2, [r7, #28]
 80054f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f6:	69b9      	ldr	r1, [r7, #24]
 80054f8:	69fa      	ldr	r2, [r7, #28]
 80054fa:	e841 2300 	strex	r3, r2, [r1]
 80054fe:	617b      	str	r3, [r7, #20]
   return(result);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1e5      	bne.n	80054d2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550a:	2b01      	cmp	r3, #1
 800550c:	d106      	bne.n	800551c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800550e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005510:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005512:	4619      	mov	r1, r3
 8005514:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005516:	f7ff ff69 	bl	80053ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800551a:	e002      	b.n	8005522 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800551c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800551e:	f7fa ffcf 	bl	80004c0 <HAL_UART_RxCpltCallback>
}
 8005522:	bf00      	nop
 8005524:	3770      	adds	r7, #112	; 0x70
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b084      	sub	sp, #16
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005536:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553c:	2b01      	cmp	r3, #1
 800553e:	d108      	bne.n	8005552 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005544:	085b      	lsrs	r3, r3, #1
 8005546:	b29b      	uxth	r3, r3
 8005548:	4619      	mov	r1, r3
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f7ff ff4e 	bl	80053ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005550:	e002      	b.n	8005558 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f7ff ff36 	bl	80053c4 <HAL_UART_RxHalfCpltCallback>
}
 8005558:	bf00      	nop
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005570:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557c:	2b80      	cmp	r3, #128	; 0x80
 800557e:	bf0c      	ite	eq
 8005580:	2301      	moveq	r3, #1
 8005582:	2300      	movne	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b21      	cmp	r3, #33	; 0x21
 8005592:	d108      	bne.n	80055a6 <UART_DMAError+0x46>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d005      	beq.n	80055a6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2200      	movs	r2, #0
 800559e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80055a0:	68b8      	ldr	r0, [r7, #8]
 80055a2:	f000 f8c1 	bl	8005728 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b0:	2b40      	cmp	r3, #64	; 0x40
 80055b2:	bf0c      	ite	eq
 80055b4:	2301      	moveq	r3, #1
 80055b6:	2300      	movne	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b22      	cmp	r3, #34	; 0x22
 80055c6:	d108      	bne.n	80055da <UART_DMAError+0x7a>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d005      	beq.n	80055da <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2200      	movs	r2, #0
 80055d2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80055d4:	68b8      	ldr	r0, [r7, #8]
 80055d6:	f000 f8cf 	bl	8005778 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	f043 0210 	orr.w	r2, r3, #16
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055e6:	68b8      	ldr	r0, [r7, #8]
 80055e8:	f7ff fef6 	bl	80053d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ec:	bf00      	nop
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b098      	sub	sp, #96	; 0x60
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	4613      	mov	r3, r2
 8005600:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	88fa      	ldrh	r2, [r7, #6]
 800560c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2222      	movs	r2, #34	; 0x22
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	4a3e      	ldr	r2, [pc, #248]	; (800571c <UART_Start_Receive_DMA+0x128>)
 8005622:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	4a3d      	ldr	r2, [pc, #244]	; (8005720 <UART_Start_Receive_DMA+0x12c>)
 800562a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005630:	4a3c      	ldr	r2, [pc, #240]	; (8005724 <UART_Start_Receive_DMA+0x130>)
 8005632:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005638:	2200      	movs	r2, #0
 800563a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800563c:	f107 0308 	add.w	r3, r7, #8
 8005640:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3304      	adds	r3, #4
 800564c:	4619      	mov	r1, r3
 800564e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	f7fb fd7a 	bl	800114c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005658:	2300      	movs	r3, #0
 800565a:	613b      	str	r3, [r7, #16]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	613b      	str	r3, [r7, #16]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	613b      	str	r3, [r7, #16]
 800566c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	330c      	adds	r3, #12
 800567c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800568c:	65bb      	str	r3, [r7, #88]	; 0x58
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	330c      	adds	r3, #12
 8005694:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005696:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005698:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800569c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800569e:	e841 2300 	strex	r3, r2, [r1]
 80056a2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80056a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1e5      	bne.n	8005676 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3314      	adds	r3, #20
 80056b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b4:	e853 3f00 	ldrex	r3, [r3]
 80056b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056bc:	f043 0301 	orr.w	r3, r3, #1
 80056c0:	657b      	str	r3, [r7, #84]	; 0x54
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	3314      	adds	r3, #20
 80056c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056ca:	63ba      	str	r2, [r7, #56]	; 0x38
 80056cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e5      	bne.n	80056aa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3314      	adds	r3, #20
 80056e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	617b      	str	r3, [r7, #20]
   return(result);
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056f4:	653b      	str	r3, [r7, #80]	; 0x50
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3314      	adds	r3, #20
 80056fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056fe:	627a      	str	r2, [r7, #36]	; 0x24
 8005700:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	6a39      	ldr	r1, [r7, #32]
 8005704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	61fb      	str	r3, [r7, #28]
   return(result);
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e5      	bne.n	80056de <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3760      	adds	r7, #96	; 0x60
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	08005405 	.word	0x08005405
 8005720:	0800552b 	.word	0x0800552b
 8005724:	08005561 	.word	0x08005561

08005728 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005728:	b480      	push	{r7}
 800572a:	b089      	sub	sp, #36	; 0x24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	330c      	adds	r3, #12
 8005736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	e853 3f00 	ldrex	r3, [r3]
 800573e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005746:	61fb      	str	r3, [r7, #28]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	330c      	adds	r3, #12
 800574e:	69fa      	ldr	r2, [r7, #28]
 8005750:	61ba      	str	r2, [r7, #24]
 8005752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005754:	6979      	ldr	r1, [r7, #20]
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	e841 2300 	strex	r3, r2, [r1]
 800575c:	613b      	str	r3, [r7, #16]
   return(result);
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1e5      	bne.n	8005730 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2220      	movs	r2, #32
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800576c:	bf00      	nop
 800576e:	3724      	adds	r7, #36	; 0x24
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005778:	b480      	push	{r7}
 800577a:	b095      	sub	sp, #84	; 0x54
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	330c      	adds	r3, #12
 8005786:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578a:	e853 3f00 	ldrex	r3, [r3]
 800578e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005792:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	330c      	adds	r3, #12
 800579e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057a0:	643a      	str	r2, [r7, #64]	; 0x40
 80057a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057a8:	e841 2300 	strex	r3, r2, [r1]
 80057ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1e5      	bne.n	8005780 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3314      	adds	r3, #20
 80057ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	e853 3f00 	ldrex	r3, [r3]
 80057c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	f023 0301 	bic.w	r3, r3, #1
 80057ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3314      	adds	r3, #20
 80057d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057dc:	e841 2300 	strex	r3, r2, [r1]
 80057e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1e5      	bne.n	80057b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d119      	bne.n	8005824 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	330c      	adds	r3, #12
 80057f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	e853 3f00 	ldrex	r3, [r3]
 80057fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	f023 0310 	bic.w	r3, r3, #16
 8005806:	647b      	str	r3, [r7, #68]	; 0x44
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	330c      	adds	r3, #12
 800580e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005810:	61ba      	str	r2, [r7, #24]
 8005812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005814:	6979      	ldr	r1, [r7, #20]
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	e841 2300 	strex	r3, r2, [r1]
 800581c:	613b      	str	r3, [r7, #16]
   return(result);
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1e5      	bne.n	80057f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2220      	movs	r2, #32
 8005828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005832:	bf00      	nop
 8005834:	3754      	adds	r7, #84	; 0x54
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f7ff fdbd 	bl	80053d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800585e:	bf00      	nop
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005866:	b480      	push	{r7}
 8005868:	b085      	sub	sp, #20
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b21      	cmp	r3, #33	; 0x21
 8005878:	d13e      	bne.n	80058f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005882:	d114      	bne.n	80058ae <UART_Transmit_IT+0x48>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d110      	bne.n	80058ae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	1c9a      	adds	r2, r3, #2
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	621a      	str	r2, [r3, #32]
 80058ac:	e008      	b.n	80058c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	1c59      	adds	r1, r3, #1
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6211      	str	r1, [r2, #32]
 80058b8:	781a      	ldrb	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	4619      	mov	r1, r3
 80058ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10f      	bne.n	80058f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058f4:	2300      	movs	r3, #0
 80058f6:	e000      	b.n	80058fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80058f8:	2302      	movs	r3, #2
  }
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b082      	sub	sp, #8
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800591c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2220      	movs	r2, #32
 8005922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff fd42 	bl	80053b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b08c      	sub	sp, #48	; 0x30
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b22      	cmp	r3, #34	; 0x22
 8005948:	f040 80ab 	bne.w	8005aa2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005954:	d117      	bne.n	8005986 <UART_Receive_IT+0x50>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d113      	bne.n	8005986 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800595e:	2300      	movs	r3, #0
 8005960:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005966:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	b29b      	uxth	r3, r3
 8005970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005974:	b29a      	uxth	r2, r3
 8005976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005978:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597e:	1c9a      	adds	r2, r3, #2
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	629a      	str	r2, [r3, #40]	; 0x28
 8005984:	e026      	b.n	80059d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800598c:	2300      	movs	r3, #0
 800598e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005998:	d007      	beq.n	80059aa <UART_Receive_IT+0x74>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10a      	bne.n	80059b8 <UART_Receive_IT+0x82>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d106      	bne.n	80059b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	e008      	b.n	80059ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059d8:	b29b      	uxth	r3, r3
 80059da:	3b01      	subs	r3, #1
 80059dc:	b29b      	uxth	r3, r3
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	4619      	mov	r1, r3
 80059e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d15a      	bne.n	8005a9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0220 	bic.w	r2, r2, #32
 80059f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695a      	ldr	r2, [r3, #20]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0201 	bic.w	r2, r2, #1
 8005a16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d135      	bne.n	8005a94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	330c      	adds	r3, #12
 8005a34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	e853 3f00 	ldrex	r3, [r3]
 8005a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f023 0310 	bic.w	r3, r3, #16
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	330c      	adds	r3, #12
 8005a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a4e:	623a      	str	r2, [r7, #32]
 8005a50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a52:	69f9      	ldr	r1, [r7, #28]
 8005a54:	6a3a      	ldr	r2, [r7, #32]
 8005a56:	e841 2300 	strex	r3, r2, [r1]
 8005a5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1e5      	bne.n	8005a2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0310 	and.w	r3, r3, #16
 8005a6c:	2b10      	cmp	r3, #16
 8005a6e:	d10a      	bne.n	8005a86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7ff fcad 	bl	80053ec <HAL_UARTEx_RxEventCallback>
 8005a92:	e002      	b.n	8005a9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7fa fd13 	bl	80004c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	e002      	b.n	8005aa4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	e000      	b.n	8005aa4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005aa2:	2302      	movs	r3, #2
  }
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3730      	adds	r7, #48	; 0x30
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab0:	b09f      	sub	sp, #124	; 0x7c
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac2:	68d9      	ldr	r1, [r3, #12]
 8005ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	ea40 0301 	orr.w	r3, r0, r1
 8005acc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	431a      	orrs	r2, r3
 8005ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005af0:	f021 010c 	bic.w	r1, r1, #12
 8005af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005afa:	430b      	orrs	r3, r1
 8005afc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b0a:	6999      	ldr	r1, [r3, #24]
 8005b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	ea40 0301 	orr.w	r3, r0, r1
 8005b14:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	4bc5      	ldr	r3, [pc, #788]	; (8005e30 <UART_SetConfig+0x384>)
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d004      	beq.n	8005b2a <UART_SetConfig+0x7e>
 8005b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	4bc3      	ldr	r3, [pc, #780]	; (8005e34 <UART_SetConfig+0x388>)
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d103      	bne.n	8005b32 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b2a:	f7fd fdf3 	bl	8003714 <HAL_RCC_GetPCLK2Freq>
 8005b2e:	6778      	str	r0, [r7, #116]	; 0x74
 8005b30:	e002      	b.n	8005b38 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b32:	f7fd fddb 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 8005b36:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b40:	f040 80b6 	bne.w	8005cb0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b46:	461c      	mov	r4, r3
 8005b48:	f04f 0500 	mov.w	r5, #0
 8005b4c:	4622      	mov	r2, r4
 8005b4e:	462b      	mov	r3, r5
 8005b50:	1891      	adds	r1, r2, r2
 8005b52:	6439      	str	r1, [r7, #64]	; 0x40
 8005b54:	415b      	adcs	r3, r3
 8005b56:	647b      	str	r3, [r7, #68]	; 0x44
 8005b58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b5c:	1912      	adds	r2, r2, r4
 8005b5e:	eb45 0303 	adc.w	r3, r5, r3
 8005b62:	f04f 0000 	mov.w	r0, #0
 8005b66:	f04f 0100 	mov.w	r1, #0
 8005b6a:	00d9      	lsls	r1, r3, #3
 8005b6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b70:	00d0      	lsls	r0, r2, #3
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	1911      	adds	r1, r2, r4
 8005b78:	6639      	str	r1, [r7, #96]	; 0x60
 8005b7a:	416b      	adcs	r3, r5
 8005b7c:	667b      	str	r3, [r7, #100]	; 0x64
 8005b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f04f 0300 	mov.w	r3, #0
 8005b88:	1891      	adds	r1, r2, r2
 8005b8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b8c:	415b      	adcs	r3, r3
 8005b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b94:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005b98:	f7fa fb16 	bl	80001c8 <__aeabi_uldivmod>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4ba5      	ldr	r3, [pc, #660]	; (8005e38 <UART_SetConfig+0x38c>)
 8005ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ba6:	095b      	lsrs	r3, r3, #5
 8005ba8:	011e      	lsls	r6, r3, #4
 8005baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bac:	461c      	mov	r4, r3
 8005bae:	f04f 0500 	mov.w	r5, #0
 8005bb2:	4622      	mov	r2, r4
 8005bb4:	462b      	mov	r3, r5
 8005bb6:	1891      	adds	r1, r2, r2
 8005bb8:	6339      	str	r1, [r7, #48]	; 0x30
 8005bba:	415b      	adcs	r3, r3
 8005bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8005bbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005bc2:	1912      	adds	r2, r2, r4
 8005bc4:	eb45 0303 	adc.w	r3, r5, r3
 8005bc8:	f04f 0000 	mov.w	r0, #0
 8005bcc:	f04f 0100 	mov.w	r1, #0
 8005bd0:	00d9      	lsls	r1, r3, #3
 8005bd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bd6:	00d0      	lsls	r0, r2, #3
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	1911      	adds	r1, r2, r4
 8005bde:	65b9      	str	r1, [r7, #88]	; 0x58
 8005be0:	416b      	adcs	r3, r5
 8005be2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	461a      	mov	r2, r3
 8005bea:	f04f 0300 	mov.w	r3, #0
 8005bee:	1891      	adds	r1, r2, r2
 8005bf0:	62b9      	str	r1, [r7, #40]	; 0x28
 8005bf2:	415b      	adcs	r3, r3
 8005bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bfa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005bfe:	f7fa fae3 	bl	80001c8 <__aeabi_uldivmod>
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	4b8c      	ldr	r3, [pc, #560]	; (8005e38 <UART_SetConfig+0x38c>)
 8005c08:	fba3 1302 	umull	r1, r3, r3, r2
 8005c0c:	095b      	lsrs	r3, r3, #5
 8005c0e:	2164      	movs	r1, #100	; 0x64
 8005c10:	fb01 f303 	mul.w	r3, r1, r3
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	3332      	adds	r3, #50	; 0x32
 8005c1a:	4a87      	ldr	r2, [pc, #540]	; (8005e38 <UART_SetConfig+0x38c>)
 8005c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c20:	095b      	lsrs	r3, r3, #5
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c28:	441e      	add	r6, r3
 8005c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f04f 0100 	mov.w	r1, #0
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	1894      	adds	r4, r2, r2
 8005c38:	623c      	str	r4, [r7, #32]
 8005c3a:	415b      	adcs	r3, r3
 8005c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c42:	1812      	adds	r2, r2, r0
 8005c44:	eb41 0303 	adc.w	r3, r1, r3
 8005c48:	f04f 0400 	mov.w	r4, #0
 8005c4c:	f04f 0500 	mov.w	r5, #0
 8005c50:	00dd      	lsls	r5, r3, #3
 8005c52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c56:	00d4      	lsls	r4, r2, #3
 8005c58:	4622      	mov	r2, r4
 8005c5a:	462b      	mov	r3, r5
 8005c5c:	1814      	adds	r4, r2, r0
 8005c5e:	653c      	str	r4, [r7, #80]	; 0x50
 8005c60:	414b      	adcs	r3, r1
 8005c62:	657b      	str	r3, [r7, #84]	; 0x54
 8005c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	f04f 0300 	mov.w	r3, #0
 8005c6e:	1891      	adds	r1, r2, r2
 8005c70:	61b9      	str	r1, [r7, #24]
 8005c72:	415b      	adcs	r3, r3
 8005c74:	61fb      	str	r3, [r7, #28]
 8005c76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c7a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005c7e:	f7fa faa3 	bl	80001c8 <__aeabi_uldivmod>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	4b6c      	ldr	r3, [pc, #432]	; (8005e38 <UART_SetConfig+0x38c>)
 8005c88:	fba3 1302 	umull	r1, r3, r3, r2
 8005c8c:	095b      	lsrs	r3, r3, #5
 8005c8e:	2164      	movs	r1, #100	; 0x64
 8005c90:	fb01 f303 	mul.w	r3, r1, r3
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	3332      	adds	r3, #50	; 0x32
 8005c9a:	4a67      	ldr	r2, [pc, #412]	; (8005e38 <UART_SetConfig+0x38c>)
 8005c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca0:	095b      	lsrs	r3, r3, #5
 8005ca2:	f003 0207 	and.w	r2, r3, #7
 8005ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4432      	add	r2, r6
 8005cac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cae:	e0b9      	b.n	8005e24 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cb2:	461c      	mov	r4, r3
 8005cb4:	f04f 0500 	mov.w	r5, #0
 8005cb8:	4622      	mov	r2, r4
 8005cba:	462b      	mov	r3, r5
 8005cbc:	1891      	adds	r1, r2, r2
 8005cbe:	6139      	str	r1, [r7, #16]
 8005cc0:	415b      	adcs	r3, r3
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005cc8:	1912      	adds	r2, r2, r4
 8005cca:	eb45 0303 	adc.w	r3, r5, r3
 8005cce:	f04f 0000 	mov.w	r0, #0
 8005cd2:	f04f 0100 	mov.w	r1, #0
 8005cd6:	00d9      	lsls	r1, r3, #3
 8005cd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005cdc:	00d0      	lsls	r0, r2, #3
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	eb12 0804 	adds.w	r8, r2, r4
 8005ce6:	eb43 0905 	adc.w	r9, r3, r5
 8005cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f04f 0100 	mov.w	r1, #0
 8005cf4:	f04f 0200 	mov.w	r2, #0
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	008b      	lsls	r3, r1, #2
 8005cfe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d02:	0082      	lsls	r2, r0, #2
 8005d04:	4640      	mov	r0, r8
 8005d06:	4649      	mov	r1, r9
 8005d08:	f7fa fa5e 	bl	80001c8 <__aeabi_uldivmod>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4b49      	ldr	r3, [pc, #292]	; (8005e38 <UART_SetConfig+0x38c>)
 8005d12:	fba3 2302 	umull	r2, r3, r3, r2
 8005d16:	095b      	lsrs	r3, r3, #5
 8005d18:	011e      	lsls	r6, r3, #4
 8005d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f04f 0100 	mov.w	r1, #0
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	1894      	adds	r4, r2, r2
 8005d28:	60bc      	str	r4, [r7, #8]
 8005d2a:	415b      	adcs	r3, r3
 8005d2c:	60fb      	str	r3, [r7, #12]
 8005d2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d32:	1812      	adds	r2, r2, r0
 8005d34:	eb41 0303 	adc.w	r3, r1, r3
 8005d38:	f04f 0400 	mov.w	r4, #0
 8005d3c:	f04f 0500 	mov.w	r5, #0
 8005d40:	00dd      	lsls	r5, r3, #3
 8005d42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d46:	00d4      	lsls	r4, r2, #3
 8005d48:	4622      	mov	r2, r4
 8005d4a:	462b      	mov	r3, r5
 8005d4c:	1814      	adds	r4, r2, r0
 8005d4e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005d50:	414b      	adcs	r3, r1
 8005d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f04f 0100 	mov.w	r1, #0
 8005d5e:	f04f 0200 	mov.w	r2, #0
 8005d62:	f04f 0300 	mov.w	r3, #0
 8005d66:	008b      	lsls	r3, r1, #2
 8005d68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d6c:	0082      	lsls	r2, r0, #2
 8005d6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005d72:	f7fa fa29 	bl	80001c8 <__aeabi_uldivmod>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4b2f      	ldr	r3, [pc, #188]	; (8005e38 <UART_SetConfig+0x38c>)
 8005d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d80:	095b      	lsrs	r3, r3, #5
 8005d82:	2164      	movs	r1, #100	; 0x64
 8005d84:	fb01 f303 	mul.w	r3, r1, r3
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	3332      	adds	r3, #50	; 0x32
 8005d8e:	4a2a      	ldr	r2, [pc, #168]	; (8005e38 <UART_SetConfig+0x38c>)
 8005d90:	fba2 2303 	umull	r2, r3, r2, r3
 8005d94:	095b      	lsrs	r3, r3, #5
 8005d96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d9a:	441e      	add	r6, r3
 8005d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f04f 0100 	mov.w	r1, #0
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	1894      	adds	r4, r2, r2
 8005daa:	603c      	str	r4, [r7, #0]
 8005dac:	415b      	adcs	r3, r3
 8005dae:	607b      	str	r3, [r7, #4]
 8005db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005db4:	1812      	adds	r2, r2, r0
 8005db6:	eb41 0303 	adc.w	r3, r1, r3
 8005dba:	f04f 0400 	mov.w	r4, #0
 8005dbe:	f04f 0500 	mov.w	r5, #0
 8005dc2:	00dd      	lsls	r5, r3, #3
 8005dc4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005dc8:	00d4      	lsls	r4, r2, #3
 8005dca:	4622      	mov	r2, r4
 8005dcc:	462b      	mov	r3, r5
 8005dce:	eb12 0a00 	adds.w	sl, r2, r0
 8005dd2:	eb43 0b01 	adc.w	fp, r3, r1
 8005dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f04f 0100 	mov.w	r1, #0
 8005de0:	f04f 0200 	mov.w	r2, #0
 8005de4:	f04f 0300 	mov.w	r3, #0
 8005de8:	008b      	lsls	r3, r1, #2
 8005dea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005dee:	0082      	lsls	r2, r0, #2
 8005df0:	4650      	mov	r0, sl
 8005df2:	4659      	mov	r1, fp
 8005df4:	f7fa f9e8 	bl	80001c8 <__aeabi_uldivmod>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4b0e      	ldr	r3, [pc, #56]	; (8005e38 <UART_SetConfig+0x38c>)
 8005dfe:	fba3 1302 	umull	r1, r3, r3, r2
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	2164      	movs	r1, #100	; 0x64
 8005e06:	fb01 f303 	mul.w	r3, r1, r3
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	011b      	lsls	r3, r3, #4
 8005e0e:	3332      	adds	r3, #50	; 0x32
 8005e10:	4a09      	ldr	r2, [pc, #36]	; (8005e38 <UART_SetConfig+0x38c>)
 8005e12:	fba2 2303 	umull	r2, r3, r2, r3
 8005e16:	095b      	lsrs	r3, r3, #5
 8005e18:	f003 020f 	and.w	r2, r3, #15
 8005e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4432      	add	r2, r6
 8005e22:	609a      	str	r2, [r3, #8]
}
 8005e24:	bf00      	nop
 8005e26:	377c      	adds	r7, #124	; 0x7c
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e2e:	bf00      	nop
 8005e30:	40011000 	.word	0x40011000
 8005e34:	40011400 	.word	0x40011400
 8005e38:	51eb851f 	.word	0x51eb851f

08005e3c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	b480      	push	{r7}
 8005e40:	b085      	sub	sp, #20
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	f107 001c 	add.w	r0, r7, #28
 8005e4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005e52:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005e54:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005e56:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005e5a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005e5e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005e62:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005e66:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005e76:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	b004      	add	sp, #16
 8005e90:	4770      	bx	lr

08005e92 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b082      	sub	sp, #8
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2203      	movs	r2, #3
 8005eda:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005edc:	2002      	movs	r0, #2
 8005ede:	f7fa ff51 	bl	8000d84 <HAL_Delay>
  
  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0303 	and.w	r3, r3, #3
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005f12:	2300      	movs	r3, #0
 8005f14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005f26:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005f2c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005f32:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005f42:	f023 030f 	bic.w	r3, r3, #15
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	b2db      	uxtb	r3, r3
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b085      	sub	sp, #20
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3314      	adds	r3, #20
 8005f84:	461a      	mov	r2, r3
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	4413      	add	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
}  
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005fc2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005fc8:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005fce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fda:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	431a      	orrs	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0

}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b088      	sub	sp, #32
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006002:	2310      	movs	r3, #16
 8006004:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006006:	2340      	movs	r3, #64	; 0x40
 8006008:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800600a:	2300      	movs	r3, #0
 800600c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800600e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006012:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006014:	f107 0308 	add.w	r3, r7, #8
 8006018:	4619      	mov	r1, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff ff74 	bl	8005f08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006020:	f241 3288 	movw	r2, #5000	; 0x1388
 8006024:	2110      	movs	r1, #16
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fa44 	bl	80064b4 <SDMMC_GetCmdResp1>
 800602c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800602e:	69fb      	ldr	r3, [r7, #28]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3720      	adds	r7, #32
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b088      	sub	sp, #32
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006046:	2311      	movs	r3, #17
 8006048:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800604a:	2340      	movs	r3, #64	; 0x40
 800604c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800604e:	2300      	movs	r3, #0
 8006050:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006056:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006058:	f107 0308 	add.w	r3, r7, #8
 800605c:	4619      	mov	r1, r3
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7ff ff52 	bl	8005f08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006064:	f241 3288 	movw	r2, #5000	; 0x1388
 8006068:	2111      	movs	r1, #17
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fa22 	bl	80064b4 <SDMMC_GetCmdResp1>
 8006070:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006072:	69fb      	ldr	r3, [r7, #28]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3720      	adds	r7, #32
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b088      	sub	sp, #32
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800608a:	2312      	movs	r3, #18
 800608c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800608e:	2340      	movs	r3, #64	; 0x40
 8006090:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006092:	2300      	movs	r3, #0
 8006094:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800609a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800609c:	f107 0308 	add.w	r3, r7, #8
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7ff ff30 	bl	8005f08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80060a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ac:	2112      	movs	r1, #18
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fa00 	bl	80064b4 <SDMMC_GetCmdResp1>
 80060b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060b6:	69fb      	ldr	r3, [r7, #28]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3720      	adds	r7, #32
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b088      	sub	sp, #32
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80060ce:	2318      	movs	r3, #24
 80060d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060d2:	2340      	movs	r3, #64	; 0x40
 80060d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060d6:	2300      	movs	r3, #0
 80060d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060e0:	f107 0308 	add.w	r3, r7, #8
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7ff ff0e 	bl	8005f08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80060ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f0:	2118      	movs	r1, #24
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f9de 	bl	80064b4 <SDMMC_GetCmdResp1>
 80060f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060fa:	69fb      	ldr	r3, [r7, #28]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3720      	adds	r7, #32
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006112:	2319      	movs	r3, #25
 8006114:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006116:	2340      	movs	r3, #64	; 0x40
 8006118:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800611a:	2300      	movs	r3, #0
 800611c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800611e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006122:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006124:	f107 0308 	add.w	r3, r7, #8
 8006128:	4619      	mov	r1, r3
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7ff feec 	bl	8005f08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006130:	f241 3288 	movw	r2, #5000	; 0x1388
 8006134:	2119      	movs	r1, #25
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f9bc 	bl	80064b4 <SDMMC_GetCmdResp1>
 800613c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800613e:	69fb      	ldr	r3, [r7, #28]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3720      	adds	r7, #32
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b088      	sub	sp, #32
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006154:	230c      	movs	r3, #12
 8006156:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006158:	2340      	movs	r3, #64	; 0x40
 800615a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800615c:	2300      	movs	r3, #0
 800615e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006164:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006166:	f107 0308 	add.w	r3, r7, #8
 800616a:	4619      	mov	r1, r3
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7ff fecb 	bl	8005f08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006172:	4a05      	ldr	r2, [pc, #20]	; (8006188 <SDMMC_CmdStopTransfer+0x40>)
 8006174:	210c      	movs	r1, #12
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f99c 	bl	80064b4 <SDMMC_GetCmdResp1>
 800617c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800617e:	69fb      	ldr	r3, [r7, #28]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3720      	adds	r7, #32
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	05f5e100 	.word	0x05f5e100

0800618c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08a      	sub	sp, #40	; 0x28
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800619c:	2307      	movs	r3, #7
 800619e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061a0:	2340      	movs	r3, #64	; 0x40
 80061a2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061a4:	2300      	movs	r3, #0
 80061a6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061ac:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061ae:	f107 0310 	add.w	r3, r7, #16
 80061b2:	4619      	mov	r1, r3
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f7ff fea7 	bl	8005f08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80061ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80061be:	2107      	movs	r1, #7
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 f977 	bl	80064b4 <SDMMC_GetCmdResp1>
 80061c6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3728      	adds	r7, #40	; 0x28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b088      	sub	sp, #32
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80061de:	2300      	movs	r3, #0
 80061e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80061e2:	2300      	movs	r3, #0
 80061e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061e6:	2300      	movs	r3, #0
 80061e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061f0:	f107 0308 	add.w	r3, r7, #8
 80061f4:	4619      	mov	r1, r3
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7ff fe86 	bl	8005f08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f92d 	bl	800645c <SDMMC_GetCmdError>
 8006202:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006204:	69fb      	ldr	r3, [r7, #28]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3720      	adds	r7, #32
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b088      	sub	sp, #32
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006216:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800621a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800621c:	2308      	movs	r3, #8
 800621e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006220:	2340      	movs	r3, #64	; 0x40
 8006222:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006224:	2300      	movs	r3, #0
 8006226:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800622c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800622e:	f107 0308 	add.w	r3, r7, #8
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7ff fe67 	bl	8005f08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fb24 	bl	8006888 <SDMMC_GetCmdResp7>
 8006240:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006242:	69fb      	ldr	r3, [r7, #28]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3720      	adds	r7, #32
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800625a:	2337      	movs	r3, #55	; 0x37
 800625c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800625e:	2340      	movs	r3, #64	; 0x40
 8006260:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006262:	2300      	movs	r3, #0
 8006264:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800626a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800626c:	f107 0308 	add.w	r3, r7, #8
 8006270:	4619      	mov	r1, r3
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7ff fe48 	bl	8005f08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006278:	f241 3288 	movw	r2, #5000	; 0x1388
 800627c:	2137      	movs	r1, #55	; 0x37
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f918 	bl	80064b4 <SDMMC_GetCmdResp1>
 8006284:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006286:	69fb      	ldr	r3, [r7, #28]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3720      	adds	r7, #32
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80062a6:	2329      	movs	r3, #41	; 0x29
 80062a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062aa:	2340      	movs	r3, #64	; 0x40
 80062ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062ae:	2300      	movs	r3, #0
 80062b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062b8:	f107 0308 	add.w	r3, r7, #8
 80062bc:	4619      	mov	r1, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff fe22 	bl	8005f08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fa2b 	bl	8006720 <SDMMC_GetCmdResp3>
 80062ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062cc:	69fb      	ldr	r3, [r7, #28]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3720      	adds	r7, #32
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b088      	sub	sp, #32
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80062e4:	2306      	movs	r3, #6
 80062e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062e8:	2340      	movs	r3, #64	; 0x40
 80062ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062ec:	2300      	movs	r3, #0
 80062ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062f6:	f107 0308 	add.w	r3, r7, #8
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff fe03 	bl	8005f08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006302:	f241 3288 	movw	r2, #5000	; 0x1388
 8006306:	2106      	movs	r1, #6
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f8d3 	bl	80064b4 <SDMMC_GetCmdResp1>
 800630e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006310:	69fb      	ldr	r3, [r7, #28]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3720      	adds	r7, #32
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b088      	sub	sp, #32
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006326:	2333      	movs	r3, #51	; 0x33
 8006328:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800632a:	2340      	movs	r3, #64	; 0x40
 800632c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800632e:	2300      	movs	r3, #0
 8006330:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006336:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006338:	f107 0308 	add.w	r3, r7, #8
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7ff fde2 	bl	8005f08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006344:	f241 3288 	movw	r2, #5000	; 0x1388
 8006348:	2133      	movs	r1, #51	; 0x33
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f8b2 	bl	80064b4 <SDMMC_GetCmdResp1>
 8006350:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006352:	69fb      	ldr	r3, [r7, #28]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3720      	adds	r7, #32
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006368:	2302      	movs	r3, #2
 800636a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800636c:	23c0      	movs	r3, #192	; 0xc0
 800636e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006370:	2300      	movs	r3, #0
 8006372:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006378:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800637a:	f107 0308 	add.w	r3, r7, #8
 800637e:	4619      	mov	r1, r3
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7ff fdc1 	bl	8005f08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f982 	bl	8006690 <SDMMC_GetCmdResp2>
 800638c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800638e:	69fb      	ldr	r3, [r7, #28]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3720      	adds	r7, #32
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b088      	sub	sp, #32
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80063a6:	2309      	movs	r3, #9
 80063a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80063aa:	23c0      	movs	r3, #192	; 0xc0
 80063ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063ae:	2300      	movs	r3, #0
 80063b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063b8:	f107 0308 	add.w	r3, r7, #8
 80063bc:	4619      	mov	r1, r3
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff fda2 	bl	8005f08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f963 	bl	8006690 <SDMMC_GetCmdResp2>
 80063ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063cc:	69fb      	ldr	r3, [r7, #28]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3720      	adds	r7, #32
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b088      	sub	sp, #32
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80063e4:	2303      	movs	r3, #3
 80063e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80063e8:	2340      	movs	r3, #64	; 0x40
 80063ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063ec:	2300      	movs	r3, #0
 80063ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063f6:	f107 0308 	add.w	r3, r7, #8
 80063fa:	4619      	mov	r1, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff fd83 	bl	8005f08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	2103      	movs	r1, #3
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f9c8 	bl	800679c <SDMMC_GetCmdResp6>
 800640c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800640e:	69fb      	ldr	r3, [r7, #28]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3720      	adds	r7, #32
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b088      	sub	sp, #32
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006426:	230d      	movs	r3, #13
 8006428:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800642a:	2340      	movs	r3, #64	; 0x40
 800642c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800642e:	2300      	movs	r3, #0
 8006430:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006436:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006438:	f107 0308 	add.w	r3, r7, #8
 800643c:	4619      	mov	r1, r3
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7ff fd62 	bl	8005f08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006444:	f241 3288 	movw	r2, #5000	; 0x1388
 8006448:	210d      	movs	r1, #13
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f832 	bl	80064b4 <SDMMC_GetCmdResp1>
 8006450:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006452:	69fb      	ldr	r3, [r7, #28]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3720      	adds	r7, #32
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006464:	4b11      	ldr	r3, [pc, #68]	; (80064ac <SDMMC_GetCmdError+0x50>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a11      	ldr	r2, [pc, #68]	; (80064b0 <SDMMC_GetCmdError+0x54>)
 800646a:	fba2 2303 	umull	r2, r3, r2, r3
 800646e:	0a5b      	lsrs	r3, r3, #9
 8006470:	f241 3288 	movw	r2, #5000	; 0x1388
 8006474:	fb02 f303 	mul.w	r3, r2, r3
 8006478:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	1e5a      	subs	r2, r3, #1
 800647e:	60fa      	str	r2, [r7, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d102      	bne.n	800648a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006484:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006488:	e009      	b.n	800649e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006492:	2b00      	cmp	r3, #0
 8006494:	d0f1      	beq.n	800647a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	22c5      	movs	r2, #197	; 0xc5
 800649a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	20000000 	.word	0x20000000
 80064b0:	10624dd3 	.word	0x10624dd3

080064b4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b088      	sub	sp, #32
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	460b      	mov	r3, r1
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80064c2:	4b70      	ldr	r3, [pc, #448]	; (8006684 <SDMMC_GetCmdResp1+0x1d0>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a70      	ldr	r2, [pc, #448]	; (8006688 <SDMMC_GetCmdResp1+0x1d4>)
 80064c8:	fba2 2303 	umull	r2, r3, r2, r3
 80064cc:	0a5a      	lsrs	r2, r3, #9
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	fb02 f303 	mul.w	r3, r2, r3
 80064d4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	1e5a      	subs	r2, r3, #1
 80064da:	61fa      	str	r2, [r7, #28]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d102      	bne.n	80064e6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80064e4:	e0c9      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ea:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0ef      	beq.n	80064d6 <SDMMC_GetCmdResp1+0x22>
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1ea      	bne.n	80064d6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006504:	f003 0304 	and.w	r3, r3, #4
 8006508:	2b00      	cmp	r3, #0
 800650a:	d004      	beq.n	8006516 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2204      	movs	r2, #4
 8006510:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006512:	2304      	movs	r3, #4
 8006514:	e0b1      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d004      	beq.n	800652c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2201      	movs	r2, #1
 8006526:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006528:	2301      	movs	r3, #1
 800652a:	e0a6      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	22c5      	movs	r2, #197	; 0xc5
 8006530:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f7ff fd12 	bl	8005f5c <SDIO_GetCommandResponse>
 8006538:	4603      	mov	r3, r0
 800653a:	461a      	mov	r2, r3
 800653c:	7afb      	ldrb	r3, [r7, #11]
 800653e:	4293      	cmp	r3, r2
 8006540:	d001      	beq.n	8006546 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006542:	2301      	movs	r3, #1
 8006544:	e099      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006546:	2100      	movs	r1, #0
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f7ff fd14 	bl	8005f76 <SDIO_GetResponse>
 800654e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	4b4e      	ldr	r3, [pc, #312]	; (800668c <SDMMC_GetCmdResp1+0x1d8>)
 8006554:	4013      	ands	r3, r2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800655a:	2300      	movs	r3, #0
 800655c:	e08d      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	da02      	bge.n	800656a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006564:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006568:	e087      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006574:	2340      	movs	r3, #64	; 0x40
 8006576:	e080      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006582:	2380      	movs	r3, #128	; 0x80
 8006584:	e079      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006594:	e071      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80065a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065a4:	e069      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80065b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065b4:	e061      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80065c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065c4:	e059      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80065d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065d4:	e051      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80065e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065e4:	e049      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80065f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80065f4:	e041      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006604:	e039      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d002      	beq.n	8006616 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006610:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006614:	e031      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006620:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006624:	e029      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006630:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006634:	e021      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006640:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006644:	e019      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006650:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006654:	e011      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d002      	beq.n	8006666 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006660:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006664:	e009      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f003 0308 	and.w	r3, r3, #8
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006670:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006674:	e001      	b.n	800667a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800667a:	4618      	mov	r0, r3
 800667c:	3720      	adds	r7, #32
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	20000000 	.word	0x20000000
 8006688:	10624dd3 	.word	0x10624dd3
 800668c:	fdffe008 	.word	0xfdffe008

08006690 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006698:	4b1f      	ldr	r3, [pc, #124]	; (8006718 <SDMMC_GetCmdResp2+0x88>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a1f      	ldr	r2, [pc, #124]	; (800671c <SDMMC_GetCmdResp2+0x8c>)
 800669e:	fba2 2303 	umull	r2, r3, r2, r3
 80066a2:	0a5b      	lsrs	r3, r3, #9
 80066a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a8:	fb02 f303 	mul.w	r3, r2, r3
 80066ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	1e5a      	subs	r2, r3, #1
 80066b2:	60fa      	str	r2, [r7, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d102      	bne.n	80066be <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066bc:	e026      	b.n	800670c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0ef      	beq.n	80066ae <SDMMC_GetCmdResp2+0x1e>
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1ea      	bne.n	80066ae <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d004      	beq.n	80066ee <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2204      	movs	r2, #4
 80066e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066ea:	2304      	movs	r3, #4
 80066ec:	e00e      	b.n	800670c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d004      	beq.n	8006704 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006700:	2301      	movs	r3, #1
 8006702:	e003      	b.n	800670c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	22c5      	movs	r2, #197	; 0xc5
 8006708:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	20000000 	.word	0x20000000
 800671c:	10624dd3 	.word	0x10624dd3

08006720 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006728:	4b1a      	ldr	r3, [pc, #104]	; (8006794 <SDMMC_GetCmdResp3+0x74>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a1a      	ldr	r2, [pc, #104]	; (8006798 <SDMMC_GetCmdResp3+0x78>)
 800672e:	fba2 2303 	umull	r2, r3, r2, r3
 8006732:	0a5b      	lsrs	r3, r3, #9
 8006734:	f241 3288 	movw	r2, #5000	; 0x1388
 8006738:	fb02 f303 	mul.w	r3, r2, r3
 800673c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	1e5a      	subs	r2, r3, #1
 8006742:	60fa      	str	r2, [r7, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d102      	bne.n	800674e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006748:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800674c:	e01b      	b.n	8006786 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006752:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800675a:	2b00      	cmp	r3, #0
 800675c:	d0ef      	beq.n	800673e <SDMMC_GetCmdResp3+0x1e>
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1ea      	bne.n	800673e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	d004      	beq.n	800677e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2204      	movs	r2, #4
 8006778:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800677a:	2304      	movs	r3, #4
 800677c:	e003      	b.n	8006786 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	22c5      	movs	r2, #197	; 0xc5
 8006782:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	20000000 	.word	0x20000000
 8006798:	10624dd3 	.word	0x10624dd3

0800679c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	460b      	mov	r3, r1
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80067aa:	4b35      	ldr	r3, [pc, #212]	; (8006880 <SDMMC_GetCmdResp6+0xe4>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a35      	ldr	r2, [pc, #212]	; (8006884 <SDMMC_GetCmdResp6+0xe8>)
 80067b0:	fba2 2303 	umull	r2, r3, r2, r3
 80067b4:	0a5b      	lsrs	r3, r3, #9
 80067b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ba:	fb02 f303 	mul.w	r3, r2, r3
 80067be:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	1e5a      	subs	r2, r3, #1
 80067c4:	61fa      	str	r2, [r7, #28]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d102      	bne.n	80067d0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80067ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80067ce:	e052      	b.n	8006876 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0ef      	beq.n	80067c0 <SDMMC_GetCmdResp6+0x24>
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1ea      	bne.n	80067c0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ee:	f003 0304 	and.w	r3, r3, #4
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d004      	beq.n	8006800 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2204      	movs	r2, #4
 80067fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80067fc:	2304      	movs	r3, #4
 80067fe:	e03a      	b.n	8006876 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b00      	cmp	r3, #0
 800680a:	d004      	beq.n	8006816 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2201      	movs	r2, #1
 8006810:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006812:	2301      	movs	r3, #1
 8006814:	e02f      	b.n	8006876 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f7ff fba0 	bl	8005f5c <SDIO_GetCommandResponse>
 800681c:	4603      	mov	r3, r0
 800681e:	461a      	mov	r2, r3
 8006820:	7afb      	ldrb	r3, [r7, #11]
 8006822:	4293      	cmp	r3, r2
 8006824:	d001      	beq.n	800682a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006826:	2301      	movs	r3, #1
 8006828:	e025      	b.n	8006876 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	22c5      	movs	r2, #197	; 0xc5
 800682e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006830:	2100      	movs	r1, #0
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f7ff fb9f 	bl	8005f76 <SDIO_GetResponse>
 8006838:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d106      	bne.n	8006852 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	0c1b      	lsrs	r3, r3, #16
 8006848:	b29a      	uxth	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800684e:	2300      	movs	r3, #0
 8006850:	e011      	b.n	8006876 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800685c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006860:	e009      	b.n	8006876 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800686c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006870:	e001      	b.n	8006876 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006872:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006876:	4618      	mov	r0, r3
 8006878:	3720      	adds	r7, #32
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	20000000 	.word	0x20000000
 8006884:	10624dd3 	.word	0x10624dd3

08006888 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006890:	4b22      	ldr	r3, [pc, #136]	; (800691c <SDMMC_GetCmdResp7+0x94>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a22      	ldr	r2, [pc, #136]	; (8006920 <SDMMC_GetCmdResp7+0x98>)
 8006896:	fba2 2303 	umull	r2, r3, r2, r3
 800689a:	0a5b      	lsrs	r3, r3, #9
 800689c:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a0:	fb02 f303 	mul.w	r3, r2, r3
 80068a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	1e5a      	subs	r2, r3, #1
 80068aa:	60fa      	str	r2, [r7, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d102      	bne.n	80068b6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80068b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80068b4:	e02c      	b.n	8006910 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d0ef      	beq.n	80068a6 <SDMMC_GetCmdResp7+0x1e>
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1ea      	bne.n	80068a6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d004      	beq.n	80068e6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2204      	movs	r2, #4
 80068e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80068e2:	2304      	movs	r3, #4
 80068e4:	e014      	b.n	8006910 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d004      	beq.n	80068fc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e009      	b.n	8006910 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2240      	movs	r2, #64	; 0x40
 800690c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800690e:	2300      	movs	r3, #0
  
}
 8006910:	4618      	mov	r0, r3
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	20000000 	.word	0x20000000
 8006920:	10624dd3 	.word	0x10624dd3

08006924 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006924:	b084      	sub	sp, #16
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	f107 001c 	add.w	r0, r7, #28
 8006932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	2b01      	cmp	r3, #1
 800693a:	d122      	bne.n	8006982 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006966:	2b01      	cmp	r3, #1
 8006968:	d105      	bne.n	8006976 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f001 fb1c 	bl	8007fb4 <USB_CoreReset>
 800697c:	4603      	mov	r3, r0
 800697e:	73fb      	strb	r3, [r7, #15]
 8006980:	e01a      	b.n	80069b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f001 fb10 	bl	8007fb4 <USB_CoreReset>
 8006994:	4603      	mov	r3, r0
 8006996:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	d106      	bne.n	80069ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	639a      	str	r2, [r3, #56]	; 0x38
 80069aa:	e005      	b.n	80069b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d10b      	bne.n	80069d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f043 0206 	orr.w	r2, r3, #6
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f043 0220 	orr.w	r2, r3, #32
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069e2:	b004      	add	sp, #16
 80069e4:	4770      	bx	lr
	...

080069e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	4613      	mov	r3, r2
 80069f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80069f6:	79fb      	ldrb	r3, [r7, #7]
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d165      	bne.n	8006ac8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	4a41      	ldr	r2, [pc, #260]	; (8006b04 <USB_SetTurnaroundTime+0x11c>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d906      	bls.n	8006a12 <USB_SetTurnaroundTime+0x2a>
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	4a40      	ldr	r2, [pc, #256]	; (8006b08 <USB_SetTurnaroundTime+0x120>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d202      	bcs.n	8006a12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006a0c:	230f      	movs	r3, #15
 8006a0e:	617b      	str	r3, [r7, #20]
 8006a10:	e062      	b.n	8006ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	4a3c      	ldr	r2, [pc, #240]	; (8006b08 <USB_SetTurnaroundTime+0x120>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d306      	bcc.n	8006a28 <USB_SetTurnaroundTime+0x40>
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	4a3b      	ldr	r2, [pc, #236]	; (8006b0c <USB_SetTurnaroundTime+0x124>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d202      	bcs.n	8006a28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006a22:	230e      	movs	r3, #14
 8006a24:	617b      	str	r3, [r7, #20]
 8006a26:	e057      	b.n	8006ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4a38      	ldr	r2, [pc, #224]	; (8006b0c <USB_SetTurnaroundTime+0x124>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d306      	bcc.n	8006a3e <USB_SetTurnaroundTime+0x56>
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	4a37      	ldr	r2, [pc, #220]	; (8006b10 <USB_SetTurnaroundTime+0x128>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d202      	bcs.n	8006a3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006a38:	230d      	movs	r3, #13
 8006a3a:	617b      	str	r3, [r7, #20]
 8006a3c:	e04c      	b.n	8006ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	4a33      	ldr	r2, [pc, #204]	; (8006b10 <USB_SetTurnaroundTime+0x128>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d306      	bcc.n	8006a54 <USB_SetTurnaroundTime+0x6c>
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	4a32      	ldr	r2, [pc, #200]	; (8006b14 <USB_SetTurnaroundTime+0x12c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d802      	bhi.n	8006a54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006a4e:	230c      	movs	r3, #12
 8006a50:	617b      	str	r3, [r7, #20]
 8006a52:	e041      	b.n	8006ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	4a2f      	ldr	r2, [pc, #188]	; (8006b14 <USB_SetTurnaroundTime+0x12c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d906      	bls.n	8006a6a <USB_SetTurnaroundTime+0x82>
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	4a2e      	ldr	r2, [pc, #184]	; (8006b18 <USB_SetTurnaroundTime+0x130>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d802      	bhi.n	8006a6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006a64:	230b      	movs	r3, #11
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	e036      	b.n	8006ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	4a2a      	ldr	r2, [pc, #168]	; (8006b18 <USB_SetTurnaroundTime+0x130>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d906      	bls.n	8006a80 <USB_SetTurnaroundTime+0x98>
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	4a29      	ldr	r2, [pc, #164]	; (8006b1c <USB_SetTurnaroundTime+0x134>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d802      	bhi.n	8006a80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006a7a:	230a      	movs	r3, #10
 8006a7c:	617b      	str	r3, [r7, #20]
 8006a7e:	e02b      	b.n	8006ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	4a26      	ldr	r2, [pc, #152]	; (8006b1c <USB_SetTurnaroundTime+0x134>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d906      	bls.n	8006a96 <USB_SetTurnaroundTime+0xae>
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	4a25      	ldr	r2, [pc, #148]	; (8006b20 <USB_SetTurnaroundTime+0x138>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d202      	bcs.n	8006a96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006a90:	2309      	movs	r3, #9
 8006a92:	617b      	str	r3, [r7, #20]
 8006a94:	e020      	b.n	8006ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	4a21      	ldr	r2, [pc, #132]	; (8006b20 <USB_SetTurnaroundTime+0x138>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d306      	bcc.n	8006aac <USB_SetTurnaroundTime+0xc4>
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	4a20      	ldr	r2, [pc, #128]	; (8006b24 <USB_SetTurnaroundTime+0x13c>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d802      	bhi.n	8006aac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006aa6:	2308      	movs	r3, #8
 8006aa8:	617b      	str	r3, [r7, #20]
 8006aaa:	e015      	b.n	8006ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	4a1d      	ldr	r2, [pc, #116]	; (8006b24 <USB_SetTurnaroundTime+0x13c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d906      	bls.n	8006ac2 <USB_SetTurnaroundTime+0xda>
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4a1c      	ldr	r2, [pc, #112]	; (8006b28 <USB_SetTurnaroundTime+0x140>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d202      	bcs.n	8006ac2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006abc:	2307      	movs	r3, #7
 8006abe:	617b      	str	r3, [r7, #20]
 8006ac0:	e00a      	b.n	8006ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006ac2:	2306      	movs	r3, #6
 8006ac4:	617b      	str	r3, [r7, #20]
 8006ac6:	e007      	b.n	8006ad8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006ac8:	79fb      	ldrb	r3, [r7, #7]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d102      	bne.n	8006ad4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006ace:	2309      	movs	r3, #9
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	e001      	b.n	8006ad8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006ad4:	2309      	movs	r3, #9
 8006ad6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	68da      	ldr	r2, [r3, #12]
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	029b      	lsls	r3, r3, #10
 8006aec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006af0:	431a      	orrs	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	371c      	adds	r7, #28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	00d8acbf 	.word	0x00d8acbf
 8006b08:	00e4e1c0 	.word	0x00e4e1c0
 8006b0c:	00f42400 	.word	0x00f42400
 8006b10:	01067380 	.word	0x01067380
 8006b14:	011a499f 	.word	0x011a499f
 8006b18:	01312cff 	.word	0x01312cff
 8006b1c:	014ca43f 	.word	0x014ca43f
 8006b20:	016e3600 	.word	0x016e3600
 8006b24:	01a6ab1f 	.word	0x01a6ab1f
 8006b28:	01e84800 	.word	0x01e84800

08006b2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f043 0201 	orr.w	r2, r3, #1
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b083      	sub	sp, #12
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f023 0201 	bic.w	r2, r3, #1
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b8c:	78fb      	ldrb	r3, [r7, #3]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d115      	bne.n	8006bbe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b9e:	2001      	movs	r0, #1
 8006ba0:	f7fa f8f0 	bl	8000d84 <HAL_Delay>
      ms++;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f001 f972 	bl	8007e94 <USB_GetMode>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d01e      	beq.n	8006bf4 <USB_SetCurrentMode+0x84>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b31      	cmp	r3, #49	; 0x31
 8006bba:	d9f0      	bls.n	8006b9e <USB_SetCurrentMode+0x2e>
 8006bbc:	e01a      	b.n	8006bf4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006bbe:	78fb      	ldrb	r3, [r7, #3]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d115      	bne.n	8006bf0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006bd0:	2001      	movs	r0, #1
 8006bd2:	f7fa f8d7 	bl	8000d84 <HAL_Delay>
      ms++;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f001 f959 	bl	8007e94 <USB_GetMode>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d005      	beq.n	8006bf4 <USB_SetCurrentMode+0x84>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2b31      	cmp	r3, #49	; 0x31
 8006bec:	d9f0      	bls.n	8006bd0 <USB_SetCurrentMode+0x60>
 8006bee:	e001      	b.n	8006bf4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e005      	b.n	8006c00 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b32      	cmp	r3, #50	; 0x32
 8006bf8:	d101      	bne.n	8006bfe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e000      	b.n	8006c00 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c08:	b084      	sub	sp, #16
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b086      	sub	sp, #24
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c22:	2300      	movs	r3, #0
 8006c24:	613b      	str	r3, [r7, #16]
 8006c26:	e009      	b.n	8006c3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	3340      	adds	r3, #64	; 0x40
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	2200      	movs	r2, #0
 8006c34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	613b      	str	r3, [r7, #16]
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	2b0e      	cmp	r3, #14
 8006c40:	d9f2      	bls.n	8006c28 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d11c      	bne.n	8006c82 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c56:	f043 0302 	orr.w	r3, r3, #2
 8006c5a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c78:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	639a      	str	r2, [r3, #56]	; 0x38
 8006c80:	e00b      	b.n	8006c9a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c86:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cac:	4619      	mov	r1, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	680b      	ldr	r3, [r1, #0]
 8006cb8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d10c      	bne.n	8006cda <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d104      	bne.n	8006cd0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f945 	bl	8006f58 <USB_SetDevSpeed>
 8006cce:	e008      	b.n	8006ce2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006cd0:	2101      	movs	r1, #1
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f940 	bl	8006f58 <USB_SetDevSpeed>
 8006cd8:	e003      	b.n	8006ce2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006cda:	2103      	movs	r1, #3
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f93b 	bl	8006f58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ce2:	2110      	movs	r1, #16
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 f8f3 	bl	8006ed0 <USB_FlushTxFifo>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f90f 	bl	8006f18 <USB_FlushRxFifo>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d16:	461a      	mov	r2, r3
 8006d18:	2300      	movs	r3, #0
 8006d1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d22:	461a      	mov	r2, r3
 8006d24:	2300      	movs	r3, #0
 8006d26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d28:	2300      	movs	r3, #0
 8006d2a:	613b      	str	r3, [r7, #16]
 8006d2c:	e043      	b.n	8006db6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d44:	d118      	bne.n	8006d78 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10a      	bne.n	8006d62 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d58:	461a      	mov	r2, r3
 8006d5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d5e:	6013      	str	r3, [r2, #0]
 8006d60:	e013      	b.n	8006d8a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6e:	461a      	mov	r2, r3
 8006d70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	e008      	b.n	8006d8a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d84:	461a      	mov	r2, r3
 8006d86:	2300      	movs	r3, #0
 8006d88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d96:	461a      	mov	r2, r3
 8006d98:	2300      	movs	r3, #0
 8006d9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da8:	461a      	mov	r2, r3
 8006daa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006dae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	3301      	adds	r3, #1
 8006db4:	613b      	str	r3, [r7, #16]
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d3b7      	bcc.n	8006d2e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	613b      	str	r3, [r7, #16]
 8006dc2:	e043      	b.n	8006e4c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dda:	d118      	bne.n	8006e0e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10a      	bne.n	8006df8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dee:	461a      	mov	r2, r3
 8006df0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	e013      	b.n	8006e20 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e04:	461a      	mov	r2, r3
 8006e06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	e008      	b.n	8006e20 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	2300      	movs	r3, #0
 8006e30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3e:	461a      	mov	r2, r3
 8006e40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	613b      	str	r3, [r7, #16]
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d3b7      	bcc.n	8006dc4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d105      	bne.n	8006e88 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	f043 0210 	orr.w	r2, r3, #16
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	699a      	ldr	r2, [r3, #24]
 8006e8c:	4b0f      	ldr	r3, [pc, #60]	; (8006ecc <USB_DevInit+0x2c4>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d005      	beq.n	8006ea6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	f043 0208 	orr.w	r2, r3, #8
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d107      	bne.n	8006ebc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006eb4:	f043 0304 	orr.w	r3, r3, #4
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3718      	adds	r7, #24
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ec8:	b004      	add	sp, #16
 8006eca:	4770      	bx	lr
 8006ecc:	803c3800 	.word	0x803c3800

08006ed0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	019b      	lsls	r3, r3, #6
 8006ee2:	f043 0220 	orr.w	r2, r3, #32
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3301      	adds	r3, #1
 8006eee:	60fb      	str	r3, [r7, #12]
 8006ef0:	4a08      	ldr	r2, [pc, #32]	; (8006f14 <USB_FlushTxFifo+0x44>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d901      	bls.n	8006efa <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e006      	b.n	8006f08 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	f003 0320 	and.w	r3, r3, #32
 8006f02:	2b20      	cmp	r3, #32
 8006f04:	d0f1      	beq.n	8006eea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3714      	adds	r7, #20
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	00030d40 	.word	0x00030d40

08006f18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2210      	movs	r2, #16
 8006f28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	4a08      	ldr	r2, [pc, #32]	; (8006f54 <USB_FlushRxFifo+0x3c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d901      	bls.n	8006f3a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e006      	b.n	8006f48 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	f003 0310 	and.w	r3, r3, #16
 8006f42:	2b10      	cmp	r3, #16
 8006f44:	d0f1      	beq.n	8006f2a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	00030d40 	.word	0x00030d40

08006f58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	460b      	mov	r3, r1
 8006f62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	78fb      	ldrb	r3, [r7, #3]
 8006f72:	68f9      	ldr	r1, [r7, #12]
 8006f74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b087      	sub	sp, #28
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f003 0306 	and.w	r3, r3, #6
 8006fa2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d102      	bne.n	8006fb0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006faa:	2300      	movs	r3, #0
 8006fac:	75fb      	strb	r3, [r7, #23]
 8006fae:	e00a      	b.n	8006fc6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d002      	beq.n	8006fbc <USB_GetDevSpeed+0x32>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2b06      	cmp	r3, #6
 8006fba:	d102      	bne.n	8006fc2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	75fb      	strb	r3, [r7, #23]
 8006fc0:	e001      	b.n	8006fc6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006fc2:	230f      	movs	r3, #15
 8006fc4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	371c      	adds	r7, #28
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	785b      	ldrb	r3, [r3, #1]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d13a      	bne.n	8007066 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff6:	69da      	ldr	r2, [r3, #28]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	f003 030f 	and.w	r3, r3, #15
 8007000:	2101      	movs	r1, #1
 8007002:	fa01 f303 	lsl.w	r3, r1, r3
 8007006:	b29b      	uxth	r3, r3
 8007008:	68f9      	ldr	r1, [r7, #12]
 800700a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800700e:	4313      	orrs	r3, r2
 8007010:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d155      	bne.n	80070d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	78db      	ldrb	r3, [r3, #3]
 8007042:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007044:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	059b      	lsls	r3, r3, #22
 800704a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800704c:	4313      	orrs	r3, r2
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	0151      	lsls	r1, r2, #5
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	440a      	add	r2, r1
 8007056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800705a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800705e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007062:	6013      	str	r3, [r2, #0]
 8007064:	e036      	b.n	80070d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800706c:	69da      	ldr	r2, [r3, #28]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	f003 030f 	and.w	r3, r3, #15
 8007076:	2101      	movs	r1, #1
 8007078:	fa01 f303 	lsl.w	r3, r1, r3
 800707c:	041b      	lsls	r3, r3, #16
 800707e:	68f9      	ldr	r1, [r7, #12]
 8007080:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007084:	4313      	orrs	r3, r2
 8007086:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d11a      	bne.n	80070d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	78db      	ldrb	r3, [r3, #3]
 80070b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80070ba:	430b      	orrs	r3, r1
 80070bc:	4313      	orrs	r3, r2
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	0151      	lsls	r1, r2, #5
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	440a      	add	r2, r1
 80070c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
	...

080070e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	785b      	ldrb	r3, [r3, #1]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d161      	bne.n	80071c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007112:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007116:	d11f      	bne.n	8007158 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4413      	add	r3, r2
 8007120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	0151      	lsls	r1, r2, #5
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	440a      	add	r2, r1
 800712e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007132:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007136:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	0151      	lsls	r1, r2, #5
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	440a      	add	r2, r1
 800714e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007152:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007156:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800715e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	f003 030f 	and.w	r3, r3, #15
 8007168:	2101      	movs	r1, #1
 800716a:	fa01 f303 	lsl.w	r3, r1, r3
 800716e:	b29b      	uxth	r3, r3
 8007170:	43db      	mvns	r3, r3
 8007172:	68f9      	ldr	r1, [r7, #12]
 8007174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007178:	4013      	ands	r3, r2
 800717a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007182:	69da      	ldr	r2, [r3, #28]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	f003 030f 	and.w	r3, r3, #15
 800718c:	2101      	movs	r1, #1
 800718e:	fa01 f303 	lsl.w	r3, r1, r3
 8007192:	b29b      	uxth	r3, r3
 8007194:	43db      	mvns	r3, r3
 8007196:	68f9      	ldr	r1, [r7, #12]
 8007198:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800719c:	4013      	ands	r3, r2
 800719e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	0159      	lsls	r1, r3, #5
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	440b      	add	r3, r1
 80071b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ba:	4619      	mov	r1, r3
 80071bc:	4b35      	ldr	r3, [pc, #212]	; (8007294 <USB_DeactivateEndpoint+0x1b0>)
 80071be:	4013      	ands	r3, r2
 80071c0:	600b      	str	r3, [r1, #0]
 80071c2:	e060      	b.n	8007286 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071da:	d11f      	bne.n	800721c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	0151      	lsls	r1, r2, #5
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	440a      	add	r2, r1
 80071f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	0151      	lsls	r1, r2, #5
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	440a      	add	r2, r1
 8007212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007216:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800721a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	f003 030f 	and.w	r3, r3, #15
 800722c:	2101      	movs	r1, #1
 800722e:	fa01 f303 	lsl.w	r3, r1, r3
 8007232:	041b      	lsls	r3, r3, #16
 8007234:	43db      	mvns	r3, r3
 8007236:	68f9      	ldr	r1, [r7, #12]
 8007238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800723c:	4013      	ands	r3, r2
 800723e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007246:	69da      	ldr	r2, [r3, #28]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	f003 030f 	and.w	r3, r3, #15
 8007250:	2101      	movs	r1, #1
 8007252:	fa01 f303 	lsl.w	r3, r1, r3
 8007256:	041b      	lsls	r3, r3, #16
 8007258:	43db      	mvns	r3, r3
 800725a:	68f9      	ldr	r1, [r7, #12]
 800725c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007260:	4013      	ands	r3, r2
 8007262:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	0159      	lsls	r1, r3, #5
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	440b      	add	r3, r1
 800727a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727e:	4619      	mov	r1, r3
 8007280:	4b05      	ldr	r3, [pc, #20]	; (8007298 <USB_DeactivateEndpoint+0x1b4>)
 8007282:	4013      	ands	r3, r2
 8007284:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	ec337800 	.word	0xec337800
 8007298:	eff37800 	.word	0xeff37800

0800729c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b08a      	sub	sp, #40	; 0x28
 80072a0:	af02      	add	r7, sp, #8
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	4613      	mov	r3, r2
 80072a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	785b      	ldrb	r3, [r3, #1]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	f040 815c 	bne.w	8007576 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d132      	bne.n	800732c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	0151      	lsls	r1, r2, #5
 80072d8:	69fa      	ldr	r2, [r7, #28]
 80072da:	440a      	add	r2, r1
 80072dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	69ba      	ldr	r2, [r7, #24]
 80072fa:	0151      	lsls	r1, r2, #5
 80072fc:	69fa      	ldr	r2, [r7, #28]
 80072fe:	440a      	add	r2, r1
 8007300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007304:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007308:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	69ba      	ldr	r2, [r7, #24]
 800731a:	0151      	lsls	r1, r2, #5
 800731c:	69fa      	ldr	r2, [r7, #28]
 800731e:	440a      	add	r2, r1
 8007320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007324:	0cdb      	lsrs	r3, r3, #19
 8007326:	04db      	lsls	r3, r3, #19
 8007328:	6113      	str	r3, [r2, #16]
 800732a:	e074      	b.n	8007416 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	4413      	add	r3, r2
 8007334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	69ba      	ldr	r2, [r7, #24]
 800733c:	0151      	lsls	r1, r2, #5
 800733e:	69fa      	ldr	r2, [r7, #28]
 8007340:	440a      	add	r2, r1
 8007342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007346:	0cdb      	lsrs	r3, r3, #19
 8007348:	04db      	lsls	r3, r3, #19
 800734a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	4413      	add	r3, r2
 8007354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	69ba      	ldr	r2, [r7, #24]
 800735c:	0151      	lsls	r1, r2, #5
 800735e:	69fa      	ldr	r2, [r7, #28]
 8007360:	440a      	add	r2, r1
 8007362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007366:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800736a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800736e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800737c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	6959      	ldr	r1, [r3, #20]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	440b      	add	r3, r1
 8007388:	1e59      	subs	r1, r3, #1
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007392:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007394:	4b9d      	ldr	r3, [pc, #628]	; (800760c <USB_EPStartXfer+0x370>)
 8007396:	400b      	ands	r3, r1
 8007398:	69b9      	ldr	r1, [r7, #24]
 800739a:	0148      	lsls	r0, r1, #5
 800739c:	69f9      	ldr	r1, [r7, #28]
 800739e:	4401      	add	r1, r0
 80073a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80073a4:	4313      	orrs	r3, r2
 80073a6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b4:	691a      	ldr	r2, [r3, #16]
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073be:	69b9      	ldr	r1, [r7, #24]
 80073c0:	0148      	lsls	r0, r1, #5
 80073c2:	69f9      	ldr	r1, [r7, #28]
 80073c4:	4401      	add	r1, r0
 80073c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80073ca:	4313      	orrs	r3, r2
 80073cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	78db      	ldrb	r3, [r3, #3]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d11f      	bne.n	8007416 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	015a      	lsls	r2, r3, #5
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	0151      	lsls	r1, r2, #5
 80073e8:	69fa      	ldr	r2, [r7, #28]
 80073ea:	440a      	add	r2, r1
 80073ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80073f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	69ba      	ldr	r2, [r7, #24]
 8007406:	0151      	lsls	r1, r2, #5
 8007408:	69fa      	ldr	r2, [r7, #28]
 800740a:	440a      	add	r2, r1
 800740c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007410:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007414:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007416:	79fb      	ldrb	r3, [r7, #7]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d14b      	bne.n	80074b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d009      	beq.n	8007438 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007430:	461a      	mov	r2, r3
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	78db      	ldrb	r3, [r3, #3]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d128      	bne.n	8007492 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800744c:	2b00      	cmp	r3, #0
 800744e:	d110      	bne.n	8007472 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	4413      	add	r3, r2
 8007458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69ba      	ldr	r2, [r7, #24]
 8007460:	0151      	lsls	r1, r2, #5
 8007462:	69fa      	ldr	r2, [r7, #28]
 8007464:	440a      	add	r2, r1
 8007466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800746a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800746e:	6013      	str	r3, [r2, #0]
 8007470:	e00f      	b.n	8007492 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	4413      	add	r3, r2
 800747a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	0151      	lsls	r1, r2, #5
 8007484:	69fa      	ldr	r2, [r7, #28]
 8007486:	440a      	add	r2, r1
 8007488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800748c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007490:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	0151      	lsls	r1, r2, #5
 80074a4:	69fa      	ldr	r2, [r7, #28]
 80074a6:	440a      	add	r2, r1
 80074a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074b0:	6013      	str	r3, [r2, #0]
 80074b2:	e12f      	b.n	8007714 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	0151      	lsls	r1, r2, #5
 80074c6:	69fa      	ldr	r2, [r7, #28]
 80074c8:	440a      	add	r2, r1
 80074ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	78db      	ldrb	r3, [r3, #3]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d015      	beq.n	8007508 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 8117 	beq.w	8007714 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	f003 030f 	and.w	r3, r3, #15
 80074f6:	2101      	movs	r1, #1
 80074f8:	fa01 f303 	lsl.w	r3, r1, r3
 80074fc:	69f9      	ldr	r1, [r7, #28]
 80074fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007502:	4313      	orrs	r3, r2
 8007504:	634b      	str	r3, [r1, #52]	; 0x34
 8007506:	e105      	b.n	8007714 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007514:	2b00      	cmp	r3, #0
 8007516:	d110      	bne.n	800753a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	015a      	lsls	r2, r3, #5
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	4413      	add	r3, r2
 8007520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	69ba      	ldr	r2, [r7, #24]
 8007528:	0151      	lsls	r1, r2, #5
 800752a:	69fa      	ldr	r2, [r7, #28]
 800752c:	440a      	add	r2, r1
 800752e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007532:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	e00f      	b.n	800755a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	015a      	lsls	r2, r3, #5
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	4413      	add	r3, r2
 8007542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	0151      	lsls	r1, r2, #5
 800754c:	69fa      	ldr	r2, [r7, #28]
 800754e:	440a      	add	r2, r1
 8007550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007558:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	68d9      	ldr	r1, [r3, #12]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	781a      	ldrb	r2, [r3, #0]
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	b298      	uxth	r0, r3
 8007568:	79fb      	ldrb	r3, [r7, #7]
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	4603      	mov	r3, r0
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f000 fa2b 	bl	80079ca <USB_WritePacket>
 8007574:	e0ce      	b.n	8007714 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	0151      	lsls	r1, r2, #5
 8007588:	69fa      	ldr	r2, [r7, #28]
 800758a:	440a      	add	r2, r1
 800758c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007590:	0cdb      	lsrs	r3, r3, #19
 8007592:	04db      	lsls	r3, r3, #19
 8007594:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	4413      	add	r3, r2
 800759e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	0151      	lsls	r1, r2, #5
 80075a8:	69fa      	ldr	r2, [r7, #28]
 80075aa:	440a      	add	r2, r1
 80075ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d126      	bne.n	8007610 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ce:	691a      	ldr	r2, [r3, #16]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075d8:	69b9      	ldr	r1, [r7, #24]
 80075da:	0148      	lsls	r0, r1, #5
 80075dc:	69f9      	ldr	r1, [r7, #28]
 80075de:	4401      	add	r1, r0
 80075e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075e4:	4313      	orrs	r3, r2
 80075e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	0151      	lsls	r1, r2, #5
 80075fa:	69fa      	ldr	r2, [r7, #28]
 80075fc:	440a      	add	r2, r1
 80075fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007602:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007606:	6113      	str	r3, [r2, #16]
 8007608:	e036      	b.n	8007678 <USB_EPStartXfer+0x3dc>
 800760a:	bf00      	nop
 800760c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	695a      	ldr	r2, [r3, #20]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	4413      	add	r3, r2
 800761a:	1e5a      	subs	r2, r3, #1
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	fbb2 f3f3 	udiv	r3, r2, r3
 8007624:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	015a      	lsls	r2, r3, #5
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	4413      	add	r3, r2
 800762e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007632:	691a      	ldr	r2, [r3, #16]
 8007634:	8afb      	ldrh	r3, [r7, #22]
 8007636:	04d9      	lsls	r1, r3, #19
 8007638:	4b39      	ldr	r3, [pc, #228]	; (8007720 <USB_EPStartXfer+0x484>)
 800763a:	400b      	ands	r3, r1
 800763c:	69b9      	ldr	r1, [r7, #24]
 800763e:	0148      	lsls	r0, r1, #5
 8007640:	69f9      	ldr	r1, [r7, #28]
 8007642:	4401      	add	r1, r0
 8007644:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007648:	4313      	orrs	r3, r2
 800764a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	4413      	add	r3, r2
 8007654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007658:	691a      	ldr	r2, [r3, #16]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	8af9      	ldrh	r1, [r7, #22]
 8007660:	fb01 f303 	mul.w	r3, r1, r3
 8007664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007668:	69b9      	ldr	r1, [r7, #24]
 800766a:	0148      	lsls	r0, r1, #5
 800766c:	69f9      	ldr	r1, [r7, #28]
 800766e:	4401      	add	r1, r0
 8007670:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007674:	4313      	orrs	r3, r2
 8007676:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d10d      	bne.n	800769a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d009      	beq.n	800769a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	68d9      	ldr	r1, [r3, #12]
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007696:	460a      	mov	r2, r1
 8007698:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	78db      	ldrb	r3, [r3, #3]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d128      	bne.n	80076f4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d110      	bne.n	80076d4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	015a      	lsls	r2, r3, #5
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	0151      	lsls	r1, r2, #5
 80076c4:	69fa      	ldr	r2, [r7, #28]
 80076c6:	440a      	add	r2, r1
 80076c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076d0:	6013      	str	r3, [r2, #0]
 80076d2:	e00f      	b.n	80076f4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	015a      	lsls	r2, r3, #5
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	4413      	add	r3, r2
 80076dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	69ba      	ldr	r2, [r7, #24]
 80076e4:	0151      	lsls	r1, r2, #5
 80076e6:	69fa      	ldr	r2, [r7, #28]
 80076e8:	440a      	add	r2, r1
 80076ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	0151      	lsls	r1, r2, #5
 8007706:	69fa      	ldr	r2, [r7, #28]
 8007708:	440a      	add	r2, r1
 800770a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800770e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007712:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3720      	adds	r7, #32
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	1ff80000 	.word	0x1ff80000

08007724 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	4613      	mov	r3, r2
 8007730:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	785b      	ldrb	r3, [r3, #1]
 8007740:	2b01      	cmp	r3, #1
 8007742:	f040 80cd 	bne.w	80078e0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d132      	bne.n	80077b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	015a      	lsls	r2, r3, #5
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	4413      	add	r3, r2
 8007756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	0151      	lsls	r1, r2, #5
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	440a      	add	r2, r1
 8007764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007768:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800776c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007770:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	4413      	add	r3, r2
 800777a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	0151      	lsls	r1, r2, #5
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	440a      	add	r2, r1
 8007788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800778c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007790:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	015a      	lsls	r2, r3, #5
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	4413      	add	r3, r2
 800779a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	0151      	lsls	r1, r2, #5
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	440a      	add	r2, r1
 80077a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ac:	0cdb      	lsrs	r3, r3, #19
 80077ae:	04db      	lsls	r3, r3, #19
 80077b0:	6113      	str	r3, [r2, #16]
 80077b2:	e04e      	b.n	8007852 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	0151      	lsls	r1, r2, #5
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	440a      	add	r2, r1
 80077ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ce:	0cdb      	lsrs	r3, r3, #19
 80077d0:	04db      	lsls	r3, r3, #19
 80077d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	0151      	lsls	r1, r2, #5
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	440a      	add	r2, r1
 80077ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80077f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80077f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	695a      	ldr	r2, [r3, #20]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	429a      	cmp	r2, r3
 8007802:	d903      	bls.n	800780c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	689a      	ldr	r2, [r3, #8]
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	015a      	lsls	r2, r3, #5
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	4413      	add	r3, r2
 8007814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	0151      	lsls	r1, r2, #5
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	440a      	add	r2, r1
 8007822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007826:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800782a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007838:	691a      	ldr	r2, [r3, #16]
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007842:	6939      	ldr	r1, [r7, #16]
 8007844:	0148      	lsls	r0, r1, #5
 8007846:	6979      	ldr	r1, [r7, #20]
 8007848:	4401      	add	r1, r0
 800784a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800784e:	4313      	orrs	r3, r2
 8007850:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007852:	79fb      	ldrb	r3, [r7, #7]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d11e      	bne.n	8007896 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d009      	beq.n	8007874 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800786c:	461a      	mov	r2, r3
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	015a      	lsls	r2, r3, #5
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	4413      	add	r3, r2
 800787c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	693a      	ldr	r2, [r7, #16]
 8007884:	0151      	lsls	r1, r2, #5
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	440a      	add	r2, r1
 800788a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800788e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007892:	6013      	str	r3, [r2, #0]
 8007894:	e092      	b.n	80079bc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	015a      	lsls	r2, r3, #5
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	4413      	add	r3, r2
 800789e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	0151      	lsls	r1, r2, #5
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	440a      	add	r2, r1
 80078ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80078b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d07e      	beq.n	80079bc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	f003 030f 	and.w	r3, r3, #15
 80078ce:	2101      	movs	r1, #1
 80078d0:	fa01 f303 	lsl.w	r3, r1, r3
 80078d4:	6979      	ldr	r1, [r7, #20]
 80078d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078da:	4313      	orrs	r3, r2
 80078dc:	634b      	str	r3, [r1, #52]	; 0x34
 80078de:	e06d      	b.n	80079bc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	015a      	lsls	r2, r3, #5
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	0151      	lsls	r1, r2, #5
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	440a      	add	r2, r1
 80078f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078fa:	0cdb      	lsrs	r3, r3, #19
 80078fc:	04db      	lsls	r3, r3, #19
 80078fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	4413      	add	r3, r2
 8007908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	0151      	lsls	r1, r2, #5
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	440a      	add	r2, r1
 8007916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800791a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800791e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007922:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	695b      	ldr	r3, [r3, #20]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	689a      	ldr	r2, [r3, #8]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	0151      	lsls	r1, r2, #5
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	440a      	add	r2, r1
 800794a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800794e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007952:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	4413      	add	r3, r2
 800795c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007960:	691a      	ldr	r2, [r3, #16]
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800796a:	6939      	ldr	r1, [r7, #16]
 800796c:	0148      	lsls	r0, r1, #5
 800796e:	6979      	ldr	r1, [r7, #20]
 8007970:	4401      	add	r1, r0
 8007972:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007976:	4313      	orrs	r3, r2
 8007978:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800797a:	79fb      	ldrb	r3, [r7, #7]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d10d      	bne.n	800799c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d009      	beq.n	800799c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	68d9      	ldr	r1, [r3, #12]
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007998:	460a      	mov	r2, r1
 800799a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	0151      	lsls	r1, r2, #5
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	440a      	add	r2, r1
 80079b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	371c      	adds	r7, #28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b089      	sub	sp, #36	; 0x24
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	60f8      	str	r0, [r7, #12]
 80079d2:	60b9      	str	r1, [r7, #8]
 80079d4:	4611      	mov	r1, r2
 80079d6:	461a      	mov	r2, r3
 80079d8:	460b      	mov	r3, r1
 80079da:	71fb      	strb	r3, [r7, #7]
 80079dc:	4613      	mov	r3, r2
 80079de:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80079e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d123      	bne.n	8007a38 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80079f0:	88bb      	ldrh	r3, [r7, #4]
 80079f2:	3303      	adds	r3, #3
 80079f4:	089b      	lsrs	r3, r3, #2
 80079f6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80079f8:	2300      	movs	r3, #0
 80079fa:	61bb      	str	r3, [r7, #24]
 80079fc:	e018      	b.n	8007a30 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80079fe:	79fb      	ldrb	r3, [r7, #7]
 8007a00:	031a      	lsls	r2, r3, #12
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	3301      	adds	r3, #1
 8007a16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	3301      	adds	r3, #1
 8007a22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	3301      	adds	r3, #1
 8007a28:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	61bb      	str	r3, [r7, #24]
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d3e2      	bcc.n	80079fe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3724      	adds	r7, #36	; 0x24
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b08b      	sub	sp, #44	; 0x2c
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	60f8      	str	r0, [r7, #12]
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	4613      	mov	r3, r2
 8007a52:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007a5c:	88fb      	ldrh	r3, [r7, #6]
 8007a5e:	089b      	lsrs	r3, r3, #2
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007a64:	88fb      	ldrh	r3, [r7, #6]
 8007a66:	f003 0303 	and.w	r3, r3, #3
 8007a6a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	623b      	str	r3, [r7, #32]
 8007a70:	e014      	b.n	8007a9c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a80:	3301      	adds	r3, #1
 8007a82:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	3301      	adds	r3, #1
 8007a88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	3301      	adds	r3, #1
 8007a94:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	623b      	str	r3, [r7, #32]
 8007a9c:	6a3a      	ldr	r2, [r7, #32]
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d3e6      	bcc.n	8007a72 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007aa4:	8bfb      	ldrh	r3, [r7, #30]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d01e      	beq.n	8007ae8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	f107 0310 	add.w	r3, r7, #16
 8007aba:	6812      	ldr	r2, [r2, #0]
 8007abc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	00db      	lsls	r3, r3, #3
 8007ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	701a      	strb	r2, [r3, #0]
      i++;
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	623b      	str	r3, [r7, #32]
      pDest++;
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	3301      	adds	r3, #1
 8007ada:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007adc:	8bfb      	ldrh	r3, [r7, #30]
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007ae2:	8bfb      	ldrh	r3, [r7, #30]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1ea      	bne.n	8007abe <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	372c      	adds	r7, #44	; 0x2c
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007af6:	b480      	push	{r7}
 8007af8:	b085      	sub	sp, #20
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	785b      	ldrb	r3, [r3, #1]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d12c      	bne.n	8007b6c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	015a      	lsls	r2, r3, #5
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4413      	add	r3, r2
 8007b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	db12      	blt.n	8007b4a <USB_EPSetStall+0x54>
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00f      	beq.n	8007b4a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	015a      	lsls	r2, r3, #5
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	4413      	add	r3, r2
 8007b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	0151      	lsls	r1, r2, #5
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	440a      	add	r2, r1
 8007b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b48:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	015a      	lsls	r2, r3, #5
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	4413      	add	r3, r2
 8007b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	0151      	lsls	r1, r2, #5
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	440a      	add	r2, r1
 8007b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b68:	6013      	str	r3, [r2, #0]
 8007b6a:	e02b      	b.n	8007bc4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	db12      	blt.n	8007ba4 <USB_EPSetStall+0xae>
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00f      	beq.n	8007ba4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	015a      	lsls	r2, r3, #5
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	0151      	lsls	r1, r2, #5
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	440a      	add	r2, r1
 8007b9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ba2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	015a      	lsls	r2, r3, #5
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	4413      	add	r3, r2
 8007bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	0151      	lsls	r1, r2, #5
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	440a      	add	r2, r1
 8007bba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b085      	sub	sp, #20
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	785b      	ldrb	r3, [r3, #1]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d128      	bne.n	8007c40 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	015a      	lsls	r2, r3, #5
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	0151      	lsls	r1, r2, #5
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	440a      	add	r2, r1
 8007c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	78db      	ldrb	r3, [r3, #3]
 8007c12:	2b03      	cmp	r3, #3
 8007c14:	d003      	beq.n	8007c1e <USB_EPClearStall+0x4c>
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	78db      	ldrb	r3, [r3, #3]
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d138      	bne.n	8007c90 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	0151      	lsls	r1, r2, #5
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	440a      	add	r2, r1
 8007c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c3c:	6013      	str	r3, [r2, #0]
 8007c3e:	e027      	b.n	8007c90 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	015a      	lsls	r2, r3, #5
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	0151      	lsls	r1, r2, #5
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	440a      	add	r2, r1
 8007c56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	78db      	ldrb	r3, [r3, #3]
 8007c64:	2b03      	cmp	r3, #3
 8007c66:	d003      	beq.n	8007c70 <USB_EPClearStall+0x9e>
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	78db      	ldrb	r3, [r3, #3]
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d10f      	bne.n	8007c90 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	015a      	lsls	r2, r3, #5
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	4413      	add	r3, r2
 8007c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	0151      	lsls	r1, r2, #5
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	440a      	add	r2, r1
 8007c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c8e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b085      	sub	sp, #20
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cbc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007cc0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	78fb      	ldrb	r3, [r7, #3]
 8007ccc:	011b      	lsls	r3, r3, #4
 8007cce:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007cd2:	68f9      	ldr	r1, [r7, #12]
 8007cd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b085      	sub	sp, #20
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d04:	f023 0303 	bic.w	r3, r3, #3
 8007d08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d18:	f023 0302 	bic.w	r3, r3, #2
 8007d1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d46:	f023 0303 	bic.w	r3, r3, #3
 8007d4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d5a:	f043 0302 	orr.w	r3, r3, #2
 8007d5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3714      	adds	r7, #20
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b085      	sub	sp, #20
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	4013      	ands	r3, r2
 8007d84:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d86:	68fb      	ldr	r3, [r7, #12]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3714      	adds	r7, #20
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	4013      	ands	r3, r2
 8007db6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	0c1b      	lsrs	r3, r3, #16
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3714      	adds	r7, #20
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	4013      	ands	r3, r2
 8007dea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	b29b      	uxth	r3, r3
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	460b      	mov	r3, r1
 8007e06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e0c:	78fb      	ldrb	r3, [r7, #3]
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	68ba      	ldr	r2, [r7, #8]
 8007e26:	4013      	ands	r3, r2
 8007e28:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e2a:	68bb      	ldr	r3, [r7, #8]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b087      	sub	sp, #28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e5a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e5c:	78fb      	ldrb	r3, [r7, #3]
 8007e5e:	f003 030f 	and.w	r3, r3, #15
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	fa22 f303 	lsr.w	r3, r2, r3
 8007e68:	01db      	lsls	r3, r3, #7
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e72:	78fb      	ldrb	r3, [r7, #3]
 8007e74:	015a      	lsls	r2, r3, #5
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	4413      	add	r3, r2
 8007e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	4013      	ands	r3, r2
 8007e84:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e86:	68bb      	ldr	r3, [r7, #8]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	371c      	adds	r7, #28
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	f003 0301 	and.w	r3, r3, #1
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007ece:	f023 0307 	bic.w	r3, r3, #7
 8007ed2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ee6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
	...

08007ef8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b087      	sub	sp, #28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	460b      	mov	r3, r1
 8007f02:	607a      	str	r2, [r7, #4]
 8007f04:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	333c      	adds	r3, #60	; 0x3c
 8007f0e:	3304      	adds	r3, #4
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	4a26      	ldr	r2, [pc, #152]	; (8007fb0 <USB_EP0_OutStart+0xb8>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d90a      	bls.n	8007f32 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f2c:	d101      	bne.n	8007f32 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	e037      	b.n	8007fa2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f38:	461a      	mov	r2, r3
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f60:	f043 0318 	orr.w	r3, r3, #24
 8007f64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f74:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007f78:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007f7a:	7afb      	ldrb	r3, [r7, #11]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d10f      	bne.n	8007fa0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f86:	461a      	mov	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f9a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007f9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	371c      	adds	r7, #28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	4f54300a 	.word	0x4f54300a

08007fb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	60fb      	str	r3, [r7, #12]
 8007fc6:	4a13      	ldr	r2, [pc, #76]	; (8008014 <USB_CoreReset+0x60>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d901      	bls.n	8007fd0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e01a      	b.n	8008006 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	daf3      	bge.n	8007fc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	f043 0201 	orr.w	r2, r3, #1
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	3301      	adds	r3, #1
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	4a09      	ldr	r2, [pc, #36]	; (8008014 <USB_CoreReset+0x60>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d901      	bls.n	8007ff8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e006      	b.n	8008006 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b01      	cmp	r3, #1
 8008002:	d0f1      	beq.n	8007fe8 <USB_CoreReset+0x34>

  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	00030d40 	.word	0x00030d40

08008018 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800801c:	4904      	ldr	r1, [pc, #16]	; (8008030 <MX_FATFS_Init+0x18>)
 800801e:	4805      	ldr	r0, [pc, #20]	; (8008034 <MX_FATFS_Init+0x1c>)
 8008020:	f001 ff30 	bl	8009e84 <FATFS_LinkDriver>
 8008024:	4603      	mov	r3, r0
 8008026:	461a      	mov	r2, r3
 8008028:	4b03      	ldr	r3, [pc, #12]	; (8008038 <MX_FATFS_Init+0x20>)
 800802a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800802c:	bf00      	nop
 800802e:	bd80      	pop	{r7, pc}
 8008030:	200007c4 	.word	0x200007c4
 8008034:	0800aa38 	.word	0x0800aa38
 8008038:	200007c0 	.word	0x200007c0

0800803c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008046:	f000 f896 	bl	8008176 <BSP_SD_IsDetected>
 800804a:	4603      	mov	r3, r0
 800804c:	2b01      	cmp	r3, #1
 800804e:	d001      	beq.n	8008054 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e012      	b.n	800807a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008054:	480b      	ldr	r0, [pc, #44]	; (8008084 <BSP_SD_Init+0x48>)
 8008056:	f7fb fb71 	bl	800373c <HAL_SD_Init>
 800805a:	4603      	mov	r3, r0
 800805c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800805e:	79fb      	ldrb	r3, [r7, #7]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d109      	bne.n	8008078 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8008064:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008068:	4806      	ldr	r0, [pc, #24]	; (8008084 <BSP_SD_Init+0x48>)
 800806a:	f7fc f93d 	bl	80042e8 <HAL_SD_ConfigWideBusOperation>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d001      	beq.n	8008078 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008078:	79fb      	ldrb	r3, [r7, #7]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	20000738 	.word	0x20000738

08008088 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	68f9      	ldr	r1, [r7, #12]
 800809e:	4806      	ldr	r0, [pc, #24]	; (80080b8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80080a0:	f7fb fbfa 	bl	8003898 <HAL_SD_ReadBlocks_DMA>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80080ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3718      	adds	r7, #24
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	20000738 	.word	0x20000738

080080bc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80080c8:	2300      	movs	r3, #0
 80080ca:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	68f9      	ldr	r1, [r7, #12]
 80080d2:	4806      	ldr	r0, [pc, #24]	; (80080ec <BSP_SD_WriteBlocks_DMA+0x30>)
 80080d4:	f7fb fcc2 	bl	8003a5c <HAL_SD_WriteBlocks_DMA>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80080e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3718      	adds	r7, #24
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	20000738 	.word	0x20000738

080080f0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80080f4:	4805      	ldr	r0, [pc, #20]	; (800810c <BSP_SD_GetCardState+0x1c>)
 80080f6:	f7fc f991 	bl	800441c <HAL_SD_GetCardState>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b04      	cmp	r3, #4
 80080fe:	bf14      	ite	ne
 8008100:	2301      	movne	r3, #1
 8008102:	2300      	moveq	r3, #0
 8008104:	b2db      	uxtb	r3, r3
}
 8008106:	4618      	mov	r0, r3
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	20000738 	.word	0x20000738

08008110 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008118:	6879      	ldr	r1, [r7, #4]
 800811a:	4803      	ldr	r0, [pc, #12]	; (8008128 <BSP_SD_GetCardInfo+0x18>)
 800811c:	f7fc f8b8 	bl	8004290 <HAL_SD_GetCardInfo>
}
 8008120:	bf00      	nop
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	20000738 	.word	0x20000738

0800812c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008134:	f000 f818 	bl	8008168 <BSP_SD_AbortCallback>
}
 8008138:	bf00      	nop
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008148:	f000 f9a8 	bl	800849c <BSP_SD_WriteCpltCallback>
}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800815c:	f000 f9aa 	bl	80084b4 <BSP_SD_ReadCpltCallback>
}
 8008160:	bf00      	nop
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008168:	b480      	push	{r7}
 800816a:	af00      	add	r7, sp, #0

}
 800816c:	bf00      	nop
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800817c:	2301      	movs	r3, #1
 800817e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008180:	f000 f80c 	bl	800819c <BSP_PlatformIsDetected>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d101      	bne.n	800818e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800818a:	2300      	movs	r3, #0
 800818c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800818e:	79fb      	ldrb	r3, [r7, #7]
 8008190:	b2db      	uxtb	r3, r3
}
 8008192:	4618      	mov	r0, r3
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
	...

0800819c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80081a2:	2301      	movs	r3, #1
 80081a4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80081a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80081aa:	4806      	ldr	r0, [pc, #24]	; (80081c4 <BSP_PlatformIsDetected+0x28>)
 80081ac:	f7f9 fcca 	bl	8001b44 <HAL_GPIO_ReadPin>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80081b6:	2300      	movs	r3, #0
 80081b8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80081ba:	79fb      	ldrb	r3, [r7, #7]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	40020400 	.word	0x40020400

080081c8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80081d0:	f7f8 fdcc 	bl	8000d6c <HAL_GetTick>
 80081d4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80081d6:	e006      	b.n	80081e6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80081d8:	f7ff ff8a 	bl	80080f0 <BSP_SD_GetCardState>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d101      	bne.n	80081e6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	e009      	b.n	80081fa <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80081e6:	f7f8 fdc1 	bl	8000d6c <HAL_GetTick>
 80081ea:	4602      	mov	r2, r0
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d8f0      	bhi.n	80081d8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80081f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
	...

08008204 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	4603      	mov	r3, r0
 800820c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800820e:	4b0b      	ldr	r3, [pc, #44]	; (800823c <SD_CheckStatus+0x38>)
 8008210:	2201      	movs	r2, #1
 8008212:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008214:	f7ff ff6c 	bl	80080f0 <BSP_SD_GetCardState>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d107      	bne.n	800822e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800821e:	4b07      	ldr	r3, [pc, #28]	; (800823c <SD_CheckStatus+0x38>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	b2db      	uxtb	r3, r3
 8008224:	f023 0301 	bic.w	r3, r3, #1
 8008228:	b2da      	uxtb	r2, r3
 800822a:	4b04      	ldr	r3, [pc, #16]	; (800823c <SD_CheckStatus+0x38>)
 800822c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800822e:	4b03      	ldr	r3, [pc, #12]	; (800823c <SD_CheckStatus+0x38>)
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	b2db      	uxtb	r3, r3
}
 8008234:	4618      	mov	r0, r3
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	20000009 	.word	0x20000009

08008240 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800824a:	f7ff fef7 	bl	800803c <BSP_SD_Init>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d107      	bne.n	8008264 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8008254:	79fb      	ldrb	r3, [r7, #7]
 8008256:	4618      	mov	r0, r3
 8008258:	f7ff ffd4 	bl	8008204 <SD_CheckStatus>
 800825c:	4603      	mov	r3, r0
 800825e:	461a      	mov	r2, r3
 8008260:	4b04      	ldr	r3, [pc, #16]	; (8008274 <SD_initialize+0x34>)
 8008262:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008264:	4b03      	ldr	r3, [pc, #12]	; (8008274 <SD_initialize+0x34>)
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	b2db      	uxtb	r3, r3
}
 800826a:	4618      	mov	r0, r3
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	20000009 	.word	0x20000009

08008278 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	4603      	mov	r3, r0
 8008280:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008282:	79fb      	ldrb	r3, [r7, #7]
 8008284:	4618      	mov	r0, r3
 8008286:	f7ff ffbd 	bl	8008204 <SD_CheckStatus>
 800828a:	4603      	mov	r3, r0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	60b9      	str	r1, [r7, #8]
 800829c:	607a      	str	r2, [r7, #4]
 800829e:	603b      	str	r3, [r7, #0]
 80082a0:	4603      	mov	r3, r0
 80082a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80082a8:	f247 5030 	movw	r0, #30000	; 0x7530
 80082ac:	f7ff ff8c 	bl	80081c8 <SD_CheckStatusWithTimeout>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	da01      	bge.n	80082ba <SD_read+0x26>
  {
    return res;
 80082b6:	7dfb      	ldrb	r3, [r7, #23]
 80082b8:	e03b      	b.n	8008332 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	6879      	ldr	r1, [r7, #4]
 80082be:	68b8      	ldr	r0, [r7, #8]
 80082c0:	f7ff fee2 	bl	8008088 <BSP_SD_ReadBlocks_DMA>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d132      	bne.n	8008330 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80082ca:	4b1c      	ldr	r3, [pc, #112]	; (800833c <SD_read+0xa8>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80082d0:	f7f8 fd4c 	bl	8000d6c <HAL_GetTick>
 80082d4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80082d6:	bf00      	nop
 80082d8:	4b18      	ldr	r3, [pc, #96]	; (800833c <SD_read+0xa8>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d108      	bne.n	80082f2 <SD_read+0x5e>
 80082e0:	f7f8 fd44 	bl	8000d6c <HAL_GetTick>
 80082e4:	4602      	mov	r2, r0
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	f247 522f 	movw	r2, #29999	; 0x752f
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d9f2      	bls.n	80082d8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80082f2:	4b12      	ldr	r3, [pc, #72]	; (800833c <SD_read+0xa8>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d102      	bne.n	8008300 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	75fb      	strb	r3, [r7, #23]
 80082fe:	e017      	b.n	8008330 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8008300:	4b0e      	ldr	r3, [pc, #56]	; (800833c <SD_read+0xa8>)
 8008302:	2200      	movs	r2, #0
 8008304:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008306:	f7f8 fd31 	bl	8000d6c <HAL_GetTick>
 800830a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800830c:	e007      	b.n	800831e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800830e:	f7ff feef 	bl	80080f0 <BSP_SD_GetCardState>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d102      	bne.n	800831e <SD_read+0x8a>
          {
            res = RES_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800831c:	e008      	b.n	8008330 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800831e:	f7f8 fd25 	bl	8000d6c <HAL_GetTick>
 8008322:	4602      	mov	r2, r0
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	f247 522f 	movw	r2, #29999	; 0x752f
 800832c:	4293      	cmp	r3, r2
 800832e:	d9ee      	bls.n	800830e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8008330:	7dfb      	ldrb	r3, [r7, #23]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3718      	adds	r7, #24
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	200001a0 	.word	0x200001a0

08008340 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	60b9      	str	r1, [r7, #8]
 8008348:	607a      	str	r2, [r7, #4]
 800834a:	603b      	str	r3, [r7, #0]
 800834c:	4603      	mov	r3, r0
 800834e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8008354:	4b24      	ldr	r3, [pc, #144]	; (80083e8 <SD_write+0xa8>)
 8008356:	2200      	movs	r2, #0
 8008358:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800835a:	f247 5030 	movw	r0, #30000	; 0x7530
 800835e:	f7ff ff33 	bl	80081c8 <SD_CheckStatusWithTimeout>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	da01      	bge.n	800836c <SD_write+0x2c>
  {
    return res;
 8008368:	7dfb      	ldrb	r3, [r7, #23]
 800836a:	e038      	b.n	80083de <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800836c:	683a      	ldr	r2, [r7, #0]
 800836e:	6879      	ldr	r1, [r7, #4]
 8008370:	68b8      	ldr	r0, [r7, #8]
 8008372:	f7ff fea3 	bl	80080bc <BSP_SD_WriteBlocks_DMA>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d12f      	bne.n	80083dc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800837c:	f7f8 fcf6 	bl	8000d6c <HAL_GetTick>
 8008380:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008382:	bf00      	nop
 8008384:	4b18      	ldr	r3, [pc, #96]	; (80083e8 <SD_write+0xa8>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d108      	bne.n	800839e <SD_write+0x5e>
 800838c:	f7f8 fcee 	bl	8000d6c <HAL_GetTick>
 8008390:	4602      	mov	r2, r0
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	f247 522f 	movw	r2, #29999	; 0x752f
 800839a:	4293      	cmp	r3, r2
 800839c:	d9f2      	bls.n	8008384 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800839e:	4b12      	ldr	r3, [pc, #72]	; (80083e8 <SD_write+0xa8>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d102      	bne.n	80083ac <SD_write+0x6c>
      {
        res = RES_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	75fb      	strb	r3, [r7, #23]
 80083aa:	e017      	b.n	80083dc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80083ac:	4b0e      	ldr	r3, [pc, #56]	; (80083e8 <SD_write+0xa8>)
 80083ae:	2200      	movs	r2, #0
 80083b0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80083b2:	f7f8 fcdb 	bl	8000d6c <HAL_GetTick>
 80083b6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80083b8:	e007      	b.n	80083ca <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80083ba:	f7ff fe99 	bl	80080f0 <BSP_SD_GetCardState>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d102      	bne.n	80083ca <SD_write+0x8a>
          {
            res = RES_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	75fb      	strb	r3, [r7, #23]
            break;
 80083c8:	e008      	b.n	80083dc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80083ca:	f7f8 fccf 	bl	8000d6c <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	f247 522f 	movw	r2, #29999	; 0x752f
 80083d8:	4293      	cmp	r3, r2
 80083da:	d9ee      	bls.n	80083ba <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	2000019c 	.word	0x2000019c

080083ec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08c      	sub	sp, #48	; 0x30
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	4603      	mov	r3, r0
 80083f4:	603a      	str	r2, [r7, #0]
 80083f6:	71fb      	strb	r3, [r7, #7]
 80083f8:	460b      	mov	r3, r1
 80083fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008402:	4b25      	ldr	r3, [pc, #148]	; (8008498 <SD_ioctl+0xac>)
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	b2db      	uxtb	r3, r3
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b00      	cmp	r3, #0
 800840e:	d001      	beq.n	8008414 <SD_ioctl+0x28>
 8008410:	2303      	movs	r3, #3
 8008412:	e03c      	b.n	800848e <SD_ioctl+0xa2>

  switch (cmd)
 8008414:	79bb      	ldrb	r3, [r7, #6]
 8008416:	2b03      	cmp	r3, #3
 8008418:	d834      	bhi.n	8008484 <SD_ioctl+0x98>
 800841a:	a201      	add	r2, pc, #4	; (adr r2, 8008420 <SD_ioctl+0x34>)
 800841c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008420:	08008431 	.word	0x08008431
 8008424:	08008439 	.word	0x08008439
 8008428:	08008451 	.word	0x08008451
 800842c:	0800846b 	.word	0x0800846b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008430:	2300      	movs	r3, #0
 8008432:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008436:	e028      	b.n	800848a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008438:	f107 030c 	add.w	r3, r7, #12
 800843c:	4618      	mov	r0, r3
 800843e:	f7ff fe67 	bl	8008110 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800844e:	e01c      	b.n	800848a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008450:	f107 030c 	add.w	r3, r7, #12
 8008454:	4618      	mov	r0, r3
 8008456:	f7ff fe5b 	bl	8008110 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800845a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845c:	b29a      	uxth	r2, r3
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008468:	e00f      	b.n	800848a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800846a:	f107 030c 	add.w	r3, r7, #12
 800846e:	4618      	mov	r0, r3
 8008470:	f7ff fe4e 	bl	8008110 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008476:	0a5a      	lsrs	r2, r3, #9
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800847c:	2300      	movs	r3, #0
 800847e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008482:	e002      	b.n	800848a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008484:	2304      	movs	r3, #4
 8008486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800848a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800848e:	4618      	mov	r0, r3
 8008490:	3730      	adds	r7, #48	; 0x30
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	20000009 	.word	0x20000009

0800849c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800849c:	b480      	push	{r7}
 800849e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80084a0:	4b03      	ldr	r3, [pc, #12]	; (80084b0 <BSP_SD_WriteCpltCallback+0x14>)
 80084a2:	2201      	movs	r2, #1
 80084a4:	601a      	str	r2, [r3, #0]
}
 80084a6:	bf00      	nop
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr
 80084b0:	2000019c 	.word	0x2000019c

080084b4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80084b4:	b480      	push	{r7}
 80084b6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80084b8:	4b03      	ldr	r3, [pc, #12]	; (80084c8 <BSP_SD_ReadCpltCallback+0x14>)
 80084ba:	2201      	movs	r2, #1
 80084bc:	601a      	str	r2, [r3, #0]
}
 80084be:	bf00      	nop
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr
 80084c8:	200001a0 	.word	0x200001a0

080084cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	460b      	mov	r3, r1
 80084d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80084d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80084dc:	f002 f9f8 	bl	800a8d0 <USBD_static_malloc>
 80084e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d105      	bne.n	80084f4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80084f0:	2302      	movs	r3, #2
 80084f2:	e066      	b.n	80085c2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	7c1b      	ldrb	r3, [r3, #16]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d119      	bne.n	8008538 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008508:	2202      	movs	r2, #2
 800850a:	2181      	movs	r1, #129	; 0x81
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f002 f8bc 	bl	800a68a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2201      	movs	r2, #1
 8008516:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800851c:	2202      	movs	r2, #2
 800851e:	2101      	movs	r1, #1
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f002 f8b2 	bl	800a68a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2210      	movs	r2, #16
 8008532:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008536:	e016      	b.n	8008566 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008538:	2340      	movs	r3, #64	; 0x40
 800853a:	2202      	movs	r2, #2
 800853c:	2181      	movs	r1, #129	; 0x81
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f002 f8a3 	bl	800a68a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800854a:	2340      	movs	r3, #64	; 0x40
 800854c:	2202      	movs	r2, #2
 800854e:	2101      	movs	r1, #1
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f002 f89a 	bl	800a68a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2210      	movs	r2, #16
 8008562:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008566:	2308      	movs	r3, #8
 8008568:	2203      	movs	r2, #3
 800856a:	2182      	movs	r1, #130	; 0x82
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f002 f88c 	bl	800a68a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	7c1b      	ldrb	r3, [r3, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d109      	bne.n	80085b0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085a6:	2101      	movs	r1, #1
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f002 f95d 	bl	800a868 <USBD_LL_PrepareReceive>
 80085ae:	e007      	b.n	80085c0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085b6:	2340      	movs	r3, #64	; 0x40
 80085b8:	2101      	movs	r1, #1
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f002 f954 	bl	800a868 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b082      	sub	sp, #8
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	460b      	mov	r3, r1
 80085d4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80085d6:	2181      	movs	r1, #129	; 0x81
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f002 f87c 	bl	800a6d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80085e4:	2101      	movs	r1, #1
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f002 f875 	bl	800a6d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80085f4:	2182      	movs	r1, #130	; 0x82
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f002 f86d 	bl	800a6d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00e      	beq.n	8008634 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008626:	4618      	mov	r0, r3
 8008628:	f002 f960 	bl	800a8ec <USBD_static_free>
    pdev->pClassData = NULL;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
	...

08008640 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008650:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008652:	2300      	movs	r3, #0
 8008654:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008656:	2300      	movs	r3, #0
 8008658:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d101      	bne.n	8008668 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008664:	2303      	movs	r3, #3
 8008666:	e0af      	b.n	80087c8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008670:	2b00      	cmp	r3, #0
 8008672:	d03f      	beq.n	80086f4 <USBD_CDC_Setup+0xb4>
 8008674:	2b20      	cmp	r3, #32
 8008676:	f040 809f 	bne.w	80087b8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	88db      	ldrh	r3, [r3, #6]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d02e      	beq.n	80086e0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	b25b      	sxtb	r3, r3
 8008688:	2b00      	cmp	r3, #0
 800868a:	da16      	bge.n	80086ba <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	683a      	ldr	r2, [r7, #0]
 8008696:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008698:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800869a:	683a      	ldr	r2, [r7, #0]
 800869c:	88d2      	ldrh	r2, [r2, #6]
 800869e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	88db      	ldrh	r3, [r3, #6]
 80086a4:	2b07      	cmp	r3, #7
 80086a6:	bf28      	it	cs
 80086a8:	2307      	movcs	r3, #7
 80086aa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	89fa      	ldrh	r2, [r7, #14]
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f001 fb19 	bl	8009cea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80086b8:	e085      	b.n	80087c6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	785a      	ldrb	r2, [r3, #1]
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	88db      	ldrh	r3, [r3, #6]
 80086c8:	b2da      	uxtb	r2, r3
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80086d0:	6939      	ldr	r1, [r7, #16]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	88db      	ldrh	r3, [r3, #6]
 80086d6:	461a      	mov	r2, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f001 fb32 	bl	8009d42 <USBD_CtlPrepareRx>
      break;
 80086de:	e072      	b.n	80087c6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	683a      	ldr	r2, [r7, #0]
 80086ea:	7850      	ldrb	r0, [r2, #1]
 80086ec:	2200      	movs	r2, #0
 80086ee:	6839      	ldr	r1, [r7, #0]
 80086f0:	4798      	blx	r3
      break;
 80086f2:	e068      	b.n	80087c6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	785b      	ldrb	r3, [r3, #1]
 80086f8:	2b0b      	cmp	r3, #11
 80086fa:	d852      	bhi.n	80087a2 <USBD_CDC_Setup+0x162>
 80086fc:	a201      	add	r2, pc, #4	; (adr r2, 8008704 <USBD_CDC_Setup+0xc4>)
 80086fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008702:	bf00      	nop
 8008704:	08008735 	.word	0x08008735
 8008708:	080087b1 	.word	0x080087b1
 800870c:	080087a3 	.word	0x080087a3
 8008710:	080087a3 	.word	0x080087a3
 8008714:	080087a3 	.word	0x080087a3
 8008718:	080087a3 	.word	0x080087a3
 800871c:	080087a3 	.word	0x080087a3
 8008720:	080087a3 	.word	0x080087a3
 8008724:	080087a3 	.word	0x080087a3
 8008728:	080087a3 	.word	0x080087a3
 800872c:	0800875f 	.word	0x0800875f
 8008730:	08008789 	.word	0x08008789
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b03      	cmp	r3, #3
 800873e:	d107      	bne.n	8008750 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008740:	f107 030a 	add.w	r3, r7, #10
 8008744:	2202      	movs	r2, #2
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f001 face 	bl	8009cea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800874e:	e032      	b.n	80087b6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f001 fa58 	bl	8009c08 <USBD_CtlError>
            ret = USBD_FAIL;
 8008758:	2303      	movs	r3, #3
 800875a:	75fb      	strb	r3, [r7, #23]
          break;
 800875c:	e02b      	b.n	80087b6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b03      	cmp	r3, #3
 8008768:	d107      	bne.n	800877a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800876a:	f107 030d 	add.w	r3, r7, #13
 800876e:	2201      	movs	r2, #1
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f001 fab9 	bl	8009cea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008778:	e01d      	b.n	80087b6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f001 fa43 	bl	8009c08 <USBD_CtlError>
            ret = USBD_FAIL;
 8008782:	2303      	movs	r3, #3
 8008784:	75fb      	strb	r3, [r7, #23]
          break;
 8008786:	e016      	b.n	80087b6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b03      	cmp	r3, #3
 8008792:	d00f      	beq.n	80087b4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f001 fa36 	bl	8009c08 <USBD_CtlError>
            ret = USBD_FAIL;
 800879c:	2303      	movs	r3, #3
 800879e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80087a0:	e008      	b.n	80087b4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f001 fa2f 	bl	8009c08 <USBD_CtlError>
          ret = USBD_FAIL;
 80087aa:	2303      	movs	r3, #3
 80087ac:	75fb      	strb	r3, [r7, #23]
          break;
 80087ae:	e002      	b.n	80087b6 <USBD_CDC_Setup+0x176>
          break;
 80087b0:	bf00      	nop
 80087b2:	e008      	b.n	80087c6 <USBD_CDC_Setup+0x186>
          break;
 80087b4:	bf00      	nop
      }
      break;
 80087b6:	e006      	b.n	80087c6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f001 fa24 	bl	8009c08 <USBD_CtlError>
      ret = USBD_FAIL;
 80087c0:	2303      	movs	r3, #3
 80087c2:	75fb      	strb	r3, [r7, #23]
      break;
 80087c4:	bf00      	nop
  }

  return (uint8_t)ret;
 80087c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3718      	adds	r7, #24
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d101      	bne.n	80087f2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80087ee:	2303      	movs	r3, #3
 80087f0:	e04f      	b.n	8008892 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80087fa:	78fa      	ldrb	r2, [r7, #3]
 80087fc:	6879      	ldr	r1, [r7, #4]
 80087fe:	4613      	mov	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	440b      	add	r3, r1
 8008808:	3318      	adds	r3, #24
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d029      	beq.n	8008864 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008810:	78fa      	ldrb	r2, [r7, #3]
 8008812:	6879      	ldr	r1, [r7, #4]
 8008814:	4613      	mov	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4413      	add	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	440b      	add	r3, r1
 800881e:	3318      	adds	r3, #24
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	78f9      	ldrb	r1, [r7, #3]
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	460b      	mov	r3, r1
 8008828:	00db      	lsls	r3, r3, #3
 800882a:	1a5b      	subs	r3, r3, r1
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4403      	add	r3, r0
 8008830:	3344      	adds	r3, #68	; 0x44
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	fbb2 f1f3 	udiv	r1, r2, r3
 8008838:	fb03 f301 	mul.w	r3, r3, r1
 800883c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800883e:	2b00      	cmp	r3, #0
 8008840:	d110      	bne.n	8008864 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008842:	78fa      	ldrb	r2, [r7, #3]
 8008844:	6879      	ldr	r1, [r7, #4]
 8008846:	4613      	mov	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	440b      	add	r3, r1
 8008850:	3318      	adds	r3, #24
 8008852:	2200      	movs	r2, #0
 8008854:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008856:	78f9      	ldrb	r1, [r7, #3]
 8008858:	2300      	movs	r3, #0
 800885a:	2200      	movs	r2, #0
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f001 ffe2 	bl	800a826 <USBD_LL_Transmit>
 8008862:	e015      	b.n	8008890 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	2200      	movs	r2, #0
 8008868:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00b      	beq.n	8008890 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800888c:	78fa      	ldrb	r2, [r7, #3]
 800888e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b084      	sub	sp, #16
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	460b      	mov	r3, r1
 80088a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d101      	bne.n	80088bc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e015      	b.n	80088e8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80088bc:	78fb      	ldrb	r3, [r7, #3]
 80088be:	4619      	mov	r1, r3
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f001 fff2 	bl	800a8aa <USBD_LL_GetRxDataSize>
 80088c6:	4602      	mov	r2, r0
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80088e2:	4611      	mov	r1, r2
 80088e4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088fe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d101      	bne.n	800890a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008906:	2303      	movs	r3, #3
 8008908:	e01b      	b.n	8008942 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d015      	beq.n	8008940 <USBD_CDC_EP0_RxReady+0x50>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800891a:	2bff      	cmp	r3, #255	; 0xff
 800891c:	d010      	beq.n	8008940 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800892c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008934:	b292      	uxth	r2, r2
 8008936:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	22ff      	movs	r2, #255	; 0xff
 800893c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
	...

0800894c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2243      	movs	r2, #67	; 0x43
 8008958:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800895a:	4b03      	ldr	r3, [pc, #12]	; (8008968 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800895c:	4618      	mov	r0, r3
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr
 8008968:	20000094 	.word	0x20000094

0800896c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2243      	movs	r2, #67	; 0x43
 8008978:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800897a:	4b03      	ldr	r3, [pc, #12]	; (8008988 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800897c:	4618      	mov	r0, r3
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	20000050 	.word	0x20000050

0800898c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2243      	movs	r2, #67	; 0x43
 8008998:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800899a:	4b03      	ldr	r3, [pc, #12]	; (80089a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800899c:	4618      	mov	r0, r3
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr
 80089a8:	200000d8 	.word	0x200000d8

080089ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	220a      	movs	r2, #10
 80089b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80089ba:	4b03      	ldr	r3, [pc, #12]	; (80089c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80089bc:	4618      	mov	r0, r3
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr
 80089c8:	2000000c 	.word	0x2000000c

080089cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d101      	bne.n	80089e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80089dc:	2303      	movs	r3, #3
 80089de:	e004      	b.n	80089ea <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	370c      	adds	r7, #12
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b087      	sub	sp, #28
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	60b9      	str	r1, [r7, #8]
 8008a00:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a08:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d101      	bne.n	8008a14 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e008      	b.n	8008a26 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	371c      	adds	r7, #28
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr

08008a32 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b085      	sub	sp, #20
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a42:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e004      	b.n	8008a58 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a72:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008a74:	2301      	movs	r3, #1
 8008a76:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e01a      	b.n	8008abc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d114      	bne.n	8008aba <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008aae:	2181      	movs	r1, #129	; 0x81
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 feb8 	bl	800a826 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ad2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d101      	bne.n	8008ae2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e016      	b.n	8008b10 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	7c1b      	ldrb	r3, [r3, #16]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d109      	bne.n	8008afe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008af4:	2101      	movs	r1, #1
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f001 feb6 	bl	800a868 <USBD_LL_PrepareReceive>
 8008afc:	e007      	b.n	8008b0e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b04:	2340      	movs	r3, #64	; 0x40
 8008b06:	2101      	movs	r1, #1
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f001 fead 	bl	800a868 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	4613      	mov	r3, r2
 8008b24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d101      	bne.n	8008b30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	e01f      	b.n	8008b70 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d003      	beq.n	8008b56 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	79fa      	ldrb	r2, [r7, #7]
 8008b62:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f001 fd29 	bl	800a5bc <USBD_LL_Init>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3718      	adds	r7, #24
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b82:	2300      	movs	r3, #0
 8008b84:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d101      	bne.n	8008b90 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	e016      	b.n	8008bbe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	683a      	ldr	r2, [r7, #0]
 8008b94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00b      	beq.n	8008bbc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bac:	f107 020e 	add.w	r2, r7, #14
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	4798      	blx	r3
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b082      	sub	sp, #8
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f001 fd40 	bl	800a654 <USBD_LL_Start>
 8008bd4:	4603      	mov	r3, r0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008bde:	b480      	push	{r7}
 8008be0:	b083      	sub	sp, #12
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008c00:	2303      	movs	r3, #3
 8008c02:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d009      	beq.n	8008c22 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	78fa      	ldrb	r2, [r7, #3]
 8008c18:	4611      	mov	r1, r2
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	4798      	blx	r3
 8008c1e:	4603      	mov	r3, r0
 8008c20:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	460b      	mov	r3, r1
 8008c36:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d007      	beq.n	8008c52 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	78fa      	ldrb	r2, [r7, #3]
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	4798      	blx	r3
  }

  return USBD_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 ff90 	bl	8009b94 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008c82:	461a      	mov	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008c90:	f003 031f 	and.w	r3, r3, #31
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d01a      	beq.n	8008cce <USBD_LL_SetupStage+0x72>
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d822      	bhi.n	8008ce2 <USBD_LL_SetupStage+0x86>
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <USBD_LL_SetupStage+0x4a>
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d00a      	beq.n	8008cba <USBD_LL_SetupStage+0x5e>
 8008ca4:	e01d      	b.n	8008ce2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fa62 	bl	8009178 <USBD_StdDevReq>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8008cb8:	e020      	b.n	8008cfc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fac6 	bl	8009254 <USBD_StdItfReq>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	73fb      	strb	r3, [r7, #15]
      break;
 8008ccc:	e016      	b.n	8008cfc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fb05 	bl	80092e6 <USBD_StdEPReq>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	73fb      	strb	r3, [r7, #15]
      break;
 8008ce0:	e00c      	b.n	8008cfc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ce8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f001 fd0f 	bl	800a714 <USBD_LL_StallEP>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8008cfa:	bf00      	nop
  }

  return ret;
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b086      	sub	sp, #24
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	60f8      	str	r0, [r7, #12]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	607a      	str	r2, [r7, #4]
 8008d12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008d14:	7afb      	ldrb	r3, [r7, #11]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d138      	bne.n	8008d8c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008d20:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	d14a      	bne.n	8008dc2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	689a      	ldr	r2, [r3, #8]
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d913      	bls.n	8008d60 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	689a      	ldr	r2, [r3, #8]
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	1ad2      	subs	r2, r2, r3
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	68da      	ldr	r2, [r3, #12]
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	bf28      	it	cs
 8008d52:	4613      	movcs	r3, r2
 8008d54:	461a      	mov	r2, r3
 8008d56:	6879      	ldr	r1, [r7, #4]
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f001 f80f 	bl	8009d7c <USBD_CtlContinueRx>
 8008d5e:	e030      	b.n	8008dc2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	2b03      	cmp	r3, #3
 8008d6a:	d10b      	bne.n	8008d84 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d005      	beq.n	8008d84 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f001 f80a 	bl	8009d9e <USBD_CtlSendStatus>
 8008d8a:	e01a      	b.n	8008dc2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b03      	cmp	r3, #3
 8008d96:	d114      	bne.n	8008dc2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d9e:	699b      	ldr	r3, [r3, #24]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00e      	beq.n	8008dc2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	7afa      	ldrb	r2, [r7, #11]
 8008dae:	4611      	mov	r1, r2
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	4798      	blx	r3
 8008db4:	4603      	mov	r3, r0
 8008db6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008db8:	7dfb      	ldrb	r3, [r7, #23]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
 8008dc0:	e000      	b.n	8008dc4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3718      	adds	r7, #24
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b086      	sub	sp, #24
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	607a      	str	r2, [r7, #4]
 8008dd8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008dda:	7afb      	ldrb	r3, [r7, #11]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d16b      	bne.n	8008eb8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	3314      	adds	r3, #20
 8008de4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d156      	bne.n	8008e9e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	689a      	ldr	r2, [r3, #8]
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d914      	bls.n	8008e26 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	689a      	ldr	r2, [r3, #8]
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	1ad2      	subs	r2, r2, r3
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	6879      	ldr	r1, [r7, #4]
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f000 ff84 	bl	8009d20 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e18:	2300      	movs	r3, #0
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f001 fd22 	bl	800a868 <USBD_LL_PrepareReceive>
 8008e24:	e03b      	b.n	8008e9e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	68da      	ldr	r2, [r3, #12]
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d11c      	bne.n	8008e6c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d316      	bcc.n	8008e6c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	685a      	ldr	r2, [r3, #4]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d20f      	bcs.n	8008e6c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	2100      	movs	r1, #0
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f000 ff65 	bl	8009d20 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e5e:	2300      	movs	r3, #0
 8008e60:	2200      	movs	r2, #0
 8008e62:	2100      	movs	r1, #0
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f001 fcff 	bl	800a868 <USBD_LL_PrepareReceive>
 8008e6a:	e018      	b.n	8008e9e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	2b03      	cmp	r3, #3
 8008e76:	d10b      	bne.n	8008e90 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d005      	beq.n	8008e90 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e90:	2180      	movs	r1, #128	; 0x80
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f001 fc3e 	bl	800a714 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f000 ff93 	bl	8009dc4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d122      	bne.n	8008eee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f7ff fe98 	bl	8008bde <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008eb6:	e01a      	b.n	8008eee <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d114      	bne.n	8008eee <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eca:	695b      	ldr	r3, [r3, #20]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00e      	beq.n	8008eee <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed6:	695b      	ldr	r3, [r3, #20]
 8008ed8:	7afa      	ldrb	r2, [r7, #11]
 8008eda:	4611      	mov	r1, r2
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	4798      	blx	r3
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008ee4:	7dfb      	ldrb	r3, [r7, #23]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d001      	beq.n	8008eee <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008eea:	7dfb      	ldrb	r3, [r7, #23]
 8008eec:	e000      	b.n	8008ef0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3718      	adds	r7, #24
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d101      	bne.n	8008f2c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	e02f      	b.n	8008f8c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00f      	beq.n	8008f56 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d009      	beq.n	8008f56 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	6852      	ldr	r2, [r2, #4]
 8008f4e:	b2d2      	uxtb	r2, r2
 8008f50:	4611      	mov	r1, r2
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f56:	2340      	movs	r3, #64	; 0x40
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f001 fb94 	bl	800a68a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2240      	movs	r2, #64	; 0x40
 8008f6e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f72:	2340      	movs	r3, #64	; 0x40
 8008f74:	2200      	movs	r2, #0
 8008f76:	2180      	movs	r1, #128	; 0x80
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f001 fb86 	bl	800a68a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2240      	movs	r2, #64	; 0x40
 8008f88:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	78fa      	ldrb	r2, [r7, #3]
 8008fa4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2204      	movs	r2, #4
 8008fce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	2b04      	cmp	r3, #4
 8008ff2:	d106      	bne.n	8009002 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800901e:	2b00      	cmp	r3, #0
 8009020:	d101      	bne.n	8009026 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009022:	2303      	movs	r3, #3
 8009024:	e012      	b.n	800904c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b03      	cmp	r3, #3
 8009030:	d10b      	bne.n	800904a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009038:	69db      	ldr	r3, [r3, #28]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d005      	beq.n	800904a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3708      	adds	r7, #8
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009066:	2b00      	cmp	r3, #0
 8009068:	d101      	bne.n	800906e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800906a:	2303      	movs	r3, #3
 800906c:	e014      	b.n	8009098 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b03      	cmp	r3, #3
 8009078:	d10d      	bne.n	8009096 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009080:	6a1b      	ldr	r3, [r3, #32]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d007      	beq.n	8009096 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800908c:	6a1b      	ldr	r3, [r3, #32]
 800908e:	78fa      	ldrb	r2, [r7, #3]
 8009090:	4611      	mov	r1, r2
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3708      	adds	r7, #8
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	460b      	mov	r3, r1
 80090aa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d101      	bne.n	80090ba <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80090b6:	2303      	movs	r3, #3
 80090b8:	e014      	b.n	80090e4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b03      	cmp	r3, #3
 80090c4:	d10d      	bne.n	80090e2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d007      	beq.n	80090e2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090da:	78fa      	ldrb	r2, [r7, #3]
 80090dc:	4611      	mov	r1, r2
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr

08009102 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b082      	sub	sp, #8
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2201      	movs	r2, #1
 800910e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009118:	2b00      	cmp	r3, #0
 800911a:	d009      	beq.n	8009130 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	6852      	ldr	r2, [r2, #4]
 8009128:	b2d2      	uxtb	r2, r2
 800912a:	4611      	mov	r1, r2
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	4798      	blx	r3
  }

  return USBD_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800913a:	b480      	push	{r7}
 800913c:	b087      	sub	sp, #28
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	3301      	adds	r3, #1
 8009150:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009158:	8a3b      	ldrh	r3, [r7, #16]
 800915a:	021b      	lsls	r3, r3, #8
 800915c:	b21a      	sxth	r2, r3
 800915e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009162:	4313      	orrs	r3, r2
 8009164:	b21b      	sxth	r3, r3
 8009166:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009168:	89fb      	ldrh	r3, [r7, #14]
}
 800916a:	4618      	mov	r0, r3
 800916c:	371c      	adds	r7, #28
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
	...

08009178 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009182:	2300      	movs	r3, #0
 8009184:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800918e:	2b40      	cmp	r3, #64	; 0x40
 8009190:	d005      	beq.n	800919e <USBD_StdDevReq+0x26>
 8009192:	2b40      	cmp	r3, #64	; 0x40
 8009194:	d853      	bhi.n	800923e <USBD_StdDevReq+0xc6>
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00b      	beq.n	80091b2 <USBD_StdDevReq+0x3a>
 800919a:	2b20      	cmp	r3, #32
 800919c:	d14f      	bne.n	800923e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	4798      	blx	r3
 80091ac:	4603      	mov	r3, r0
 80091ae:	73fb      	strb	r3, [r7, #15]
      break;
 80091b0:	e04a      	b.n	8009248 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	785b      	ldrb	r3, [r3, #1]
 80091b6:	2b09      	cmp	r3, #9
 80091b8:	d83b      	bhi.n	8009232 <USBD_StdDevReq+0xba>
 80091ba:	a201      	add	r2, pc, #4	; (adr r2, 80091c0 <USBD_StdDevReq+0x48>)
 80091bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c0:	08009215 	.word	0x08009215
 80091c4:	08009229 	.word	0x08009229
 80091c8:	08009233 	.word	0x08009233
 80091cc:	0800921f 	.word	0x0800921f
 80091d0:	08009233 	.word	0x08009233
 80091d4:	080091f3 	.word	0x080091f3
 80091d8:	080091e9 	.word	0x080091e9
 80091dc:	08009233 	.word	0x08009233
 80091e0:	0800920b 	.word	0x0800920b
 80091e4:	080091fd 	.word	0x080091fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f9de 	bl	80095ac <USBD_GetDescriptor>
          break;
 80091f0:	e024      	b.n	800923c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80091f2:	6839      	ldr	r1, [r7, #0]
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fb43 	bl	8009880 <USBD_SetAddress>
          break;
 80091fa:	e01f      	b.n	800923c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fb82 	bl	8009908 <USBD_SetConfig>
 8009204:	4603      	mov	r3, r0
 8009206:	73fb      	strb	r3, [r7, #15]
          break;
 8009208:	e018      	b.n	800923c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fc21 	bl	8009a54 <USBD_GetConfig>
          break;
 8009212:	e013      	b.n	800923c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009214:	6839      	ldr	r1, [r7, #0]
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fc52 	bl	8009ac0 <USBD_GetStatus>
          break;
 800921c:	e00e      	b.n	800923c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800921e:	6839      	ldr	r1, [r7, #0]
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 fc81 	bl	8009b28 <USBD_SetFeature>
          break;
 8009226:	e009      	b.n	800923c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fc90 	bl	8009b50 <USBD_ClrFeature>
          break;
 8009230:	e004      	b.n	800923c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009232:	6839      	ldr	r1, [r7, #0]
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fce7 	bl	8009c08 <USBD_CtlError>
          break;
 800923a:	bf00      	nop
      }
      break;
 800923c:	e004      	b.n	8009248 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800923e:	6839      	ldr	r1, [r7, #0]
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 fce1 	bl	8009c08 <USBD_CtlError>
      break;
 8009246:	bf00      	nop
  }

  return ret;
 8009248:	7bfb      	ldrb	r3, [r7, #15]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop

08009254 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800926a:	2b40      	cmp	r3, #64	; 0x40
 800926c:	d005      	beq.n	800927a <USBD_StdItfReq+0x26>
 800926e:	2b40      	cmp	r3, #64	; 0x40
 8009270:	d82f      	bhi.n	80092d2 <USBD_StdItfReq+0x7e>
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <USBD_StdItfReq+0x26>
 8009276:	2b20      	cmp	r3, #32
 8009278:	d12b      	bne.n	80092d2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009280:	b2db      	uxtb	r3, r3
 8009282:	3b01      	subs	r3, #1
 8009284:	2b02      	cmp	r3, #2
 8009286:	d81d      	bhi.n	80092c4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	889b      	ldrh	r3, [r3, #4]
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2b01      	cmp	r3, #1
 8009290:	d813      	bhi.n	80092ba <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	6839      	ldr	r1, [r7, #0]
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	4798      	blx	r3
 80092a0:	4603      	mov	r3, r0
 80092a2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	88db      	ldrh	r3, [r3, #6]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d110      	bne.n	80092ce <USBD_StdItfReq+0x7a>
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10d      	bne.n	80092ce <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fd73 	bl	8009d9e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80092b8:	e009      	b.n	80092ce <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80092ba:	6839      	ldr	r1, [r7, #0]
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 fca3 	bl	8009c08 <USBD_CtlError>
          break;
 80092c2:	e004      	b.n	80092ce <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80092c4:	6839      	ldr	r1, [r7, #0]
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 fc9e 	bl	8009c08 <USBD_CtlError>
          break;
 80092cc:	e000      	b.n	80092d0 <USBD_StdItfReq+0x7c>
          break;
 80092ce:	bf00      	nop
      }
      break;
 80092d0:	e004      	b.n	80092dc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80092d2:	6839      	ldr	r1, [r7, #0]
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fc97 	bl	8009c08 <USBD_CtlError>
      break;
 80092da:	bf00      	nop
  }

  return ret;
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b084      	sub	sp, #16
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	889b      	ldrh	r3, [r3, #4]
 80092f8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009302:	2b40      	cmp	r3, #64	; 0x40
 8009304:	d007      	beq.n	8009316 <USBD_StdEPReq+0x30>
 8009306:	2b40      	cmp	r3, #64	; 0x40
 8009308:	f200 8145 	bhi.w	8009596 <USBD_StdEPReq+0x2b0>
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00c      	beq.n	800932a <USBD_StdEPReq+0x44>
 8009310:	2b20      	cmp	r3, #32
 8009312:	f040 8140 	bne.w	8009596 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	4798      	blx	r3
 8009324:	4603      	mov	r3, r0
 8009326:	73fb      	strb	r3, [r7, #15]
      break;
 8009328:	e13a      	b.n	80095a0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	785b      	ldrb	r3, [r3, #1]
 800932e:	2b03      	cmp	r3, #3
 8009330:	d007      	beq.n	8009342 <USBD_StdEPReq+0x5c>
 8009332:	2b03      	cmp	r3, #3
 8009334:	f300 8129 	bgt.w	800958a <USBD_StdEPReq+0x2a4>
 8009338:	2b00      	cmp	r3, #0
 800933a:	d07f      	beq.n	800943c <USBD_StdEPReq+0x156>
 800933c:	2b01      	cmp	r3, #1
 800933e:	d03c      	beq.n	80093ba <USBD_StdEPReq+0xd4>
 8009340:	e123      	b.n	800958a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009348:	b2db      	uxtb	r3, r3
 800934a:	2b02      	cmp	r3, #2
 800934c:	d002      	beq.n	8009354 <USBD_StdEPReq+0x6e>
 800934e:	2b03      	cmp	r3, #3
 8009350:	d016      	beq.n	8009380 <USBD_StdEPReq+0x9a>
 8009352:	e02c      	b.n	80093ae <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009354:	7bbb      	ldrb	r3, [r7, #14]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00d      	beq.n	8009376 <USBD_StdEPReq+0x90>
 800935a:	7bbb      	ldrb	r3, [r7, #14]
 800935c:	2b80      	cmp	r3, #128	; 0x80
 800935e:	d00a      	beq.n	8009376 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009360:	7bbb      	ldrb	r3, [r7, #14]
 8009362:	4619      	mov	r1, r3
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f001 f9d5 	bl	800a714 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800936a:	2180      	movs	r1, #128	; 0x80
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f001 f9d1 	bl	800a714 <USBD_LL_StallEP>
 8009372:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009374:	e020      	b.n	80093b8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009376:	6839      	ldr	r1, [r7, #0]
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fc45 	bl	8009c08 <USBD_CtlError>
              break;
 800937e:	e01b      	b.n	80093b8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	885b      	ldrh	r3, [r3, #2]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10e      	bne.n	80093a6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009388:	7bbb      	ldrb	r3, [r7, #14]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00b      	beq.n	80093a6 <USBD_StdEPReq+0xc0>
 800938e:	7bbb      	ldrb	r3, [r7, #14]
 8009390:	2b80      	cmp	r3, #128	; 0x80
 8009392:	d008      	beq.n	80093a6 <USBD_StdEPReq+0xc0>
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	88db      	ldrh	r3, [r3, #6]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d104      	bne.n	80093a6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800939c:	7bbb      	ldrb	r3, [r7, #14]
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f001 f9b7 	bl	800a714 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fcf9 	bl	8009d9e <USBD_CtlSendStatus>

              break;
 80093ac:	e004      	b.n	80093b8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80093ae:	6839      	ldr	r1, [r7, #0]
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 fc29 	bl	8009c08 <USBD_CtlError>
              break;
 80093b6:	bf00      	nop
          }
          break;
 80093b8:	e0ec      	b.n	8009594 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d002      	beq.n	80093cc <USBD_StdEPReq+0xe6>
 80093c6:	2b03      	cmp	r3, #3
 80093c8:	d016      	beq.n	80093f8 <USBD_StdEPReq+0x112>
 80093ca:	e030      	b.n	800942e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093cc:	7bbb      	ldrb	r3, [r7, #14]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00d      	beq.n	80093ee <USBD_StdEPReq+0x108>
 80093d2:	7bbb      	ldrb	r3, [r7, #14]
 80093d4:	2b80      	cmp	r3, #128	; 0x80
 80093d6:	d00a      	beq.n	80093ee <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80093d8:	7bbb      	ldrb	r3, [r7, #14]
 80093da:	4619      	mov	r1, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f001 f999 	bl	800a714 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80093e2:	2180      	movs	r1, #128	; 0x80
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f001 f995 	bl	800a714 <USBD_LL_StallEP>
 80093ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093ec:	e025      	b.n	800943a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fc09 	bl	8009c08 <USBD_CtlError>
              break;
 80093f6:	e020      	b.n	800943a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	885b      	ldrh	r3, [r3, #2]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d11b      	bne.n	8009438 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009400:	7bbb      	ldrb	r3, [r7, #14]
 8009402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009406:	2b00      	cmp	r3, #0
 8009408:	d004      	beq.n	8009414 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800940a:	7bbb      	ldrb	r3, [r7, #14]
 800940c:	4619      	mov	r1, r3
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f001 f99f 	bl	800a752 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fcc2 	bl	8009d9e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	6839      	ldr	r1, [r7, #0]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	4798      	blx	r3
 8009428:	4603      	mov	r3, r0
 800942a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800942c:	e004      	b.n	8009438 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800942e:	6839      	ldr	r1, [r7, #0]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 fbe9 	bl	8009c08 <USBD_CtlError>
              break;
 8009436:	e000      	b.n	800943a <USBD_StdEPReq+0x154>
              break;
 8009438:	bf00      	nop
          }
          break;
 800943a:	e0ab      	b.n	8009594 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009442:	b2db      	uxtb	r3, r3
 8009444:	2b02      	cmp	r3, #2
 8009446:	d002      	beq.n	800944e <USBD_StdEPReq+0x168>
 8009448:	2b03      	cmp	r3, #3
 800944a:	d032      	beq.n	80094b2 <USBD_StdEPReq+0x1cc>
 800944c:	e097      	b.n	800957e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800944e:	7bbb      	ldrb	r3, [r7, #14]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d007      	beq.n	8009464 <USBD_StdEPReq+0x17e>
 8009454:	7bbb      	ldrb	r3, [r7, #14]
 8009456:	2b80      	cmp	r3, #128	; 0x80
 8009458:	d004      	beq.n	8009464 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fbd3 	bl	8009c08 <USBD_CtlError>
                break;
 8009462:	e091      	b.n	8009588 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009464:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009468:	2b00      	cmp	r3, #0
 800946a:	da0b      	bge.n	8009484 <USBD_StdEPReq+0x19e>
 800946c:	7bbb      	ldrb	r3, [r7, #14]
 800946e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009472:	4613      	mov	r3, r2
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	4413      	add	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	3310      	adds	r3, #16
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	4413      	add	r3, r2
 8009480:	3304      	adds	r3, #4
 8009482:	e00b      	b.n	800949c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009484:	7bbb      	ldrb	r3, [r7, #14]
 8009486:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800948a:	4613      	mov	r3, r2
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	4413      	add	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	4413      	add	r3, r2
 800949a:	3304      	adds	r3, #4
 800949c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	2200      	movs	r2, #0
 80094a2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2202      	movs	r2, #2
 80094a8:	4619      	mov	r1, r3
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fc1d 	bl	8009cea <USBD_CtlSendData>
              break;
 80094b0:	e06a      	b.n	8009588 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80094b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	da11      	bge.n	80094de <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80094ba:	7bbb      	ldrb	r3, [r7, #14]
 80094bc:	f003 020f 	and.w	r2, r3, #15
 80094c0:	6879      	ldr	r1, [r7, #4]
 80094c2:	4613      	mov	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	440b      	add	r3, r1
 80094cc:	3324      	adds	r3, #36	; 0x24
 80094ce:	881b      	ldrh	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d117      	bne.n	8009504 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80094d4:	6839      	ldr	r1, [r7, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fb96 	bl	8009c08 <USBD_CtlError>
                  break;
 80094dc:	e054      	b.n	8009588 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80094de:	7bbb      	ldrb	r3, [r7, #14]
 80094e0:	f003 020f 	and.w	r2, r3, #15
 80094e4:	6879      	ldr	r1, [r7, #4]
 80094e6:	4613      	mov	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	4413      	add	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	440b      	add	r3, r1
 80094f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d104      	bne.n	8009504 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fb83 	bl	8009c08 <USBD_CtlError>
                  break;
 8009502:	e041      	b.n	8009588 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009504:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009508:	2b00      	cmp	r3, #0
 800950a:	da0b      	bge.n	8009524 <USBD_StdEPReq+0x23e>
 800950c:	7bbb      	ldrb	r3, [r7, #14]
 800950e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009512:	4613      	mov	r3, r2
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4413      	add	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	3310      	adds	r3, #16
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	4413      	add	r3, r2
 8009520:	3304      	adds	r3, #4
 8009522:	e00b      	b.n	800953c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009524:	7bbb      	ldrb	r3, [r7, #14]
 8009526:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800952a:	4613      	mov	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4413      	add	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	4413      	add	r3, r2
 800953a:	3304      	adds	r3, #4
 800953c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800953e:	7bbb      	ldrb	r3, [r7, #14]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d002      	beq.n	800954a <USBD_StdEPReq+0x264>
 8009544:	7bbb      	ldrb	r3, [r7, #14]
 8009546:	2b80      	cmp	r3, #128	; 0x80
 8009548:	d103      	bne.n	8009552 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	2200      	movs	r2, #0
 800954e:	601a      	str	r2, [r3, #0]
 8009550:	e00e      	b.n	8009570 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009552:	7bbb      	ldrb	r3, [r7, #14]
 8009554:	4619      	mov	r1, r3
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f001 f91a 	bl	800a790 <USBD_LL_IsStallEP>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d003      	beq.n	800956a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	2201      	movs	r2, #1
 8009566:	601a      	str	r2, [r3, #0]
 8009568:	e002      	b.n	8009570 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	2200      	movs	r2, #0
 800956e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	2202      	movs	r2, #2
 8009574:	4619      	mov	r1, r3
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 fbb7 	bl	8009cea <USBD_CtlSendData>
              break;
 800957c:	e004      	b.n	8009588 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800957e:	6839      	ldr	r1, [r7, #0]
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fb41 	bl	8009c08 <USBD_CtlError>
              break;
 8009586:	bf00      	nop
          }
          break;
 8009588:	e004      	b.n	8009594 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800958a:	6839      	ldr	r1, [r7, #0]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fb3b 	bl	8009c08 <USBD_CtlError>
          break;
 8009592:	bf00      	nop
      }
      break;
 8009594:	e004      	b.n	80095a0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fb35 	bl	8009c08 <USBD_CtlError>
      break;
 800959e:	bf00      	nop
  }

  return ret;
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
	...

080095ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095b6:	2300      	movs	r3, #0
 80095b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80095ba:	2300      	movs	r3, #0
 80095bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80095be:	2300      	movs	r3, #0
 80095c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	885b      	ldrh	r3, [r3, #2]
 80095c6:	0a1b      	lsrs	r3, r3, #8
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	3b01      	subs	r3, #1
 80095cc:	2b06      	cmp	r3, #6
 80095ce:	f200 8128 	bhi.w	8009822 <USBD_GetDescriptor+0x276>
 80095d2:	a201      	add	r2, pc, #4	; (adr r2, 80095d8 <USBD_GetDescriptor+0x2c>)
 80095d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d8:	080095f5 	.word	0x080095f5
 80095dc:	0800960d 	.word	0x0800960d
 80095e0:	0800964d 	.word	0x0800964d
 80095e4:	08009823 	.word	0x08009823
 80095e8:	08009823 	.word	0x08009823
 80095ec:	080097c3 	.word	0x080097c3
 80095f0:	080097ef 	.word	0x080097ef
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	7c12      	ldrb	r2, [r2, #16]
 8009600:	f107 0108 	add.w	r1, r7, #8
 8009604:	4610      	mov	r0, r2
 8009606:	4798      	blx	r3
 8009608:	60f8      	str	r0, [r7, #12]
      break;
 800960a:	e112      	b.n	8009832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	7c1b      	ldrb	r3, [r3, #16]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10d      	bne.n	8009630 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800961a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961c:	f107 0208 	add.w	r2, r7, #8
 8009620:	4610      	mov	r0, r2
 8009622:	4798      	blx	r3
 8009624:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	3301      	adds	r3, #1
 800962a:	2202      	movs	r2, #2
 800962c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800962e:	e100      	b.n	8009832 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009638:	f107 0208 	add.w	r2, r7, #8
 800963c:	4610      	mov	r0, r2
 800963e:	4798      	blx	r3
 8009640:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	3301      	adds	r3, #1
 8009646:	2202      	movs	r2, #2
 8009648:	701a      	strb	r2, [r3, #0]
      break;
 800964a:	e0f2      	b.n	8009832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	885b      	ldrh	r3, [r3, #2]
 8009650:	b2db      	uxtb	r3, r3
 8009652:	2b05      	cmp	r3, #5
 8009654:	f200 80ac 	bhi.w	80097b0 <USBD_GetDescriptor+0x204>
 8009658:	a201      	add	r2, pc, #4	; (adr r2, 8009660 <USBD_GetDescriptor+0xb4>)
 800965a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800965e:	bf00      	nop
 8009660:	08009679 	.word	0x08009679
 8009664:	080096ad 	.word	0x080096ad
 8009668:	080096e1 	.word	0x080096e1
 800966c:	08009715 	.word	0x08009715
 8009670:	08009749 	.word	0x08009749
 8009674:	0800977d 	.word	0x0800977d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00b      	beq.n	800969c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	7c12      	ldrb	r2, [r2, #16]
 8009690:	f107 0108 	add.w	r1, r7, #8
 8009694:	4610      	mov	r0, r2
 8009696:	4798      	blx	r3
 8009698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800969a:	e091      	b.n	80097c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800969c:	6839      	ldr	r1, [r7, #0]
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 fab2 	bl	8009c08 <USBD_CtlError>
            err++;
 80096a4:	7afb      	ldrb	r3, [r7, #11]
 80096a6:	3301      	adds	r3, #1
 80096a8:	72fb      	strb	r3, [r7, #11]
          break;
 80096aa:	e089      	b.n	80097c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00b      	beq.n	80096d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	7c12      	ldrb	r2, [r2, #16]
 80096c4:	f107 0108 	add.w	r1, r7, #8
 80096c8:	4610      	mov	r0, r2
 80096ca:	4798      	blx	r3
 80096cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096ce:	e077      	b.n	80097c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096d0:	6839      	ldr	r1, [r7, #0]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 fa98 	bl	8009c08 <USBD_CtlError>
            err++;
 80096d8:	7afb      	ldrb	r3, [r7, #11]
 80096da:	3301      	adds	r3, #1
 80096dc:	72fb      	strb	r3, [r7, #11]
          break;
 80096de:	e06f      	b.n	80097c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00b      	beq.n	8009704 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	7c12      	ldrb	r2, [r2, #16]
 80096f8:	f107 0108 	add.w	r1, r7, #8
 80096fc:	4610      	mov	r0, r2
 80096fe:	4798      	blx	r3
 8009700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009702:	e05d      	b.n	80097c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009704:	6839      	ldr	r1, [r7, #0]
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 fa7e 	bl	8009c08 <USBD_CtlError>
            err++;
 800970c:	7afb      	ldrb	r3, [r7, #11]
 800970e:	3301      	adds	r3, #1
 8009710:	72fb      	strb	r3, [r7, #11]
          break;
 8009712:	e055      	b.n	80097c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00b      	beq.n	8009738 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	7c12      	ldrb	r2, [r2, #16]
 800972c:	f107 0108 	add.w	r1, r7, #8
 8009730:	4610      	mov	r0, r2
 8009732:	4798      	blx	r3
 8009734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009736:	e043      	b.n	80097c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009738:	6839      	ldr	r1, [r7, #0]
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fa64 	bl	8009c08 <USBD_CtlError>
            err++;
 8009740:	7afb      	ldrb	r3, [r7, #11]
 8009742:	3301      	adds	r3, #1
 8009744:	72fb      	strb	r3, [r7, #11]
          break;
 8009746:	e03b      	b.n	80097c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800974e:	695b      	ldr	r3, [r3, #20]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00b      	beq.n	800976c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800975a:	695b      	ldr	r3, [r3, #20]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	7c12      	ldrb	r2, [r2, #16]
 8009760:	f107 0108 	add.w	r1, r7, #8
 8009764:	4610      	mov	r0, r2
 8009766:	4798      	blx	r3
 8009768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800976a:	e029      	b.n	80097c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 fa4a 	bl	8009c08 <USBD_CtlError>
            err++;
 8009774:	7afb      	ldrb	r3, [r7, #11]
 8009776:	3301      	adds	r3, #1
 8009778:	72fb      	strb	r3, [r7, #11]
          break;
 800977a:	e021      	b.n	80097c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00b      	beq.n	80097a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	7c12      	ldrb	r2, [r2, #16]
 8009794:	f107 0108 	add.w	r1, r7, #8
 8009798:	4610      	mov	r0, r2
 800979a:	4798      	blx	r3
 800979c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800979e:	e00f      	b.n	80097c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fa30 	bl	8009c08 <USBD_CtlError>
            err++;
 80097a8:	7afb      	ldrb	r3, [r7, #11]
 80097aa:	3301      	adds	r3, #1
 80097ac:	72fb      	strb	r3, [r7, #11]
          break;
 80097ae:	e007      	b.n	80097c0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fa28 	bl	8009c08 <USBD_CtlError>
          err++;
 80097b8:	7afb      	ldrb	r3, [r7, #11]
 80097ba:	3301      	adds	r3, #1
 80097bc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80097be:	bf00      	nop
      }
      break;
 80097c0:	e037      	b.n	8009832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	7c1b      	ldrb	r3, [r3, #16]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d109      	bne.n	80097de <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d2:	f107 0208 	add.w	r2, r7, #8
 80097d6:	4610      	mov	r0, r2
 80097d8:	4798      	blx	r3
 80097da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097dc:	e029      	b.n	8009832 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80097de:	6839      	ldr	r1, [r7, #0]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 fa11 	bl	8009c08 <USBD_CtlError>
        err++;
 80097e6:	7afb      	ldrb	r3, [r7, #11]
 80097e8:	3301      	adds	r3, #1
 80097ea:	72fb      	strb	r3, [r7, #11]
      break;
 80097ec:	e021      	b.n	8009832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	7c1b      	ldrb	r3, [r3, #16]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d10d      	bne.n	8009812 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fe:	f107 0208 	add.w	r2, r7, #8
 8009802:	4610      	mov	r0, r2
 8009804:	4798      	blx	r3
 8009806:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	3301      	adds	r3, #1
 800980c:	2207      	movs	r2, #7
 800980e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009810:	e00f      	b.n	8009832 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009812:	6839      	ldr	r1, [r7, #0]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 f9f7 	bl	8009c08 <USBD_CtlError>
        err++;
 800981a:	7afb      	ldrb	r3, [r7, #11]
 800981c:	3301      	adds	r3, #1
 800981e:	72fb      	strb	r3, [r7, #11]
      break;
 8009820:	e007      	b.n	8009832 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009822:	6839      	ldr	r1, [r7, #0]
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 f9ef 	bl	8009c08 <USBD_CtlError>
      err++;
 800982a:	7afb      	ldrb	r3, [r7, #11]
 800982c:	3301      	adds	r3, #1
 800982e:	72fb      	strb	r3, [r7, #11]
      break;
 8009830:	bf00      	nop
  }

  if (err != 0U)
 8009832:	7afb      	ldrb	r3, [r7, #11]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d11e      	bne.n	8009876 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	88db      	ldrh	r3, [r3, #6]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d016      	beq.n	800986e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009840:	893b      	ldrh	r3, [r7, #8]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00e      	beq.n	8009864 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	88da      	ldrh	r2, [r3, #6]
 800984a:	893b      	ldrh	r3, [r7, #8]
 800984c:	4293      	cmp	r3, r2
 800984e:	bf28      	it	cs
 8009850:	4613      	movcs	r3, r2
 8009852:	b29b      	uxth	r3, r3
 8009854:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009856:	893b      	ldrh	r3, [r7, #8]
 8009858:	461a      	mov	r2, r3
 800985a:	68f9      	ldr	r1, [r7, #12]
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 fa44 	bl	8009cea <USBD_CtlSendData>
 8009862:	e009      	b.n	8009878 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009864:	6839      	ldr	r1, [r7, #0]
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f9ce 	bl	8009c08 <USBD_CtlError>
 800986c:	e004      	b.n	8009878 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 fa95 	bl	8009d9e <USBD_CtlSendStatus>
 8009874:	e000      	b.n	8009878 <USBD_GetDescriptor+0x2cc>
    return;
 8009876:	bf00      	nop
  }
}
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop

08009880 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	889b      	ldrh	r3, [r3, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d131      	bne.n	80098f6 <USBD_SetAddress+0x76>
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	88db      	ldrh	r3, [r3, #6]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d12d      	bne.n	80098f6 <USBD_SetAddress+0x76>
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	885b      	ldrh	r3, [r3, #2]
 800989e:	2b7f      	cmp	r3, #127	; 0x7f
 80098a0:	d829      	bhi.n	80098f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	885b      	ldrh	r3, [r3, #2]
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b03      	cmp	r3, #3
 80098b8:	d104      	bne.n	80098c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80098ba:	6839      	ldr	r1, [r7, #0]
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 f9a3 	bl	8009c08 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098c2:	e01d      	b.n	8009900 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	7bfa      	ldrb	r2, [r7, #15]
 80098c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80098cc:	7bfb      	ldrb	r3, [r7, #15]
 80098ce:	4619      	mov	r1, r3
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 ff89 	bl	800a7e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 fa61 	bl	8009d9e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80098dc:	7bfb      	ldrb	r3, [r7, #15]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d004      	beq.n	80098ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2202      	movs	r2, #2
 80098e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ea:	e009      	b.n	8009900 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098f4:	e004      	b.n	8009900 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80098f6:	6839      	ldr	r1, [r7, #0]
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f985 	bl	8009c08 <USBD_CtlError>
  }
}
 80098fe:	bf00      	nop
 8009900:	bf00      	nop
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	885b      	ldrh	r3, [r3, #2]
 800991a:	b2da      	uxtb	r2, r3
 800991c:	4b4c      	ldr	r3, [pc, #304]	; (8009a50 <USBD_SetConfig+0x148>)
 800991e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009920:	4b4b      	ldr	r3, [pc, #300]	; (8009a50 <USBD_SetConfig+0x148>)
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	2b01      	cmp	r3, #1
 8009926:	d905      	bls.n	8009934 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f96c 	bl	8009c08 <USBD_CtlError>
    return USBD_FAIL;
 8009930:	2303      	movs	r3, #3
 8009932:	e088      	b.n	8009a46 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800993a:	b2db      	uxtb	r3, r3
 800993c:	2b02      	cmp	r3, #2
 800993e:	d002      	beq.n	8009946 <USBD_SetConfig+0x3e>
 8009940:	2b03      	cmp	r3, #3
 8009942:	d025      	beq.n	8009990 <USBD_SetConfig+0x88>
 8009944:	e071      	b.n	8009a2a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009946:	4b42      	ldr	r3, [pc, #264]	; (8009a50 <USBD_SetConfig+0x148>)
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d01c      	beq.n	8009988 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800994e:	4b40      	ldr	r3, [pc, #256]	; (8009a50 <USBD_SetConfig+0x148>)
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	461a      	mov	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009958:	4b3d      	ldr	r3, [pc, #244]	; (8009a50 <USBD_SetConfig+0x148>)
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	4619      	mov	r1, r3
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f7ff f948 	bl	8008bf4 <USBD_SetClassConfig>
 8009964:	4603      	mov	r3, r0
 8009966:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009968:	7bfb      	ldrb	r3, [r7, #15]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d004      	beq.n	8009978 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 f949 	bl	8009c08 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009976:	e065      	b.n	8009a44 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fa10 	bl	8009d9e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2203      	movs	r2, #3
 8009982:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009986:	e05d      	b.n	8009a44 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fa08 	bl	8009d9e <USBD_CtlSendStatus>
      break;
 800998e:	e059      	b.n	8009a44 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009990:	4b2f      	ldr	r3, [pc, #188]	; (8009a50 <USBD_SetConfig+0x148>)
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d112      	bne.n	80099be <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2202      	movs	r2, #2
 800999c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80099a0:	4b2b      	ldr	r3, [pc, #172]	; (8009a50 <USBD_SetConfig+0x148>)
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	461a      	mov	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099aa:	4b29      	ldr	r3, [pc, #164]	; (8009a50 <USBD_SetConfig+0x148>)
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	4619      	mov	r1, r3
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f7ff f93b 	bl	8008c2c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 f9f1 	bl	8009d9e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099bc:	e042      	b.n	8009a44 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80099be:	4b24      	ldr	r3, [pc, #144]	; (8009a50 <USBD_SetConfig+0x148>)
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	461a      	mov	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d02a      	beq.n	8009a22 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	4619      	mov	r1, r3
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f7ff f929 	bl	8008c2c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80099da:	4b1d      	ldr	r3, [pc, #116]	; (8009a50 <USBD_SetConfig+0x148>)
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	461a      	mov	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099e4:	4b1a      	ldr	r3, [pc, #104]	; (8009a50 <USBD_SetConfig+0x148>)
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	4619      	mov	r1, r3
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7ff f902 	bl	8008bf4 <USBD_SetClassConfig>
 80099f0:	4603      	mov	r3, r0
 80099f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00f      	beq.n	8009a1a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 f903 	bl	8009c08 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	4619      	mov	r1, r3
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f7ff f90e 	bl	8008c2c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2202      	movs	r2, #2
 8009a14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009a18:	e014      	b.n	8009a44 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f9bf 	bl	8009d9e <USBD_CtlSendStatus>
      break;
 8009a20:	e010      	b.n	8009a44 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f9bb 	bl	8009d9e <USBD_CtlSendStatus>
      break;
 8009a28:	e00c      	b.n	8009a44 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009a2a:	6839      	ldr	r1, [r7, #0]
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f8eb 	bl	8009c08 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a32:	4b07      	ldr	r3, [pc, #28]	; (8009a50 <USBD_SetConfig+0x148>)
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	4619      	mov	r1, r3
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7ff f8f7 	bl	8008c2c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	73fb      	strb	r3, [r7, #15]
      break;
 8009a42:	bf00      	nop
  }

  return ret;
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	200001a4 	.word	0x200001a4

08009a54 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	88db      	ldrh	r3, [r3, #6]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d004      	beq.n	8009a70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 f8cd 	bl	8009c08 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009a6e:	e023      	b.n	8009ab8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	dc02      	bgt.n	8009a82 <USBD_GetConfig+0x2e>
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	dc03      	bgt.n	8009a88 <USBD_GetConfig+0x34>
 8009a80:	e015      	b.n	8009aae <USBD_GetConfig+0x5a>
 8009a82:	2b03      	cmp	r3, #3
 8009a84:	d00b      	beq.n	8009a9e <USBD_GetConfig+0x4a>
 8009a86:	e012      	b.n	8009aae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	3308      	adds	r3, #8
 8009a92:	2201      	movs	r2, #1
 8009a94:	4619      	mov	r1, r3
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f927 	bl	8009cea <USBD_CtlSendData>
        break;
 8009a9c:	e00c      	b.n	8009ab8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 f91f 	bl	8009cea <USBD_CtlSendData>
        break;
 8009aac:	e004      	b.n	8009ab8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 f8a9 	bl	8009c08 <USBD_CtlError>
        break;
 8009ab6:	bf00      	nop
}
 8009ab8:	bf00      	nop
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d81e      	bhi.n	8009b16 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	88db      	ldrh	r3, [r3, #6]
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	d004      	beq.n	8009aea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009ae0:	6839      	ldr	r1, [r7, #0]
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f890 	bl	8009c08 <USBD_CtlError>
        break;
 8009ae8:	e01a      	b.n	8009b20 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2201      	movs	r2, #1
 8009aee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d005      	beq.n	8009b06 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	f043 0202 	orr.w	r2, r3, #2
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	330c      	adds	r3, #12
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f8eb 	bl	8009cea <USBD_CtlSendData>
      break;
 8009b14:	e004      	b.n	8009b20 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009b16:	6839      	ldr	r1, [r7, #0]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f875 	bl	8009c08 <USBD_CtlError>
      break;
 8009b1e:	bf00      	nop
  }
}
 8009b20:	bf00      	nop
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	885b      	ldrh	r3, [r3, #2]
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d106      	bne.n	8009b48 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 f92b 	bl	8009d9e <USBD_CtlSendStatus>
  }
}
 8009b48:	bf00      	nop
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	3b01      	subs	r3, #1
 8009b64:	2b02      	cmp	r3, #2
 8009b66:	d80b      	bhi.n	8009b80 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	885b      	ldrh	r3, [r3, #2]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d10c      	bne.n	8009b8a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 f910 	bl	8009d9e <USBD_CtlSendStatus>
      }
      break;
 8009b7e:	e004      	b.n	8009b8a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f840 	bl	8009c08 <USBD_CtlError>
      break;
 8009b88:	e000      	b.n	8009b8c <USBD_ClrFeature+0x3c>
      break;
 8009b8a:	bf00      	nop
  }
}
 8009b8c:	bf00      	nop
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	781a      	ldrb	r2, [r3, #0]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	3301      	adds	r3, #1
 8009bae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	781a      	ldrb	r2, [r3, #0]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f7ff fabb 	bl	800913a <SWAPBYTE>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f7ff faae 	bl	800913a <SWAPBYTE>
 8009bde:	4603      	mov	r3, r0
 8009be0:	461a      	mov	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	3301      	adds	r3, #1
 8009bea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f7ff faa1 	bl	800913a <SWAPBYTE>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	80da      	strh	r2, [r3, #6]
}
 8009c00:	bf00      	nop
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c12:	2180      	movs	r1, #128	; 0x80
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fd7d 	bl	800a714 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 fd79 	bl	800a714 <USBD_LL_StallEP>
}
 8009c22:	bf00      	nop
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b086      	sub	sp, #24
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	60f8      	str	r0, [r7, #12]
 8009c32:	60b9      	str	r1, [r7, #8]
 8009c34:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c36:	2300      	movs	r3, #0
 8009c38:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d036      	beq.n	8009cae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009c44:	6938      	ldr	r0, [r7, #16]
 8009c46:	f000 f836 	bl	8009cb6 <USBD_GetLen>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	005b      	lsls	r3, r3, #1
 8009c52:	b29a      	uxth	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009c58:	7dfb      	ldrb	r3, [r7, #23]
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	7812      	ldrb	r2, [r2, #0]
 8009c62:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c64:	7dfb      	ldrb	r3, [r7, #23]
 8009c66:	3301      	adds	r3, #1
 8009c68:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009c6a:	7dfb      	ldrb	r3, [r7, #23]
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	4413      	add	r3, r2
 8009c70:	2203      	movs	r2, #3
 8009c72:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c74:	7dfb      	ldrb	r3, [r7, #23]
 8009c76:	3301      	adds	r3, #1
 8009c78:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009c7a:	e013      	b.n	8009ca4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009c7c:	7dfb      	ldrb	r3, [r7, #23]
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	4413      	add	r3, r2
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	7812      	ldrb	r2, [r2, #0]
 8009c86:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	613b      	str	r3, [r7, #16]
    idx++;
 8009c8e:	7dfb      	ldrb	r3, [r7, #23]
 8009c90:	3301      	adds	r3, #1
 8009c92:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009c94:	7dfb      	ldrb	r3, [r7, #23]
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	4413      	add	r3, r2
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	701a      	strb	r2, [r3, #0]
    idx++;
 8009c9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1e7      	bne.n	8009c7c <USBD_GetString+0x52>
 8009cac:	e000      	b.n	8009cb0 <USBD_GetString+0x86>
    return;
 8009cae:	bf00      	nop
  }
}
 8009cb0:	3718      	adds	r7, #24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009cb6:	b480      	push	{r7}
 8009cb8:	b085      	sub	sp, #20
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009cc6:	e005      	b.n	8009cd4 <USBD_GetLen+0x1e>
  {
    len++;
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1f5      	bne.n	8009cc8 <USBD_GetLen+0x12>
  }

  return len;
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3714      	adds	r7, #20
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr

08009cea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b084      	sub	sp, #16
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	60f8      	str	r0, [r7, #12]
 8009cf2:	60b9      	str	r1, [r7, #8]
 8009cf4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2202      	movs	r2, #2
 8009cfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	2100      	movs	r1, #0
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 fd88 	bl	800a826 <USBD_LL_Transmit>

  return USBD_OK;
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	68ba      	ldr	r2, [r7, #8]
 8009d30:	2100      	movs	r1, #0
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f000 fd77 	bl	800a826 <USBD_LL_Transmit>

  return USBD_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3710      	adds	r7, #16
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b084      	sub	sp, #16
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	60f8      	str	r0, [r7, #12]
 8009d4a:	60b9      	str	r1, [r7, #8]
 8009d4c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2203      	movs	r2, #3
 8009d52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f000 fd7b 	bl	800a868 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f000 fd6a 	bl	800a868 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b082      	sub	sp, #8
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2204      	movs	r2, #4
 8009daa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009dae:	2300      	movs	r3, #0
 8009db0:	2200      	movs	r2, #0
 8009db2:	2100      	movs	r1, #0
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 fd36 	bl	800a826 <USBD_LL_Transmit>

  return USBD_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3708      	adds	r7, #8
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2205      	movs	r2, #5
 8009dd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	2100      	movs	r1, #0
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fd44 	bl	800a868 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3708      	adds	r7, #8
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
	...

08009dec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b087      	sub	sp, #28
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	4613      	mov	r3, r2
 8009df8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009e02:	4b1f      	ldr	r3, [pc, #124]	; (8009e80 <FATFS_LinkDriverEx+0x94>)
 8009e04:	7a5b      	ldrb	r3, [r3, #9]
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d131      	bne.n	8009e70 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009e0c:	4b1c      	ldr	r3, [pc, #112]	; (8009e80 <FATFS_LinkDriverEx+0x94>)
 8009e0e:	7a5b      	ldrb	r3, [r3, #9]
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	461a      	mov	r2, r3
 8009e14:	4b1a      	ldr	r3, [pc, #104]	; (8009e80 <FATFS_LinkDriverEx+0x94>)
 8009e16:	2100      	movs	r1, #0
 8009e18:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009e1a:	4b19      	ldr	r3, [pc, #100]	; (8009e80 <FATFS_LinkDriverEx+0x94>)
 8009e1c:	7a5b      	ldrb	r3, [r3, #9]
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	4a17      	ldr	r2, [pc, #92]	; (8009e80 <FATFS_LinkDriverEx+0x94>)
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4413      	add	r3, r2
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009e2a:	4b15      	ldr	r3, [pc, #84]	; (8009e80 <FATFS_LinkDriverEx+0x94>)
 8009e2c:	7a5b      	ldrb	r3, [r3, #9]
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	461a      	mov	r2, r3
 8009e32:	4b13      	ldr	r3, [pc, #76]	; (8009e80 <FATFS_LinkDriverEx+0x94>)
 8009e34:	4413      	add	r3, r2
 8009e36:	79fa      	ldrb	r2, [r7, #7]
 8009e38:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009e3a:	4b11      	ldr	r3, [pc, #68]	; (8009e80 <FATFS_LinkDriverEx+0x94>)
 8009e3c:	7a5b      	ldrb	r3, [r3, #9]
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	1c5a      	adds	r2, r3, #1
 8009e42:	b2d1      	uxtb	r1, r2
 8009e44:	4a0e      	ldr	r2, [pc, #56]	; (8009e80 <FATFS_LinkDriverEx+0x94>)
 8009e46:	7251      	strb	r1, [r2, #9]
 8009e48:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009e4a:	7dbb      	ldrb	r3, [r7, #22]
 8009e4c:	3330      	adds	r3, #48	; 0x30
 8009e4e:	b2da      	uxtb	r2, r3
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	3301      	adds	r3, #1
 8009e58:	223a      	movs	r2, #58	; 0x3a
 8009e5a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	3302      	adds	r3, #2
 8009e60:	222f      	movs	r2, #47	; 0x2f
 8009e62:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	3303      	adds	r3, #3
 8009e68:	2200      	movs	r2, #0
 8009e6a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	371c      	adds	r7, #28
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	200001a8 	.word	0x200001a8

08009e84 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009e8e:	2200      	movs	r2, #0
 8009e90:	6839      	ldr	r1, [r7, #0]
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f7ff ffaa 	bl	8009dec <FATFS_LinkDriverEx>
 8009e98:	4603      	mov	r3, r0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3708      	adds	r7, #8
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
	...

08009ea4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	4912      	ldr	r1, [pc, #72]	; (8009ef4 <MX_USB_DEVICE_Init+0x50>)
 8009eac:	4812      	ldr	r0, [pc, #72]	; (8009ef8 <MX_USB_DEVICE_Init+0x54>)
 8009eae:	f7fe fe33 	bl	8008b18 <USBD_Init>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d001      	beq.n	8009ebc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009eb8:	f7f6 fc9e 	bl	80007f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009ebc:	490f      	ldr	r1, [pc, #60]	; (8009efc <MX_USB_DEVICE_Init+0x58>)
 8009ebe:	480e      	ldr	r0, [pc, #56]	; (8009ef8 <MX_USB_DEVICE_Init+0x54>)
 8009ec0:	f7fe fe5a 	bl	8008b78 <USBD_RegisterClass>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d001      	beq.n	8009ece <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009eca:	f7f6 fc95 	bl	80007f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009ece:	490c      	ldr	r1, [pc, #48]	; (8009f00 <MX_USB_DEVICE_Init+0x5c>)
 8009ed0:	4809      	ldr	r0, [pc, #36]	; (8009ef8 <MX_USB_DEVICE_Init+0x54>)
 8009ed2:	f7fe fd7b 	bl	80089cc <USBD_CDC_RegisterInterface>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d001      	beq.n	8009ee0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009edc:	f7f6 fc8c 	bl	80007f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009ee0:	4805      	ldr	r0, [pc, #20]	; (8009ef8 <MX_USB_DEVICE_Init+0x54>)
 8009ee2:	f7fe fe70 	bl	8008bc6 <USBD_Start>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d001      	beq.n	8009ef0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009eec:	f7f6 fc84 	bl	80007f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ef0:	bf00      	nop
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	20000130 	.word	0x20000130
 8009ef8:	20000c28 	.word	0x20000c28
 8009efc:	20000018 	.word	0x20000018
 8009f00:	2000011c 	.word	0x2000011c

08009f04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009f08:	2200      	movs	r2, #0
 8009f0a:	4905      	ldr	r1, [pc, #20]	; (8009f20 <CDC_Init_FS+0x1c>)
 8009f0c:	4805      	ldr	r0, [pc, #20]	; (8009f24 <CDC_Init_FS+0x20>)
 8009f0e:	f7fe fd72 	bl	80089f6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009f12:	4905      	ldr	r1, [pc, #20]	; (8009f28 <CDC_Init_FS+0x24>)
 8009f14:	4803      	ldr	r0, [pc, #12]	; (8009f24 <CDC_Init_FS+0x20>)
 8009f16:	f7fe fd8c 	bl	8008a32 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009f1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	200016f8 	.word	0x200016f8
 8009f24:	20000c28 	.word	0x20000c28
 8009f28:	20000ef8 	.word	0x20000ef8

08009f2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009f30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	4603      	mov	r3, r0
 8009f44:	6039      	str	r1, [r7, #0]
 8009f46:	71fb      	strb	r3, [r7, #7]
 8009f48:	4613      	mov	r3, r2
 8009f4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 8009f4c:	4a49      	ldr	r2, [pc, #292]	; (800a074 <CDC_Control_FS+0x138>)
 8009f4e:	f107 0308 	add.w	r3, r7, #8
 8009f52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f56:	6018      	str	r0, [r3, #0]
 8009f58:	3304      	adds	r3, #4
 8009f5a:	8019      	strh	r1, [r3, #0]
 8009f5c:	3302      	adds	r3, #2
 8009f5e:	0c0a      	lsrs	r2, r1, #16
 8009f60:	701a      	strb	r2, [r3, #0]
  switch(cmd)
 8009f62:	79fb      	ldrb	r3, [r7, #7]
 8009f64:	2b23      	cmp	r3, #35	; 0x23
 8009f66:	d87d      	bhi.n	800a064 <CDC_Control_FS+0x128>
 8009f68:	a201      	add	r2, pc, #4	; (adr r2, 8009f70 <CDC_Control_FS+0x34>)
 8009f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6e:	bf00      	nop
 8009f70:	0800a065 	.word	0x0800a065
 8009f74:	0800a065 	.word	0x0800a065
 8009f78:	0800a065 	.word	0x0800a065
 8009f7c:	0800a065 	.word	0x0800a065
 8009f80:	0800a065 	.word	0x0800a065
 8009f84:	0800a065 	.word	0x0800a065
 8009f88:	0800a065 	.word	0x0800a065
 8009f8c:	0800a065 	.word	0x0800a065
 8009f90:	0800a065 	.word	0x0800a065
 8009f94:	0800a065 	.word	0x0800a065
 8009f98:	0800a065 	.word	0x0800a065
 8009f9c:	0800a065 	.word	0x0800a065
 8009fa0:	0800a065 	.word	0x0800a065
 8009fa4:	0800a065 	.word	0x0800a065
 8009fa8:	0800a065 	.word	0x0800a065
 8009fac:	0800a065 	.word	0x0800a065
 8009fb0:	0800a065 	.word	0x0800a065
 8009fb4:	0800a065 	.word	0x0800a065
 8009fb8:	0800a065 	.word	0x0800a065
 8009fbc:	0800a065 	.word	0x0800a065
 8009fc0:	0800a065 	.word	0x0800a065
 8009fc4:	0800a065 	.word	0x0800a065
 8009fc8:	0800a065 	.word	0x0800a065
 8009fcc:	0800a065 	.word	0x0800a065
 8009fd0:	0800a065 	.word	0x0800a065
 8009fd4:	0800a065 	.word	0x0800a065
 8009fd8:	0800a065 	.word	0x0800a065
 8009fdc:	0800a065 	.word	0x0800a065
 8009fe0:	0800a065 	.word	0x0800a065
 8009fe4:	0800a065 	.word	0x0800a065
 8009fe8:	0800a065 	.word	0x0800a065
 8009fec:	0800a065 	.word	0x0800a065
 8009ff0:	0800a001 	.word	0x0800a001
 8009ff4:	0800a02d 	.word	0x0800a02d
 8009ff8:	0800a065 	.word	0x0800a065
 8009ffc:	0800a065 	.word	0x0800a065
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
       tempbuf[0] = pbuf[0];
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	723b      	strb	r3, [r7, #8]
       tempbuf[1] = pbuf[1];
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	785b      	ldrb	r3, [r3, #1]
 800a00a:	727b      	strb	r3, [r7, #9]
       tempbuf[2] = pbuf[2];
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	789b      	ldrb	r3, [r3, #2]
 800a010:	72bb      	strb	r3, [r7, #10]
       tempbuf[3] = pbuf[3];
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	78db      	ldrb	r3, [r3, #3]
 800a016:	72fb      	strb	r3, [r7, #11]
       tempbuf[4] = pbuf[4];
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	791b      	ldrb	r3, [r3, #4]
 800a01c:	733b      	strb	r3, [r7, #12]
       tempbuf[5] = pbuf[5];
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	795b      	ldrb	r3, [r3, #5]
 800a022:	737b      	strb	r3, [r7, #13]
       tempbuf[6] = pbuf[6];
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	799b      	ldrb	r3, [r3, #6]
 800a028:	73bb      	strb	r3, [r7, #14]
       break;
 800a02a:	e01c      	b.n	800a066 <CDC_Control_FS+0x12a>

     case CDC_GET_LINE_CODING:
       pbuf[0] = tempbuf[0];
 800a02c:	7a3a      	ldrb	r2, [r7, #8]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	701a      	strb	r2, [r3, #0]
       pbuf[1] = tempbuf[1];
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	3301      	adds	r3, #1
 800a036:	7a7a      	ldrb	r2, [r7, #9]
 800a038:	701a      	strb	r2, [r3, #0]
       pbuf[2] = tempbuf[2];
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	3302      	adds	r3, #2
 800a03e:	7aba      	ldrb	r2, [r7, #10]
 800a040:	701a      	strb	r2, [r3, #0]
       pbuf[3] = tempbuf[3];
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	3303      	adds	r3, #3
 800a046:	7afa      	ldrb	r2, [r7, #11]
 800a048:	701a      	strb	r2, [r3, #0]
       pbuf[4] = tempbuf[4];
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	3304      	adds	r3, #4
 800a04e:	7b3a      	ldrb	r2, [r7, #12]
 800a050:	701a      	strb	r2, [r3, #0]
       pbuf[5] = tempbuf[5];
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	3305      	adds	r3, #5
 800a056:	7b7a      	ldrb	r2, [r7, #13]
 800a058:	701a      	strb	r2, [r3, #0]
       pbuf[6] = tempbuf[6];
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	3306      	adds	r3, #6
 800a05e:	7bba      	ldrb	r2, [r7, #14]
 800a060:	701a      	strb	r2, [r3, #0]
       break;
 800a062:	e000      	b.n	800a066 <CDC_Control_FS+0x12a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a064:	bf00      	nop
  }

  return (USBD_OK);
 800a066:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3714      	adds	r7, #20
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr
 800a074:	0800a9c8 	.word	0x0800a9c8

0800a078 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a082:	6879      	ldr	r1, [r7, #4]
 800a084:	4805      	ldr	r0, [pc, #20]	; (800a09c <CDC_Receive_FS+0x24>)
 800a086:	f7fe fcd4 	bl	8008a32 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a08a:	4804      	ldr	r0, [pc, #16]	; (800a09c <CDC_Receive_FS+0x24>)
 800a08c:	f7fe fd1a 	bl	8008ac4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a090:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a092:	4618      	mov	r0, r3
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	20000c28 	.word	0x20000c28

0800a0a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a0b0:	4b0d      	ldr	r3, [pc, #52]	; (800a0e8 <CDC_Transmit_FS+0x48>)
 800a0b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d001      	beq.n	800a0c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e00b      	b.n	800a0de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a0c6:	887b      	ldrh	r3, [r7, #2]
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	6879      	ldr	r1, [r7, #4]
 800a0cc:	4806      	ldr	r0, [pc, #24]	; (800a0e8 <CDC_Transmit_FS+0x48>)
 800a0ce:	f7fe fc92 	bl	80089f6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a0d2:	4805      	ldr	r0, [pc, #20]	; (800a0e8 <CDC_Transmit_FS+0x48>)
 800a0d4:	f7fe fcc6 	bl	8008a64 <USBD_CDC_TransmitPacket>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	20000c28 	.word	0x20000c28

0800a0ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b087      	sub	sp, #28
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a0fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a102:	4618      	mov	r0, r3
 800a104:	371c      	adds	r7, #28
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr
	...

0800a110 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	4603      	mov	r3, r0
 800a118:	6039      	str	r1, [r7, #0]
 800a11a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	2212      	movs	r2, #18
 800a120:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a122:	4b03      	ldr	r3, [pc, #12]	; (800a130 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a124:	4618      	mov	r0, r3
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	2000014c 	.word	0x2000014c

0800a134 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	4603      	mov	r3, r0
 800a13c:	6039      	str	r1, [r7, #0]
 800a13e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	2204      	movs	r2, #4
 800a144:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a146:	4b03      	ldr	r3, [pc, #12]	; (800a154 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a148:	4618      	mov	r0, r3
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr
 800a154:	20000160 	.word	0x20000160

0800a158 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	4603      	mov	r3, r0
 800a160:	6039      	str	r1, [r7, #0]
 800a162:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a164:	79fb      	ldrb	r3, [r7, #7]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d105      	bne.n	800a176 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a16a:	683a      	ldr	r2, [r7, #0]
 800a16c:	4907      	ldr	r1, [pc, #28]	; (800a18c <USBD_FS_ProductStrDescriptor+0x34>)
 800a16e:	4808      	ldr	r0, [pc, #32]	; (800a190 <USBD_FS_ProductStrDescriptor+0x38>)
 800a170:	f7ff fd5b 	bl	8009c2a <USBD_GetString>
 800a174:	e004      	b.n	800a180 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a176:	683a      	ldr	r2, [r7, #0]
 800a178:	4904      	ldr	r1, [pc, #16]	; (800a18c <USBD_FS_ProductStrDescriptor+0x34>)
 800a17a:	4805      	ldr	r0, [pc, #20]	; (800a190 <USBD_FS_ProductStrDescriptor+0x38>)
 800a17c:	f7ff fd55 	bl	8009c2a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a180:	4b02      	ldr	r3, [pc, #8]	; (800a18c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a182:	4618      	mov	r0, r3
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	20001ef8 	.word	0x20001ef8
 800a190:	0800a9d0 	.word	0x0800a9d0

0800a194 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	4603      	mov	r3, r0
 800a19c:	6039      	str	r1, [r7, #0]
 800a19e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a1a0:	683a      	ldr	r2, [r7, #0]
 800a1a2:	4904      	ldr	r1, [pc, #16]	; (800a1b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a1a4:	4804      	ldr	r0, [pc, #16]	; (800a1b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a1a6:	f7ff fd40 	bl	8009c2a <USBD_GetString>
  return USBD_StrDesc;
 800a1aa:	4b02      	ldr	r3, [pc, #8]	; (800a1b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3708      	adds	r7, #8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	20001ef8 	.word	0x20001ef8
 800a1b8:	0800a9e8 	.word	0x0800a9e8

0800a1bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	6039      	str	r1, [r7, #0]
 800a1c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	221a      	movs	r2, #26
 800a1cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a1ce:	f000 f843 	bl	800a258 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a1d2:	4b02      	ldr	r3, [pc, #8]	; (800a1dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	20000164 	.word	0x20000164

0800a1e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	6039      	str	r1, [r7, #0]
 800a1ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a1ec:	79fb      	ldrb	r3, [r7, #7]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d105      	bne.n	800a1fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1f2:	683a      	ldr	r2, [r7, #0]
 800a1f4:	4907      	ldr	r1, [pc, #28]	; (800a214 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a1f6:	4808      	ldr	r0, [pc, #32]	; (800a218 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a1f8:	f7ff fd17 	bl	8009c2a <USBD_GetString>
 800a1fc:	e004      	b.n	800a208 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1fe:	683a      	ldr	r2, [r7, #0]
 800a200:	4904      	ldr	r1, [pc, #16]	; (800a214 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a202:	4805      	ldr	r0, [pc, #20]	; (800a218 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a204:	f7ff fd11 	bl	8009c2a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a208:	4b02      	ldr	r3, [pc, #8]	; (800a214 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3708      	adds	r7, #8
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	20001ef8 	.word	0x20001ef8
 800a218:	0800a9fc 	.word	0x0800a9fc

0800a21c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	4603      	mov	r3, r0
 800a224:	6039      	str	r1, [r7, #0]
 800a226:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a228:	79fb      	ldrb	r3, [r7, #7]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d105      	bne.n	800a23a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a22e:	683a      	ldr	r2, [r7, #0]
 800a230:	4907      	ldr	r1, [pc, #28]	; (800a250 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a232:	4808      	ldr	r0, [pc, #32]	; (800a254 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a234:	f7ff fcf9 	bl	8009c2a <USBD_GetString>
 800a238:	e004      	b.n	800a244 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a23a:	683a      	ldr	r2, [r7, #0]
 800a23c:	4904      	ldr	r1, [pc, #16]	; (800a250 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a23e:	4805      	ldr	r0, [pc, #20]	; (800a254 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a240:	f7ff fcf3 	bl	8009c2a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a244:	4b02      	ldr	r3, [pc, #8]	; (800a250 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a246:	4618      	mov	r0, r3
 800a248:	3708      	adds	r7, #8
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	20001ef8 	.word	0x20001ef8
 800a254:	0800aa08 	.word	0x0800aa08

0800a258 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a25e:	4b0f      	ldr	r3, [pc, #60]	; (800a29c <Get_SerialNum+0x44>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a264:	4b0e      	ldr	r3, [pc, #56]	; (800a2a0 <Get_SerialNum+0x48>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a26a:	4b0e      	ldr	r3, [pc, #56]	; (800a2a4 <Get_SerialNum+0x4c>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4413      	add	r3, r2
 800a276:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d009      	beq.n	800a292 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a27e:	2208      	movs	r2, #8
 800a280:	4909      	ldr	r1, [pc, #36]	; (800a2a8 <Get_SerialNum+0x50>)
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f000 f814 	bl	800a2b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a288:	2204      	movs	r2, #4
 800a28a:	4908      	ldr	r1, [pc, #32]	; (800a2ac <Get_SerialNum+0x54>)
 800a28c:	68b8      	ldr	r0, [r7, #8]
 800a28e:	f000 f80f 	bl	800a2b0 <IntToUnicode>
  }
}
 800a292:	bf00      	nop
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	1fff7a10 	.word	0x1fff7a10
 800a2a0:	1fff7a14 	.word	0x1fff7a14
 800a2a4:	1fff7a18 	.word	0x1fff7a18
 800a2a8:	20000166 	.word	0x20000166
 800a2ac:	20000176 	.word	0x20000176

0800a2b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b087      	sub	sp, #28
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	75fb      	strb	r3, [r7, #23]
 800a2c6:	e027      	b.n	800a318 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	0f1b      	lsrs	r3, r3, #28
 800a2cc:	2b09      	cmp	r3, #9
 800a2ce:	d80b      	bhi.n	800a2e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	0f1b      	lsrs	r3, r3, #28
 800a2d4:	b2da      	uxtb	r2, r3
 800a2d6:	7dfb      	ldrb	r3, [r7, #23]
 800a2d8:	005b      	lsls	r3, r3, #1
 800a2da:	4619      	mov	r1, r3
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	440b      	add	r3, r1
 800a2e0:	3230      	adds	r2, #48	; 0x30
 800a2e2:	b2d2      	uxtb	r2, r2
 800a2e4:	701a      	strb	r2, [r3, #0]
 800a2e6:	e00a      	b.n	800a2fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	0f1b      	lsrs	r3, r3, #28
 800a2ec:	b2da      	uxtb	r2, r3
 800a2ee:	7dfb      	ldrb	r3, [r7, #23]
 800a2f0:	005b      	lsls	r3, r3, #1
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	440b      	add	r3, r1
 800a2f8:	3237      	adds	r2, #55	; 0x37
 800a2fa:	b2d2      	uxtb	r2, r2
 800a2fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	011b      	lsls	r3, r3, #4
 800a302:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a304:	7dfb      	ldrb	r3, [r7, #23]
 800a306:	005b      	lsls	r3, r3, #1
 800a308:	3301      	adds	r3, #1
 800a30a:	68ba      	ldr	r2, [r7, #8]
 800a30c:	4413      	add	r3, r2
 800a30e:	2200      	movs	r2, #0
 800a310:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a312:	7dfb      	ldrb	r3, [r7, #23]
 800a314:	3301      	adds	r3, #1
 800a316:	75fb      	strb	r3, [r7, #23]
 800a318:	7dfa      	ldrb	r2, [r7, #23]
 800a31a:	79fb      	ldrb	r3, [r7, #7]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d3d3      	bcc.n	800a2c8 <IntToUnicode+0x18>
  }
}
 800a320:	bf00      	nop
 800a322:	bf00      	nop
 800a324:	371c      	adds	r7, #28
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
	...

0800a330 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b08a      	sub	sp, #40	; 0x28
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a338:	f107 0314 	add.w	r3, r7, #20
 800a33c:	2200      	movs	r2, #0
 800a33e:	601a      	str	r2, [r3, #0]
 800a340:	605a      	str	r2, [r3, #4]
 800a342:	609a      	str	r2, [r3, #8]
 800a344:	60da      	str	r2, [r3, #12]
 800a346:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a350:	d13a      	bne.n	800a3c8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a352:	2300      	movs	r3, #0
 800a354:	613b      	str	r3, [r7, #16]
 800a356:	4b1e      	ldr	r3, [pc, #120]	; (800a3d0 <HAL_PCD_MspInit+0xa0>)
 800a358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35a:	4a1d      	ldr	r2, [pc, #116]	; (800a3d0 <HAL_PCD_MspInit+0xa0>)
 800a35c:	f043 0301 	orr.w	r3, r3, #1
 800a360:	6313      	str	r3, [r2, #48]	; 0x30
 800a362:	4b1b      	ldr	r3, [pc, #108]	; (800a3d0 <HAL_PCD_MspInit+0xa0>)
 800a364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a366:	f003 0301 	and.w	r3, r3, #1
 800a36a:	613b      	str	r3, [r7, #16]
 800a36c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a36e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a374:	2302      	movs	r3, #2
 800a376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a378:	2300      	movs	r3, #0
 800a37a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a37c:	2303      	movs	r3, #3
 800a37e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a380:	230a      	movs	r3, #10
 800a382:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a384:	f107 0314 	add.w	r3, r7, #20
 800a388:	4619      	mov	r1, r3
 800a38a:	4812      	ldr	r0, [pc, #72]	; (800a3d4 <HAL_PCD_MspInit+0xa4>)
 800a38c:	f7f7 fa3e 	bl	800180c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a390:	4b0f      	ldr	r3, [pc, #60]	; (800a3d0 <HAL_PCD_MspInit+0xa0>)
 800a392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a394:	4a0e      	ldr	r2, [pc, #56]	; (800a3d0 <HAL_PCD_MspInit+0xa0>)
 800a396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a39a:	6353      	str	r3, [r2, #52]	; 0x34
 800a39c:	2300      	movs	r3, #0
 800a39e:	60fb      	str	r3, [r7, #12]
 800a3a0:	4b0b      	ldr	r3, [pc, #44]	; (800a3d0 <HAL_PCD_MspInit+0xa0>)
 800a3a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3a4:	4a0a      	ldr	r2, [pc, #40]	; (800a3d0 <HAL_PCD_MspInit+0xa0>)
 800a3a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a3aa:	6453      	str	r3, [r2, #68]	; 0x44
 800a3ac:	4b08      	ldr	r3, [pc, #32]	; (800a3d0 <HAL_PCD_MspInit+0xa0>)
 800a3ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3b4:	60fb      	str	r3, [r7, #12]
 800a3b6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	2043      	movs	r0, #67	; 0x43
 800a3be:	f7f6 fde0 	bl	8000f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a3c2:	2043      	movs	r0, #67	; 0x43
 800a3c4:	f7f6 fdf9 	bl	8000fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a3c8:	bf00      	nop
 800a3ca:	3728      	adds	r7, #40	; 0x28
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	40023800 	.word	0x40023800
 800a3d4:	40020000 	.word	0x40020000

0800a3d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	4610      	mov	r0, r2
 800a3f0:	f7fe fc34 	bl	8008c5c <USBD_LL_SetupStage>
}
 800a3f4:	bf00      	nop
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	460b      	mov	r3, r1
 800a406:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a40e:	78fa      	ldrb	r2, [r7, #3]
 800a410:	6879      	ldr	r1, [r7, #4]
 800a412:	4613      	mov	r3, r2
 800a414:	00db      	lsls	r3, r3, #3
 800a416:	1a9b      	subs	r3, r3, r2
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	440b      	add	r3, r1
 800a41c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	78fb      	ldrb	r3, [r7, #3]
 800a424:	4619      	mov	r1, r3
 800a426:	f7fe fc6e 	bl	8008d06 <USBD_LL_DataOutStage>
}
 800a42a:	bf00      	nop
 800a42c:	3708      	adds	r7, #8
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}

0800a432 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a432:	b580      	push	{r7, lr}
 800a434:	b082      	sub	sp, #8
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
 800a43a:	460b      	mov	r3, r1
 800a43c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a444:	78fa      	ldrb	r2, [r7, #3]
 800a446:	6879      	ldr	r1, [r7, #4]
 800a448:	4613      	mov	r3, r2
 800a44a:	00db      	lsls	r3, r3, #3
 800a44c:	1a9b      	subs	r3, r3, r2
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	440b      	add	r3, r1
 800a452:	3348      	adds	r3, #72	; 0x48
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	78fb      	ldrb	r3, [r7, #3]
 800a458:	4619      	mov	r1, r3
 800a45a:	f7fe fcb7 	bl	8008dcc <USBD_LL_DataInStage>
}
 800a45e:	bf00      	nop
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b082      	sub	sp, #8
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a474:	4618      	mov	r0, r3
 800a476:	f7fe fdcb 	bl	8009010 <USBD_LL_SOF>
}
 800a47a:	bf00      	nop
 800a47c:	3708      	adds	r7, #8
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b084      	sub	sp, #16
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a48a:	2301      	movs	r3, #1
 800a48c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d102      	bne.n	800a49c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a496:	2300      	movs	r3, #0
 800a498:	73fb      	strb	r3, [r7, #15]
 800a49a:	e008      	b.n	800a4ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d102      	bne.n	800a4aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	73fb      	strb	r3, [r7, #15]
 800a4a8:	e001      	b.n	800a4ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a4aa:	f7f6 f9a5 	bl	80007f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a4b4:	7bfa      	ldrb	r2, [r7, #15]
 800a4b6:	4611      	mov	r1, r2
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7fe fd6b 	bl	8008f94 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7fe fd17 	bl	8008ef8 <USBD_LL_Reset>
}
 800a4ca:	bf00      	nop
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
	...

0800a4d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fe fd66 	bl	8008fb4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	6812      	ldr	r2, [r2, #0]
 800a4f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a4fa:	f043 0301 	orr.w	r3, r3, #1
 800a4fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6a1b      	ldr	r3, [r3, #32]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d005      	beq.n	800a514 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a508:	4b04      	ldr	r3, [pc, #16]	; (800a51c <HAL_PCD_SuspendCallback+0x48>)
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	4a03      	ldr	r2, [pc, #12]	; (800a51c <HAL_PCD_SuspendCallback+0x48>)
 800a50e:	f043 0306 	orr.w	r3, r3, #6
 800a512:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a514:	bf00      	nop
 800a516:	3708      	adds	r7, #8
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	e000ed00 	.word	0xe000ed00

0800a520 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fe fd56 	bl	8008fe0 <USBD_LL_Resume>
}
 800a534:	bf00      	nop
 800a536:	3708      	adds	r7, #8
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	460b      	mov	r3, r1
 800a546:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a54e:	78fa      	ldrb	r2, [r7, #3]
 800a550:	4611      	mov	r1, r2
 800a552:	4618      	mov	r0, r3
 800a554:	f7fe fda4 	bl	80090a0 <USBD_LL_IsoOUTIncomplete>
}
 800a558:	bf00      	nop
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	460b      	mov	r3, r1
 800a56a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a572:	78fa      	ldrb	r2, [r7, #3]
 800a574:	4611      	mov	r1, r2
 800a576:	4618      	mov	r0, r3
 800a578:	f7fe fd6c 	bl	8009054 <USBD_LL_IsoINIncomplete>
}
 800a57c:	bf00      	nop
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a592:	4618      	mov	r0, r3
 800a594:	f7fe fdaa 	bl	80090ec <USBD_LL_DevConnected>
}
 800a598:	bf00      	nop
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fe fda7 	bl	8009102 <USBD_LL_DevDisconnected>
}
 800a5b4:	bf00      	nop
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d13c      	bne.n	800a646 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a5cc:	4a20      	ldr	r2, [pc, #128]	; (800a650 <USBD_LL_Init+0x94>)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a1e      	ldr	r2, [pc, #120]	; (800a650 <USBD_LL_Init+0x94>)
 800a5d8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a5dc:	4b1c      	ldr	r3, [pc, #112]	; (800a650 <USBD_LL_Init+0x94>)
 800a5de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a5e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a5e4:	4b1a      	ldr	r3, [pc, #104]	; (800a650 <USBD_LL_Init+0x94>)
 800a5e6:	2204      	movs	r2, #4
 800a5e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a5ea:	4b19      	ldr	r3, [pc, #100]	; (800a650 <USBD_LL_Init+0x94>)
 800a5ec:	2202      	movs	r2, #2
 800a5ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a5f0:	4b17      	ldr	r3, [pc, #92]	; (800a650 <USBD_LL_Init+0x94>)
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a5f6:	4b16      	ldr	r3, [pc, #88]	; (800a650 <USBD_LL_Init+0x94>)
 800a5f8:	2202      	movs	r2, #2
 800a5fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a5fc:	4b14      	ldr	r3, [pc, #80]	; (800a650 <USBD_LL_Init+0x94>)
 800a5fe:	2200      	movs	r2, #0
 800a600:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a602:	4b13      	ldr	r3, [pc, #76]	; (800a650 <USBD_LL_Init+0x94>)
 800a604:	2200      	movs	r2, #0
 800a606:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a608:	4b11      	ldr	r3, [pc, #68]	; (800a650 <USBD_LL_Init+0x94>)
 800a60a:	2200      	movs	r2, #0
 800a60c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a60e:	4b10      	ldr	r3, [pc, #64]	; (800a650 <USBD_LL_Init+0x94>)
 800a610:	2200      	movs	r2, #0
 800a612:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a614:	4b0e      	ldr	r3, [pc, #56]	; (800a650 <USBD_LL_Init+0x94>)
 800a616:	2200      	movs	r2, #0
 800a618:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a61a:	480d      	ldr	r0, [pc, #52]	; (800a650 <USBD_LL_Init+0x94>)
 800a61c:	f7f7 fac3 	bl	8001ba6 <HAL_PCD_Init>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d001      	beq.n	800a62a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a626:	f7f6 f8e7 	bl	80007f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a62a:	2180      	movs	r1, #128	; 0x80
 800a62c:	4808      	ldr	r0, [pc, #32]	; (800a650 <USBD_LL_Init+0x94>)
 800a62e:	f7f8 fc20 	bl	8002e72 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a632:	2240      	movs	r2, #64	; 0x40
 800a634:	2100      	movs	r1, #0
 800a636:	4806      	ldr	r0, [pc, #24]	; (800a650 <USBD_LL_Init+0x94>)
 800a638:	f7f8 fbd4 	bl	8002de4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a63c:	2280      	movs	r2, #128	; 0x80
 800a63e:	2101      	movs	r1, #1
 800a640:	4803      	ldr	r0, [pc, #12]	; (800a650 <USBD_LL_Init+0x94>)
 800a642:	f7f8 fbcf 	bl	8002de4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3708      	adds	r7, #8
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	200020f8 	.word	0x200020f8

0800a654 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a65c:	2300      	movs	r3, #0
 800a65e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a660:	2300      	movs	r3, #0
 800a662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7f7 fbb8 	bl	8001de0 <HAL_PCD_Start>
 800a670:	4603      	mov	r3, r0
 800a672:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a674:	7bfb      	ldrb	r3, [r7, #15]
 800a676:	4618      	mov	r0, r3
 800a678:	f000 f942 	bl	800a900 <USBD_Get_USB_Status>
 800a67c:	4603      	mov	r3, r0
 800a67e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a680:	7bbb      	ldrb	r3, [r7, #14]
}
 800a682:	4618      	mov	r0, r3
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b084      	sub	sp, #16
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	4608      	mov	r0, r1
 800a694:	4611      	mov	r1, r2
 800a696:	461a      	mov	r2, r3
 800a698:	4603      	mov	r3, r0
 800a69a:	70fb      	strb	r3, [r7, #3]
 800a69c:	460b      	mov	r3, r1
 800a69e:	70bb      	strb	r3, [r7, #2]
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a6b2:	78bb      	ldrb	r3, [r7, #2]
 800a6b4:	883a      	ldrh	r2, [r7, #0]
 800a6b6:	78f9      	ldrb	r1, [r7, #3]
 800a6b8:	f7f7 ff9c 	bl	80025f4 <HAL_PCD_EP_Open>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6c0:	7bfb      	ldrb	r3, [r7, #15]
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f000 f91c 	bl	800a900 <USBD_Get_USB_Status>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b084      	sub	sp, #16
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	460b      	mov	r3, r1
 800a6e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a6f0:	78fa      	ldrb	r2, [r7, #3]
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7f7 ffe5 	bl	80026c4 <HAL_PCD_EP_Close>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6fe:	7bfb      	ldrb	r3, [r7, #15]
 800a700:	4618      	mov	r0, r3
 800a702:	f000 f8fd 	bl	800a900 <USBD_Get_USB_Status>
 800a706:	4603      	mov	r3, r0
 800a708:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a70a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3710      	adds	r7, #16
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	460b      	mov	r3, r1
 800a71e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a720:	2300      	movs	r3, #0
 800a722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a724:	2300      	movs	r3, #0
 800a726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a72e:	78fa      	ldrb	r2, [r7, #3]
 800a730:	4611      	mov	r1, r2
 800a732:	4618      	mov	r0, r3
 800a734:	f7f8 f8bd 	bl	80028b2 <HAL_PCD_EP_SetStall>
 800a738:	4603      	mov	r3, r0
 800a73a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a73c:	7bfb      	ldrb	r3, [r7, #15]
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 f8de 	bl	800a900 <USBD_Get_USB_Status>
 800a744:	4603      	mov	r3, r0
 800a746:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a748:	7bbb      	ldrb	r3, [r7, #14]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b084      	sub	sp, #16
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
 800a75a:	460b      	mov	r3, r1
 800a75c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a75e:	2300      	movs	r3, #0
 800a760:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a76c:	78fa      	ldrb	r2, [r7, #3]
 800a76e:	4611      	mov	r1, r2
 800a770:	4618      	mov	r0, r3
 800a772:	f7f8 f902 	bl	800297a <HAL_PCD_EP_ClrStall>
 800a776:	4603      	mov	r3, r0
 800a778:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a77a:	7bfb      	ldrb	r3, [r7, #15]
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 f8bf 	bl	800a900 <USBD_Get_USB_Status>
 800a782:	4603      	mov	r3, r0
 800a784:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a786:	7bbb      	ldrb	r3, [r7, #14]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	460b      	mov	r3, r1
 800a79a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a7a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a7a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	da0b      	bge.n	800a7c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a7ac:	78fb      	ldrb	r3, [r7, #3]
 800a7ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7b2:	68f9      	ldr	r1, [r7, #12]
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	00db      	lsls	r3, r3, #3
 800a7b8:	1a9b      	subs	r3, r3, r2
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	440b      	add	r3, r1
 800a7be:	333e      	adds	r3, #62	; 0x3e
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	e00b      	b.n	800a7dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a7c4:	78fb      	ldrb	r3, [r7, #3]
 800a7c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7ca:	68f9      	ldr	r1, [r7, #12]
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	00db      	lsls	r3, r3, #3
 800a7d0:	1a9b      	subs	r3, r3, r2
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	440b      	add	r3, r1
 800a7d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a7da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3714      	adds	r7, #20
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a802:	78fa      	ldrb	r2, [r7, #3]
 800a804:	4611      	mov	r1, r2
 800a806:	4618      	mov	r0, r3
 800a808:	f7f7 fecf 	bl	80025aa <HAL_PCD_SetAddress>
 800a80c:	4603      	mov	r3, r0
 800a80e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a810:	7bfb      	ldrb	r3, [r7, #15]
 800a812:	4618      	mov	r0, r3
 800a814:	f000 f874 	bl	800a900 <USBD_Get_USB_Status>
 800a818:	4603      	mov	r3, r0
 800a81a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a81c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b086      	sub	sp, #24
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	60f8      	str	r0, [r7, #12]
 800a82e:	607a      	str	r2, [r7, #4]
 800a830:	603b      	str	r3, [r7, #0]
 800a832:	460b      	mov	r3, r1
 800a834:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a83a:	2300      	movs	r3, #0
 800a83c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a844:	7af9      	ldrb	r1, [r7, #11]
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	f7f7 ffe8 	bl	800281e <HAL_PCD_EP_Transmit>
 800a84e:	4603      	mov	r3, r0
 800a850:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a852:	7dfb      	ldrb	r3, [r7, #23]
 800a854:	4618      	mov	r0, r3
 800a856:	f000 f853 	bl	800a900 <USBD_Get_USB_Status>
 800a85a:	4603      	mov	r3, r0
 800a85c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a85e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a860:	4618      	mov	r0, r3
 800a862:	3718      	adds	r7, #24
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b086      	sub	sp, #24
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	607a      	str	r2, [r7, #4]
 800a872:	603b      	str	r3, [r7, #0]
 800a874:	460b      	mov	r3, r1
 800a876:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a878:	2300      	movs	r3, #0
 800a87a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a87c:	2300      	movs	r3, #0
 800a87e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a886:	7af9      	ldrb	r1, [r7, #11]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	f7f7 ff64 	bl	8002758 <HAL_PCD_EP_Receive>
 800a890:	4603      	mov	r3, r0
 800a892:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a894:	7dfb      	ldrb	r3, [r7, #23]
 800a896:	4618      	mov	r0, r3
 800a898:	f000 f832 	bl	800a900 <USBD_Get_USB_Status>
 800a89c:	4603      	mov	r3, r0
 800a89e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3718      	adds	r7, #24
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}

0800a8aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b082      	sub	sp, #8
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a8bc:	78fa      	ldrb	r2, [r7, #3]
 800a8be:	4611      	mov	r1, r2
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7f7 ff94 	bl	80027ee <HAL_PCD_EP_GetRxCount>
 800a8c6:	4603      	mov	r3, r0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3708      	adds	r7, #8
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a8d8:	4b03      	ldr	r3, [pc, #12]	; (800a8e8 <USBD_static_malloc+0x18>)
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	370c      	adds	r7, #12
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop
 800a8e8:	200001b4 	.word	0x200001b4

0800a8ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b083      	sub	sp, #12
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]

}
 800a8f4:	bf00      	nop
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	4603      	mov	r3, r0
 800a908:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a90a:	2300      	movs	r3, #0
 800a90c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a90e:	79fb      	ldrb	r3, [r7, #7]
 800a910:	2b03      	cmp	r3, #3
 800a912:	d817      	bhi.n	800a944 <USBD_Get_USB_Status+0x44>
 800a914:	a201      	add	r2, pc, #4	; (adr r2, 800a91c <USBD_Get_USB_Status+0x1c>)
 800a916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a91a:	bf00      	nop
 800a91c:	0800a92d 	.word	0x0800a92d
 800a920:	0800a933 	.word	0x0800a933
 800a924:	0800a939 	.word	0x0800a939
 800a928:	0800a93f 	.word	0x0800a93f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	73fb      	strb	r3, [r7, #15]
    break;
 800a930:	e00b      	b.n	800a94a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a932:	2303      	movs	r3, #3
 800a934:	73fb      	strb	r3, [r7, #15]
    break;
 800a936:	e008      	b.n	800a94a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a938:	2301      	movs	r3, #1
 800a93a:	73fb      	strb	r3, [r7, #15]
    break;
 800a93c:	e005      	b.n	800a94a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a93e:	2303      	movs	r3, #3
 800a940:	73fb      	strb	r3, [r7, #15]
    break;
 800a942:	e002      	b.n	800a94a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a944:	2303      	movs	r3, #3
 800a946:	73fb      	strb	r3, [r7, #15]
    break;
 800a948:	bf00      	nop
  }
  return usb_status;
 800a94a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3714      	adds	r7, #20
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <__libc_init_array>:
 800a958:	b570      	push	{r4, r5, r6, lr}
 800a95a:	4d0d      	ldr	r5, [pc, #52]	; (800a990 <__libc_init_array+0x38>)
 800a95c:	4c0d      	ldr	r4, [pc, #52]	; (800a994 <__libc_init_array+0x3c>)
 800a95e:	1b64      	subs	r4, r4, r5
 800a960:	10a4      	asrs	r4, r4, #2
 800a962:	2600      	movs	r6, #0
 800a964:	42a6      	cmp	r6, r4
 800a966:	d109      	bne.n	800a97c <__libc_init_array+0x24>
 800a968:	4d0b      	ldr	r5, [pc, #44]	; (800a998 <__libc_init_array+0x40>)
 800a96a:	4c0c      	ldr	r4, [pc, #48]	; (800a99c <__libc_init_array+0x44>)
 800a96c:	f000 f820 	bl	800a9b0 <_init>
 800a970:	1b64      	subs	r4, r4, r5
 800a972:	10a4      	asrs	r4, r4, #2
 800a974:	2600      	movs	r6, #0
 800a976:	42a6      	cmp	r6, r4
 800a978:	d105      	bne.n	800a986 <__libc_init_array+0x2e>
 800a97a:	bd70      	pop	{r4, r5, r6, pc}
 800a97c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a980:	4798      	blx	r3
 800a982:	3601      	adds	r6, #1
 800a984:	e7ee      	b.n	800a964 <__libc_init_array+0xc>
 800a986:	f855 3b04 	ldr.w	r3, [r5], #4
 800a98a:	4798      	blx	r3
 800a98c:	3601      	adds	r6, #1
 800a98e:	e7f2      	b.n	800a976 <__libc_init_array+0x1e>
 800a990:	0800aa54 	.word	0x0800aa54
 800a994:	0800aa54 	.word	0x0800aa54
 800a998:	0800aa54 	.word	0x0800aa54
 800a99c:	0800aa58 	.word	0x0800aa58

0800a9a0 <memset>:
 800a9a0:	4402      	add	r2, r0
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d100      	bne.n	800a9aa <memset+0xa>
 800a9a8:	4770      	bx	lr
 800a9aa:	f803 1b01 	strb.w	r1, [r3], #1
 800a9ae:	e7f9      	b.n	800a9a4 <memset+0x4>

0800a9b0 <_init>:
 800a9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b2:	bf00      	nop
 800a9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9b6:	bc08      	pop	{r3}
 800a9b8:	469e      	mov	lr, r3
 800a9ba:	4770      	bx	lr

0800a9bc <_fini>:
 800a9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9be:	bf00      	nop
 800a9c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9c2:	bc08      	pop	{r3}
 800a9c4:	469e      	mov	lr, r3
 800a9c6:	4770      	bx	lr
