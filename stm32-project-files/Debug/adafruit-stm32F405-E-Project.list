
adafruit-stm32F405-E-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800a640  0800a640  0001a640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6c4  0800a6c4  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6c4  0800a6c4  0001a6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6cc  0800a6cc  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6cc  0800a6cc  0001a6cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6d0  0800a6d0  0001a6d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800a6d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002224  20000180  0800a854  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023a4  0800a854  000223a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef72  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043ea  00000000  00000000  0003f122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00043510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  00044788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000238ad  00000000  00000000  00045868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001860c  00000000  00000000  00069115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1fc3  00000000  00000000  00081721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001436e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aac  00000000  00000000  00143738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a628 	.word	0x0800a628

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	0800a628 	.word	0x0800a628

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
//	Note: trying to write to file inside this function doesnt work for some reason.
	CDC_Transmit_FS((uint8_t*)&GPSbuff[GPS_idx], 1);
 80004c8:	4b10      	ldr	r3, [pc, #64]	; (800050c <HAL_UART_RxCpltCallback+0x4c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a10      	ldr	r2, [pc, #64]	; (8000510 <HAL_UART_RxCpltCallback+0x50>)
 80004ce:	4413      	add	r3, r2
 80004d0:	2101      	movs	r1, #1
 80004d2:	4618      	mov	r0, r3
 80004d4:	f009 fc20 	bl	8009d18 <CDC_Transmit_FS>

	//Reset pointer to start of GPSdata array
	if(GPS_idx == 255)
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_UART_RxCpltCallback+0x4c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2bff      	cmp	r3, #255	; 0xff
 80004de:	d103      	bne.n	80004e8 <HAL_UART_RxCpltCallback+0x28>
	{
		GPS_idx = 0;
 80004e0:	4b0a      	ldr	r3, [pc, #40]	; (800050c <HAL_UART_RxCpltCallback+0x4c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	e004      	b.n	80004f2 <HAL_UART_RxCpltCallback+0x32>
	}
	else
	{
		GPS_idx++;
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <HAL_UART_RxCpltCallback+0x4c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	3301      	adds	r3, #1
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <HAL_UART_RxCpltCallback+0x4c>)
 80004f0:	6013      	str	r3, [r2, #0]
	}
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&GPSbuff[GPS_idx], 1);
 80004f2:	4b06      	ldr	r3, [pc, #24]	; (800050c <HAL_UART_RxCpltCallback+0x4c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a06      	ldr	r2, [pc, #24]	; (8000510 <HAL_UART_RxCpltCallback+0x50>)
 80004f8:	4413      	add	r3, r2
 80004fa:	2201      	movs	r2, #1
 80004fc:	4619      	mov	r1, r3
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <HAL_UART_RxCpltCallback+0x54>)
 8000500:	f004 fc5e 	bl	8004dc0 <HAL_UART_Receive_IT>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	2000019c 	.word	0x2000019c
 8000510:	2000047c 	.word	0x2000047c
 8000514:	20000438 	.word	0x20000438

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fb86 	bl	8000c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f816 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f8f0 	bl	8000708 <MX_GPIO_Init>
  MX_DMA_Init();
 8000528:	f000 f8c6 	bl	80006b8 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800052c:	f009 faf6 	bl	8009b1c <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 8000530:	f000 f878 	bl	8000624 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000534:	f007 fbac 	bl	8007c90 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 8000538:	f000 f894 	bl	8000664 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, (uint8_t*)GPSbuff, 1);
 800053c:	2201      	movs	r2, #1
 800053e:	4902      	ldr	r1, [pc, #8]	; (8000548 <main+0x30>)
 8000540:	4802      	ldr	r0, [pc, #8]	; (800054c <main+0x34>)
 8000542:	f004 fc3d 	bl	8004dc0 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000546:	e7fe      	b.n	8000546 <main+0x2e>
 8000548:	2000047c 	.word	0x2000047c
 800054c:	20000438 	.word	0x20000438

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2230      	movs	r2, #48	; 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f00a f85a 	bl	800a618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	4b28      	ldr	r3, [pc, #160]	; (800061c <SystemClock_Config+0xcc>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a27      	ldr	r2, [pc, #156]	; (800061c <SystemClock_Config+0xcc>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b25      	ldr	r3, [pc, #148]	; (800061c <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <SystemClock_Config+0xd0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a21      	ldr	r2, [pc, #132]	; (8000620 <SystemClock_Config+0xd0>)
 800059a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ac:	2301      	movs	r3, #1
 80005ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	2302      	movs	r3, #2
 80005b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80005c0:	2306      	movs	r3, #6
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005c4:	23a8      	movs	r3, #168	; 0xa8
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005cc:	2307      	movs	r3, #7
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 fc2f 	bl	8002e38 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e0:	f000 f90e 	bl	8000800 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2302      	movs	r3, #2
 80005ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2105      	movs	r1, #5
 8000602:	4618      	mov	r0, r3
 8000604:	f002 fe90 	bl	8003328 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800060e:	f000 f8f7 	bl	8000800 <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3750      	adds	r7, #80	; 0x50
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_SDIO_SD_Init+0x38>)
 800062a:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <MX_SDIO_SD_Init+0x3c>)
 800062c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_SDIO_SD_Init+0x38>)
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_SDIO_SD_Init+0x38>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <MX_SDIO_SD_Init+0x38>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_SDIO_SD_Init+0x38>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <MX_SDIO_SD_Init+0x38>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <MX_SDIO_SD_Init+0x38>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	200005dc 	.word	0x200005dc
 8000660:	40012c00 	.word	0x40012c00

08000664 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART3_UART_Init+0x4c>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <MX_USART3_UART_Init+0x50>)
 800066c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_USART3_UART_Init+0x4c>)
 8000670:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000674:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART3_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART3_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART3_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART3_UART_Init+0x4c>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART3_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART3_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART3_UART_Init+0x4c>)
 800069c:	f004 fb43 	bl	8004d26 <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006a6:	f000 f8ab 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000438 	.word	0x20000438
 80006b4:	40004800 	.word	0x40004800

080006b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_DMA_Init+0x4c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a0f      	ldr	r2, [pc, #60]	; (8000704 <MX_DMA_Init+0x4c>)
 80006c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <MX_DMA_Init+0x4c>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	203b      	movs	r0, #59	; 0x3b
 80006e0:	f000 fc15 	bl	8000f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80006e4:	203b      	movs	r0, #59	; 0x3b
 80006e6:	f000 fc2e 	bl	8000f46 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	2045      	movs	r0, #69	; 0x45
 80006f0:	f000 fc0d 	bl	8000f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80006f4:	2045      	movs	r0, #69	; 0x45
 80006f6:	f000 fc26 	bl	8000f46 <HAL_NVIC_EnableIRQ>

}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	4b34      	ldr	r3, [pc, #208]	; (80007f4 <MX_GPIO_Init+0xec>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a33      	ldr	r2, [pc, #204]	; (80007f4 <MX_GPIO_Init+0xec>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b31      	ldr	r3, [pc, #196]	; (80007f4 <MX_GPIO_Init+0xec>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <MX_GPIO_Init+0xec>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a2c      	ldr	r2, [pc, #176]	; (80007f4 <MX_GPIO_Init+0xec>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <MX_GPIO_Init+0xec>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <MX_GPIO_Init+0xec>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a25      	ldr	r2, [pc, #148]	; (80007f4 <MX_GPIO_Init+0xec>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <MX_GPIO_Init+0xec>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <MX_GPIO_Init+0xec>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a1e      	ldr	r2, [pc, #120]	; (80007f4 <MX_GPIO_Init+0xec>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <MX_GPIO_Init+0xec>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_GPIO_Init+0xec>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a17      	ldr	r2, [pc, #92]	; (80007f4 <MX_GPIO_Init+0xec>)
 8000798:	f043 0308 	orr.w	r3, r3, #8
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_GPIO_Init+0xec>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0308 	and.w	r3, r3, #8
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2102      	movs	r1, #2
 80007ae:	4812      	ldr	r0, [pc, #72]	; (80007f8 <MX_GPIO_Init+0xf0>)
 80007b0:	f001 f9a6 	bl	8001b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 80007b4:	2302      	movs	r3, #2
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	480b      	ldr	r0, [pc, #44]	; (80007f8 <MX_GPIO_Init+0xf0>)
 80007cc:	f000 ffe4 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_GPIO_Init+0xf4>)
 80007e6:	f000 ffd7 	bl	8001798 <HAL_GPIO_Init>

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020800 	.word	0x40020800
 80007fc:	40020400 	.word	0x40020400

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	e7fe      	b.n	8000808 <Error_Handler+0x8>
	...

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <HAL_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <HAL_MspInit+0x4c>)
 800081c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000820:	6453      	str	r3, [r2, #68]	; 0x44
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <HAL_MspInit+0x4c>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <HAL_MspInit+0x4c>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083c:	6413      	str	r3, [r2, #64]	; 0x40
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_MspInit+0x4c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a70      	ldr	r2, [pc, #448]	; (8000a3c <HAL_SD_MspInit+0x1e0>)
 800087a:	4293      	cmp	r3, r2
 800087c:	f040 80da 	bne.w	8000a34 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	4b6e      	ldr	r3, [pc, #440]	; (8000a40 <HAL_SD_MspInit+0x1e4>)
 8000886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000888:	4a6d      	ldr	r2, [pc, #436]	; (8000a40 <HAL_SD_MspInit+0x1e4>)
 800088a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800088e:	6453      	str	r3, [r2, #68]	; 0x44
 8000890:	4b6b      	ldr	r3, [pc, #428]	; (8000a40 <HAL_SD_MspInit+0x1e4>)
 8000892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	4b67      	ldr	r3, [pc, #412]	; (8000a40 <HAL_SD_MspInit+0x1e4>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	4a66      	ldr	r2, [pc, #408]	; (8000a40 <HAL_SD_MspInit+0x1e4>)
 80008a6:	f043 0304 	orr.w	r3, r3, #4
 80008aa:	6313      	str	r3, [r2, #48]	; 0x30
 80008ac:	4b64      	ldr	r3, [pc, #400]	; (8000a40 <HAL_SD_MspInit+0x1e4>)
 80008ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b0:	f003 0304 	and.w	r3, r3, #4
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	4b60      	ldr	r3, [pc, #384]	; (8000a40 <HAL_SD_MspInit+0x1e4>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	4a5f      	ldr	r2, [pc, #380]	; (8000a40 <HAL_SD_MspInit+0x1e4>)
 80008c2:	f043 0308 	orr.w	r3, r3, #8
 80008c6:	6313      	str	r3, [r2, #48]	; 0x30
 80008c8:	4b5d      	ldr	r3, [pc, #372]	; (8000a40 <HAL_SD_MspInit+0x1e4>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008cc:	f003 0308 	and.w	r3, r3, #8
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80008d4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80008d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008de:	2301      	movs	r3, #1
 80008e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008e6:	230c      	movs	r3, #12
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	4854      	ldr	r0, [pc, #336]	; (8000a44 <HAL_SD_MspInit+0x1e8>)
 80008f2:	f000 ff51 	bl	8001798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000908:	230c      	movs	r3, #12
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	484c      	ldr	r0, [pc, #304]	; (8000a44 <HAL_SD_MspInit+0x1e8>)
 8000914:	f000 ff40 	bl	8001798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000918:	2304      	movs	r3, #4
 800091a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000920:	2301      	movs	r3, #1
 8000922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000928:	230c      	movs	r3, #12
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	4845      	ldr	r0, [pc, #276]	; (8000a48 <HAL_SD_MspInit+0x1ec>)
 8000934:	f000 ff30 	bl	8001798 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000938:	4b44      	ldr	r3, [pc, #272]	; (8000a4c <HAL_SD_MspInit+0x1f0>)
 800093a:	4a45      	ldr	r2, [pc, #276]	; (8000a50 <HAL_SD_MspInit+0x1f4>)
 800093c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800093e:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <HAL_SD_MspInit+0x1f0>)
 8000940:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000944:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000946:	4b41      	ldr	r3, [pc, #260]	; (8000a4c <HAL_SD_MspInit+0x1f0>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800094c:	4b3f      	ldr	r3, [pc, #252]	; (8000a4c <HAL_SD_MspInit+0x1f0>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000952:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <HAL_SD_MspInit+0x1f0>)
 8000954:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000958:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800095a:	4b3c      	ldr	r3, [pc, #240]	; (8000a4c <HAL_SD_MspInit+0x1f0>)
 800095c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000960:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000962:	4b3a      	ldr	r3, [pc, #232]	; (8000a4c <HAL_SD_MspInit+0x1f0>)
 8000964:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000968:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800096a:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <HAL_SD_MspInit+0x1f0>)
 800096c:	2220      	movs	r2, #32
 800096e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000970:	4b36      	ldr	r3, [pc, #216]	; (8000a4c <HAL_SD_MspInit+0x1f0>)
 8000972:	2200      	movs	r2, #0
 8000974:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000976:	4b35      	ldr	r3, [pc, #212]	; (8000a4c <HAL_SD_MspInit+0x1f0>)
 8000978:	2204      	movs	r2, #4
 800097a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800097c:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <HAL_SD_MspInit+0x1f0>)
 800097e:	2203      	movs	r2, #3
 8000980:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000982:	4b32      	ldr	r3, [pc, #200]	; (8000a4c <HAL_SD_MspInit+0x1f0>)
 8000984:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000988:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800098a:	4b30      	ldr	r3, [pc, #192]	; (8000a4c <HAL_SD_MspInit+0x1f0>)
 800098c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000990:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000992:	482e      	ldr	r0, [pc, #184]	; (8000a4c <HAL_SD_MspInit+0x1f0>)
 8000994:	f000 faf2 	bl	8000f7c <HAL_DMA_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 800099e:	f7ff ff2f 	bl	8000800 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a29      	ldr	r2, [pc, #164]	; (8000a4c <HAL_SD_MspInit+0x1f0>)
 80009a6:	641a      	str	r2, [r3, #64]	; 0x40
 80009a8:	4a28      	ldr	r2, [pc, #160]	; (8000a4c <HAL_SD_MspInit+0x1f0>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80009ae:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <HAL_SD_MspInit+0x1f8>)
 80009b0:	4a29      	ldr	r2, [pc, #164]	; (8000a58 <HAL_SD_MspInit+0x1fc>)
 80009b2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80009b4:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <HAL_SD_MspInit+0x1f8>)
 80009b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ba:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009bc:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <HAL_SD_MspInit+0x1f8>)
 80009be:	2240      	movs	r2, #64	; 0x40
 80009c0:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009c2:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <HAL_SD_MspInit+0x1f8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <HAL_SD_MspInit+0x1f8>)
 80009ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ce:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009d0:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <HAL_SD_MspInit+0x1f8>)
 80009d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009d6:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009d8:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <HAL_SD_MspInit+0x1f8>)
 80009da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009de:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <HAL_SD_MspInit+0x1f8>)
 80009e2:	2220      	movs	r2, #32
 80009e4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <HAL_SD_MspInit+0x1f8>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009ec:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <HAL_SD_MspInit+0x1f8>)
 80009ee:	2204      	movs	r2, #4
 80009f0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <HAL_SD_MspInit+0x1f8>)
 80009f4:	2203      	movs	r2, #3
 80009f6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <HAL_SD_MspInit+0x1f8>)
 80009fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_SD_MspInit+0x1f8>)
 8000a02:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a06:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000a08:	4812      	ldr	r0, [pc, #72]	; (8000a54 <HAL_SD_MspInit+0x1f8>)
 8000a0a:	f000 fab7 	bl	8000f7c <HAL_DMA_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8000a14:	f7ff fef4 	bl	8000800 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <HAL_SD_MspInit+0x1f8>)
 8000a1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a1e:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <HAL_SD_MspInit+0x1f8>)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2100      	movs	r1, #0
 8000a28:	2031      	movs	r0, #49	; 0x31
 8000a2a:	f000 fa70 	bl	8000f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000a2e:	2031      	movs	r0, #49	; 0x31
 8000a30:	f000 fa89 	bl	8000f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000a34:	bf00      	nop
 8000a36:	3728      	adds	r7, #40	; 0x28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40012c00 	.word	0x40012c00
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020800 	.word	0x40020800
 8000a48:	40020c00 	.word	0x40020c00
 8000a4c:	200003d8 	.word	0x200003d8
 8000a50:	40026458 	.word	0x40026458
 8000a54:	2000057c 	.word	0x2000057c
 8000a58:	400264a0 	.word	0x400264a0

08000a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a1d      	ldr	r2, [pc, #116]	; (8000af0 <HAL_UART_MspInit+0x94>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d134      	bne.n	8000ae8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <HAL_UART_MspInit+0x98>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <HAL_UART_MspInit+0x98>)
 8000a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8e:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <HAL_UART_MspInit+0x98>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_UART_MspInit+0x98>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <HAL_UART_MspInit+0x98>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_UART_MspInit+0x98>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ab6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ac8:	2307      	movs	r3, #7
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4809      	ldr	r0, [pc, #36]	; (8000af8 <HAL_UART_MspInit+0x9c>)
 8000ad4:	f000 fe60 	bl	8001798 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	2027      	movs	r0, #39	; 0x27
 8000ade:	f000 fa16 	bl	8000f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ae2:	2027      	movs	r0, #39	; 0x27
 8000ae4:	f000 fa2f 	bl	8000f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ae8:	bf00      	nop
 8000aea:	3728      	adds	r7, #40	; 0x28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40004800 	.word	0x40004800
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020400 	.word	0x40020400

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <NMI_Handler+0x4>

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <MemManage_Handler+0x4>

08000b0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b48:	f000 f8c2 	bl	8000cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b54:	4802      	ldr	r0, [pc, #8]	; (8000b60 <USART3_IRQHandler+0x10>)
 8000b56:	f004 f963 	bl	8004e20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000438 	.word	0x20000438

08000b64 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <SDIO_IRQHandler+0x10>)
 8000b6a:	f003 f823 	bl	8003bb4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200005dc 	.word	0x200005dc

08000b78 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <DMA2_Stream3_IRQHandler+0x10>)
 8000b7e:	f000 fb95 	bl	80012ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200003d8 	.word	0x200003d8

08000b8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b90:	4802      	ldr	r0, [pc, #8]	; (8000b9c <OTG_FS_IRQHandler+0x10>)
 8000b92:	f001 f91e 	bl	8001dd2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20001f9c 	.word	0x20001f9c

08000ba0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <DMA2_Stream6_IRQHandler+0x10>)
 8000ba6:	f000 fb81 	bl	80012ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000057c 	.word	0x2000057c

08000bb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <SystemInit+0x20>)
 8000bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <SystemInit+0x20>)
 8000bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bde:	490e      	ldr	r1, [pc, #56]	; (8000c18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000be0:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be4:	e002      	b.n	8000bec <LoopCopyDataInit>

08000be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bea:	3304      	adds	r3, #4

08000bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf0:	d3f9      	bcc.n	8000be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bf4:	4c0b      	ldr	r4, [pc, #44]	; (8000c24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf8:	e001      	b.n	8000bfe <LoopFillZerobss>

08000bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bfc:	3204      	adds	r2, #4

08000bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c00:	d3fb      	bcc.n	8000bfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c02:	f7ff ffd7 	bl	8000bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c06:	f009 fce3 	bl	800a5d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0a:	f7ff fc85 	bl	8000518 <main>
  bx  lr    
 8000c0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c18:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000c1c:	0800a6d4 	.word	0x0800a6d4
  ldr r2, =_sbss
 8000c20:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000c24:	200023a4 	.word	0x200023a4

08000c28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC_IRQHandler>
	...

08000c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <HAL_Init+0x40>)
 8000c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <HAL_Init+0x40>)
 8000c42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <HAL_Init+0x40>)
 8000c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c54:	2003      	movs	r0, #3
 8000c56:	f000 f94f 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f000 f808 	bl	8000c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c60:	f7ff fdd4 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023c00 	.word	0x40023c00

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_InitTick+0x54>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_InitTick+0x58>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f967 	bl	8000f62 <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00e      	b.n	8000cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b0f      	cmp	r3, #15
 8000ca2:	d80a      	bhi.n	8000cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f000 f92f 	bl	8000f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <HAL_InitTick+0x5c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e000      	b.n	8000cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000004 	.word	0x20000004

08000cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x24>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_IncTick+0x24>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000660 	.word	0x20000660

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_GetTick+0x14>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000660 	.word	0x20000660

08000d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d18:	f7ff ffee 	bl	8000cf8 <HAL_GetTick>
 8000d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d28:	d005      	beq.n	8000d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_Delay+0x44>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4413      	add	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d36:	bf00      	nop
 8000d38:	f7ff ffde 	bl	8000cf8 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d8f7      	bhi.n	8000d38 <HAL_Delay+0x28>
  {
  }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db0b      	blt.n	8000de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f003 021f 	and.w	r2, r3, #31
 8000dd4:	4907      	ldr	r1, [pc, #28]	; (8000df4 <__NVIC_EnableIRQ+0x38>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	2001      	movs	r0, #1
 8000dde:	fa00 f202 	lsl.w	r2, r0, r2
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	; (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	; (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	; 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec4:	d301      	bcc.n	8000eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00f      	b.n	8000eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <SysTick_Config+0x40>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f7ff ff8e 	bl	8000df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <SysTick_Config+0x40>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <SysTick_Config+0x40>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff29 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f20:	f7ff ff3e 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f7ff ff8e 	bl	8000e4c <NVIC_EncodePriority>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff5d 	bl	8000df8 <__NVIC_SetPriority>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff31 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ffa2 	bl	8000eb4 <SysTick_Config>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff feb6 	bl	8000cf8 <HAL_GetTick>
 8000f8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e099      	b.n	80010cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 0201 	bic.w	r2, r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fb8:	e00f      	b.n	8000fda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fba:	f7ff fe9d 	bl	8000cf8 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b05      	cmp	r3, #5
 8000fc6:	d908      	bls.n	8000fda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2220      	movs	r2, #32
 8000fcc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e078      	b.n	80010cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1e8      	bne.n	8000fba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	4b38      	ldr	r3, [pc, #224]	; (80010d4 <HAL_DMA_Init+0x158>)
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001006:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001012:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800101e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	4313      	orrs	r3, r2
 800102a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001030:	2b04      	cmp	r3, #4
 8001032:	d107      	bne.n	8001044 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	4313      	orrs	r3, r2
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4313      	orrs	r3, r2
 8001042:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	f023 0307 	bic.w	r3, r3, #7
 800105a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	4313      	orrs	r3, r2
 8001064:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106a:	2b04      	cmp	r3, #4
 800106c:	d117      	bne.n	800109e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4313      	orrs	r3, r2
 8001076:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00e      	beq.n	800109e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f000 fb0d 	bl	80016a0 <DMA_CheckFifoParam>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d008      	beq.n	800109e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2240      	movs	r2, #64	; 0x40
 8001090:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800109a:	2301      	movs	r3, #1
 800109c:	e016      	b.n	80010cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 fac4 	bl	8001634 <DMA_CalcBaseAndBitshift>
 80010ac:	4603      	mov	r3, r0
 80010ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b4:	223f      	movs	r2, #63	; 0x3f
 80010b6:	409a      	lsls	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	f010803f 	.word	0xf010803f

080010d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d101      	bne.n	80010fe <HAL_DMA_Start_IT+0x26>
 80010fa:	2302      	movs	r3, #2
 80010fc:	e040      	b.n	8001180 <HAL_DMA_Start_IT+0xa8>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2201      	movs	r2, #1
 8001102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b01      	cmp	r3, #1
 8001110:	d12f      	bne.n	8001172 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2202      	movs	r2, #2
 8001116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2200      	movs	r2, #0
 800111e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f000 fa56 	bl	80015d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001130:	223f      	movs	r2, #63	; 0x3f
 8001132:	409a      	lsls	r2, r3
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f042 0216 	orr.w	r2, r2, #22
 8001146:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	2b00      	cmp	r3, #0
 800114e:	d007      	beq.n	8001160 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0208 	orr.w	r2, r2, #8
 800115e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f042 0201 	orr.w	r2, r2, #1
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	e005      	b.n	800117e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800117a:	2302      	movs	r3, #2
 800117c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800117e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001194:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001196:	f7ff fdaf 	bl	8000cf8 <HAL_GetTick>
 800119a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d008      	beq.n	80011ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2280      	movs	r2, #128	; 0x80
 80011ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e052      	b.n	8001260 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0216 	bic.w	r2, r2, #22
 80011c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	695a      	ldr	r2, [r3, #20]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d103      	bne.n	80011ea <HAL_DMA_Abort+0x62>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d007      	beq.n	80011fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0208 	bic.w	r2, r2, #8
 80011f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0201 	bic.w	r2, r2, #1
 8001208:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800120a:	e013      	b.n	8001234 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800120c:	f7ff fd74 	bl	8000cf8 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b05      	cmp	r3, #5
 8001218:	d90c      	bls.n	8001234 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2220      	movs	r2, #32
 800121e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2203      	movs	r2, #3
 8001224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e015      	b.n	8001260 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1e4      	bne.n	800120c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001246:	223f      	movs	r2, #63	; 0x3f
 8001248:	409a      	lsls	r2, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d004      	beq.n	8001286 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2280      	movs	r2, #128	; 0x80
 8001280:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e00c      	b.n	80012a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2205      	movs	r2, #5
 800128a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0201 	bic.w	r2, r2, #1
 800129c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012b8:	4b92      	ldr	r3, [pc, #584]	; (8001504 <HAL_DMA_IRQHandler+0x258>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a92      	ldr	r2, [pc, #584]	; (8001508 <HAL_DMA_IRQHandler+0x25c>)
 80012be:	fba2 2303 	umull	r2, r3, r2, r3
 80012c2:	0a9b      	lsrs	r3, r3, #10
 80012c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d6:	2208      	movs	r2, #8
 80012d8:	409a      	lsls	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4013      	ands	r3, r2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d01a      	beq.n	8001318 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0204 	bic.w	r2, r2, #4
 80012fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001304:	2208      	movs	r2, #8
 8001306:	409a      	lsls	r2, r3
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001310:	f043 0201 	orr.w	r2, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800131c:	2201      	movs	r2, #1
 800131e:	409a      	lsls	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4013      	ands	r3, r2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d012      	beq.n	800134e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00b      	beq.n	800134e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133a:	2201      	movs	r2, #1
 800133c:	409a      	lsls	r2, r3
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001346:	f043 0202 	orr.w	r2, r3, #2
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001352:	2204      	movs	r2, #4
 8001354:	409a      	lsls	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4013      	ands	r3, r2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d012      	beq.n	8001384 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00b      	beq.n	8001384 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001370:	2204      	movs	r2, #4
 8001372:	409a      	lsls	r2, r3
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137c:	f043 0204 	orr.w	r2, r3, #4
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001388:	2210      	movs	r2, #16
 800138a:	409a      	lsls	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4013      	ands	r3, r2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d043      	beq.n	800141c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d03c      	beq.n	800141c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a6:	2210      	movs	r2, #16
 80013a8:	409a      	lsls	r2, r3
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d018      	beq.n	80013ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d108      	bne.n	80013dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d024      	beq.n	800141c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	4798      	blx	r3
 80013da:	e01f      	b.n	800141c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d01b      	beq.n	800141c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	4798      	blx	r3
 80013ec:	e016      	b.n	800141c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d107      	bne.n	800140c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0208 	bic.w	r2, r2, #8
 800140a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001420:	2220      	movs	r2, #32
 8001422:	409a      	lsls	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4013      	ands	r3, r2
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 808e 	beq.w	800154a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0310 	and.w	r3, r3, #16
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 8086 	beq.w	800154a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001442:	2220      	movs	r2, #32
 8001444:	409a      	lsls	r2, r3
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b05      	cmp	r3, #5
 8001454:	d136      	bne.n	80014c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0216 	bic.w	r2, r2, #22
 8001464:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	695a      	ldr	r2, [r3, #20]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001474:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	2b00      	cmp	r3, #0
 800147c:	d103      	bne.n	8001486 <HAL_DMA_IRQHandler+0x1da>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001482:	2b00      	cmp	r3, #0
 8001484:	d007      	beq.n	8001496 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0208 	bic.w	r2, r2, #8
 8001494:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149a:	223f      	movs	r2, #63	; 0x3f
 800149c:	409a      	lsls	r2, r3
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d07d      	beq.n	80015b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	4798      	blx	r3
        }
        return;
 80014c2:	e078      	b.n	80015b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d01c      	beq.n	800150c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d108      	bne.n	80014f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d030      	beq.n	800154a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	4798      	blx	r3
 80014f0:	e02b      	b.n	800154a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d027      	beq.n	800154a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	4798      	blx	r3
 8001502:	e022      	b.n	800154a <HAL_DMA_IRQHandler+0x29e>
 8001504:	20000000 	.word	0x20000000
 8001508:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10f      	bne.n	800153a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0210 	bic.w	r2, r2, #16
 8001528:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154e:	2b00      	cmp	r3, #0
 8001550:	d032      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d022      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2205      	movs	r2, #5
 8001562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0201 	bic.w	r2, r2, #1
 8001574:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	3301      	adds	r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	429a      	cmp	r2, r3
 8001580:	d307      	bcc.n	8001592 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f2      	bne.n	8001576 <HAL_DMA_IRQHandler+0x2ca>
 8001590:	e000      	b.n	8001594 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001592:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	4798      	blx	r3
 80015b4:	e000      	b.n	80015b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80015b6:	bf00      	nop
    }
  }
}
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop

080015c0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b40      	cmp	r3, #64	; 0x40
 8001604:	d108      	bne.n	8001618 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001616:	e007      	b.n	8001628 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	60da      	str	r2, [r3, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	3b10      	subs	r3, #16
 8001644:	4a14      	ldr	r2, [pc, #80]	; (8001698 <DMA_CalcBaseAndBitshift+0x64>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	091b      	lsrs	r3, r3, #4
 800164c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800164e:	4a13      	ldr	r2, [pc, #76]	; (800169c <DMA_CalcBaseAndBitshift+0x68>)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d909      	bls.n	8001676 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800166a:	f023 0303 	bic.w	r3, r3, #3
 800166e:	1d1a      	adds	r2, r3, #4
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	659a      	str	r2, [r3, #88]	; 0x58
 8001674:	e007      	b.n	8001686 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800167e:	f023 0303 	bic.w	r3, r3, #3
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800168a:	4618      	mov	r0, r3
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	aaaaaaab 	.word	0xaaaaaaab
 800169c:	0800a6a8 	.word	0x0800a6a8

080016a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d11f      	bne.n	80016fa <DMA_CheckFifoParam+0x5a>
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	2b03      	cmp	r3, #3
 80016be:	d856      	bhi.n	800176e <DMA_CheckFifoParam+0xce>
 80016c0:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <DMA_CheckFifoParam+0x28>)
 80016c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c6:	bf00      	nop
 80016c8:	080016d9 	.word	0x080016d9
 80016cc:	080016eb 	.word	0x080016eb
 80016d0:	080016d9 	.word	0x080016d9
 80016d4:	0800176f 	.word	0x0800176f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d046      	beq.n	8001772 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016e8:	e043      	b.n	8001772 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016f2:	d140      	bne.n	8001776 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016f8:	e03d      	b.n	8001776 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001702:	d121      	bne.n	8001748 <DMA_CheckFifoParam+0xa8>
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b03      	cmp	r3, #3
 8001708:	d837      	bhi.n	800177a <DMA_CheckFifoParam+0xda>
 800170a:	a201      	add	r2, pc, #4	; (adr r2, 8001710 <DMA_CheckFifoParam+0x70>)
 800170c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001710:	08001721 	.word	0x08001721
 8001714:	08001727 	.word	0x08001727
 8001718:	08001721 	.word	0x08001721
 800171c:	08001739 	.word	0x08001739
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
      break;
 8001724:	e030      	b.n	8001788 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d025      	beq.n	800177e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001736:	e022      	b.n	800177e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001740:	d11f      	bne.n	8001782 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001746:	e01c      	b.n	8001782 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d903      	bls.n	8001756 <DMA_CheckFifoParam+0xb6>
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	2b03      	cmp	r3, #3
 8001752:	d003      	beq.n	800175c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001754:	e018      	b.n	8001788 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	73fb      	strb	r3, [r7, #15]
      break;
 800175a:	e015      	b.n	8001788 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00e      	beq.n	8001786 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
      break;
 800176c:	e00b      	b.n	8001786 <DMA_CheckFifoParam+0xe6>
      break;
 800176e:	bf00      	nop
 8001770:	e00a      	b.n	8001788 <DMA_CheckFifoParam+0xe8>
      break;
 8001772:	bf00      	nop
 8001774:	e008      	b.n	8001788 <DMA_CheckFifoParam+0xe8>
      break;
 8001776:	bf00      	nop
 8001778:	e006      	b.n	8001788 <DMA_CheckFifoParam+0xe8>
      break;
 800177a:	bf00      	nop
 800177c:	e004      	b.n	8001788 <DMA_CheckFifoParam+0xe8>
      break;
 800177e:	bf00      	nop
 8001780:	e002      	b.n	8001788 <DMA_CheckFifoParam+0xe8>
      break;   
 8001782:	bf00      	nop
 8001784:	e000      	b.n	8001788 <DMA_CheckFifoParam+0xe8>
      break;
 8001786:	bf00      	nop
    }
  } 
  
  return status; 
 8001788:	7bfb      	ldrb	r3, [r7, #15]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop

08001798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	e16b      	b.n	8001a8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017b4:	2201      	movs	r2, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	f040 815a 	bne.w	8001a86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d005      	beq.n	80017ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d130      	bne.n	800184c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2203      	movs	r2, #3
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001820:	2201      	movs	r2, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	f003 0201 	and.w	r2, r3, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	2b03      	cmp	r3, #3
 8001856:	d017      	beq.n	8001888 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	2203      	movs	r2, #3
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d123      	bne.n	80018dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	08da      	lsrs	r2, r3, #3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3208      	adds	r2, #8
 800189c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	220f      	movs	r2, #15
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	691a      	ldr	r2, [r3, #16]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	08da      	lsrs	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3208      	adds	r2, #8
 80018d6:	69b9      	ldr	r1, [r7, #24]
 80018d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	2203      	movs	r2, #3
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0203 	and.w	r2, r3, #3
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80b4 	beq.w	8001a86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b60      	ldr	r3, [pc, #384]	; (8001aa4 <HAL_GPIO_Init+0x30c>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	4a5f      	ldr	r2, [pc, #380]	; (8001aa4 <HAL_GPIO_Init+0x30c>)
 8001928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800192c:	6453      	str	r3, [r2, #68]	; 0x44
 800192e:	4b5d      	ldr	r3, [pc, #372]	; (8001aa4 <HAL_GPIO_Init+0x30c>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800193a:	4a5b      	ldr	r2, [pc, #364]	; (8001aa8 <HAL_GPIO_Init+0x310>)
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	089b      	lsrs	r3, r3, #2
 8001940:	3302      	adds	r3, #2
 8001942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	220f      	movs	r2, #15
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a52      	ldr	r2, [pc, #328]	; (8001aac <HAL_GPIO_Init+0x314>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d02b      	beq.n	80019be <HAL_GPIO_Init+0x226>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a51      	ldr	r2, [pc, #324]	; (8001ab0 <HAL_GPIO_Init+0x318>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d025      	beq.n	80019ba <HAL_GPIO_Init+0x222>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a50      	ldr	r2, [pc, #320]	; (8001ab4 <HAL_GPIO_Init+0x31c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d01f      	beq.n	80019b6 <HAL_GPIO_Init+0x21e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4f      	ldr	r2, [pc, #316]	; (8001ab8 <HAL_GPIO_Init+0x320>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d019      	beq.n	80019b2 <HAL_GPIO_Init+0x21a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4e      	ldr	r2, [pc, #312]	; (8001abc <HAL_GPIO_Init+0x324>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d013      	beq.n	80019ae <HAL_GPIO_Init+0x216>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4d      	ldr	r2, [pc, #308]	; (8001ac0 <HAL_GPIO_Init+0x328>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d00d      	beq.n	80019aa <HAL_GPIO_Init+0x212>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a4c      	ldr	r2, [pc, #304]	; (8001ac4 <HAL_GPIO_Init+0x32c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d007      	beq.n	80019a6 <HAL_GPIO_Init+0x20e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4b      	ldr	r2, [pc, #300]	; (8001ac8 <HAL_GPIO_Init+0x330>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d101      	bne.n	80019a2 <HAL_GPIO_Init+0x20a>
 800199e:	2307      	movs	r3, #7
 80019a0:	e00e      	b.n	80019c0 <HAL_GPIO_Init+0x228>
 80019a2:	2308      	movs	r3, #8
 80019a4:	e00c      	b.n	80019c0 <HAL_GPIO_Init+0x228>
 80019a6:	2306      	movs	r3, #6
 80019a8:	e00a      	b.n	80019c0 <HAL_GPIO_Init+0x228>
 80019aa:	2305      	movs	r3, #5
 80019ac:	e008      	b.n	80019c0 <HAL_GPIO_Init+0x228>
 80019ae:	2304      	movs	r3, #4
 80019b0:	e006      	b.n	80019c0 <HAL_GPIO_Init+0x228>
 80019b2:	2303      	movs	r3, #3
 80019b4:	e004      	b.n	80019c0 <HAL_GPIO_Init+0x228>
 80019b6:	2302      	movs	r3, #2
 80019b8:	e002      	b.n	80019c0 <HAL_GPIO_Init+0x228>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <HAL_GPIO_Init+0x228>
 80019be:	2300      	movs	r3, #0
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	f002 0203 	and.w	r2, r2, #3
 80019c6:	0092      	lsls	r2, r2, #2
 80019c8:	4093      	lsls	r3, r2
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019d0:	4935      	ldr	r1, [pc, #212]	; (8001aa8 <HAL_GPIO_Init+0x310>)
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	3302      	adds	r3, #2
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019de:	4b3b      	ldr	r3, [pc, #236]	; (8001acc <HAL_GPIO_Init+0x334>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a02:	4a32      	ldr	r2, [pc, #200]	; (8001acc <HAL_GPIO_Init+0x334>)
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a08:	4b30      	ldr	r3, [pc, #192]	; (8001acc <HAL_GPIO_Init+0x334>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a2c:	4a27      	ldr	r2, [pc, #156]	; (8001acc <HAL_GPIO_Init+0x334>)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a32:	4b26      	ldr	r3, [pc, #152]	; (8001acc <HAL_GPIO_Init+0x334>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a56:	4a1d      	ldr	r2, [pc, #116]	; (8001acc <HAL_GPIO_Init+0x334>)
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <HAL_GPIO_Init+0x334>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a80:	4a12      	ldr	r2, [pc, #72]	; (8001acc <HAL_GPIO_Init+0x334>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	61fb      	str	r3, [r7, #28]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	2b0f      	cmp	r3, #15
 8001a90:	f67f ae90 	bls.w	80017b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	3724      	adds	r7, #36	; 0x24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40013800 	.word	0x40013800
 8001aac:	40020000 	.word	0x40020000
 8001ab0:	40020400 	.word	0x40020400
 8001ab4:	40020800 	.word	0x40020800
 8001ab8:	40020c00 	.word	0x40020c00
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40021400 	.word	0x40021400
 8001ac4:	40021800 	.word	0x40021800
 8001ac8:	40021c00 	.word	0x40021c00
 8001acc:	40013c00 	.word	0x40013c00

08001ad0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691a      	ldr	r2, [r3, #16]
 8001ae0:	887b      	ldrh	r3, [r7, #2]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d002      	beq.n	8001aee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	73fb      	strb	r3, [r7, #15]
 8001aec:	e001      	b.n	8001af2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aee:	2300      	movs	r3, #0
 8001af0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	807b      	strh	r3, [r7, #2]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b10:	787b      	ldrb	r3, [r7, #1]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b1c:	e003      	b.n	8001b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b1e:	887b      	ldrh	r3, [r7, #2]
 8001b20:	041a      	lsls	r2, r3, #16
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	619a      	str	r2, [r3, #24]
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b34:	b08f      	sub	sp, #60	; 0x3c
 8001b36:	af0a      	add	r7, sp, #40	; 0x28
 8001b38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e10f      	b.n	8001d64 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d106      	bne.n	8001b64 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f008 fa22 	bl	8009fa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2203      	movs	r2, #3
 8001b68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d102      	bne.n	8001b7e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f004 fe1f 	bl	80067c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	687e      	ldr	r6, [r7, #4]
 8001b90:	466d      	mov	r5, sp
 8001b92:	f106 0410 	add.w	r4, r6, #16
 8001b96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ba2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ba6:	1d33      	adds	r3, r6, #4
 8001ba8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001baa:	6838      	ldr	r0, [r7, #0]
 8001bac:	f004 fcf6 	bl	800659c <USB_CoreInit>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d005      	beq.n	8001bc2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2202      	movs	r2, #2
 8001bba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e0d0      	b.n	8001d64 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f004 fe0d 	bl	80067e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	e04a      	b.n	8001c6a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bd4:	7bfa      	ldrb	r2, [r7, #15]
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	1a9b      	subs	r3, r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	333d      	adds	r3, #61	; 0x3d
 8001be4:	2201      	movs	r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	333c      	adds	r3, #60	; 0x3c
 8001bf8:	7bfa      	ldrb	r2, [r7, #15]
 8001bfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bfc:	7bfa      	ldrb	r2, [r7, #15]
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	b298      	uxth	r0, r3
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	1a9b      	subs	r3, r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3342      	adds	r3, #66	; 0x42
 8001c10:	4602      	mov	r2, r0
 8001c12:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c14:	7bfa      	ldrb	r2, [r7, #15]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	1a9b      	subs	r3, r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	333f      	adds	r3, #63	; 0x3f
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c28:	7bfa      	ldrb	r2, [r7, #15]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	1a9b      	subs	r3, r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	3344      	adds	r3, #68	; 0x44
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	3348      	adds	r3, #72	; 0x48
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c50:	7bfa      	ldrb	r2, [r7, #15]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	1a9b      	subs	r3, r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	3350      	adds	r3, #80	; 0x50
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	3301      	adds	r3, #1
 8001c68:	73fb      	strb	r3, [r7, #15]
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d3af      	bcc.n	8001bd4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c74:	2300      	movs	r3, #0
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	e044      	b.n	8001d04 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	1a9b      	subs	r3, r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	1a9b      	subs	r3, r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ca6:	7bfa      	ldrb	r2, [r7, #15]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	1a9b      	subs	r3, r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	1a9b      	subs	r3, r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	1a9b      	subs	r3, r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	440b      	add	r3, r1
 8001ce0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	1a9b      	subs	r3, r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	3301      	adds	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d3b5      	bcc.n	8001c7a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	687e      	ldr	r6, [r7, #4]
 8001d16:	466d      	mov	r5, sp
 8001d18:	f106 0410 	add.w	r4, r6, #16
 8001d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d28:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d2c:	1d33      	adds	r3, r6, #4
 8001d2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d30:	6838      	ldr	r0, [r7, #0]
 8001d32:	f004 fda5 	bl	8006880 <USB_DevInit>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e00d      	b.n	8001d64 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f005 fe21 	bl	80079a4 <USB_DevDisconnect>

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d6c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_PCD_Start+0x1c>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e020      	b.n	8001dca <HAL_PCD_Start+0x5e>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d109      	bne.n	8001dac <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d005      	beq.n	8001dac <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f004 fcf7 	bl	80067a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f005 fdd1 	bl	8007962 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001dd2:	b590      	push	{r4, r7, lr}
 8001dd4:	b08d      	sub	sp, #52	; 0x34
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f005 fe8f 	bl	8007b0c <USB_GetMode>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f040 839d 	bne.w	8002530 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f005 fdf3 	bl	80079e6 <USB_ReadInterrupts>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 8393 	beq.w	800252e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f005 fdea 	bl	80079e6 <USB_ReadInterrupts>
 8001e12:	4603      	mov	r3, r0
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d107      	bne.n	8001e2c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695a      	ldr	r2, [r3, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f002 0202 	and.w	r2, r2, #2
 8001e2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f005 fdd8 	bl	80079e6 <USB_ReadInterrupts>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f003 0310 	and.w	r3, r3, #16
 8001e3c:	2b10      	cmp	r3, #16
 8001e3e:	d161      	bne.n	8001f04 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699a      	ldr	r2, [r3, #24]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0210 	bic.w	r2, r2, #16
 8001e4e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	f003 020f 	and.w	r2, r3, #15
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	1a9b      	subs	r3, r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	0c5b      	lsrs	r3, r3, #17
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d124      	bne.n	8001ec6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d035      	beq.n	8001ef4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	091b      	lsrs	r3, r3, #4
 8001e90:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	461a      	mov	r2, r3
 8001e9a:	6a38      	ldr	r0, [r7, #32]
 8001e9c:	f005 fc0f 	bl	80076be <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eac:	441a      	add	r2, r3
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	699a      	ldr	r2, [r3, #24]
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ebe:	441a      	add	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	619a      	str	r2, [r3, #24]
 8001ec4:	e016      	b.n	8001ef4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	0c5b      	lsrs	r3, r3, #17
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	2b06      	cmp	r3, #6
 8001ed0:	d110      	bne.n	8001ef4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ed8:	2208      	movs	r2, #8
 8001eda:	4619      	mov	r1, r3
 8001edc:	6a38      	ldr	r0, [r7, #32]
 8001ede:	f005 fbee 	bl	80076be <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	699a      	ldr	r2, [r3, #24]
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eee:	441a      	add	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699a      	ldr	r2, [r3, #24]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0210 	orr.w	r2, r2, #16
 8001f02:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f005 fd6c 	bl	80079e6 <USB_ReadInterrupts>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f18:	d16e      	bne.n	8001ff8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f005 fd72 	bl	8007a0c <USB_ReadDevAllOutEpInterrupt>
 8001f28:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f2a:	e062      	b.n	8001ff2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d057      	beq.n	8001fe6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f005 fd97 	bl	8007a74 <USB_ReadDevOutEPInterrupt>
 8001f46:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00c      	beq.n	8001f6c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2301      	movs	r3, #1
 8001f62:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 fdb0 	bl	8002acc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00c      	beq.n	8001f90 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	015a      	lsls	r2, r3, #5
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f82:	461a      	mov	r2, r3
 8001f84:	2308      	movs	r3, #8
 8001f86:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 feaa 	bl	8002ce4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d008      	beq.n	8001fac <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2310      	movs	r3, #16
 8001faa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d008      	beq.n	8001fc8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	015a      	lsls	r2, r3, #5
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2320      	movs	r3, #32
 8001fc6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d009      	beq.n	8001fe6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	015a      	lsls	r2, r3, #5
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fde:	461a      	mov	r2, r3
 8001fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fe4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	3301      	adds	r3, #1
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fee:	085b      	lsrs	r3, r3, #1
 8001ff0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d199      	bne.n	8001f2c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f005 fcf2 	bl	80079e6 <USB_ReadInterrupts>
 8002002:	4603      	mov	r3, r0
 8002004:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002008:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800200c:	f040 80c0 	bne.w	8002190 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f005 fd13 	bl	8007a40 <USB_ReadDevAllInEpInterrupt>
 800201a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002020:	e0b2      	b.n	8002188 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80a7 	beq.w	800217c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f005 fd39 	bl	8007ab0 <USB_ReadDevInEPInterrupt>
 800203e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d057      	beq.n	80020fa <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	2201      	movs	r2, #1
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800205e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	43db      	mvns	r3, r3
 8002064:	69f9      	ldr	r1, [r7, #28]
 8002066:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800206a:	4013      	ands	r3, r2
 800206c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	015a      	lsls	r2, r3, #5
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	4413      	add	r3, r2
 8002076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800207a:	461a      	mov	r2, r3
 800207c:	2301      	movs	r3, #1
 800207e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d132      	bne.n	80020ee <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	3348      	adds	r3, #72	; 0x48
 8002098:	6819      	ldr	r1, [r3, #0]
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4403      	add	r3, r0
 80020a8:	3344      	adds	r3, #68	; 0x44
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4419      	add	r1, r3
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4403      	add	r3, r0
 80020bc:	3348      	adds	r3, #72	; 0x48
 80020be:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d113      	bne.n	80020ee <HAL_PCD_IRQHandler+0x31c>
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ca:	4613      	mov	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	1a9b      	subs	r3, r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	3350      	adds	r3, #80	; 0x50
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d108      	bne.n	80020ee <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020e6:	461a      	mov	r2, r3
 80020e8:	2101      	movs	r1, #1
 80020ea:	f005 fd41 	bl	8007b70 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	4619      	mov	r1, r3
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f007 ffd8 	bl	800a0aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	4413      	add	r3, r2
 800210c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002110:	461a      	mov	r2, r3
 8002112:	2308      	movs	r3, #8
 8002114:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	4413      	add	r3, r2
 8002128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800212c:	461a      	mov	r2, r3
 800212e:	2310      	movs	r3, #16
 8002130:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	4413      	add	r3, r2
 8002144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002148:	461a      	mov	r2, r3
 800214a:	2340      	movs	r3, #64	; 0x40
 800214c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	4413      	add	r3, r2
 8002160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002164:	461a      	mov	r2, r3
 8002166:	2302      	movs	r3, #2
 8002168:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002174:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fc1b 	bl	80029b2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	3301      	adds	r3, #1
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002184:	085b      	lsrs	r3, r3, #1
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218a:	2b00      	cmp	r3, #0
 800218c:	f47f af49 	bne.w	8002022 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f005 fc26 	bl	80079e6 <USB_ReadInterrupts>
 800219a:	4603      	mov	r3, r0
 800219c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021a4:	d122      	bne.n	80021ec <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d108      	bne.n	80021d6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021cc:	2100      	movs	r1, #0
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 fe26 	bl	8002e20 <HAL_PCDEx_LPM_Callback>
 80021d4:	e002      	b.n	80021dc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f007 ffde 	bl	800a198 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695a      	ldr	r2, [r3, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80021ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f005 fbf8 	bl	80079e6 <USB_ReadInterrupts>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002200:	d112      	bne.n	8002228 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b01      	cmp	r3, #1
 8002210:	d102      	bne.n	8002218 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f007 ff9a 	bl	800a14c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002226:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f005 fbda 	bl	80079e6 <USB_ReadInterrupts>
 8002232:	4603      	mov	r3, r0
 8002234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800223c:	f040 80c7 	bne.w	80023ce <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2110      	movs	r1, #16
 800225a:	4618      	mov	r0, r3
 800225c:	f004 fc74 	bl	8006b48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002260:	2300      	movs	r3, #0
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002264:	e056      	b.n	8002314 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	4413      	add	r3, r2
 800226e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002272:	461a      	mov	r2, r3
 8002274:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002278:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	4413      	add	r3, r2
 8002282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800228a:	0151      	lsls	r1, r2, #5
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	440a      	add	r2, r1
 8002290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002294:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002298:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800229a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022aa:	0151      	lsls	r1, r2, #5
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	440a      	add	r2, r1
 80022b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80022ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c6:	461a      	mov	r2, r3
 80022c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80022ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022de:	0151      	lsls	r1, r2, #5
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	440a      	add	r2, r1
 80022e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80022ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022fe:	0151      	lsls	r1, r2, #5
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	440a      	add	r2, r1
 8002304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002308:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800230c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002310:	3301      	adds	r3, #1
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800231a:	429a      	cmp	r2, r3
 800231c:	d3a3      	bcc.n	8002266 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800232c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002330:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	2b00      	cmp	r3, #0
 8002338:	d016      	beq.n	8002368 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800234a:	f043 030b 	orr.w	r3, r3, #11
 800234e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	69fa      	ldr	r2, [r7, #28]
 800235c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002360:	f043 030b 	orr.w	r3, r3, #11
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	e015      	b.n	8002394 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	69fa      	ldr	r2, [r7, #28]
 8002372:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002376:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800237a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800237e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800238e:	f043 030b 	orr.w	r3, r3, #11
 8002392:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	69fa      	ldr	r2, [r7, #28]
 800239e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80023a6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023b8:	461a      	mov	r2, r3
 80023ba:	f005 fbd9 	bl	8007b70 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80023cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f005 fb07 	bl	80079e6 <USB_ReadInterrupts>
 80023d8:	4603      	mov	r3, r0
 80023da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023e2:	d124      	bne.n	800242e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f005 fb9d 	bl	8007b28 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f004 fc05 	bl	8006c02 <USB_GetDevSpeed>
 80023f8:	4603      	mov	r3, r0
 80023fa:	461a      	mov	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681c      	ldr	r4, [r3, #0]
 8002404:	f001 f92c 	bl	8003660 <HAL_RCC_GetHCLKFreq>
 8002408:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800240e:	b2db      	uxtb	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	4620      	mov	r0, r4
 8002414:	f004 f924 	bl	8006660 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f007 fe6e 	bl	800a0fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800242c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f005 fad7 	bl	80079e6 <USB_ReadInterrupts>
 8002438:	4603      	mov	r3, r0
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b08      	cmp	r3, #8
 8002440:	d10a      	bne.n	8002458 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f007 fe4b 	bl	800a0de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695a      	ldr	r2, [r3, #20]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f002 0208 	and.w	r2, r2, #8
 8002456:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f005 fac2 	bl	80079e6 <USB_ReadInterrupts>
 8002462:	4603      	mov	r3, r0
 8002464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800246c:	d10f      	bne.n	800248e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800246e:	2300      	movs	r3, #0
 8002470:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	b2db      	uxtb	r3, r3
 8002476:	4619      	mov	r1, r3
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f007 fead 	bl	800a1d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	695a      	ldr	r2, [r3, #20]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800248c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f005 faa7 	bl	80079e6 <USB_ReadInterrupts>
 8002498:	4603      	mov	r3, r0
 800249a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024a2:	d10f      	bne.n	80024c4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	4619      	mov	r1, r3
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f007 fe80 	bl	800a1b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695a      	ldr	r2, [r3, #20]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80024c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f005 fa8c 	bl	80079e6 <USB_ReadInterrupts>
 80024ce:	4603      	mov	r3, r0
 80024d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80024d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d8:	d10a      	bne.n	80024f0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f007 fe8e 	bl	800a1fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80024ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f005 fa76 	bl	80079e6 <USB_ReadInterrupts>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b04      	cmp	r3, #4
 8002502:	d115      	bne.n	8002530 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f007 fe7e 	bl	800a218 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6859      	ldr	r1, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	430a      	orrs	r2, r1
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	e000      	b.n	8002530 <HAL_PCD_IRQHandler+0x75e>
      return;
 800252e:	bf00      	nop
    }
  }
}
 8002530:	3734      	adds	r7, #52	; 0x34
 8002532:	46bd      	mov	sp, r7
 8002534:	bd90      	pop	{r4, r7, pc}

08002536 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	460b      	mov	r3, r1
 8002540:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_PCD_SetAddress+0x1a>
 800254c:	2302      	movs	r3, #2
 800254e:	e013      	b.n	8002578 <HAL_PCD_SetAddress+0x42>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	78fa      	ldrb	r2, [r7, #3]
 800255c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	78fa      	ldrb	r2, [r7, #3]
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f005 f9d4 	bl	8007916 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	4608      	mov	r0, r1
 800258a:	4611      	mov	r1, r2
 800258c:	461a      	mov	r2, r3
 800258e:	4603      	mov	r3, r0
 8002590:	70fb      	strb	r3, [r7, #3]
 8002592:	460b      	mov	r3, r1
 8002594:	803b      	strh	r3, [r7, #0]
 8002596:	4613      	mov	r3, r2
 8002598:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800259e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	da0f      	bge.n	80025c6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025a6:	78fb      	ldrb	r3, [r7, #3]
 80025a8:	f003 020f 	and.w	r2, r3, #15
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	3338      	adds	r3, #56	; 0x38
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	3304      	adds	r3, #4
 80025bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	705a      	strb	r2, [r3, #1]
 80025c4:	e00f      	b.n	80025e6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025c6:	78fb      	ldrb	r3, [r7, #3]
 80025c8:	f003 020f 	and.w	r2, r3, #15
 80025cc:	4613      	mov	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	4413      	add	r3, r2
 80025dc:	3304      	adds	r3, #4
 80025de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025f2:	883a      	ldrh	r2, [r7, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	78ba      	ldrb	r2, [r7, #2]
 80025fc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	785b      	ldrb	r3, [r3, #1]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002610:	78bb      	ldrb	r3, [r7, #2]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d102      	bne.n	800261c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_PCD_EP_Open+0xaa>
 8002626:	2302      	movs	r3, #2
 8002628:	e00e      	b.n	8002648 <HAL_PCD_EP_Open+0xc8>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68f9      	ldr	r1, [r7, #12]
 8002638:	4618      	mov	r0, r3
 800263a:	f004 fb07 	bl	8006c4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002646:	7afb      	ldrb	r3, [r7, #11]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800265c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002660:	2b00      	cmp	r3, #0
 8002662:	da0f      	bge.n	8002684 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	f003 020f 	and.w	r2, r3, #15
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	3338      	adds	r3, #56	; 0x38
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4413      	add	r3, r2
 8002678:	3304      	adds	r3, #4
 800267a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2201      	movs	r2, #1
 8002680:	705a      	strb	r2, [r3, #1]
 8002682:	e00f      	b.n	80026a4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	f003 020f 	and.w	r2, r3, #15
 800268a:	4613      	mov	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	3304      	adds	r3, #4
 800269c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_PCD_EP_Close+0x6e>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e00e      	b.n	80026dc <HAL_PCD_EP_Close+0x8c>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68f9      	ldr	r1, [r7, #12]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f004 fb45 	bl	8006d5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	460b      	mov	r3, r1
 80026f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026f4:	7afb      	ldrb	r3, [r7, #11]
 80026f6:	f003 020f 	and.w	r2, r3, #15
 80026fa:	4613      	mov	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	1a9b      	subs	r3, r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	4413      	add	r3, r2
 800270a:	3304      	adds	r3, #4
 800270c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2200      	movs	r2, #0
 800271e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2200      	movs	r2, #0
 8002724:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002726:	7afb      	ldrb	r3, [r7, #11]
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	b2da      	uxtb	r2, r3
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d102      	bne.n	8002740 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002740:	7afb      	ldrb	r3, [r7, #11]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	b2db      	uxtb	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	6979      	ldr	r1, [r7, #20]
 8002758:	f004 fe20 	bl	800739c <USB_EP0StartXfer>
 800275c:	e008      	b.n	8002770 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	6979      	ldr	r1, [r7, #20]
 800276c:	f004 fbd2 	bl	8006f14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	460b      	mov	r3, r1
 8002784:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	f003 020f 	and.w	r2, r3, #15
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	1a9b      	subs	r3, r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800279c:	681b      	ldr	r3, [r3, #0]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	60f8      	str	r0, [r7, #12]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]
 80027b6:	460b      	mov	r3, r1
 80027b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ba:	7afb      	ldrb	r3, [r7, #11]
 80027bc:	f003 020f 	and.w	r2, r3, #15
 80027c0:	4613      	mov	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	3338      	adds	r3, #56	; 0x38
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4413      	add	r3, r2
 80027ce:	3304      	adds	r3, #4
 80027d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2200      	movs	r2, #0
 80027e2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2201      	movs	r2, #1
 80027e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027ea:	7afb      	ldrb	r3, [r7, #11]
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d102      	bne.n	8002804 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002804:	7afb      	ldrb	r3, [r7, #11]
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	6979      	ldr	r1, [r7, #20]
 800281c:	f004 fdbe 	bl	800739c <USB_EP0StartXfer>
 8002820:	e008      	b.n	8002834 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	b2db      	uxtb	r3, r3
 800282c:	461a      	mov	r2, r3
 800282e:	6979      	ldr	r1, [r7, #20]
 8002830:	f004 fb70 	bl	8006f14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	460b      	mov	r3, r1
 8002848:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	f003 020f 	and.w	r2, r3, #15
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	429a      	cmp	r2, r3
 8002856:	d901      	bls.n	800285c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e050      	b.n	80028fe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800285c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002860:	2b00      	cmp	r3, #0
 8002862:	da0f      	bge.n	8002884 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	f003 020f 	and.w	r2, r3, #15
 800286a:	4613      	mov	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	1a9b      	subs	r3, r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	3338      	adds	r3, #56	; 0x38
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	4413      	add	r3, r2
 8002878:	3304      	adds	r3, #4
 800287a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2201      	movs	r2, #1
 8002880:	705a      	strb	r2, [r3, #1]
 8002882:	e00d      	b.n	80028a0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	4613      	mov	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	1a9b      	subs	r3, r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	3304      	adds	r3, #4
 8002898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	f003 030f 	and.w	r3, r3, #15
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_PCD_EP_SetStall+0x82>
 80028bc:	2302      	movs	r3, #2
 80028be:	e01e      	b.n	80028fe <HAL_PCD_EP_SetStall+0xc0>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68f9      	ldr	r1, [r7, #12]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f004 ff4d 	bl	800776e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10a      	bne.n	80028f4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	b2d9      	uxtb	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028ee:	461a      	mov	r2, r3
 80028f0:	f005 f93e 	bl	8007b70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	460b      	mov	r3, r1
 8002910:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002912:	78fb      	ldrb	r3, [r7, #3]
 8002914:	f003 020f 	and.w	r2, r3, #15
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	429a      	cmp	r2, r3
 800291e:	d901      	bls.n	8002924 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e042      	b.n	80029aa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002924:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002928:	2b00      	cmp	r3, #0
 800292a:	da0f      	bge.n	800294c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	f003 020f 	and.w	r2, r3, #15
 8002932:	4613      	mov	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	3338      	adds	r3, #56	; 0x38
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	4413      	add	r3, r2
 8002940:	3304      	adds	r3, #4
 8002942:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2201      	movs	r2, #1
 8002948:	705a      	strb	r2, [r3, #1]
 800294a:	e00f      	b.n	800296c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	f003 020f 	and.w	r2, r3, #15
 8002952:	4613      	mov	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	3304      	adds	r3, #4
 8002964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002972:	78fb      	ldrb	r3, [r7, #3]
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	b2da      	uxtb	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_PCD_EP_ClrStall+0x86>
 8002988:	2302      	movs	r3, #2
 800298a:	e00e      	b.n	80029aa <HAL_PCD_EP_ClrStall+0xa4>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68f9      	ldr	r1, [r7, #12]
 800299a:	4618      	mov	r0, r3
 800299c:	f004 ff55 	bl	800784a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b08a      	sub	sp, #40	; 0x28
 80029b6:	af02      	add	r7, sp, #8
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	3338      	adds	r3, #56	; 0x38
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	3304      	adds	r3, #4
 80029d8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	699a      	ldr	r2, [r3, #24]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d901      	bls.n	80029ea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e06c      	b.n	8002ac4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d902      	bls.n	8002a06 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3303      	adds	r3, #3
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a0e:	e02b      	b.n	8002a68 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d902      	bls.n	8002a2c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	3303      	adds	r3, #3
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	68d9      	ldr	r1, [r3, #12]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	4603      	mov	r3, r0
 8002a4a:	6978      	ldr	r0, [r7, #20]
 8002a4c:	f004 fdf9 	bl	8007642 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	441a      	add	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	699a      	ldr	r2, [r3, #24]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	441a      	add	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d809      	bhi.n	8002a92 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d203      	bcs.n	8002a92 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1be      	bne.n	8002a10 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d811      	bhi.n	8002ac2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	6939      	ldr	r1, [r7, #16]
 8002aba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002abe:	4013      	ands	r3, r2
 8002ac0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3720      	adds	r7, #32
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	333c      	adds	r3, #60	; 0x3c
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	f040 80a0 	bne.w	8002c44 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d015      	beq.n	8002b3a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4a72      	ldr	r2, [pc, #456]	; (8002cdc <PCD_EP_OutXfrComplete_int+0x210>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	f240 80dd 	bls.w	8002cd2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 80d7 	beq.w	8002cd2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b30:	461a      	mov	r2, r3
 8002b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b36:	6093      	str	r3, [r2, #8]
 8002b38:	e0cb      	b.n	8002cd2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f003 0320 	and.w	r3, r3, #32
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d009      	beq.n	8002b58 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b50:	461a      	mov	r2, r3
 8002b52:	2320      	movs	r3, #32
 8002b54:	6093      	str	r3, [r2, #8]
 8002b56:	e0bc      	b.n	8002cd2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f040 80b7 	bne.w	8002cd2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4a5d      	ldr	r2, [pc, #372]	; (8002cdc <PCD_EP_OutXfrComplete_int+0x210>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d90f      	bls.n	8002b8c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00a      	beq.n	8002b8c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	015a      	lsls	r2, r3, #5
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b82:	461a      	mov	r2, r3
 8002b84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b88:	6093      	str	r3, [r2, #8]
 8002b8a:	e0a2      	b.n	8002cd2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b9e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	0159      	lsls	r1, r3, #5
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	440b      	add	r3, r1
 8002ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002bb2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4403      	add	r3, r0
 8002bc2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002bc6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bda:	6819      	ldr	r1, [r3, #0]
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4403      	add	r3, r0
 8002bea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4419      	add	r1, r3
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4403      	add	r3, r0
 8002c00:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c04:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d114      	bne.n	8002c36 <PCD_EP_OutXfrComplete_int+0x16a>
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d108      	bne.n	8002c36 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c2e:	461a      	mov	r2, r3
 8002c30:	2101      	movs	r1, #1
 8002c32:	f004 ff9d 	bl	8007b70 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f007 fa19 	bl	800a074 <HAL_PCD_DataOutStageCallback>
 8002c42:	e046      	b.n	8002cd2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4a26      	ldr	r2, [pc, #152]	; (8002ce0 <PCD_EP_OutXfrComplete_int+0x214>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d124      	bne.n	8002c96 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c62:	461a      	mov	r2, r3
 8002c64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c68:	6093      	str	r3, [r2, #8]
 8002c6a:	e032      	b.n	8002cd2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d008      	beq.n	8002c88 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c82:	461a      	mov	r2, r3
 8002c84:	2320      	movs	r3, #32
 8002c86:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f007 f9f0 	bl	800a074 <HAL_PCD_DataOutStageCallback>
 8002c94:	e01d      	b.n	8002cd2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d114      	bne.n	8002cc6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d108      	bne.n	8002cc6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6818      	ldr	r0, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	f004 ff55 	bl	8007b70 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f007 f9d1 	bl	800a074 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	4f54300a 	.word	0x4f54300a
 8002ce0:	4f54310a 	.word	0x4f54310a

08002ce4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	333c      	adds	r3, #60	; 0x3c
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4a15      	ldr	r2, [pc, #84]	; (8002d6c <PCD_EP_OutSetupPacket_int+0x88>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d90e      	bls.n	8002d38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d009      	beq.n	8002d38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d30:	461a      	mov	r2, r3
 8002d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f007 f989 	bl	800a050 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4a0a      	ldr	r2, [pc, #40]	; (8002d6c <PCD_EP_OutSetupPacket_int+0x88>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d90c      	bls.n	8002d60 <PCD_EP_OutSetupPacket_int+0x7c>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d108      	bne.n	8002d60 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d58:	461a      	mov	r2, r3
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	f004 ff08 	bl	8007b70 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	4f54300a 	.word	0x4f54300a

08002d70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	70fb      	strb	r3, [r7, #3]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d107      	bne.n	8002d9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d8e:	883b      	ldrh	r3, [r7, #0]
 8002d90:	0419      	lsls	r1, r3, #16
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d9c:	e028      	b.n	8002df0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	0c1b      	lsrs	r3, r3, #16
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	4413      	add	r3, r2
 8002daa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002dac:	2300      	movs	r3, #0
 8002dae:	73fb      	strb	r3, [r7, #15]
 8002db0:	e00d      	b.n	8002dce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	3340      	adds	r3, #64	; 0x40
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	73fb      	strb	r3, [r7, #15]
 8002dce:	7bfa      	ldrb	r2, [r7, #15]
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d3ec      	bcc.n	8002db2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002dd8:	883b      	ldrh	r3, [r7, #0]
 8002dda:	0418      	lsls	r0, r3, #16
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6819      	ldr	r1, [r3, #0]
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	4302      	orrs	r2, r0
 8002de8:	3340      	adds	r3, #64	; 0x40
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	460b      	mov	r3, r1
 8002e08:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	887a      	ldrh	r2, [r7, #2]
 8002e10:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e264      	b.n	8003314 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d075      	beq.n	8002f42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e56:	4ba3      	ldr	r3, [pc, #652]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d00c      	beq.n	8002e7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e62:	4ba0      	ldr	r3, [pc, #640]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d112      	bne.n	8002e94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e6e:	4b9d      	ldr	r3, [pc, #628]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e7a:	d10b      	bne.n	8002e94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7c:	4b99      	ldr	r3, [pc, #612]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d05b      	beq.n	8002f40 <HAL_RCC_OscConfig+0x108>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d157      	bne.n	8002f40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e23f      	b.n	8003314 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9c:	d106      	bne.n	8002eac <HAL_RCC_OscConfig+0x74>
 8002e9e:	4b91      	ldr	r3, [pc, #580]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a90      	ldr	r2, [pc, #576]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	e01d      	b.n	8002ee8 <HAL_RCC_OscConfig+0xb0>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x98>
 8002eb6:	4b8b      	ldr	r3, [pc, #556]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a8a      	ldr	r2, [pc, #552]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	4b88      	ldr	r3, [pc, #544]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a87      	ldr	r2, [pc, #540]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	e00b      	b.n	8002ee8 <HAL_RCC_OscConfig+0xb0>
 8002ed0:	4b84      	ldr	r3, [pc, #528]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a83      	ldr	r2, [pc, #524]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eda:	6013      	str	r3, [r2, #0]
 8002edc:	4b81      	ldr	r3, [pc, #516]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a80      	ldr	r2, [pc, #512]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ee6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d013      	beq.n	8002f18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7fd ff02 	bl	8000cf8 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ef8:	f7fd fefe 	bl	8000cf8 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b64      	cmp	r3, #100	; 0x64
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e204      	b.n	8003314 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	4b76      	ldr	r3, [pc, #472]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0xc0>
 8002f16:	e014      	b.n	8002f42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7fd feee 	bl	8000cf8 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f20:	f7fd feea 	bl	8000cf8 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	; 0x64
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e1f0      	b.n	8003314 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f32:	4b6c      	ldr	r3, [pc, #432]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0xe8>
 8002f3e:	e000      	b.n	8002f42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d063      	beq.n	8003016 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f4e:	4b65      	ldr	r3, [pc, #404]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00b      	beq.n	8002f72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f5a:	4b62      	ldr	r3, [pc, #392]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d11c      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f66:	4b5f      	ldr	r3, [pc, #380]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d116      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f72:	4b5c      	ldr	r3, [pc, #368]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d005      	beq.n	8002f8a <HAL_RCC_OscConfig+0x152>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d001      	beq.n	8002f8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e1c4      	b.n	8003314 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8a:	4b56      	ldr	r3, [pc, #344]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4952      	ldr	r1, [pc, #328]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9e:	e03a      	b.n	8003016 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d020      	beq.n	8002fea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa8:	4b4f      	ldr	r3, [pc, #316]	; (80030e8 <HAL_RCC_OscConfig+0x2b0>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fae:	f7fd fea3 	bl	8000cf8 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fb6:	f7fd fe9f 	bl	8000cf8 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e1a5      	b.n	8003314 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc8:	4b46      	ldr	r3, [pc, #280]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f0      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd4:	4b43      	ldr	r3, [pc, #268]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4940      	ldr	r1, [pc, #256]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	600b      	str	r3, [r1, #0]
 8002fe8:	e015      	b.n	8003016 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fea:	4b3f      	ldr	r3, [pc, #252]	; (80030e8 <HAL_RCC_OscConfig+0x2b0>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7fd fe82 	bl	8000cf8 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ff8:	f7fd fe7e 	bl	8000cf8 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e184      	b.n	8003314 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300a:	4b36      	ldr	r3, [pc, #216]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f0      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d030      	beq.n	8003084 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d016      	beq.n	8003058 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800302a:	4b30      	ldr	r3, [pc, #192]	; (80030ec <HAL_RCC_OscConfig+0x2b4>)
 800302c:	2201      	movs	r2, #1
 800302e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003030:	f7fd fe62 	bl	8000cf8 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003038:	f7fd fe5e 	bl	8000cf8 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e164      	b.n	8003314 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304a:	4b26      	ldr	r3, [pc, #152]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 800304c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0x200>
 8003056:	e015      	b.n	8003084 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003058:	4b24      	ldr	r3, [pc, #144]	; (80030ec <HAL_RCC_OscConfig+0x2b4>)
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305e:	f7fd fe4b 	bl	8000cf8 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003066:	f7fd fe47 	bl	8000cf8 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e14d      	b.n	8003314 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003078:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 800307a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1f0      	bne.n	8003066 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80a0 	beq.w	80031d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003092:	2300      	movs	r3, #0
 8003094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003096:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10f      	bne.n	80030c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	4a0e      	ldr	r2, [pc, #56]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 80030ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b0:	6413      	str	r3, [r2, #64]	; 0x40
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030be:	2301      	movs	r3, #1
 80030c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c2:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <HAL_RCC_OscConfig+0x2b8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d121      	bne.n	8003112 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ce:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <HAL_RCC_OscConfig+0x2b8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a07      	ldr	r2, [pc, #28]	; (80030f0 <HAL_RCC_OscConfig+0x2b8>)
 80030d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030da:	f7fd fe0d 	bl	8000cf8 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e0:	e011      	b.n	8003106 <HAL_RCC_OscConfig+0x2ce>
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800
 80030e8:	42470000 	.word	0x42470000
 80030ec:	42470e80 	.word	0x42470e80
 80030f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f4:	f7fd fe00 	bl	8000cf8 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e106      	b.n	8003314 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003106:	4b85      	ldr	r3, [pc, #532]	; (800331c <HAL_RCC_OscConfig+0x4e4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d106      	bne.n	8003128 <HAL_RCC_OscConfig+0x2f0>
 800311a:	4b81      	ldr	r3, [pc, #516]	; (8003320 <HAL_RCC_OscConfig+0x4e8>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	4a80      	ldr	r2, [pc, #512]	; (8003320 <HAL_RCC_OscConfig+0x4e8>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	6713      	str	r3, [r2, #112]	; 0x70
 8003126:	e01c      	b.n	8003162 <HAL_RCC_OscConfig+0x32a>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b05      	cmp	r3, #5
 800312e:	d10c      	bne.n	800314a <HAL_RCC_OscConfig+0x312>
 8003130:	4b7b      	ldr	r3, [pc, #492]	; (8003320 <HAL_RCC_OscConfig+0x4e8>)
 8003132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003134:	4a7a      	ldr	r2, [pc, #488]	; (8003320 <HAL_RCC_OscConfig+0x4e8>)
 8003136:	f043 0304 	orr.w	r3, r3, #4
 800313a:	6713      	str	r3, [r2, #112]	; 0x70
 800313c:	4b78      	ldr	r3, [pc, #480]	; (8003320 <HAL_RCC_OscConfig+0x4e8>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003140:	4a77      	ldr	r2, [pc, #476]	; (8003320 <HAL_RCC_OscConfig+0x4e8>)
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	6713      	str	r3, [r2, #112]	; 0x70
 8003148:	e00b      	b.n	8003162 <HAL_RCC_OscConfig+0x32a>
 800314a:	4b75      	ldr	r3, [pc, #468]	; (8003320 <HAL_RCC_OscConfig+0x4e8>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314e:	4a74      	ldr	r2, [pc, #464]	; (8003320 <HAL_RCC_OscConfig+0x4e8>)
 8003150:	f023 0301 	bic.w	r3, r3, #1
 8003154:	6713      	str	r3, [r2, #112]	; 0x70
 8003156:	4b72      	ldr	r3, [pc, #456]	; (8003320 <HAL_RCC_OscConfig+0x4e8>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	4a71      	ldr	r2, [pc, #452]	; (8003320 <HAL_RCC_OscConfig+0x4e8>)
 800315c:	f023 0304 	bic.w	r3, r3, #4
 8003160:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d015      	beq.n	8003196 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316a:	f7fd fdc5 	bl	8000cf8 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003170:	e00a      	b.n	8003188 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003172:	f7fd fdc1 	bl	8000cf8 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003180:	4293      	cmp	r3, r2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e0c5      	b.n	8003314 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003188:	4b65      	ldr	r3, [pc, #404]	; (8003320 <HAL_RCC_OscConfig+0x4e8>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0ee      	beq.n	8003172 <HAL_RCC_OscConfig+0x33a>
 8003194:	e014      	b.n	80031c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003196:	f7fd fdaf 	bl	8000cf8 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800319c:	e00a      	b.n	80031b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800319e:	f7fd fdab 	bl	8000cf8 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e0af      	b.n	8003314 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b4:	4b5a      	ldr	r3, [pc, #360]	; (8003320 <HAL_RCC_OscConfig+0x4e8>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1ee      	bne.n	800319e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d105      	bne.n	80031d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c6:	4b56      	ldr	r3, [pc, #344]	; (8003320 <HAL_RCC_OscConfig+0x4e8>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	4a55      	ldr	r2, [pc, #340]	; (8003320 <HAL_RCC_OscConfig+0x4e8>)
 80031cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 809b 	beq.w	8003312 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031dc:	4b50      	ldr	r3, [pc, #320]	; (8003320 <HAL_RCC_OscConfig+0x4e8>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 030c 	and.w	r3, r3, #12
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d05c      	beq.n	80032a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d141      	bne.n	8003274 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f0:	4b4c      	ldr	r3, [pc, #304]	; (8003324 <HAL_RCC_OscConfig+0x4ec>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f6:	f7fd fd7f 	bl	8000cf8 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031fe:	f7fd fd7b 	bl	8000cf8 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e081      	b.n	8003314 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003210:	4b43      	ldr	r3, [pc, #268]	; (8003320 <HAL_RCC_OscConfig+0x4e8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f0      	bne.n	80031fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	019b      	lsls	r3, r3, #6
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	085b      	lsrs	r3, r3, #1
 8003234:	3b01      	subs	r3, #1
 8003236:	041b      	lsls	r3, r3, #16
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323e:	061b      	lsls	r3, r3, #24
 8003240:	4937      	ldr	r1, [pc, #220]	; (8003320 <HAL_RCC_OscConfig+0x4e8>)
 8003242:	4313      	orrs	r3, r2
 8003244:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003246:	4b37      	ldr	r3, [pc, #220]	; (8003324 <HAL_RCC_OscConfig+0x4ec>)
 8003248:	2201      	movs	r2, #1
 800324a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324c:	f7fd fd54 	bl	8000cf8 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003254:	f7fd fd50 	bl	8000cf8 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e056      	b.n	8003314 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003266:	4b2e      	ldr	r3, [pc, #184]	; (8003320 <HAL_RCC_OscConfig+0x4e8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f0      	beq.n	8003254 <HAL_RCC_OscConfig+0x41c>
 8003272:	e04e      	b.n	8003312 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003274:	4b2b      	ldr	r3, [pc, #172]	; (8003324 <HAL_RCC_OscConfig+0x4ec>)
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327a:	f7fd fd3d 	bl	8000cf8 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003282:	f7fd fd39 	bl	8000cf8 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e03f      	b.n	8003314 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003294:	4b22      	ldr	r3, [pc, #136]	; (8003320 <HAL_RCC_OscConfig+0x4e8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f0      	bne.n	8003282 <HAL_RCC_OscConfig+0x44a>
 80032a0:	e037      	b.n	8003312 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d101      	bne.n	80032ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e032      	b.n	8003314 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032ae:	4b1c      	ldr	r3, [pc, #112]	; (8003320 <HAL_RCC_OscConfig+0x4e8>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d028      	beq.n	800330e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d121      	bne.n	800330e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d11a      	bne.n	800330e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032de:	4013      	ands	r3, r2
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d111      	bne.n	800330e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	085b      	lsrs	r3, r3, #1
 80032f6:	3b01      	subs	r3, #1
 80032f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d107      	bne.n	800330e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800330a:	429a      	cmp	r2, r3
 800330c:	d001      	beq.n	8003312 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40007000 	.word	0x40007000
 8003320:	40023800 	.word	0x40023800
 8003324:	42470060 	.word	0x42470060

08003328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0cc      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800333c:	4b68      	ldr	r3, [pc, #416]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d90c      	bls.n	8003364 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b65      	ldr	r3, [pc, #404]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	4b63      	ldr	r3, [pc, #396]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0b8      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d020      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800337c:	4b59      	ldr	r3, [pc, #356]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4a58      	ldr	r2, [pc, #352]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003386:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003394:	4b53      	ldr	r3, [pc, #332]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	4a52      	ldr	r2, [pc, #328]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800339e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a0:	4b50      	ldr	r3, [pc, #320]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	494d      	ldr	r1, [pc, #308]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d044      	beq.n	8003448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d107      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	4b47      	ldr	r3, [pc, #284]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d119      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e07f      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d003      	beq.n	80033e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e6:	4b3f      	ldr	r3, [pc, #252]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d109      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e06f      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f6:	4b3b      	ldr	r3, [pc, #236]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e067      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003406:	4b37      	ldr	r3, [pc, #220]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f023 0203 	bic.w	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4934      	ldr	r1, [pc, #208]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	4313      	orrs	r3, r2
 8003416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003418:	f7fd fc6e 	bl	8000cf8 <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341e:	e00a      	b.n	8003436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003420:	f7fd fc6a 	bl	8000cf8 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	; 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e04f      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003436:	4b2b      	ldr	r3, [pc, #172]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 020c 	and.w	r2, r3, #12
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	429a      	cmp	r2, r3
 8003446:	d1eb      	bne.n	8003420 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003448:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d20c      	bcs.n	8003470 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b22      	ldr	r3, [pc, #136]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800345e:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d001      	beq.n	8003470 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e032      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800347c:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4916      	ldr	r1, [pc, #88]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	4313      	orrs	r3, r2
 800348c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800349a:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	490e      	ldr	r1, [pc, #56]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034ae:	f000 f821 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 80034b2:	4602      	mov	r2, r0
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	490a      	ldr	r1, [pc, #40]	; (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 80034c0:	5ccb      	ldrb	r3, [r1, r3]
 80034c2:	fa22 f303 	lsr.w	r3, r2, r3
 80034c6:	4a09      	ldr	r2, [pc, #36]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80034c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ca:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fd fbce 	bl	8000c70 <HAL_InitTick>

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023c00 	.word	0x40023c00
 80034e4:	40023800 	.word	0x40023800
 80034e8:	0800a690 	.word	0x0800a690
 80034ec:	20000000 	.word	0x20000000
 80034f0:	20000004 	.word	0x20000004

080034f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f4:	b5b0      	push	{r4, r5, r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034fa:	2100      	movs	r1, #0
 80034fc:	6079      	str	r1, [r7, #4]
 80034fe:	2100      	movs	r1, #0
 8003500:	60f9      	str	r1, [r7, #12]
 8003502:	2100      	movs	r1, #0
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003506:	2100      	movs	r1, #0
 8003508:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800350a:	4952      	ldr	r1, [pc, #328]	; (8003654 <HAL_RCC_GetSysClockFreq+0x160>)
 800350c:	6889      	ldr	r1, [r1, #8]
 800350e:	f001 010c 	and.w	r1, r1, #12
 8003512:	2908      	cmp	r1, #8
 8003514:	d00d      	beq.n	8003532 <HAL_RCC_GetSysClockFreq+0x3e>
 8003516:	2908      	cmp	r1, #8
 8003518:	f200 8094 	bhi.w	8003644 <HAL_RCC_GetSysClockFreq+0x150>
 800351c:	2900      	cmp	r1, #0
 800351e:	d002      	beq.n	8003526 <HAL_RCC_GetSysClockFreq+0x32>
 8003520:	2904      	cmp	r1, #4
 8003522:	d003      	beq.n	800352c <HAL_RCC_GetSysClockFreq+0x38>
 8003524:	e08e      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003526:	4b4c      	ldr	r3, [pc, #304]	; (8003658 <HAL_RCC_GetSysClockFreq+0x164>)
 8003528:	60bb      	str	r3, [r7, #8]
       break;
 800352a:	e08e      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800352c:	4b4b      	ldr	r3, [pc, #300]	; (800365c <HAL_RCC_GetSysClockFreq+0x168>)
 800352e:	60bb      	str	r3, [r7, #8]
      break;
 8003530:	e08b      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003532:	4948      	ldr	r1, [pc, #288]	; (8003654 <HAL_RCC_GetSysClockFreq+0x160>)
 8003534:	6849      	ldr	r1, [r1, #4]
 8003536:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800353a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800353c:	4945      	ldr	r1, [pc, #276]	; (8003654 <HAL_RCC_GetSysClockFreq+0x160>)
 800353e:	6849      	ldr	r1, [r1, #4]
 8003540:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003544:	2900      	cmp	r1, #0
 8003546:	d024      	beq.n	8003592 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003548:	4942      	ldr	r1, [pc, #264]	; (8003654 <HAL_RCC_GetSysClockFreq+0x160>)
 800354a:	6849      	ldr	r1, [r1, #4]
 800354c:	0989      	lsrs	r1, r1, #6
 800354e:	4608      	mov	r0, r1
 8003550:	f04f 0100 	mov.w	r1, #0
 8003554:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003558:	f04f 0500 	mov.w	r5, #0
 800355c:	ea00 0204 	and.w	r2, r0, r4
 8003560:	ea01 0305 	and.w	r3, r1, r5
 8003564:	493d      	ldr	r1, [pc, #244]	; (800365c <HAL_RCC_GetSysClockFreq+0x168>)
 8003566:	fb01 f003 	mul.w	r0, r1, r3
 800356a:	2100      	movs	r1, #0
 800356c:	fb01 f102 	mul.w	r1, r1, r2
 8003570:	1844      	adds	r4, r0, r1
 8003572:	493a      	ldr	r1, [pc, #232]	; (800365c <HAL_RCC_GetSysClockFreq+0x168>)
 8003574:	fba2 0101 	umull	r0, r1, r2, r1
 8003578:	1863      	adds	r3, r4, r1
 800357a:	4619      	mov	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	461a      	mov	r2, r3
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	f7fc fe20 	bl	80001c8 <__aeabi_uldivmod>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4613      	mov	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	e04a      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003592:	4b30      	ldr	r3, [pc, #192]	; (8003654 <HAL_RCC_GetSysClockFreq+0x160>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	099b      	lsrs	r3, r3, #6
 8003598:	461a      	mov	r2, r3
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035a2:	f04f 0100 	mov.w	r1, #0
 80035a6:	ea02 0400 	and.w	r4, r2, r0
 80035aa:	ea03 0501 	and.w	r5, r3, r1
 80035ae:	4620      	mov	r0, r4
 80035b0:	4629      	mov	r1, r5
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	014b      	lsls	r3, r1, #5
 80035bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035c0:	0142      	lsls	r2, r0, #5
 80035c2:	4610      	mov	r0, r2
 80035c4:	4619      	mov	r1, r3
 80035c6:	1b00      	subs	r0, r0, r4
 80035c8:	eb61 0105 	sbc.w	r1, r1, r5
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	018b      	lsls	r3, r1, #6
 80035d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035da:	0182      	lsls	r2, r0, #6
 80035dc:	1a12      	subs	r2, r2, r0
 80035de:	eb63 0301 	sbc.w	r3, r3, r1
 80035e2:	f04f 0000 	mov.w	r0, #0
 80035e6:	f04f 0100 	mov.w	r1, #0
 80035ea:	00d9      	lsls	r1, r3, #3
 80035ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035f0:	00d0      	lsls	r0, r2, #3
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	1912      	adds	r2, r2, r4
 80035f8:	eb45 0303 	adc.w	r3, r5, r3
 80035fc:	f04f 0000 	mov.w	r0, #0
 8003600:	f04f 0100 	mov.w	r1, #0
 8003604:	0299      	lsls	r1, r3, #10
 8003606:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800360a:	0290      	lsls	r0, r2, #10
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4610      	mov	r0, r2
 8003612:	4619      	mov	r1, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	461a      	mov	r2, r3
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	f7fc fdd4 	bl	80001c8 <__aeabi_uldivmod>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4613      	mov	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003628:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <HAL_RCC_GetSysClockFreq+0x160>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	0c1b      	lsrs	r3, r3, #16
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	3301      	adds	r3, #1
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003640:	60bb      	str	r3, [r7, #8]
      break;
 8003642:	e002      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003644:	4b04      	ldr	r3, [pc, #16]	; (8003658 <HAL_RCC_GetSysClockFreq+0x164>)
 8003646:	60bb      	str	r3, [r7, #8]
      break;
 8003648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800364a:	68bb      	ldr	r3, [r7, #8]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bdb0      	pop	{r4, r5, r7, pc}
 8003654:	40023800 	.word	0x40023800
 8003658:	00f42400 	.word	0x00f42400
 800365c:	00b71b00 	.word	0x00b71b00

08003660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <HAL_RCC_GetHCLKFreq+0x14>)
 8003666:	681b      	ldr	r3, [r3, #0]
}
 8003668:	4618      	mov	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	20000000 	.word	0x20000000

08003678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800367c:	f7ff fff0 	bl	8003660 <HAL_RCC_GetHCLKFreq>
 8003680:	4602      	mov	r2, r0
 8003682:	4b05      	ldr	r3, [pc, #20]	; (8003698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	0a9b      	lsrs	r3, r3, #10
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	4903      	ldr	r1, [pc, #12]	; (800369c <HAL_RCC_GetPCLK1Freq+0x24>)
 800368e:	5ccb      	ldrb	r3, [r1, r3]
 8003690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003694:	4618      	mov	r0, r3
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40023800 	.word	0x40023800
 800369c:	0800a6a0 	.word	0x0800a6a0

080036a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036a4:	f7ff ffdc 	bl	8003660 <HAL_RCC_GetHCLKFreq>
 80036a8:	4602      	mov	r2, r0
 80036aa:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	0b5b      	lsrs	r3, r3, #13
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	4903      	ldr	r1, [pc, #12]	; (80036c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036b6:	5ccb      	ldrb	r3, [r1, r3]
 80036b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036bc:	4618      	mov	r0, r3
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40023800 	.word	0x40023800
 80036c4:	0800a6a0 	.word	0x0800a6a0

080036c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e022      	b.n	8003720 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d105      	bne.n	80036f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7fd f8b5 	bl	800085c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2203      	movs	r2, #3
 80036f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f814 	bl	8003728 <HAL_SD_InitCard>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e00a      	b.n	8003720 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003728:	b5b0      	push	{r4, r5, r7, lr}
 800372a:	b08e      	sub	sp, #56	; 0x38
 800372c:	af04      	add	r7, sp, #16
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003730:	2300      	movs	r3, #0
 8003732:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003738:	2300      	movs	r3, #0
 800373a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003740:	2300      	movs	r3, #0
 8003742:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003744:	2376      	movs	r3, #118	; 0x76
 8003746:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681d      	ldr	r5, [r3, #0]
 800374c:	466c      	mov	r4, sp
 800374e:	f107 0314 	add.w	r3, r7, #20
 8003752:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003756:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800375a:	f107 0308 	add.w	r3, r7, #8
 800375e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003760:	4628      	mov	r0, r5
 8003762:	f002 f9a7 	bl	8005ab4 <SDIO_Init>
 8003766:	4603      	mov	r3, r0
 8003768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800376c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e04c      	b.n	8003812 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003778:	4b28      	ldr	r3, [pc, #160]	; (800381c <HAL_SD_InitCard+0xf4>)
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f002 f9df 	bl	8005b46 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003788:	4b24      	ldr	r3, [pc, #144]	; (800381c <HAL_SD_InitCard+0xf4>)
 800378a:	2201      	movs	r2, #1
 800378c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f001 f804 	bl	800479c <SD_PowerON>
 8003794:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00b      	beq.n	80037b4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e02e      	b.n	8003812 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 ff25 	bl	8004604 <SD_InitCard>
 80037ba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00b      	beq.n	80037da <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e01b      	b.n	8003812 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037e2:	4618      	mov	r0, r3
 80037e4:	f002 fa42 	bl	8005c6c <SDMMC_CmdBlockLength>
 80037e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00f      	beq.n	8003810 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <HAL_SD_InitCard+0xf8>)
 80037f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e000      	b.n	8003812 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3728      	adds	r7, #40	; 0x28
 8003816:	46bd      	mov	sp, r7
 8003818:	bdb0      	pop	{r4, r5, r7, pc}
 800381a:	bf00      	nop
 800381c:	422580a0 	.word	0x422580a0
 8003820:	004005ff 	.word	0x004005ff

08003824 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08c      	sub	sp, #48	; 0x30
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d107      	bne.n	800384c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0c0      	b.n	80039ce <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b01      	cmp	r3, #1
 8003856:	f040 80b9 	bne.w	80039cc <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	441a      	add	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386a:	429a      	cmp	r2, r3
 800386c:	d907      	bls.n	800387e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e0a7      	b.n	80039ce <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2203      	movs	r2, #3
 8003882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2200      	movs	r2, #0
 800388c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800389c:	f043 0302 	orr.w	r3, r3, #2
 80038a0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	4a4c      	ldr	r2, [pc, #304]	; (80039d8 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80038a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	4a4b      	ldr	r2, [pc, #300]	; (80039dc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80038b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	2200      	movs	r2, #0
 80038b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	2200      	movs	r2, #0
 80038c0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	3380      	adds	r3, #128	; 0x80
 80038e8:	4619      	mov	r1, r3
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	025b      	lsls	r3, r3, #9
 80038f0:	089b      	lsrs	r3, r3, #2
 80038f2:	f7fd fbf1 	bl	80010d8 <HAL_DMA_Start_IT>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d017      	beq.n	800392c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800390a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a33      	ldr	r2, [pc, #204]	; (80039e0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003912:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e050      	b.n	80039ce <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800392c:	4b2d      	ldr	r3, [pc, #180]	; (80039e4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	2b01      	cmp	r3, #1
 8003938:	d002      	beq.n	8003940 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	025b      	lsls	r3, r3, #9
 800393e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003940:	f04f 33ff 	mov.w	r3, #4294967295
 8003944:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	025b      	lsls	r3, r3, #9
 800394a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800394c:	2390      	movs	r3, #144	; 0x90
 800394e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003950:	2302      	movs	r3, #2
 8003952:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003954:	2300      	movs	r3, #0
 8003956:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003958:	2301      	movs	r3, #1
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f107 0210 	add.w	r2, r7, #16
 8003964:	4611      	mov	r1, r2
 8003966:	4618      	mov	r0, r3
 8003968:	f002 f954 	bl	8005c14 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d90a      	bls.n	8003988 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2282      	movs	r2, #130	; 0x82
 8003976:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800397e:	4618      	mov	r0, r3
 8003980:	f002 f9b8 	bl	8005cf4 <SDMMC_CmdReadMultiBlock>
 8003984:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003986:	e009      	b.n	800399c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2281      	movs	r2, #129	; 0x81
 800398c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003994:	4618      	mov	r0, r3
 8003996:	f002 f98b 	bl	8005cb0 <SDMMC_CmdReadSingleBlock>
 800399a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800399c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d012      	beq.n	80039c8 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a0e      	ldr	r2, [pc, #56]	; (80039e0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80039a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b0:	431a      	orrs	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e002      	b.n	80039ce <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e000      	b.n	80039ce <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80039cc:	2302      	movs	r3, #2
  }
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3730      	adds	r7, #48	; 0x30
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	08004413 	.word	0x08004413
 80039dc:	08004485 	.word	0x08004485
 80039e0:	004005ff 	.word	0x004005ff
 80039e4:	4225858c 	.word	0x4225858c

080039e8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08c      	sub	sp, #48	; 0x30
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d107      	bne.n	8003a10 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0c5      	b.n	8003b9c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	f040 80be 	bne.w	8003b9a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	441a      	add	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d907      	bls.n	8003a42 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a36:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e0ac      	b.n	8003b9c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2203      	movs	r2, #3
 8003a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003a60:	f043 0302 	orr.w	r3, r3, #2
 8003a64:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6a:	4a4e      	ldr	r2, [pc, #312]	; (8003ba4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003a6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a72:	4a4d      	ldr	r2, [pc, #308]	; (8003ba8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003a74:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d002      	beq.n	8003a8c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a88:	025b      	lsls	r3, r3, #9
 8003a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d90a      	bls.n	8003aa8 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	22a0      	movs	r2, #160	; 0xa0
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f002 f96c 	bl	8005d7c <SDMMC_CmdWriteMultiBlock>
 8003aa4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003aa6:	e009      	b.n	8003abc <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2290      	movs	r2, #144	; 0x90
 8003aac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f002 f93f 	bl	8005d38 <SDMMC_CmdWriteSingleBlock>
 8003aba:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d012      	beq.n	8003ae8 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a39      	ldr	r2, [pc, #228]	; (8003bac <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003ac8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e059      	b.n	8003b9c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003ae8:	4b31      	ldr	r3, [pc, #196]	; (8003bb0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af2:	2240      	movs	r2, #64	; 0x40
 8003af4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003b16:	68b9      	ldr	r1, [r7, #8]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3380      	adds	r3, #128	; 0x80
 8003b1e:	461a      	mov	r2, r3
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	025b      	lsls	r3, r3, #9
 8003b24:	089b      	lsrs	r3, r3, #2
 8003b26:	f7fd fad7 	bl	80010d8 <HAL_DMA_Start_IT>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01c      	beq.n	8003b6a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	6812      	ldr	r2, [r2, #0]
 8003b3a:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8003b3e:	f023 0302 	bic.w	r3, r3, #2
 8003b42:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a18      	ldr	r2, [pc, #96]	; (8003bac <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003b4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e018      	b.n	8003b9c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	025b      	lsls	r3, r3, #9
 8003b74:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003b76:	2390      	movs	r3, #144	; 0x90
 8003b78:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003b82:	2301      	movs	r3, #1
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f107 0210 	add.w	r2, r7, #16
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4618      	mov	r0, r3
 8003b92:	f002 f83f 	bl	8005c14 <SDIO_ConfigData>

      return HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	e000      	b.n	8003b9c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003b9a:	2302      	movs	r3, #2
  }
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3730      	adds	r7, #48	; 0x30
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	080043e9 	.word	0x080043e9
 8003ba8:	08004485 	.word	0x08004485
 8003bac:	004005ff 	.word	0x004005ff
 8003bb0:	4225858c 	.word	0x4225858c

08003bb4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_SD_IRQHandler+0x2e>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fffd 	bl	8004bda <SD_Read_IT>
 8003be0:	e165      	b.n	8003eae <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 808f 	beq.w	8003d10 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bfa:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6812      	ldr	r2, [r2, #0]
 8003c06:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003c0a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003c0e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0201 	bic.w	r2, r2, #1
 8003c1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d039      	beq.n	8003c9e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d104      	bne.n	8003c3e <HAL_SD_IRQHandler+0x8a>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d011      	beq.n	8003c62 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f002 f8bc 	bl	8005dc0 <SDMMC_CmdStopTransfer>
 8003c48:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f92f 	bl	8003ec0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c6a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d104      	bne.n	8003c8e <HAL_SD_IRQHandler+0xda>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f004 f89c 	bl	8007dcc <HAL_SD_RxCpltCallback>
 8003c94:	e10b      	b.n	8003eae <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f004 f88e 	bl	8007db8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c9c:	e107      	b.n	8003eae <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8102 	beq.w	8003eae <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 0320 	and.w	r3, r3, #32
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d011      	beq.n	8003cd8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f002 f881 	bl	8005dc0 <SDMMC_CmdStopTransfer>
 8003cbe:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d008      	beq.n	8003cd8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f8f4 	bl	8003ec0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f040 80e5 	bne.w	8003eae <HAL_SD_IRQHandler+0x2fa>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f040 80df 	bne.w	8003eae <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0208 	bic.w	r2, r2, #8
 8003cfe:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f004 f855 	bl	8007db8 <HAL_SD_TxCpltCallback>
}
 8003d0e:	e0ce      	b.n	8003eae <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <HAL_SD_IRQHandler+0x17c>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f003 0308 	and.w	r3, r3, #8
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 ffa7 	bl	8004c7c <SD_Write_IT>
 8003d2e:	e0be      	b.n	8003eae <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d36:	f240 233a 	movw	r3, #570	; 0x23a
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80b6 	beq.w	8003eae <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	f043 0202 	orr.w	r2, r3, #2
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6e:	f043 0208 	orr.w	r2, r3, #8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	f043 0220 	orr.w	r2, r3, #32
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d96:	f003 0310 	and.w	r3, r3, #16
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d005      	beq.n	8003daa <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	f043 0210 	orr.w	r2, r3, #16
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	f043 0208 	orr.w	r2, r3, #8
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f240 723a 	movw	r2, #1850	; 0x73a
 8003dcc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003ddc:	f023 0302 	bic.w	r3, r3, #2
 8003de0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f001 ffea 	bl	8005dc0 <SDMMC_CmdStopTransfer>
 8003dec:	4602      	mov	r2, r0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f855 	bl	8003ec0 <HAL_SD_ErrorCallback>
}
 8003e16:	e04a      	b.n	8003eae <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d045      	beq.n	8003eae <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f003 0310 	and.w	r3, r3, #16
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d104      	bne.n	8003e36 <HAL_SD_IRQHandler+0x282>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 0320 	and.w	r3, r3, #32
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d011      	beq.n	8003e5a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3a:	4a1f      	ldr	r2, [pc, #124]	; (8003eb8 <HAL_SD_IRQHandler+0x304>)
 8003e3c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fd fa10 	bl	8001268 <HAL_DMA_Abort_IT>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d02f      	beq.n	8003eae <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fb68 	bl	8004528 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003e58:	e029      	b.n	8003eae <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <HAL_SD_IRQHandler+0x2ba>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d011      	beq.n	8003e92 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	4a12      	ldr	r2, [pc, #72]	; (8003ebc <HAL_SD_IRQHandler+0x308>)
 8003e74:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fd f9f4 	bl	8001268 <HAL_DMA_Abort_IT>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d013      	beq.n	8003eae <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fb83 	bl	8004596 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003e90:	e00d      	b.n	8003eae <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f003 ff7c 	bl	8007da4 <HAL_SD_AbortCallback>
}
 8003eac:	e7ff      	b.n	8003eae <HAL_SD_IRQHandler+0x2fa>
 8003eae:	bf00      	nop
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	08004529 	.word	0x08004529
 8003ebc:	08004597 	.word	0x08004597

08003ec0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ee2:	0f9b      	lsrs	r3, r3, #30
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eee:	0e9b      	lsrs	r3, r3, #26
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f00:	0e1b      	lsrs	r3, r3, #24
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f12:	0c1b      	lsrs	r3, r3, #16
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f34:	0d1b      	lsrs	r3, r3, #20
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f40:	0c1b      	lsrs	r3, r3, #16
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f52:	0bdb      	lsrs	r3, r3, #15
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f64:	0b9b      	lsrs	r3, r3, #14
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f76:	0b5b      	lsrs	r3, r3, #13
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f88:	0b1b      	lsrs	r3, r3, #12
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d163      	bne.n	800406c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fa8:	009a      	lsls	r2, r3, #2
 8003faa:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fae:	4013      	ands	r3, r2
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003fb4:	0f92      	lsrs	r2, r2, #30
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fc0:	0edb      	lsrs	r3, r3, #27
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fd2:	0e1b      	lsrs	r3, r3, #24
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fe4:	0d5b      	lsrs	r3, r3, #21
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ff6:	0c9b      	lsrs	r3, r3, #18
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004008:	0bdb      	lsrs	r3, r3, #15
 800400a:	b2db      	uxtb	r3, r3
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	b2da      	uxtb	r2, r3
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	7e1b      	ldrb	r3, [r3, #24]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	3302      	adds	r3, #2
 800402c:	2201      	movs	r2, #1
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004036:	fb02 f203 	mul.w	r2, r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	7a1b      	ldrb	r3, [r3, #8]
 8004042:	b2db      	uxtb	r3, r3
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	2201      	movs	r2, #1
 800404a:	409a      	lsls	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004058:	0a52      	lsrs	r2, r2, #9
 800405a:	fb02 f203 	mul.w	r2, r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004068:	661a      	str	r2, [r3, #96]	; 0x60
 800406a:	e031      	b.n	80040d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004070:	2b01      	cmp	r3, #1
 8004072:	d11d      	bne.n	80040b0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004078:	041b      	lsls	r3, r3, #16
 800407a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004082:	0c1b      	lsrs	r3, r3, #16
 8004084:	431a      	orrs	r2, r3
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	3301      	adds	r3, #1
 8004090:	029a      	lsls	r2, r3, #10
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040a4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	661a      	str	r2, [r3, #96]	; 0x60
 80040ae:	e00f      	b.n	80040d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a58      	ldr	r2, [pc, #352]	; (8004218 <HAL_SD_GetCardCSD+0x344>)
 80040b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e09d      	b.n	800420c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040d4:	0b9b      	lsrs	r3, r3, #14
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e6:	09db      	lsrs	r3, r3, #7
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004108:	0fdb      	lsrs	r3, r3, #31
 800410a:	b2da      	uxtb	r2, r3
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004114:	0f5b      	lsrs	r3, r3, #29
 8004116:	b2db      	uxtb	r3, r3
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	b2da      	uxtb	r2, r3
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004126:	0e9b      	lsrs	r3, r3, #26
 8004128:	b2db      	uxtb	r3, r3
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	b2da      	uxtb	r2, r3
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004138:	0d9b      	lsrs	r3, r3, #22
 800413a:	b2db      	uxtb	r3, r3
 800413c:	f003 030f 	and.w	r3, r3, #15
 8004140:	b2da      	uxtb	r2, r3
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414a:	0d5b      	lsrs	r3, r3, #21
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	b2da      	uxtb	r2, r3
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	0c1b      	lsrs	r3, r3, #16
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	b2da      	uxtb	r2, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417a:	0bdb      	lsrs	r3, r3, #15
 800417c:	b2db      	uxtb	r3, r3
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	b2da      	uxtb	r2, r3
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418e:	0b9b      	lsrs	r3, r3, #14
 8004190:	b2db      	uxtb	r3, r3
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	b2da      	uxtb	r2, r3
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a2:	0b5b      	lsrs	r3, r3, #13
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b6:	0b1b      	lsrs	r3, r3, #12
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ca:	0a9b      	lsrs	r3, r3, #10
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041de:	0a1b      	lsrs	r3, r3, #8
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f2:	085b      	lsrs	r3, r3, #1
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	004005ff 	.word	0x004005ff

0800421c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004274:	b5b0      	push	{r4, r5, r7, lr}
 8004276:	b08e      	sub	sp, #56	; 0x38
 8004278:	af04      	add	r7, sp, #16
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2203      	movs	r2, #3
 8004288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004290:	2b03      	cmp	r3, #3
 8004292:	d02e      	beq.n	80042f2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800429a:	d106      	bne.n	80042aa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	639a      	str	r2, [r3, #56]	; 0x38
 80042a8:	e029      	b.n	80042fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042b0:	d10a      	bne.n	80042c8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fb28 	bl	8004908 <SD_WideBus_Enable>
 80042b8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	639a      	str	r2, [r3, #56]	; 0x38
 80042c6:	e01a      	b.n	80042fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10a      	bne.n	80042e4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fb65 	bl	800499e <SD_WideBus_Disable>
 80042d4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	639a      	str	r2, [r3, #56]	; 0x38
 80042e2:	e00c      	b.n	80042fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	639a      	str	r2, [r3, #56]	; 0x38
 80042f0:	e005      	b.n	80042fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00b      	beq.n	800431e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a26      	ldr	r2, [pc, #152]	; (80043a4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800430c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800431c:	e01f      	b.n	800435e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681d      	ldr	r5, [r3, #0]
 8004344:	466c      	mov	r4, sp
 8004346:	f107 0314 	add.w	r3, r7, #20
 800434a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800434e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004352:	f107 0308 	add.w	r3, r7, #8
 8004356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004358:	4628      	mov	r0, r5
 800435a:	f001 fbab 	bl	8005ab4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004366:	4618      	mov	r0, r3
 8004368:	f001 fc80 	bl	8005c6c <SDMMC_CmdBlockLength>
 800436c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00c      	beq.n	800438e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a0a      	ldr	r2, [pc, #40]	; (80043a4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800437a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800439a:	4618      	mov	r0, r3
 800439c:	3728      	adds	r7, #40	; 0x28
 800439e:	46bd      	mov	sp, r7
 80043a0:	bdb0      	pop	{r4, r5, r7, pc}
 80043a2:	bf00      	nop
 80043a4:	004005ff 	.word	0x004005ff

080043a8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80043b4:	f107 030c 	add.w	r3, r7, #12
 80043b8:	4619      	mov	r1, r3
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fa7c 	bl	80048b8 <SD_SendStatus>
 80043c0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	0a5b      	lsrs	r3, r3, #9
 80043d8:	f003 030f 	and.w	r3, r3, #15
 80043dc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80043de:	693b      	ldr	r3, [r7, #16]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004404:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004406:	bf00      	nop
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004424:	2b82      	cmp	r3, #130	; 0x82
 8004426:	d111      	bne.n	800444c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f001 fcc7 	bl	8005dc0 <SDMMC_CmdStopTransfer>
 8004432:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	431a      	orrs	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f7ff fd3a 	bl	8003ec0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0208 	bic.w	r2, r2, #8
 800445a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f240 523a 	movw	r2, #1338	; 0x53a
 8004464:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f003 fca9 	bl	8007dcc <HAL_SD_RxCpltCallback>
#endif
}
 800447a:	bf00      	nop
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fd f894 	bl	80015c0 <HAL_DMA_GetError>
 8004498:	4603      	mov	r3, r0
 800449a:	2b02      	cmp	r3, #2
 800449c:	d03e      	beq.n	800451c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ac:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d002      	beq.n	80044ba <SD_DMAError+0x36>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d12d      	bne.n	8004516 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a19      	ldr	r2, [pc, #100]	; (8004524 <SD_DMAError+0xa0>)
 80044c0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80044d0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80044de:	6978      	ldr	r0, [r7, #20]
 80044e0:	f7ff ff62 	bl	80043a8 <HAL_SD_GetCardState>
 80044e4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b06      	cmp	r3, #6
 80044ea:	d002      	beq.n	80044f2 <SD_DMAError+0x6e>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b05      	cmp	r3, #5
 80044f0:	d10a      	bne.n	8004508 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f001 fc62 	bl	8005dc0 <SDMMC_CmdStopTransfer>
 80044fc:	4602      	mov	r2, r0
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	431a      	orrs	r2, r3
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	2200      	movs	r2, #0
 8004514:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004516:	6978      	ldr	r0, [r7, #20]
 8004518:	f7ff fcd2 	bl	8003ec0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800451c:	bf00      	nop
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	004005ff 	.word	0x004005ff

08004528 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004534:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f240 523a 	movw	r2, #1338	; 0x53a
 800453e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f7ff ff31 	bl	80043a8 <HAL_SD_GetCardState>
 8004546:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b06      	cmp	r3, #6
 800455a:	d002      	beq.n	8004562 <SD_DMATxAbort+0x3a>
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2b05      	cmp	r3, #5
 8004560:	d10a      	bne.n	8004578 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f001 fc2a 	bl	8005dc0 <SDMMC_CmdStopTransfer>
 800456c:	4602      	mov	r2, r0
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004572:	431a      	orrs	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457c:	2b00      	cmp	r3, #0
 800457e:	d103      	bne.n	8004588 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f003 fc0f 	bl	8007da4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004586:	e002      	b.n	800458e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f7ff fc99 	bl	8003ec0 <HAL_SD_ErrorCallback>
}
 800458e:	bf00      	nop
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b084      	sub	sp, #16
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f240 523a 	movw	r2, #1338	; 0x53a
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7ff fefa 	bl	80043a8 <HAL_SD_GetCardState>
 80045b4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b06      	cmp	r3, #6
 80045c8:	d002      	beq.n	80045d0 <SD_DMARxAbort+0x3a>
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b05      	cmp	r3, #5
 80045ce:	d10a      	bne.n	80045e6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f001 fbf3 	bl	8005dc0 <SDMMC_CmdStopTransfer>
 80045da:	4602      	mov	r2, r0
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e0:	431a      	orrs	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d103      	bne.n	80045f6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f003 fbd8 	bl	8007da4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80045f4:	e002      	b.n	80045fc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f7ff fc62 	bl	8003ec0 <HAL_SD_ErrorCallback>
}
 80045fc:	bf00      	nop
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004604:	b5b0      	push	{r4, r5, r7, lr}
 8004606:	b094      	sub	sp, #80	; 0x50
 8004608:	af04      	add	r7, sp, #16
 800460a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800460c:	2301      	movs	r3, #1
 800460e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f001 faa5 	bl	8005b64 <SDIO_GetPowerState>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d102      	bne.n	8004626 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004620:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004624:	e0b6      	b.n	8004794 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462a:	2b03      	cmp	r3, #3
 800462c:	d02f      	beq.n	800468e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f001 fcce 	bl	8005fd4 <SDMMC_CmdSendCID>
 8004638:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800463a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <SD_InitCard+0x40>
    {
      return errorstate;
 8004640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004642:	e0a7      	b.n	8004794 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2100      	movs	r1, #0
 800464a:	4618      	mov	r0, r3
 800464c:	f001 facf 	bl	8005bee <SDIO_GetResponse>
 8004650:	4602      	mov	r2, r0
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2104      	movs	r1, #4
 800465c:	4618      	mov	r0, r3
 800465e:	f001 fac6 	bl	8005bee <SDIO_GetResponse>
 8004662:	4602      	mov	r2, r0
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2108      	movs	r1, #8
 800466e:	4618      	mov	r0, r3
 8004670:	f001 fabd 	bl	8005bee <SDIO_GetResponse>
 8004674:	4602      	mov	r2, r0
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	210c      	movs	r1, #12
 8004680:	4618      	mov	r0, r3
 8004682:	f001 fab4 	bl	8005bee <SDIO_GetResponse>
 8004686:	4602      	mov	r2, r0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004692:	2b03      	cmp	r3, #3
 8004694:	d00d      	beq.n	80046b2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f107 020e 	add.w	r2, r7, #14
 800469e:	4611      	mov	r1, r2
 80046a0:	4618      	mov	r0, r3
 80046a2:	f001 fcd4 	bl	800604e <SDMMC_CmdSetRelAdd>
 80046a6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80046a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <SD_InitCard+0xae>
    {
      return errorstate;
 80046ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b0:	e070      	b.n	8004794 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d036      	beq.n	8004728 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80046ba:	89fb      	ldrh	r3, [r7, #14]
 80046bc:	461a      	mov	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ca:	041b      	lsls	r3, r3, #16
 80046cc:	4619      	mov	r1, r3
 80046ce:	4610      	mov	r0, r2
 80046d0:	f001 fc9e 	bl	8006010 <SDMMC_CmdSendCSD>
 80046d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80046d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80046dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046de:	e059      	b.n	8004794 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2100      	movs	r1, #0
 80046e6:	4618      	mov	r0, r3
 80046e8:	f001 fa81 	bl	8005bee <SDIO_GetResponse>
 80046ec:	4602      	mov	r2, r0
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2104      	movs	r1, #4
 80046f8:	4618      	mov	r0, r3
 80046fa:	f001 fa78 	bl	8005bee <SDIO_GetResponse>
 80046fe:	4602      	mov	r2, r0
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2108      	movs	r1, #8
 800470a:	4618      	mov	r0, r3
 800470c:	f001 fa6f 	bl	8005bee <SDIO_GetResponse>
 8004710:	4602      	mov	r2, r0
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	210c      	movs	r1, #12
 800471c:	4618      	mov	r0, r3
 800471e:	f001 fa66 	bl	8005bee <SDIO_GetResponse>
 8004722:	4602      	mov	r2, r0
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2104      	movs	r1, #4
 800472e:	4618      	mov	r0, r3
 8004730:	f001 fa5d 	bl	8005bee <SDIO_GetResponse>
 8004734:	4603      	mov	r3, r0
 8004736:	0d1a      	lsrs	r2, r3, #20
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800473c:	f107 0310 	add.w	r3, r7, #16
 8004740:	4619      	mov	r1, r3
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff fbc6 	bl	8003ed4 <HAL_SD_GetCardCSD>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800474e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004752:	e01f      	b.n	8004794 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6819      	ldr	r1, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475c:	041b      	lsls	r3, r3, #16
 800475e:	461a      	mov	r2, r3
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	4608      	mov	r0, r1
 8004766:	f001 fb4d 	bl	8005e04 <SDMMC_CmdSelDesel>
 800476a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800476c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <SD_InitCard+0x172>
  {
    return errorstate;
 8004772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004774:	e00e      	b.n	8004794 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681d      	ldr	r5, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	466c      	mov	r4, sp
 800477e:	f103 0210 	add.w	r2, r3, #16
 8004782:	ca07      	ldmia	r2, {r0, r1, r2}
 8004784:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004788:	3304      	adds	r3, #4
 800478a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800478c:	4628      	mov	r0, r5
 800478e:	f001 f991 	bl	8005ab4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3740      	adds	r7, #64	; 0x40
 8004798:	46bd      	mov	sp, r7
 800479a:	bdb0      	pop	{r4, r5, r7, pc}

0800479c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	2300      	movs	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f001 fb48 	bl	8005e4a <SDMMC_CmdGoIdleState>
 80047ba:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	e072      	b.n	80048ac <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f001 fb5b 	bl	8005e86 <SDMMC_CmdOperCond>
 80047d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00d      	beq.n	80047f4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f001 fb31 	bl	8005e4a <SDMMC_CmdGoIdleState>
 80047e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d004      	beq.n	80047fa <SD_PowerON+0x5e>
    {
      return errorstate;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	e05b      	b.n	80048ac <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d137      	bne.n	8004872 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2100      	movs	r1, #0
 8004808:	4618      	mov	r0, r3
 800480a:	f001 fb5b 	bl	8005ec4 <SDMMC_CmdAppCommand>
 800480e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d02d      	beq.n	8004872 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004816:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800481a:	e047      	b.n	80048ac <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2100      	movs	r1, #0
 8004822:	4618      	mov	r0, r3
 8004824:	f001 fb4e 	bl	8005ec4 <SDMMC_CmdAppCommand>
 8004828:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <SD_PowerON+0x98>
    {
      return errorstate;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	e03b      	b.n	80048ac <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	491e      	ldr	r1, [pc, #120]	; (80048b4 <SD_PowerON+0x118>)
 800483a:	4618      	mov	r0, r3
 800483c:	f001 fb64 	bl	8005f08 <SDMMC_CmdAppOperCommand>
 8004840:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004848:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800484c:	e02e      	b.n	80048ac <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f001 f9ca 	bl	8005bee <SDIO_GetResponse>
 800485a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	0fdb      	lsrs	r3, r3, #31
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <SD_PowerON+0xcc>
 8004864:	2301      	movs	r3, #1
 8004866:	e000      	b.n	800486a <SD_PowerON+0xce>
 8004868:	2300      	movs	r3, #0
 800486a:	613b      	str	r3, [r7, #16]

    count++;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	3301      	adds	r3, #1
 8004870:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004878:	4293      	cmp	r3, r2
 800487a:	d802      	bhi.n	8004882 <SD_PowerON+0xe6>
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0cc      	beq.n	800481c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004888:	4293      	cmp	r3, r2
 800488a:	d902      	bls.n	8004892 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800488c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004890:	e00c      	b.n	80048ac <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	645a      	str	r2, [r3, #68]	; 0x44
 80048a2:	e002      	b.n	80048aa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	c1100000 	.word	0xc1100000

080048b8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d102      	bne.n	80048ce <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80048c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048cc:	e018      	b.n	8004900 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d6:	041b      	lsls	r3, r3, #16
 80048d8:	4619      	mov	r1, r3
 80048da:	4610      	mov	r0, r2
 80048dc:	f001 fbd8 	bl	8006090 <SDMMC_CmdSendStatus>
 80048e0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <SD_SendStatus+0x34>
  {
    return errorstate;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	e009      	b.n	8004900 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2100      	movs	r1, #0
 80048f2:	4618      	mov	r0, r3
 80048f4:	f001 f97b 	bl	8005bee <SDIO_GetResponse>
 80048f8:	4602      	mov	r2, r0
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	2300      	movs	r3, #0
 8004916:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2100      	movs	r1, #0
 800491e:	4618      	mov	r0, r3
 8004920:	f001 f965 	bl	8005bee <SDIO_GetResponse>
 8004924:	4603      	mov	r3, r0
 8004926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800492e:	d102      	bne.n	8004936 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004930:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004934:	e02f      	b.n	8004996 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004936:	f107 030c 	add.w	r3, r7, #12
 800493a:	4619      	mov	r1, r3
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f879 	bl	8004a34 <SD_FindSCR>
 8004942:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	e023      	b.n	8004996 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01c      	beq.n	8004992 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004960:	041b      	lsls	r3, r3, #16
 8004962:	4619      	mov	r1, r3
 8004964:	4610      	mov	r0, r2
 8004966:	f001 faad 	bl	8005ec4 <SDMMC_CmdAppCommand>
 800496a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	e00f      	b.n	8004996 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2102      	movs	r1, #2
 800497c:	4618      	mov	r0, r3
 800497e:	f001 fae6 	bl	8005f4e <SDMMC_CmdBusWidth>
 8004982:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	e003      	b.n	8004996 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800498e:	2300      	movs	r3, #0
 8004990:	e001      	b.n	8004996 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004992:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004996:	4618      	mov	r0, r3
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b086      	sub	sp, #24
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	2300      	movs	r3, #0
 80049ac:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2100      	movs	r1, #0
 80049b4:	4618      	mov	r0, r3
 80049b6:	f001 f91a 	bl	8005bee <SDIO_GetResponse>
 80049ba:	4603      	mov	r3, r0
 80049bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049c4:	d102      	bne.n	80049cc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80049c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049ca:	e02f      	b.n	8004a2c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80049cc:	f107 030c 	add.w	r3, r7, #12
 80049d0:	4619      	mov	r1, r3
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f82e 	bl	8004a34 <SD_FindSCR>
 80049d8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	e023      	b.n	8004a2c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d01c      	beq.n	8004a28 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f6:	041b      	lsls	r3, r3, #16
 80049f8:	4619      	mov	r1, r3
 80049fa:	4610      	mov	r0, r2
 80049fc:	f001 fa62 	bl	8005ec4 <SDMMC_CmdAppCommand>
 8004a00:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	e00f      	b.n	8004a2c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2100      	movs	r1, #0
 8004a12:	4618      	mov	r0, r3
 8004a14:	f001 fa9b 	bl	8005f4e <SDMMC_CmdBusWidth>
 8004a18:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	e003      	b.n	8004a2c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004a24:	2300      	movs	r3, #0
 8004a26:	e001      	b.n	8004a2c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004a28:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004a34:	b590      	push	{r4, r7, lr}
 8004a36:	b08f      	sub	sp, #60	; 0x3c
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004a3e:	f7fc f95b 	bl	8000cf8 <HAL_GetTick>
 8004a42:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60bb      	str	r3, [r7, #8]
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2108      	movs	r1, #8
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 f906 	bl	8005c6c <SDMMC_CmdBlockLength>
 8004a60:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	e0b2      	b.n	8004bd2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a74:	041b      	lsls	r3, r3, #16
 8004a76:	4619      	mov	r1, r3
 8004a78:	4610      	mov	r0, r2
 8004a7a:	f001 fa23 	bl	8005ec4 <SDMMC_CmdAppCommand>
 8004a7e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a88:	e0a3      	b.n	8004bd2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a8e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004a90:	2308      	movs	r3, #8
 8004a92:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004a94:	2330      	movs	r3, #48	; 0x30
 8004a96:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004a98:	2302      	movs	r3, #2
 8004a9a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f107 0210 	add.w	r2, r7, #16
 8004aac:	4611      	mov	r1, r2
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f001 f8b0 	bl	8005c14 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f001 fa6a 	bl	8005f92 <SDMMC_CmdSendSCR>
 8004abe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d02a      	beq.n	8004b1c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac8:	e083      	b.n	8004bd2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00f      	beq.n	8004af8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6819      	ldr	r1, [r3, #0]
 8004adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	f107 0208 	add.w	r2, r7, #8
 8004ae4:	18d4      	adds	r4, r2, r3
 8004ae6:	4608      	mov	r0, r1
 8004ae8:	f001 f80f 	bl	8005b0a <SDIO_ReadFIFO>
 8004aec:	4603      	mov	r3, r0
 8004aee:	6023      	str	r3, [r4, #0]
      index++;
 8004af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af2:	3301      	adds	r3, #1
 8004af4:	637b      	str	r3, [r7, #52]	; 0x34
 8004af6:	e006      	b.n	8004b06 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d012      	beq.n	8004b2c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004b06:	f7fc f8f7 	bl	8000cf8 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d102      	bne.n	8004b1c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004b16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b1a:	e05a      	b.n	8004bd2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b22:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0cf      	beq.n	8004aca <SD_FindSCR+0x96>
 8004b2a:	e000      	b.n	8004b2e <SD_FindSCR+0xfa>
      break;
 8004b2c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2208      	movs	r2, #8
 8004b42:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004b44:	2308      	movs	r3, #8
 8004b46:	e044      	b.n	8004bd2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d005      	beq.n	8004b62 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e037      	b.n	8004bd2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d005      	beq.n	8004b7c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2220      	movs	r2, #32
 8004b76:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004b78:	2320      	movs	r3, #32
 8004b7a:	e02a      	b.n	8004bd2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b84:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	061a      	lsls	r2, r3, #24
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	021b      	lsls	r3, r3, #8
 8004b8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b92:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	0a1b      	lsrs	r3, r3, #8
 8004b98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004b9c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	0e1b      	lsrs	r3, r3, #24
 8004ba2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba6:	601a      	str	r2, [r3, #0]
    scr++;
 8004ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004baa:	3304      	adds	r3, #4
 8004bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	061a      	lsls	r2, r3, #24
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	021b      	lsls	r3, r3, #8
 8004bb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bba:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	0a1b      	lsrs	r3, r3, #8
 8004bc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004bc4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	0e1b      	lsrs	r3, r3, #24
 8004bca:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bce:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	373c      	adds	r7, #60	; 0x3c
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd90      	pop	{r4, r7, pc}

08004bda <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b086      	sub	sp, #24
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d03f      	beq.n	8004c74 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	e033      	b.n	8004c62 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 ff83 	bl	8005b0a <SDIO_ReadFIFO>
 8004c04:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3301      	adds	r3, #1
 8004c12:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	0a1b      	lsrs	r3, r3, #8
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3301      	adds	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	0c1b      	lsrs	r3, r3, #16
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	0e1b      	lsrs	r3, r3, #24
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	3301      	adds	r3, #1
 8004c54:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2b07      	cmp	r3, #7
 8004c66:	d9c8      	bls.n	8004bfa <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004c74:	bf00      	nop
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d043      	beq.n	8004d1e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]
 8004c9a:	e037      	b.n	8004d0c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	021a      	lsls	r2, r3, #8
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	041a      	lsls	r2, r3, #16
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	061a      	lsls	r2, r3, #24
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3301      	adds	r3, #1
 8004cee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f107 0208 	add.w	r2, r7, #8
 8004cfe:	4611      	mov	r1, r2
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 ff0f 	bl	8005b24 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2b07      	cmp	r3, #7
 8004d10:	d9c4      	bls.n	8004c9c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004d1e:	bf00      	nop
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b082      	sub	sp, #8
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e03f      	b.n	8004db8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d106      	bne.n	8004d52 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7fb fe85 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2224      	movs	r2, #36	; 0x24
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d68:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fcda 	bl	8005724 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691a      	ldr	r2, [r3, #16]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d7e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695a      	ldr	r2, [r3, #20]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d8e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d9e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d11d      	bne.n	8004e16 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <HAL_UART_Receive_IT+0x26>
 8004de0:	88fb      	ldrh	r3, [r7, #6]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e016      	b.n	8004e18 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <HAL_UART_Receive_IT+0x38>
 8004df4:	2302      	movs	r3, #2
 8004df6:	e00f      	b.n	8004e18 <HAL_UART_Receive_IT+0x58>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e06:	88fb      	ldrh	r3, [r7, #6]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	68b9      	ldr	r1, [r7, #8]
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 fab5 	bl	800537c <UART_Start_Receive_IT>
 8004e12:	4603      	mov	r3, r0
 8004e14:	e000      	b.n	8004e18 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004e16:	2302      	movs	r3, #2
  }
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b0ba      	sub	sp, #232	; 0xe8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004e5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10f      	bne.n	8004e86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d009      	beq.n	8004e86 <HAL_UART_IRQHandler+0x66>
 8004e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e76:	f003 0320 	and.w	r3, r3, #32
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fb95 	bl	80055ae <UART_Receive_IT>
      return;
 8004e84:	e256      	b.n	8005334 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 80de 	beq.w	800504c <HAL_UART_IRQHandler+0x22c>
 8004e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d106      	bne.n	8004eaa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ea0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 80d1 	beq.w	800504c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00b      	beq.n	8004ece <HAL_UART_IRQHandler+0xae>
 8004eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	f043 0201 	orr.w	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ed2:	f003 0304 	and.w	r3, r3, #4
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00b      	beq.n	8004ef2 <HAL_UART_IRQHandler+0xd2>
 8004eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d005      	beq.n	8004ef2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	f043 0202 	orr.w	r2, r3, #2
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00b      	beq.n	8004f16 <HAL_UART_IRQHandler+0xf6>
 8004efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d005      	beq.n	8004f16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f043 0204 	orr.w	r2, r3, #4
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d011      	beq.n	8004f46 <HAL_UART_IRQHandler+0x126>
 8004f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f26:	f003 0320 	and.w	r3, r3, #32
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d105      	bne.n	8004f3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d005      	beq.n	8004f46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	f043 0208 	orr.w	r2, r3, #8
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 81ed 	beq.w	800532a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d008      	beq.n	8004f6e <HAL_UART_IRQHandler+0x14e>
 8004f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f60:	f003 0320 	and.w	r3, r3, #32
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 fb20 	bl	80055ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f78:	2b40      	cmp	r3, #64	; 0x40
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d103      	bne.n	8004f9a <HAL_UART_IRQHandler+0x17a>
 8004f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d04f      	beq.n	800503a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 fa28 	bl	80053f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004faa:	2b40      	cmp	r3, #64	; 0x40
 8004fac:	d141      	bne.n	8005032 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3314      	adds	r3, #20
 8004fb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fbc:	e853 3f00 	ldrex	r3, [r3]
 8004fc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3314      	adds	r3, #20
 8004fd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004fda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004fde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004fe6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004fea:	e841 2300 	strex	r3, r2, [r1]
 8004fee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ff2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1d9      	bne.n	8004fae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d013      	beq.n	800502a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	4a7d      	ldr	r2, [pc, #500]	; (80051fc <HAL_UART_IRQHandler+0x3dc>)
 8005008:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	4618      	mov	r0, r3
 8005010:	f7fc f92a 	bl	8001268 <HAL_DMA_Abort_IT>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d016      	beq.n	8005048 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005024:	4610      	mov	r0, r2
 8005026:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005028:	e00e      	b.n	8005048 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f990 	bl	8005350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005030:	e00a      	b.n	8005048 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f98c 	bl	8005350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005038:	e006      	b.n	8005048 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f988 	bl	8005350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005046:	e170      	b.n	800532a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005048:	bf00      	nop
    return;
 800504a:	e16e      	b.n	800532a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	2b01      	cmp	r3, #1
 8005052:	f040 814a 	bne.w	80052ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800505a:	f003 0310 	and.w	r3, r3, #16
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 8143 	beq.w	80052ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005068:	f003 0310 	and.w	r3, r3, #16
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 813c 	beq.w	80052ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005072:	2300      	movs	r3, #0
 8005074:	60bb      	str	r3, [r7, #8]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	60bb      	str	r3, [r7, #8]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	60bb      	str	r3, [r7, #8]
 8005086:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005092:	2b40      	cmp	r3, #64	; 0x40
 8005094:	f040 80b4 	bne.w	8005200 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8140 	beq.w	800532e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050b6:	429a      	cmp	r2, r3
 80050b8:	f080 8139 	bcs.w	800532e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ce:	f000 8088 	beq.w	80051e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	330c      	adds	r3, #12
 80050d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	330c      	adds	r3, #12
 80050fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80050fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005102:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800510a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005116:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1d9      	bne.n	80050d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3314      	adds	r3, #20
 8005124:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005128:	e853 3f00 	ldrex	r3, [r3]
 800512c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800512e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005130:	f023 0301 	bic.w	r3, r3, #1
 8005134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3314      	adds	r3, #20
 800513e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005142:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005146:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005148:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800514a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800514e:	e841 2300 	strex	r3, r2, [r1]
 8005152:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005154:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1e1      	bne.n	800511e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3314      	adds	r3, #20
 8005160:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005164:	e853 3f00 	ldrex	r3, [r3]
 8005168:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800516a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800516c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005170:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	3314      	adds	r3, #20
 800517a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800517e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005180:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005182:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005184:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005186:	e841 2300 	strex	r3, r2, [r1]
 800518a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800518c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1e3      	bne.n	800515a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	330c      	adds	r3, #12
 80051a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051aa:	e853 3f00 	ldrex	r3, [r3]
 80051ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051b2:	f023 0310 	bic.w	r3, r3, #16
 80051b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	330c      	adds	r3, #12
 80051c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80051c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80051c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051cc:	e841 2300 	strex	r3, r2, [r1]
 80051d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1e3      	bne.n	80051a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fb ffd3 	bl	8001188 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	4619      	mov	r1, r3
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f8b6 	bl	8005364 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051f8:	e099      	b.n	800532e <HAL_UART_IRQHandler+0x50e>
 80051fa:	bf00      	nop
 80051fc:	080054b7 	.word	0x080054b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005208:	b29b      	uxth	r3, r3
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005214:	b29b      	uxth	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 808b 	beq.w	8005332 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800521c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 8086 	beq.w	8005332 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	330c      	adds	r3, #12
 800522c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005230:	e853 3f00 	ldrex	r3, [r3]
 8005234:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005238:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800523c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	330c      	adds	r3, #12
 8005246:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800524a:	647a      	str	r2, [r7, #68]	; 0x44
 800524c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005250:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005252:	e841 2300 	strex	r3, r2, [r1]
 8005256:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1e3      	bne.n	8005226 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3314      	adds	r3, #20
 8005264:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	623b      	str	r3, [r7, #32]
   return(result);
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	f023 0301 	bic.w	r3, r3, #1
 8005274:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3314      	adds	r3, #20
 800527e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005282:	633a      	str	r2, [r7, #48]	; 0x30
 8005284:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005286:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800528a:	e841 2300 	strex	r3, r2, [r1]
 800528e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1e3      	bne.n	800525e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2220      	movs	r2, #32
 800529a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	330c      	adds	r3, #12
 80052aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	e853 3f00 	ldrex	r3, [r3]
 80052b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 0310 	bic.w	r3, r3, #16
 80052ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	330c      	adds	r3, #12
 80052c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80052c8:	61fa      	str	r2, [r7, #28]
 80052ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	69b9      	ldr	r1, [r7, #24]
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	617b      	str	r3, [r7, #20]
   return(result);
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e3      	bne.n	80052a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052e0:	4619      	mov	r1, r3
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f83e 	bl	8005364 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052e8:	e023      	b.n	8005332 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <HAL_UART_IRQHandler+0x4ea>
 80052f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f8eb 	bl	80054de <UART_Transmit_IT>
    return;
 8005308:	e014      	b.n	8005334 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800530a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800530e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00e      	beq.n	8005334 <HAL_UART_IRQHandler+0x514>
 8005316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800531a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531e:	2b00      	cmp	r3, #0
 8005320:	d008      	beq.n	8005334 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f92b 	bl	800557e <UART_EndTransmit_IT>
    return;
 8005328:	e004      	b.n	8005334 <HAL_UART_IRQHandler+0x514>
    return;
 800532a:	bf00      	nop
 800532c:	e002      	b.n	8005334 <HAL_UART_IRQHandler+0x514>
      return;
 800532e:	bf00      	nop
 8005330:	e000      	b.n	8005334 <HAL_UART_IRQHandler+0x514>
      return;
 8005332:	bf00      	nop
  }
}
 8005334:	37e8      	adds	r7, #232	; 0xe8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop

0800533c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	4613      	mov	r3, r2
 8005388:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	88fa      	ldrh	r2, [r7, #6]
 8005394:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	88fa      	ldrh	r2, [r7, #6]
 800539a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2222      	movs	r2, #34	; 0x22
 80053a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053c0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695a      	ldr	r2, [r3, #20]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0201 	orr.w	r2, r2, #1
 80053d0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f042 0220 	orr.w	r2, r2, #32
 80053e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b095      	sub	sp, #84	; 0x54
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	330c      	adds	r3, #12
 80053fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005402:	e853 3f00 	ldrex	r3, [r3]
 8005406:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800540e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	330c      	adds	r3, #12
 8005416:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005418:	643a      	str	r2, [r7, #64]	; 0x40
 800541a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800541e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005420:	e841 2300 	strex	r3, r2, [r1]
 8005424:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e5      	bne.n	80053f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3314      	adds	r3, #20
 8005432:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	e853 3f00 	ldrex	r3, [r3]
 800543a:	61fb      	str	r3, [r7, #28]
   return(result);
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	f023 0301 	bic.w	r3, r3, #1
 8005442:	64bb      	str	r3, [r7, #72]	; 0x48
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3314      	adds	r3, #20
 800544a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800544c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800544e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005450:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005454:	e841 2300 	strex	r3, r2, [r1]
 8005458:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1e5      	bne.n	800542c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005464:	2b01      	cmp	r3, #1
 8005466:	d119      	bne.n	800549c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	330c      	adds	r3, #12
 800546e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	e853 3f00 	ldrex	r3, [r3]
 8005476:	60bb      	str	r3, [r7, #8]
   return(result);
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f023 0310 	bic.w	r3, r3, #16
 800547e:	647b      	str	r3, [r7, #68]	; 0x44
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	330c      	adds	r3, #12
 8005486:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005488:	61ba      	str	r2, [r7, #24]
 800548a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	6979      	ldr	r1, [r7, #20]
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	e841 2300 	strex	r3, r2, [r1]
 8005494:	613b      	str	r3, [r7, #16]
   return(result);
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e5      	bne.n	8005468 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80054aa:	bf00      	nop
 80054ac:	3754      	adds	r7, #84	; 0x54
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f7ff ff3d 	bl	8005350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054d6:	bf00      	nop
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054de:	b480      	push	{r7}
 80054e0:	b085      	sub	sp, #20
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b21      	cmp	r3, #33	; 0x21
 80054f0:	d13e      	bne.n	8005570 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fa:	d114      	bne.n	8005526 <UART_Transmit_IT+0x48>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d110      	bne.n	8005526 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005518:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	1c9a      	adds	r2, r3, #2
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	621a      	str	r2, [r3, #32]
 8005524:	e008      	b.n	8005538 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	1c59      	adds	r1, r3, #1
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6211      	str	r1, [r2, #32]
 8005530:	781a      	ldrb	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800553c:	b29b      	uxth	r3, r3
 800553e:	3b01      	subs	r3, #1
 8005540:	b29b      	uxth	r3, r3
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	4619      	mov	r1, r3
 8005546:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10f      	bne.n	800556c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800555a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800556a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	e000      	b.n	8005572 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005570:	2302      	movs	r3, #2
  }
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b082      	sub	sp, #8
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005594:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff fecc 	bl	800533c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b08c      	sub	sp, #48	; 0x30
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b22      	cmp	r3, #34	; 0x22
 80055c0:	f040 80ab 	bne.w	800571a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055cc:	d117      	bne.n	80055fe <UART_Receive_IT+0x50>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d113      	bne.n	80055fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	1c9a      	adds	r2, r3, #2
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	629a      	str	r2, [r3, #40]	; 0x28
 80055fc:	e026      	b.n	800564c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005602:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005604:	2300      	movs	r3, #0
 8005606:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005610:	d007      	beq.n	8005622 <UART_Receive_IT+0x74>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10a      	bne.n	8005630 <UART_Receive_IT+0x82>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	b2da      	uxtb	r2, r3
 800562a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	e008      	b.n	8005642 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	b2db      	uxtb	r3, r3
 8005638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800563c:	b2da      	uxtb	r2, r3
 800563e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005640:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005650:	b29b      	uxth	r3, r3
 8005652:	3b01      	subs	r3, #1
 8005654:	b29b      	uxth	r3, r3
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	4619      	mov	r1, r3
 800565a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800565c:	2b00      	cmp	r3, #0
 800565e:	d15a      	bne.n	8005716 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0220 	bic.w	r2, r2, #32
 800566e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800567e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695a      	ldr	r2, [r3, #20]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0201 	bic.w	r2, r2, #1
 800568e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	2b01      	cmp	r3, #1
 800569e:	d135      	bne.n	800570c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	330c      	adds	r3, #12
 80056ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	613b      	str	r3, [r7, #16]
   return(result);
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	f023 0310 	bic.w	r3, r3, #16
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	330c      	adds	r3, #12
 80056c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c6:	623a      	str	r2, [r7, #32]
 80056c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	69f9      	ldr	r1, [r7, #28]
 80056cc:	6a3a      	ldr	r2, [r7, #32]
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e5      	bne.n	80056a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0310 	and.w	r3, r3, #16
 80056e4:	2b10      	cmp	r3, #16
 80056e6:	d10a      	bne.n	80056fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005702:	4619      	mov	r1, r3
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff fe2d 	bl	8005364 <HAL_UARTEx_RxEventCallback>
 800570a:	e002      	b.n	8005712 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f7fa fed7 	bl	80004c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	e002      	b.n	800571c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	e000      	b.n	800571c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800571a:	2302      	movs	r3, #2
  }
}
 800571c:	4618      	mov	r0, r3
 800571e:	3730      	adds	r7, #48	; 0x30
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005728:	b09f      	sub	sp, #124	; 0x7c
 800572a:	af00      	add	r7, sp, #0
 800572c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800572e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800573a:	68d9      	ldr	r1, [r3, #12]
 800573c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	ea40 0301 	orr.w	r3, r0, r1
 8005744:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	431a      	orrs	r2, r3
 8005750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	431a      	orrs	r2, r3
 8005756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	4313      	orrs	r3, r2
 800575c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800575e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005768:	f021 010c 	bic.w	r1, r1, #12
 800576c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005772:	430b      	orrs	r3, r1
 8005774:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005782:	6999      	ldr	r1, [r3, #24]
 8005784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	ea40 0301 	orr.w	r3, r0, r1
 800578c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800578e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4bc5      	ldr	r3, [pc, #788]	; (8005aa8 <UART_SetConfig+0x384>)
 8005794:	429a      	cmp	r2, r3
 8005796:	d004      	beq.n	80057a2 <UART_SetConfig+0x7e>
 8005798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	4bc3      	ldr	r3, [pc, #780]	; (8005aac <UART_SetConfig+0x388>)
 800579e:	429a      	cmp	r2, r3
 80057a0:	d103      	bne.n	80057aa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057a2:	f7fd ff7d 	bl	80036a0 <HAL_RCC_GetPCLK2Freq>
 80057a6:	6778      	str	r0, [r7, #116]	; 0x74
 80057a8:	e002      	b.n	80057b0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057aa:	f7fd ff65 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 80057ae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b8:	f040 80b6 	bne.w	8005928 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057be:	461c      	mov	r4, r3
 80057c0:	f04f 0500 	mov.w	r5, #0
 80057c4:	4622      	mov	r2, r4
 80057c6:	462b      	mov	r3, r5
 80057c8:	1891      	adds	r1, r2, r2
 80057ca:	6439      	str	r1, [r7, #64]	; 0x40
 80057cc:	415b      	adcs	r3, r3
 80057ce:	647b      	str	r3, [r7, #68]	; 0x44
 80057d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057d4:	1912      	adds	r2, r2, r4
 80057d6:	eb45 0303 	adc.w	r3, r5, r3
 80057da:	f04f 0000 	mov.w	r0, #0
 80057de:	f04f 0100 	mov.w	r1, #0
 80057e2:	00d9      	lsls	r1, r3, #3
 80057e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057e8:	00d0      	lsls	r0, r2, #3
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	1911      	adds	r1, r2, r4
 80057f0:	6639      	str	r1, [r7, #96]	; 0x60
 80057f2:	416b      	adcs	r3, r5
 80057f4:	667b      	str	r3, [r7, #100]	; 0x64
 80057f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	461a      	mov	r2, r3
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	1891      	adds	r1, r2, r2
 8005802:	63b9      	str	r1, [r7, #56]	; 0x38
 8005804:	415b      	adcs	r3, r3
 8005806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005808:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800580c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005810:	f7fa fcda 	bl	80001c8 <__aeabi_uldivmod>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	4ba5      	ldr	r3, [pc, #660]	; (8005ab0 <UART_SetConfig+0x38c>)
 800581a:	fba3 2302 	umull	r2, r3, r3, r2
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	011e      	lsls	r6, r3, #4
 8005822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005824:	461c      	mov	r4, r3
 8005826:	f04f 0500 	mov.w	r5, #0
 800582a:	4622      	mov	r2, r4
 800582c:	462b      	mov	r3, r5
 800582e:	1891      	adds	r1, r2, r2
 8005830:	6339      	str	r1, [r7, #48]	; 0x30
 8005832:	415b      	adcs	r3, r3
 8005834:	637b      	str	r3, [r7, #52]	; 0x34
 8005836:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800583a:	1912      	adds	r2, r2, r4
 800583c:	eb45 0303 	adc.w	r3, r5, r3
 8005840:	f04f 0000 	mov.w	r0, #0
 8005844:	f04f 0100 	mov.w	r1, #0
 8005848:	00d9      	lsls	r1, r3, #3
 800584a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800584e:	00d0      	lsls	r0, r2, #3
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	1911      	adds	r1, r2, r4
 8005856:	65b9      	str	r1, [r7, #88]	; 0x58
 8005858:	416b      	adcs	r3, r5
 800585a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800585c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	461a      	mov	r2, r3
 8005862:	f04f 0300 	mov.w	r3, #0
 8005866:	1891      	adds	r1, r2, r2
 8005868:	62b9      	str	r1, [r7, #40]	; 0x28
 800586a:	415b      	adcs	r3, r3
 800586c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800586e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005872:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005876:	f7fa fca7 	bl	80001c8 <__aeabi_uldivmod>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	4b8c      	ldr	r3, [pc, #560]	; (8005ab0 <UART_SetConfig+0x38c>)
 8005880:	fba3 1302 	umull	r1, r3, r3, r2
 8005884:	095b      	lsrs	r3, r3, #5
 8005886:	2164      	movs	r1, #100	; 0x64
 8005888:	fb01 f303 	mul.w	r3, r1, r3
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	3332      	adds	r3, #50	; 0x32
 8005892:	4a87      	ldr	r2, [pc, #540]	; (8005ab0 <UART_SetConfig+0x38c>)
 8005894:	fba2 2303 	umull	r2, r3, r2, r3
 8005898:	095b      	lsrs	r3, r3, #5
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058a0:	441e      	add	r6, r3
 80058a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058a4:	4618      	mov	r0, r3
 80058a6:	f04f 0100 	mov.w	r1, #0
 80058aa:	4602      	mov	r2, r0
 80058ac:	460b      	mov	r3, r1
 80058ae:	1894      	adds	r4, r2, r2
 80058b0:	623c      	str	r4, [r7, #32]
 80058b2:	415b      	adcs	r3, r3
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24
 80058b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058ba:	1812      	adds	r2, r2, r0
 80058bc:	eb41 0303 	adc.w	r3, r1, r3
 80058c0:	f04f 0400 	mov.w	r4, #0
 80058c4:	f04f 0500 	mov.w	r5, #0
 80058c8:	00dd      	lsls	r5, r3, #3
 80058ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058ce:	00d4      	lsls	r4, r2, #3
 80058d0:	4622      	mov	r2, r4
 80058d2:	462b      	mov	r3, r5
 80058d4:	1814      	adds	r4, r2, r0
 80058d6:	653c      	str	r4, [r7, #80]	; 0x50
 80058d8:	414b      	adcs	r3, r1
 80058da:	657b      	str	r3, [r7, #84]	; 0x54
 80058dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	461a      	mov	r2, r3
 80058e2:	f04f 0300 	mov.w	r3, #0
 80058e6:	1891      	adds	r1, r2, r2
 80058e8:	61b9      	str	r1, [r7, #24]
 80058ea:	415b      	adcs	r3, r3
 80058ec:	61fb      	str	r3, [r7, #28]
 80058ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80058f6:	f7fa fc67 	bl	80001c8 <__aeabi_uldivmod>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4b6c      	ldr	r3, [pc, #432]	; (8005ab0 <UART_SetConfig+0x38c>)
 8005900:	fba3 1302 	umull	r1, r3, r3, r2
 8005904:	095b      	lsrs	r3, r3, #5
 8005906:	2164      	movs	r1, #100	; 0x64
 8005908:	fb01 f303 	mul.w	r3, r1, r3
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	3332      	adds	r3, #50	; 0x32
 8005912:	4a67      	ldr	r2, [pc, #412]	; (8005ab0 <UART_SetConfig+0x38c>)
 8005914:	fba2 2303 	umull	r2, r3, r2, r3
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	f003 0207 	and.w	r2, r3, #7
 800591e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4432      	add	r2, r6
 8005924:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005926:	e0b9      	b.n	8005a9c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005928:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800592a:	461c      	mov	r4, r3
 800592c:	f04f 0500 	mov.w	r5, #0
 8005930:	4622      	mov	r2, r4
 8005932:	462b      	mov	r3, r5
 8005934:	1891      	adds	r1, r2, r2
 8005936:	6139      	str	r1, [r7, #16]
 8005938:	415b      	adcs	r3, r3
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005940:	1912      	adds	r2, r2, r4
 8005942:	eb45 0303 	adc.w	r3, r5, r3
 8005946:	f04f 0000 	mov.w	r0, #0
 800594a:	f04f 0100 	mov.w	r1, #0
 800594e:	00d9      	lsls	r1, r3, #3
 8005950:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005954:	00d0      	lsls	r0, r2, #3
 8005956:	4602      	mov	r2, r0
 8005958:	460b      	mov	r3, r1
 800595a:	eb12 0804 	adds.w	r8, r2, r4
 800595e:	eb43 0905 	adc.w	r9, r3, r5
 8005962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	4618      	mov	r0, r3
 8005968:	f04f 0100 	mov.w	r1, #0
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	008b      	lsls	r3, r1, #2
 8005976:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800597a:	0082      	lsls	r2, r0, #2
 800597c:	4640      	mov	r0, r8
 800597e:	4649      	mov	r1, r9
 8005980:	f7fa fc22 	bl	80001c8 <__aeabi_uldivmod>
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	4b49      	ldr	r3, [pc, #292]	; (8005ab0 <UART_SetConfig+0x38c>)
 800598a:	fba3 2302 	umull	r2, r3, r3, r2
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	011e      	lsls	r6, r3, #4
 8005992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005994:	4618      	mov	r0, r3
 8005996:	f04f 0100 	mov.w	r1, #0
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	1894      	adds	r4, r2, r2
 80059a0:	60bc      	str	r4, [r7, #8]
 80059a2:	415b      	adcs	r3, r3
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059aa:	1812      	adds	r2, r2, r0
 80059ac:	eb41 0303 	adc.w	r3, r1, r3
 80059b0:	f04f 0400 	mov.w	r4, #0
 80059b4:	f04f 0500 	mov.w	r5, #0
 80059b8:	00dd      	lsls	r5, r3, #3
 80059ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059be:	00d4      	lsls	r4, r2, #3
 80059c0:	4622      	mov	r2, r4
 80059c2:	462b      	mov	r3, r5
 80059c4:	1814      	adds	r4, r2, r0
 80059c6:	64bc      	str	r4, [r7, #72]	; 0x48
 80059c8:	414b      	adcs	r3, r1
 80059ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f04f 0100 	mov.w	r1, #0
 80059d6:	f04f 0200 	mov.w	r2, #0
 80059da:	f04f 0300 	mov.w	r3, #0
 80059de:	008b      	lsls	r3, r1, #2
 80059e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059e4:	0082      	lsls	r2, r0, #2
 80059e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80059ea:	f7fa fbed 	bl	80001c8 <__aeabi_uldivmod>
 80059ee:	4602      	mov	r2, r0
 80059f0:	460b      	mov	r3, r1
 80059f2:	4b2f      	ldr	r3, [pc, #188]	; (8005ab0 <UART_SetConfig+0x38c>)
 80059f4:	fba3 1302 	umull	r1, r3, r3, r2
 80059f8:	095b      	lsrs	r3, r3, #5
 80059fa:	2164      	movs	r1, #100	; 0x64
 80059fc:	fb01 f303 	mul.w	r3, r1, r3
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	3332      	adds	r3, #50	; 0x32
 8005a06:	4a2a      	ldr	r2, [pc, #168]	; (8005ab0 <UART_SetConfig+0x38c>)
 8005a08:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0c:	095b      	lsrs	r3, r3, #5
 8005a0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a12:	441e      	add	r6, r3
 8005a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a16:	4618      	mov	r0, r3
 8005a18:	f04f 0100 	mov.w	r1, #0
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	1894      	adds	r4, r2, r2
 8005a22:	603c      	str	r4, [r7, #0]
 8005a24:	415b      	adcs	r3, r3
 8005a26:	607b      	str	r3, [r7, #4]
 8005a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a2c:	1812      	adds	r2, r2, r0
 8005a2e:	eb41 0303 	adc.w	r3, r1, r3
 8005a32:	f04f 0400 	mov.w	r4, #0
 8005a36:	f04f 0500 	mov.w	r5, #0
 8005a3a:	00dd      	lsls	r5, r3, #3
 8005a3c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a40:	00d4      	lsls	r4, r2, #3
 8005a42:	4622      	mov	r2, r4
 8005a44:	462b      	mov	r3, r5
 8005a46:	eb12 0a00 	adds.w	sl, r2, r0
 8005a4a:	eb43 0b01 	adc.w	fp, r3, r1
 8005a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f04f 0100 	mov.w	r1, #0
 8005a58:	f04f 0200 	mov.w	r2, #0
 8005a5c:	f04f 0300 	mov.w	r3, #0
 8005a60:	008b      	lsls	r3, r1, #2
 8005a62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a66:	0082      	lsls	r2, r0, #2
 8005a68:	4650      	mov	r0, sl
 8005a6a:	4659      	mov	r1, fp
 8005a6c:	f7fa fbac 	bl	80001c8 <__aeabi_uldivmod>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4b0e      	ldr	r3, [pc, #56]	; (8005ab0 <UART_SetConfig+0x38c>)
 8005a76:	fba3 1302 	umull	r1, r3, r3, r2
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	2164      	movs	r1, #100	; 0x64
 8005a7e:	fb01 f303 	mul.w	r3, r1, r3
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	3332      	adds	r3, #50	; 0x32
 8005a88:	4a09      	ldr	r2, [pc, #36]	; (8005ab0 <UART_SetConfig+0x38c>)
 8005a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	f003 020f 	and.w	r2, r3, #15
 8005a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4432      	add	r2, r6
 8005a9a:	609a      	str	r2, [r3, #8]
}
 8005a9c:	bf00      	nop
 8005a9e:	377c      	adds	r7, #124	; 0x7c
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa6:	bf00      	nop
 8005aa8:	40011000 	.word	0x40011000
 8005aac:	40011400 	.word	0x40011400
 8005ab0:	51eb851f 	.word	0x51eb851f

08005ab4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005ab4:	b084      	sub	sp, #16
 8005ab6:	b480      	push	{r7}
 8005ab8:	b085      	sub	sp, #20
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	f107 001c 	add.w	r0, r7, #28
 8005ac2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005aca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005acc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005ace:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005ad2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005ad6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005ada:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005ade:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005aee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	b004      	add	sp, #16
 8005b08:	4770      	bx	lr

08005b0a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b082      	sub	sp, #8
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2203      	movs	r2, #3
 8005b52:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005b54:	2002      	movs	r0, #2
 8005b56:	f7fb f8db 	bl	8000d10 <HAL_Delay>
  
  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0303 	and.w	r3, r3, #3
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005b9e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005ba4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005baa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005bba:	f023 030f 	bic.w	r3, r3, #15
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	b2db      	uxtb	r3, r3
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b085      	sub	sp, #20
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3314      	adds	r3, #20
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	4413      	add	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
}  
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c3a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005c40:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005c46:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c52:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0

}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005c7a:	2310      	movs	r3, #16
 8005c7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c7e:	2340      	movs	r3, #64	; 0x40
 8005c80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c82:	2300      	movs	r3, #0
 8005c84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c8c:	f107 0308 	add.w	r3, r7, #8
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff ff74 	bl	8005b80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c9c:	2110      	movs	r1, #16
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fa44 	bl	800612c <SDMMC_GetCmdResp1>
 8005ca4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ca6:	69fb      	ldr	r3, [r7, #28]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3720      	adds	r7, #32
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005cbe:	2311      	movs	r3, #17
 8005cc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005cc2:	2340      	movs	r3, #64	; 0x40
 8005cc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005cd0:	f107 0308 	add.w	r3, r7, #8
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7ff ff52 	bl	8005b80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce0:	2111      	movs	r1, #17
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fa22 	bl	800612c <SDMMC_GetCmdResp1>
 8005ce8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cea:	69fb      	ldr	r3, [r7, #28]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3720      	adds	r7, #32
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005d02:	2312      	movs	r3, #18
 8005d04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d06:	2340      	movs	r3, #64	; 0x40
 8005d08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d14:	f107 0308 	add.w	r3, r7, #8
 8005d18:	4619      	mov	r1, r3
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7ff ff30 	bl	8005b80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d24:	2112      	movs	r1, #18
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fa00 	bl	800612c <SDMMC_GetCmdResp1>
 8005d2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d2e:	69fb      	ldr	r3, [r7, #28]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3720      	adds	r7, #32
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005d46:	2318      	movs	r3, #24
 8005d48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d4a:	2340      	movs	r3, #64	; 0x40
 8005d4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d58:	f107 0308 	add.w	r3, r7, #8
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7ff ff0e 	bl	8005b80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d68:	2118      	movs	r1, #24
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f9de 	bl	800612c <SDMMC_GetCmdResp1>
 8005d70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d72:	69fb      	ldr	r3, [r7, #28]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3720      	adds	r7, #32
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b088      	sub	sp, #32
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005d8a:	2319      	movs	r3, #25
 8005d8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d8e:	2340      	movs	r3, #64	; 0x40
 8005d90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d92:	2300      	movs	r3, #0
 8005d94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d9c:	f107 0308 	add.w	r3, r7, #8
 8005da0:	4619      	mov	r1, r3
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7ff feec 	bl	8005b80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dac:	2119      	movs	r1, #25
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f9bc 	bl	800612c <SDMMC_GetCmdResp1>
 8005db4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005db6:	69fb      	ldr	r3, [r7, #28]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3720      	adds	r7, #32
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b088      	sub	sp, #32
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005dcc:	230c      	movs	r3, #12
 8005dce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005dd0:	2340      	movs	r3, #64	; 0x40
 8005dd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ddc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005dde:	f107 0308 	add.w	r3, r7, #8
 8005de2:	4619      	mov	r1, r3
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7ff fecb 	bl	8005b80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005dea:	4a05      	ldr	r2, [pc, #20]	; (8005e00 <SDMMC_CmdStopTransfer+0x40>)
 8005dec:	210c      	movs	r1, #12
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f99c 	bl	800612c <SDMMC_GetCmdResp1>
 8005df4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005df6:	69fb      	ldr	r3, [r7, #28]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3720      	adds	r7, #32
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	05f5e100 	.word	0x05f5e100

08005e04 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08a      	sub	sp, #40	; 0x28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005e14:	2307      	movs	r3, #7
 8005e16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e18:	2340      	movs	r3, #64	; 0x40
 8005e1a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e24:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e26:	f107 0310 	add.w	r3, r7, #16
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f7ff fea7 	bl	8005b80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e36:	2107      	movs	r1, #7
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 f977 	bl	800612c <SDMMC_GetCmdResp1>
 8005e3e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3728      	adds	r7, #40	; 0x28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b088      	sub	sp, #32
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e68:	f107 0308 	add.w	r3, r7, #8
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7ff fe86 	bl	8005b80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f92d 	bl	80060d4 <SDMMC_GetCmdError>
 8005e7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e7c:	69fb      	ldr	r3, [r7, #28]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3720      	adds	r7, #32
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b088      	sub	sp, #32
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005e8e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005e92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005e94:	2308      	movs	r3, #8
 8005e96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e98:	2340      	movs	r3, #64	; 0x40
 8005e9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ea4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ea6:	f107 0308 	add.w	r3, r7, #8
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7ff fe67 	bl	8005b80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fb24 	bl	8006500 <SDMMC_GetCmdResp7>
 8005eb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eba:	69fb      	ldr	r3, [r7, #28]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3720      	adds	r7, #32
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b088      	sub	sp, #32
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005ed2:	2337      	movs	r3, #55	; 0x37
 8005ed4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ed6:	2340      	movs	r3, #64	; 0x40
 8005ed8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ee2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ee4:	f107 0308 	add.w	r3, r7, #8
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7ff fe48 	bl	8005b80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef4:	2137      	movs	r1, #55	; 0x37
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f918 	bl	800612c <SDMMC_GetCmdResp1>
 8005efc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005efe:	69fb      	ldr	r3, [r7, #28]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3720      	adds	r7, #32
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b088      	sub	sp, #32
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005f1e:	2329      	movs	r3, #41	; 0x29
 8005f20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f22:	2340      	movs	r3, #64	; 0x40
 8005f24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f26:	2300      	movs	r3, #0
 8005f28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f30:	f107 0308 	add.w	r3, r7, #8
 8005f34:	4619      	mov	r1, r3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7ff fe22 	bl	8005b80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fa2b 	bl	8006398 <SDMMC_GetCmdResp3>
 8005f42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f44:	69fb      	ldr	r3, [r7, #28]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3720      	adds	r7, #32
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b088      	sub	sp, #32
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005f5c:	2306      	movs	r3, #6
 8005f5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f60:	2340      	movs	r3, #64	; 0x40
 8005f62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f64:	2300      	movs	r3, #0
 8005f66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f6e:	f107 0308 	add.w	r3, r7, #8
 8005f72:	4619      	mov	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7ff fe03 	bl	8005b80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7e:	2106      	movs	r1, #6
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f8d3 	bl	800612c <SDMMC_GetCmdResp1>
 8005f86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f88:	69fb      	ldr	r3, [r7, #28]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3720      	adds	r7, #32
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b088      	sub	sp, #32
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005f9e:	2333      	movs	r3, #51	; 0x33
 8005fa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fa2:	2340      	movs	r3, #64	; 0x40
 8005fa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fb0:	f107 0308 	add.w	r3, r7, #8
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff fde2 	bl	8005b80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc0:	2133      	movs	r1, #51	; 0x33
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f8b2 	bl	800612c <SDMMC_GetCmdResp1>
 8005fc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fca:	69fb      	ldr	r3, [r7, #28]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3720      	adds	r7, #32
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b088      	sub	sp, #32
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005fe4:	23c0      	movs	r3, #192	; 0xc0
 8005fe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ff0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ff2:	f107 0308 	add.w	r3, r7, #8
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f7ff fdc1 	bl	8005b80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f982 	bl	8006308 <SDMMC_GetCmdResp2>
 8006004:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006006:	69fb      	ldr	r3, [r7, #28]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3720      	adds	r7, #32
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b088      	sub	sp, #32
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800601e:	2309      	movs	r3, #9
 8006020:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006022:	23c0      	movs	r3, #192	; 0xc0
 8006024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006026:	2300      	movs	r3, #0
 8006028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800602a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800602e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006030:	f107 0308 	add.w	r3, r7, #8
 8006034:	4619      	mov	r1, r3
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7ff fda2 	bl	8005b80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f963 	bl	8006308 <SDMMC_GetCmdResp2>
 8006042:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006044:	69fb      	ldr	r3, [r7, #28]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3720      	adds	r7, #32
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b088      	sub	sp, #32
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800605c:	2303      	movs	r3, #3
 800605e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006060:	2340      	movs	r3, #64	; 0x40
 8006062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006064:	2300      	movs	r3, #0
 8006066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800606c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800606e:	f107 0308 	add.w	r3, r7, #8
 8006072:	4619      	mov	r1, r3
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f7ff fd83 	bl	8005b80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	2103      	movs	r1, #3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f9c8 	bl	8006414 <SDMMC_GetCmdResp6>
 8006084:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006086:	69fb      	ldr	r3, [r7, #28]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3720      	adds	r7, #32
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b088      	sub	sp, #32
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800609e:	230d      	movs	r3, #13
 80060a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060a2:	2340      	movs	r3, #64	; 0x40
 80060a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060a6:	2300      	movs	r3, #0
 80060a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060b0:	f107 0308 	add.w	r3, r7, #8
 80060b4:	4619      	mov	r1, r3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff fd62 	bl	8005b80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80060bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c0:	210d      	movs	r1, #13
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f832 	bl	800612c <SDMMC_GetCmdResp1>
 80060c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060ca:	69fb      	ldr	r3, [r7, #28]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3720      	adds	r7, #32
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80060dc:	4b11      	ldr	r3, [pc, #68]	; (8006124 <SDMMC_GetCmdError+0x50>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a11      	ldr	r2, [pc, #68]	; (8006128 <SDMMC_GetCmdError+0x54>)
 80060e2:	fba2 2303 	umull	r2, r3, r2, r3
 80060e6:	0a5b      	lsrs	r3, r3, #9
 80060e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ec:	fb02 f303 	mul.w	r3, r2, r3
 80060f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	1e5a      	subs	r2, r3, #1
 80060f6:	60fa      	str	r2, [r7, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d102      	bne.n	8006102 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80060fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006100:	e009      	b.n	8006116 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0f1      	beq.n	80060f2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	22c5      	movs	r2, #197	; 0xc5
 8006112:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	20000000 	.word	0x20000000
 8006128:	10624dd3 	.word	0x10624dd3

0800612c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	460b      	mov	r3, r1
 8006136:	607a      	str	r2, [r7, #4]
 8006138:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800613a:	4b70      	ldr	r3, [pc, #448]	; (80062fc <SDMMC_GetCmdResp1+0x1d0>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a70      	ldr	r2, [pc, #448]	; (8006300 <SDMMC_GetCmdResp1+0x1d4>)
 8006140:	fba2 2303 	umull	r2, r3, r2, r3
 8006144:	0a5a      	lsrs	r2, r3, #9
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	fb02 f303 	mul.w	r3, r2, r3
 800614c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	1e5a      	subs	r2, r3, #1
 8006152:	61fa      	str	r2, [r7, #28]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d102      	bne.n	800615e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006158:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800615c:	e0c9      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006162:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0ef      	beq.n	800614e <SDMMC_GetCmdResp1+0x22>
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1ea      	bne.n	800614e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b00      	cmp	r3, #0
 8006182:	d004      	beq.n	800618e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2204      	movs	r2, #4
 8006188:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800618a:	2304      	movs	r3, #4
 800618c:	e0b1      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d004      	beq.n	80061a4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e0a6      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	22c5      	movs	r2, #197	; 0xc5
 80061a8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f7ff fd12 	bl	8005bd4 <SDIO_GetCommandResponse>
 80061b0:	4603      	mov	r3, r0
 80061b2:	461a      	mov	r2, r3
 80061b4:	7afb      	ldrb	r3, [r7, #11]
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d001      	beq.n	80061be <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e099      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80061be:	2100      	movs	r1, #0
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f7ff fd14 	bl	8005bee <SDIO_GetResponse>
 80061c6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4b4e      	ldr	r3, [pc, #312]	; (8006304 <SDMMC_GetCmdResp1+0x1d8>)
 80061cc:	4013      	ands	r3, r2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80061d2:	2300      	movs	r3, #0
 80061d4:	e08d      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	da02      	bge.n	80061e2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80061dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061e0:	e087      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80061ec:	2340      	movs	r3, #64	; 0x40
 80061ee:	e080      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80061fa:	2380      	movs	r3, #128	; 0x80
 80061fc:	e079      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006208:	f44f 7380 	mov.w	r3, #256	; 0x100
 800620c:	e071      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800621c:	e069      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800622c:	e061      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006238:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800623c:	e059      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800624c:	e051      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006258:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800625c:	e049      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006268:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800626c:	e041      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006278:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800627c:	e039      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006288:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800628c:	e031      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006298:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800629c:	e029      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d002      	beq.n	80062ae <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80062a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80062ac:	e021      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80062b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80062bc:	e019      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80062c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80062cc:	e011      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d002      	beq.n	80062de <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80062d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80062dc:	e009      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f003 0308 	and.w	r3, r3, #8
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80062e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80062ec:	e001      	b.n	80062f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80062ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3720      	adds	r7, #32
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	20000000 	.word	0x20000000
 8006300:	10624dd3 	.word	0x10624dd3
 8006304:	fdffe008 	.word	0xfdffe008

08006308 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006310:	4b1f      	ldr	r3, [pc, #124]	; (8006390 <SDMMC_GetCmdResp2+0x88>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a1f      	ldr	r2, [pc, #124]	; (8006394 <SDMMC_GetCmdResp2+0x8c>)
 8006316:	fba2 2303 	umull	r2, r3, r2, r3
 800631a:	0a5b      	lsrs	r3, r3, #9
 800631c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006320:	fb02 f303 	mul.w	r3, r2, r3
 8006324:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	1e5a      	subs	r2, r3, #1
 800632a:	60fa      	str	r2, [r7, #12]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d102      	bne.n	8006336 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006330:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006334:	e026      	b.n	8006384 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0ef      	beq.n	8006326 <SDMMC_GetCmdResp2+0x1e>
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1ea      	bne.n	8006326 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b00      	cmp	r3, #0
 800635a:	d004      	beq.n	8006366 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2204      	movs	r2, #4
 8006360:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006362:	2304      	movs	r3, #4
 8006364:	e00e      	b.n	8006384 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d004      	beq.n	800637c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006378:	2301      	movs	r3, #1
 800637a:	e003      	b.n	8006384 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	22c5      	movs	r2, #197	; 0xc5
 8006380:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	20000000 	.word	0x20000000
 8006394:	10624dd3 	.word	0x10624dd3

08006398 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80063a0:	4b1a      	ldr	r3, [pc, #104]	; (800640c <SDMMC_GetCmdResp3+0x74>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a1a      	ldr	r2, [pc, #104]	; (8006410 <SDMMC_GetCmdResp3+0x78>)
 80063a6:	fba2 2303 	umull	r2, r3, r2, r3
 80063aa:	0a5b      	lsrs	r3, r3, #9
 80063ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80063b0:	fb02 f303 	mul.w	r3, r2, r3
 80063b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	1e5a      	subs	r2, r3, #1
 80063ba:	60fa      	str	r2, [r7, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d102      	bne.n	80063c6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80063c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80063c4:	e01b      	b.n	80063fe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0ef      	beq.n	80063b6 <SDMMC_GetCmdResp3+0x1e>
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1ea      	bne.n	80063b6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d004      	beq.n	80063f6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2204      	movs	r2, #4
 80063f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80063f2:	2304      	movs	r3, #4
 80063f4:	e003      	b.n	80063fe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	22c5      	movs	r2, #197	; 0xc5
 80063fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	20000000 	.word	0x20000000
 8006410:	10624dd3 	.word	0x10624dd3

08006414 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	460b      	mov	r3, r1
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006422:	4b35      	ldr	r3, [pc, #212]	; (80064f8 <SDMMC_GetCmdResp6+0xe4>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a35      	ldr	r2, [pc, #212]	; (80064fc <SDMMC_GetCmdResp6+0xe8>)
 8006428:	fba2 2303 	umull	r2, r3, r2, r3
 800642c:	0a5b      	lsrs	r3, r3, #9
 800642e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006432:	fb02 f303 	mul.w	r3, r2, r3
 8006436:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	1e5a      	subs	r2, r3, #1
 800643c:	61fa      	str	r2, [r7, #28]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d102      	bne.n	8006448 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006442:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006446:	e052      	b.n	80064ee <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006454:	2b00      	cmp	r3, #0
 8006456:	d0ef      	beq.n	8006438 <SDMMC_GetCmdResp6+0x24>
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1ea      	bne.n	8006438 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006466:	f003 0304 	and.w	r3, r3, #4
 800646a:	2b00      	cmp	r3, #0
 800646c:	d004      	beq.n	8006478 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2204      	movs	r2, #4
 8006472:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006474:	2304      	movs	r3, #4
 8006476:	e03a      	b.n	80064ee <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	d004      	beq.n	800648e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2201      	movs	r2, #1
 8006488:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800648a:	2301      	movs	r3, #1
 800648c:	e02f      	b.n	80064ee <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f7ff fba0 	bl	8005bd4 <SDIO_GetCommandResponse>
 8006494:	4603      	mov	r3, r0
 8006496:	461a      	mov	r2, r3
 8006498:	7afb      	ldrb	r3, [r7, #11]
 800649a:	4293      	cmp	r3, r2
 800649c:	d001      	beq.n	80064a2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800649e:	2301      	movs	r3, #1
 80064a0:	e025      	b.n	80064ee <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	22c5      	movs	r2, #197	; 0xc5
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80064a8:	2100      	movs	r1, #0
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f7ff fb9f 	bl	8005bee <SDIO_GetResponse>
 80064b0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d106      	bne.n	80064ca <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	0c1b      	lsrs	r3, r3, #16
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80064c6:	2300      	movs	r3, #0
 80064c8:	e011      	b.n	80064ee <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80064d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064d8:	e009      	b.n	80064ee <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d002      	beq.n	80064ea <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80064e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064e8:	e001      	b.n	80064ee <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80064ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3720      	adds	r7, #32
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000000 	.word	0x20000000
 80064fc:	10624dd3 	.word	0x10624dd3

08006500 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006508:	4b22      	ldr	r3, [pc, #136]	; (8006594 <SDMMC_GetCmdResp7+0x94>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a22      	ldr	r2, [pc, #136]	; (8006598 <SDMMC_GetCmdResp7+0x98>)
 800650e:	fba2 2303 	umull	r2, r3, r2, r3
 8006512:	0a5b      	lsrs	r3, r3, #9
 8006514:	f241 3288 	movw	r2, #5000	; 0x1388
 8006518:	fb02 f303 	mul.w	r3, r2, r3
 800651c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	1e5a      	subs	r2, r3, #1
 8006522:	60fa      	str	r2, [r7, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d102      	bne.n	800652e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006528:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800652c:	e02c      	b.n	8006588 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006532:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800653a:	2b00      	cmp	r3, #0
 800653c:	d0ef      	beq.n	800651e <SDMMC_GetCmdResp7+0x1e>
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1ea      	bne.n	800651e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	2b00      	cmp	r3, #0
 8006552:	d004      	beq.n	800655e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2204      	movs	r2, #4
 8006558:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800655a:	2304      	movs	r3, #4
 800655c:	e014      	b.n	8006588 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	d004      	beq.n	8006574 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006570:	2301      	movs	r3, #1
 8006572:	e009      	b.n	8006588 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657c:	2b00      	cmp	r3, #0
 800657e:	d002      	beq.n	8006586 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2240      	movs	r2, #64	; 0x40
 8006584:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006586:	2300      	movs	r3, #0
  
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	20000000 	.word	0x20000000
 8006598:	10624dd3 	.word	0x10624dd3

0800659c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800659c:	b084      	sub	sp, #16
 800659e:	b580      	push	{r7, lr}
 80065a0:	b084      	sub	sp, #16
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	f107 001c 	add.w	r0, r7, #28
 80065aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d122      	bne.n	80065fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80065c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d105      	bne.n	80065ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f001 fb1c 	bl	8007c2c <USB_CoreReset>
 80065f4:	4603      	mov	r3, r0
 80065f6:	73fb      	strb	r3, [r7, #15]
 80065f8:	e01a      	b.n	8006630 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f001 fb10 	bl	8007c2c <USB_CoreReset>
 800660c:	4603      	mov	r3, r0
 800660e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006612:	2b00      	cmp	r3, #0
 8006614:	d106      	bne.n	8006624 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	639a      	str	r2, [r3, #56]	; 0x38
 8006622:	e005      	b.n	8006630 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006628:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006632:	2b01      	cmp	r3, #1
 8006634:	d10b      	bne.n	800664e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f043 0206 	orr.w	r2, r3, #6
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f043 0220 	orr.w	r2, r3, #32
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800664e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800665a:	b004      	add	sp, #16
 800665c:	4770      	bx	lr
	...

08006660 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006660:	b480      	push	{r7}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	4613      	mov	r3, r2
 800666c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800666e:	79fb      	ldrb	r3, [r7, #7]
 8006670:	2b02      	cmp	r3, #2
 8006672:	d165      	bne.n	8006740 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	4a41      	ldr	r2, [pc, #260]	; (800677c <USB_SetTurnaroundTime+0x11c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d906      	bls.n	800668a <USB_SetTurnaroundTime+0x2a>
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	4a40      	ldr	r2, [pc, #256]	; (8006780 <USB_SetTurnaroundTime+0x120>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d202      	bcs.n	800668a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006684:	230f      	movs	r3, #15
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	e062      	b.n	8006750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	4a3c      	ldr	r2, [pc, #240]	; (8006780 <USB_SetTurnaroundTime+0x120>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d306      	bcc.n	80066a0 <USB_SetTurnaroundTime+0x40>
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	4a3b      	ldr	r2, [pc, #236]	; (8006784 <USB_SetTurnaroundTime+0x124>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d202      	bcs.n	80066a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800669a:	230e      	movs	r3, #14
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	e057      	b.n	8006750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	4a38      	ldr	r2, [pc, #224]	; (8006784 <USB_SetTurnaroundTime+0x124>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d306      	bcc.n	80066b6 <USB_SetTurnaroundTime+0x56>
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	4a37      	ldr	r2, [pc, #220]	; (8006788 <USB_SetTurnaroundTime+0x128>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d202      	bcs.n	80066b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80066b0:	230d      	movs	r3, #13
 80066b2:	617b      	str	r3, [r7, #20]
 80066b4:	e04c      	b.n	8006750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	4a33      	ldr	r2, [pc, #204]	; (8006788 <USB_SetTurnaroundTime+0x128>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d306      	bcc.n	80066cc <USB_SetTurnaroundTime+0x6c>
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	4a32      	ldr	r2, [pc, #200]	; (800678c <USB_SetTurnaroundTime+0x12c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d802      	bhi.n	80066cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80066c6:	230c      	movs	r3, #12
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	e041      	b.n	8006750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	4a2f      	ldr	r2, [pc, #188]	; (800678c <USB_SetTurnaroundTime+0x12c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d906      	bls.n	80066e2 <USB_SetTurnaroundTime+0x82>
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	4a2e      	ldr	r2, [pc, #184]	; (8006790 <USB_SetTurnaroundTime+0x130>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d802      	bhi.n	80066e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80066dc:	230b      	movs	r3, #11
 80066de:	617b      	str	r3, [r7, #20]
 80066e0:	e036      	b.n	8006750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	4a2a      	ldr	r2, [pc, #168]	; (8006790 <USB_SetTurnaroundTime+0x130>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d906      	bls.n	80066f8 <USB_SetTurnaroundTime+0x98>
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	4a29      	ldr	r2, [pc, #164]	; (8006794 <USB_SetTurnaroundTime+0x134>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d802      	bhi.n	80066f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80066f2:	230a      	movs	r3, #10
 80066f4:	617b      	str	r3, [r7, #20]
 80066f6:	e02b      	b.n	8006750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	4a26      	ldr	r2, [pc, #152]	; (8006794 <USB_SetTurnaroundTime+0x134>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d906      	bls.n	800670e <USB_SetTurnaroundTime+0xae>
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	4a25      	ldr	r2, [pc, #148]	; (8006798 <USB_SetTurnaroundTime+0x138>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d202      	bcs.n	800670e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006708:	2309      	movs	r3, #9
 800670a:	617b      	str	r3, [r7, #20]
 800670c:	e020      	b.n	8006750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	4a21      	ldr	r2, [pc, #132]	; (8006798 <USB_SetTurnaroundTime+0x138>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d306      	bcc.n	8006724 <USB_SetTurnaroundTime+0xc4>
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	4a20      	ldr	r2, [pc, #128]	; (800679c <USB_SetTurnaroundTime+0x13c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d802      	bhi.n	8006724 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800671e:	2308      	movs	r3, #8
 8006720:	617b      	str	r3, [r7, #20]
 8006722:	e015      	b.n	8006750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	4a1d      	ldr	r2, [pc, #116]	; (800679c <USB_SetTurnaroundTime+0x13c>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d906      	bls.n	800673a <USB_SetTurnaroundTime+0xda>
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	4a1c      	ldr	r2, [pc, #112]	; (80067a0 <USB_SetTurnaroundTime+0x140>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d202      	bcs.n	800673a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006734:	2307      	movs	r3, #7
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	e00a      	b.n	8006750 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800673a:	2306      	movs	r3, #6
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	e007      	b.n	8006750 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006740:	79fb      	ldrb	r3, [r7, #7]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d102      	bne.n	800674c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006746:	2309      	movs	r3, #9
 8006748:	617b      	str	r3, [r7, #20]
 800674a:	e001      	b.n	8006750 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800674c:	2309      	movs	r3, #9
 800674e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	68da      	ldr	r2, [r3, #12]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	029b      	lsls	r3, r3, #10
 8006764:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006768:	431a      	orrs	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	371c      	adds	r7, #28
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	00d8acbf 	.word	0x00d8acbf
 8006780:	00e4e1c0 	.word	0x00e4e1c0
 8006784:	00f42400 	.word	0x00f42400
 8006788:	01067380 	.word	0x01067380
 800678c:	011a499f 	.word	0x011a499f
 8006790:	01312cff 	.word	0x01312cff
 8006794:	014ca43f 	.word	0x014ca43f
 8006798:	016e3600 	.word	0x016e3600
 800679c:	01a6ab1f 	.word	0x01a6ab1f
 80067a0:	01e84800 	.word	0x01e84800

080067a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f043 0201 	orr.w	r2, r3, #1
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f023 0201 	bic.w	r2, r3, #1
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006804:	78fb      	ldrb	r3, [r7, #3]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d115      	bne.n	8006836 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006816:	2001      	movs	r0, #1
 8006818:	f7fa fa7a 	bl	8000d10 <HAL_Delay>
      ms++;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	3301      	adds	r3, #1
 8006820:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 f972 	bl	8007b0c <USB_GetMode>
 8006828:	4603      	mov	r3, r0
 800682a:	2b01      	cmp	r3, #1
 800682c:	d01e      	beq.n	800686c <USB_SetCurrentMode+0x84>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b31      	cmp	r3, #49	; 0x31
 8006832:	d9f0      	bls.n	8006816 <USB_SetCurrentMode+0x2e>
 8006834:	e01a      	b.n	800686c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006836:	78fb      	ldrb	r3, [r7, #3]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d115      	bne.n	8006868 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006848:	2001      	movs	r0, #1
 800684a:	f7fa fa61 	bl	8000d10 <HAL_Delay>
      ms++;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3301      	adds	r3, #1
 8006852:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f001 f959 	bl	8007b0c <USB_GetMode>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d005      	beq.n	800686c <USB_SetCurrentMode+0x84>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b31      	cmp	r3, #49	; 0x31
 8006864:	d9f0      	bls.n	8006848 <USB_SetCurrentMode+0x60>
 8006866:	e001      	b.n	800686c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e005      	b.n	8006878 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b32      	cmp	r3, #50	; 0x32
 8006870:	d101      	bne.n	8006876 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e000      	b.n	8006878 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006880:	b084      	sub	sp, #16
 8006882:	b580      	push	{r7, lr}
 8006884:	b086      	sub	sp, #24
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800688e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800689a:	2300      	movs	r3, #0
 800689c:	613b      	str	r3, [r7, #16]
 800689e:	e009      	b.n	80068b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	3340      	adds	r3, #64	; 0x40
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	2200      	movs	r2, #0
 80068ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	3301      	adds	r3, #1
 80068b2:	613b      	str	r3, [r7, #16]
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	2b0e      	cmp	r3, #14
 80068b8:	d9f2      	bls.n	80068a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d11c      	bne.n	80068fa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068ce:	f043 0302 	orr.w	r3, r3, #2
 80068d2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	639a      	str	r2, [r3, #56]	; 0x38
 80068f8:	e00b      	b.n	8006912 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006918:	461a      	mov	r2, r3
 800691a:	2300      	movs	r3, #0
 800691c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006924:	4619      	mov	r1, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692c:	461a      	mov	r2, r3
 800692e:	680b      	ldr	r3, [r1, #0]
 8006930:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006934:	2b01      	cmp	r3, #1
 8006936:	d10c      	bne.n	8006952 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693a:	2b00      	cmp	r3, #0
 800693c:	d104      	bne.n	8006948 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800693e:	2100      	movs	r1, #0
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f945 	bl	8006bd0 <USB_SetDevSpeed>
 8006946:	e008      	b.n	800695a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006948:	2101      	movs	r1, #1
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f940 	bl	8006bd0 <USB_SetDevSpeed>
 8006950:	e003      	b.n	800695a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006952:	2103      	movs	r1, #3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f93b 	bl	8006bd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800695a:	2110      	movs	r1, #16
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f8f3 	bl	8006b48 <USB_FlushTxFifo>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f90f 	bl	8006b90 <USB_FlushRxFifo>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006982:	461a      	mov	r2, r3
 8006984:	2300      	movs	r3, #0
 8006986:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698e:	461a      	mov	r2, r3
 8006990:	2300      	movs	r3, #0
 8006992:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800699a:	461a      	mov	r2, r3
 800699c:	2300      	movs	r3, #0
 800699e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069a0:	2300      	movs	r3, #0
 80069a2:	613b      	str	r3, [r7, #16]
 80069a4:	e043      	b.n	8006a2e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069bc:	d118      	bne.n	80069f0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10a      	bne.n	80069da <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d0:	461a      	mov	r2, r3
 80069d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069d6:	6013      	str	r3, [r2, #0]
 80069d8:	e013      	b.n	8006a02 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e6:	461a      	mov	r2, r3
 80069e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	e008      	b.n	8006a02 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fc:	461a      	mov	r2, r3
 80069fe:	2300      	movs	r3, #0
 8006a00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0e:	461a      	mov	r2, r3
 8006a10:	2300      	movs	r3, #0
 8006a12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a20:	461a      	mov	r2, r3
 8006a22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	613b      	str	r3, [r7, #16]
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d3b7      	bcc.n	80069a6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a36:	2300      	movs	r3, #0
 8006a38:	613b      	str	r3, [r7, #16]
 8006a3a:	e043      	b.n	8006ac4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a52:	d118      	bne.n	8006a86 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10a      	bne.n	8006a70 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	015a      	lsls	r2, r3, #5
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a66:	461a      	mov	r2, r3
 8006a68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a6c:	6013      	str	r3, [r2, #0]
 8006a6e:	e013      	b.n	8006a98 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a82:	6013      	str	r3, [r2, #0]
 8006a84:	e008      	b.n	8006a98 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	015a      	lsls	r2, r3, #5
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a92:	461a      	mov	r2, r3
 8006a94:	2300      	movs	r3, #0
 8006a96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006abc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	613b      	str	r3, [r7, #16]
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d3b7      	bcc.n	8006a3c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ade:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006aec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d105      	bne.n	8006b00 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	f043 0210 	orr.w	r2, r3, #16
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	699a      	ldr	r2, [r3, #24]
 8006b04:	4b0f      	ldr	r3, [pc, #60]	; (8006b44 <USB_DevInit+0x2c4>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d005      	beq.n	8006b1e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	f043 0208 	orr.w	r2, r3, #8
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d107      	bne.n	8006b34 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b2c:	f043 0304 	orr.w	r3, r3, #4
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3718      	adds	r7, #24
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b40:	b004      	add	sp, #16
 8006b42:	4770      	bx	lr
 8006b44:	803c3800 	.word	0x803c3800

08006b48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	019b      	lsls	r3, r3, #6
 8006b5a:	f043 0220 	orr.w	r2, r3, #32
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3301      	adds	r3, #1
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	4a08      	ldr	r2, [pc, #32]	; (8006b8c <USB_FlushTxFifo+0x44>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d901      	bls.n	8006b72 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e006      	b.n	8006b80 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b20      	cmp	r3, #32
 8006b7c:	d0f1      	beq.n	8006b62 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	00030d40 	.word	0x00030d40

08006b90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2210      	movs	r2, #16
 8006ba0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	4a08      	ldr	r2, [pc, #32]	; (8006bcc <USB_FlushRxFifo+0x3c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d901      	bls.n	8006bb2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e006      	b.n	8006bc0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	f003 0310 	and.w	r3, r3, #16
 8006bba:	2b10      	cmp	r3, #16
 8006bbc:	d0f1      	beq.n	8006ba2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	00030d40 	.word	0x00030d40

08006bd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	78fb      	ldrb	r3, [r7, #3]
 8006bea:	68f9      	ldr	r1, [r7, #12]
 8006bec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b087      	sub	sp, #28
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f003 0306 	and.w	r3, r3, #6
 8006c1a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d102      	bne.n	8006c28 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006c22:	2300      	movs	r3, #0
 8006c24:	75fb      	strb	r3, [r7, #23]
 8006c26:	e00a      	b.n	8006c3e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d002      	beq.n	8006c34 <USB_GetDevSpeed+0x32>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2b06      	cmp	r3, #6
 8006c32:	d102      	bne.n	8006c3a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006c34:	2302      	movs	r3, #2
 8006c36:	75fb      	strb	r3, [r7, #23]
 8006c38:	e001      	b.n	8006c3e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006c3a:	230f      	movs	r3, #15
 8006c3c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	371c      	adds	r7, #28
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	785b      	ldrb	r3, [r3, #1]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d13a      	bne.n	8006cde <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c6e:	69da      	ldr	r2, [r3, #28]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	f003 030f 	and.w	r3, r3, #15
 8006c78:	2101      	movs	r1, #1
 8006c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	68f9      	ldr	r1, [r7, #12]
 8006c82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c86:	4313      	orrs	r3, r2
 8006c88:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d155      	bne.n	8006d4c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	78db      	ldrb	r3, [r3, #3]
 8006cba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cbc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	059b      	lsls	r3, r3, #22
 8006cc2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	0151      	lsls	r1, r2, #5
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	440a      	add	r2, r1
 8006cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	e036      	b.n	8006d4c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce4:	69da      	ldr	r2, [r3, #28]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	f003 030f 	and.w	r3, r3, #15
 8006cee:	2101      	movs	r1, #1
 8006cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf4:	041b      	lsls	r3, r3, #16
 8006cf6:	68f9      	ldr	r1, [r7, #12]
 8006cf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d11a      	bne.n	8006d4c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	015a      	lsls	r2, r3, #5
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	78db      	ldrb	r3, [r3, #3]
 8006d30:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d32:	430b      	orrs	r3, r1
 8006d34:	4313      	orrs	r3, r2
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	0151      	lsls	r1, r2, #5
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	440a      	add	r2, r1
 8006d3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d4a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
	...

08006d5c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	785b      	ldrb	r3, [r3, #1]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d161      	bne.n	8006e3c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d8e:	d11f      	bne.n	8006dd0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	0151      	lsls	r1, r2, #5
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	440a      	add	r2, r1
 8006da6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006daa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006dae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	0151      	lsls	r1, r2, #5
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	440a      	add	r2, r1
 8006dc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	f003 030f 	and.w	r3, r3, #15
 8006de0:	2101      	movs	r1, #1
 8006de2:	fa01 f303 	lsl.w	r3, r1, r3
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	43db      	mvns	r3, r3
 8006dea:	68f9      	ldr	r1, [r7, #12]
 8006dec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006df0:	4013      	ands	r3, r2
 8006df2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfa:	69da      	ldr	r2, [r3, #28]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	f003 030f 	and.w	r3, r3, #15
 8006e04:	2101      	movs	r1, #1
 8006e06:	fa01 f303 	lsl.w	r3, r1, r3
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	43db      	mvns	r3, r3
 8006e0e:	68f9      	ldr	r1, [r7, #12]
 8006e10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e14:	4013      	ands	r3, r2
 8006e16:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	0159      	lsls	r1, r3, #5
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	440b      	add	r3, r1
 8006e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e32:	4619      	mov	r1, r3
 8006e34:	4b35      	ldr	r3, [pc, #212]	; (8006f0c <USB_DeactivateEndpoint+0x1b0>)
 8006e36:	4013      	ands	r3, r2
 8006e38:	600b      	str	r3, [r1, #0]
 8006e3a:	e060      	b.n	8006efe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e52:	d11f      	bne.n	8006e94 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	0151      	lsls	r1, r2, #5
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	440a      	add	r2, r1
 8006e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e72:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	0151      	lsls	r1, r2, #5
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	440a      	add	r2, r1
 8006e8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	f003 030f 	and.w	r3, r3, #15
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eaa:	041b      	lsls	r3, r3, #16
 8006eac:	43db      	mvns	r3, r3
 8006eae:	68f9      	ldr	r1, [r7, #12]
 8006eb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ebe:	69da      	ldr	r2, [r3, #28]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	f003 030f 	and.w	r3, r3, #15
 8006ec8:	2101      	movs	r1, #1
 8006eca:	fa01 f303 	lsl.w	r3, r1, r3
 8006ece:	041b      	lsls	r3, r3, #16
 8006ed0:	43db      	mvns	r3, r3
 8006ed2:	68f9      	ldr	r1, [r7, #12]
 8006ed4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ed8:	4013      	ands	r3, r2
 8006eda:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	0159      	lsls	r1, r3, #5
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	440b      	add	r3, r1
 8006ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4b05      	ldr	r3, [pc, #20]	; (8006f10 <USB_DeactivateEndpoint+0x1b4>)
 8006efa:	4013      	ands	r3, r2
 8006efc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	ec337800 	.word	0xec337800
 8006f10:	eff37800 	.word	0xeff37800

08006f14 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b08a      	sub	sp, #40	; 0x28
 8006f18:	af02      	add	r7, sp, #8
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	785b      	ldrb	r3, [r3, #1]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	f040 815c 	bne.w	80071ee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d132      	bne.n	8006fa4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	0151      	lsls	r1, r2, #5
 8006f50:	69fa      	ldr	r2, [r7, #28]
 8006f52:	440a      	add	r2, r1
 8006f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	0151      	lsls	r1, r2, #5
 8006f74:	69fa      	ldr	r2, [r7, #28]
 8006f76:	440a      	add	r2, r1
 8006f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	0151      	lsls	r1, r2, #5
 8006f94:	69fa      	ldr	r2, [r7, #28]
 8006f96:	440a      	add	r2, r1
 8006f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f9c:	0cdb      	lsrs	r3, r3, #19
 8006f9e:	04db      	lsls	r3, r3, #19
 8006fa0:	6113      	str	r3, [r2, #16]
 8006fa2:	e074      	b.n	800708e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	69ba      	ldr	r2, [r7, #24]
 8006fb4:	0151      	lsls	r1, r2, #5
 8006fb6:	69fa      	ldr	r2, [r7, #28]
 8006fb8:	440a      	add	r2, r1
 8006fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fbe:	0cdb      	lsrs	r3, r3, #19
 8006fc0:	04db      	lsls	r3, r3, #19
 8006fc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	69ba      	ldr	r2, [r7, #24]
 8006fd4:	0151      	lsls	r1, r2, #5
 8006fd6:	69fa      	ldr	r2, [r7, #28]
 8006fd8:	440a      	add	r2, r1
 8006fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fde:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fe2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006fe6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	6959      	ldr	r1, [r3, #20]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	440b      	add	r3, r1
 8007000:	1e59      	subs	r1, r3, #1
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	fbb1 f3f3 	udiv	r3, r1, r3
 800700a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800700c:	4b9d      	ldr	r3, [pc, #628]	; (8007284 <USB_EPStartXfer+0x370>)
 800700e:	400b      	ands	r3, r1
 8007010:	69b9      	ldr	r1, [r7, #24]
 8007012:	0148      	lsls	r0, r1, #5
 8007014:	69f9      	ldr	r1, [r7, #28]
 8007016:	4401      	add	r1, r0
 8007018:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800701c:	4313      	orrs	r3, r2
 800701e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702c:	691a      	ldr	r2, [r3, #16]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007036:	69b9      	ldr	r1, [r7, #24]
 8007038:	0148      	lsls	r0, r1, #5
 800703a:	69f9      	ldr	r1, [r7, #28]
 800703c:	4401      	add	r1, r0
 800703e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007042:	4313      	orrs	r3, r2
 8007044:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	78db      	ldrb	r3, [r3, #3]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d11f      	bne.n	800708e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	015a      	lsls	r2, r3, #5
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	4413      	add	r3, r2
 8007056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	0151      	lsls	r1, r2, #5
 8007060:	69fa      	ldr	r2, [r7, #28]
 8007062:	440a      	add	r2, r1
 8007064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007068:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800706c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	4413      	add	r3, r2
 8007076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	0151      	lsls	r1, r2, #5
 8007080:	69fa      	ldr	r2, [r7, #28]
 8007082:	440a      	add	r2, r1
 8007084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007088:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800708c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800708e:	79fb      	ldrb	r3, [r7, #7]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d14b      	bne.n	800712c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d009      	beq.n	80070b0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a8:	461a      	mov	r2, r3
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	78db      	ldrb	r3, [r3, #3]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d128      	bne.n	800710a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d110      	bne.n	80070ea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	0151      	lsls	r1, r2, #5
 80070da:	69fa      	ldr	r2, [r7, #28]
 80070dc:	440a      	add	r2, r1
 80070de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070e6:	6013      	str	r3, [r2, #0]
 80070e8:	e00f      	b.n	800710a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	015a      	lsls	r2, r3, #5
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	69ba      	ldr	r2, [r7, #24]
 80070fa:	0151      	lsls	r1, r2, #5
 80070fc:	69fa      	ldr	r2, [r7, #28]
 80070fe:	440a      	add	r2, r1
 8007100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007108:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	69ba      	ldr	r2, [r7, #24]
 800711a:	0151      	lsls	r1, r2, #5
 800711c:	69fa      	ldr	r2, [r7, #28]
 800711e:	440a      	add	r2, r1
 8007120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007124:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007128:	6013      	str	r3, [r2, #0]
 800712a:	e12f      	b.n	800738c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	0151      	lsls	r1, r2, #5
 800713e:	69fa      	ldr	r2, [r7, #28]
 8007140:	440a      	add	r2, r1
 8007142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007146:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800714a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	78db      	ldrb	r3, [r3, #3]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d015      	beq.n	8007180 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 8117 	beq.w	800738c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	f003 030f 	and.w	r3, r3, #15
 800716e:	2101      	movs	r1, #1
 8007170:	fa01 f303 	lsl.w	r3, r1, r3
 8007174:	69f9      	ldr	r1, [r7, #28]
 8007176:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800717a:	4313      	orrs	r3, r2
 800717c:	634b      	str	r3, [r1, #52]	; 0x34
 800717e:	e105      	b.n	800738c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800718c:	2b00      	cmp	r3, #0
 800718e:	d110      	bne.n	80071b2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	4413      	add	r3, r2
 8007198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	69ba      	ldr	r2, [r7, #24]
 80071a0:	0151      	lsls	r1, r2, #5
 80071a2:	69fa      	ldr	r2, [r7, #28]
 80071a4:	440a      	add	r2, r1
 80071a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071ae:	6013      	str	r3, [r2, #0]
 80071b0:	e00f      	b.n	80071d2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	0151      	lsls	r1, r2, #5
 80071c4:	69fa      	ldr	r2, [r7, #28]
 80071c6:	440a      	add	r2, r1
 80071c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071d0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	68d9      	ldr	r1, [r3, #12]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	781a      	ldrb	r2, [r3, #0]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	b298      	uxth	r0, r3
 80071e0:	79fb      	ldrb	r3, [r7, #7]
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	4603      	mov	r3, r0
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 fa2b 	bl	8007642 <USB_WritePacket>
 80071ec:	e0ce      	b.n	800738c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	0151      	lsls	r1, r2, #5
 8007200:	69fa      	ldr	r2, [r7, #28]
 8007202:	440a      	add	r2, r1
 8007204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007208:	0cdb      	lsrs	r3, r3, #19
 800720a:	04db      	lsls	r3, r3, #19
 800720c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	015a      	lsls	r2, r3, #5
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	4413      	add	r3, r2
 8007216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	69ba      	ldr	r2, [r7, #24]
 800721e:	0151      	lsls	r1, r2, #5
 8007220:	69fa      	ldr	r2, [r7, #28]
 8007222:	440a      	add	r2, r1
 8007224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007228:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800722c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007230:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d126      	bne.n	8007288 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	015a      	lsls	r2, r3, #5
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	4413      	add	r3, r2
 8007242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007246:	691a      	ldr	r2, [r3, #16]
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007250:	69b9      	ldr	r1, [r7, #24]
 8007252:	0148      	lsls	r0, r1, #5
 8007254:	69f9      	ldr	r1, [r7, #28]
 8007256:	4401      	add	r1, r0
 8007258:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800725c:	4313      	orrs	r3, r2
 800725e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	4413      	add	r3, r2
 8007268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	69ba      	ldr	r2, [r7, #24]
 8007270:	0151      	lsls	r1, r2, #5
 8007272:	69fa      	ldr	r2, [r7, #28]
 8007274:	440a      	add	r2, r1
 8007276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800727a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800727e:	6113      	str	r3, [r2, #16]
 8007280:	e036      	b.n	80072f0 <USB_EPStartXfer+0x3dc>
 8007282:	bf00      	nop
 8007284:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	695a      	ldr	r2, [r3, #20]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	4413      	add	r3, r2
 8007292:	1e5a      	subs	r2, r3, #1
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	fbb2 f3f3 	udiv	r3, r2, r3
 800729c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072aa:	691a      	ldr	r2, [r3, #16]
 80072ac:	8afb      	ldrh	r3, [r7, #22]
 80072ae:	04d9      	lsls	r1, r3, #19
 80072b0:	4b39      	ldr	r3, [pc, #228]	; (8007398 <USB_EPStartXfer+0x484>)
 80072b2:	400b      	ands	r3, r1
 80072b4:	69b9      	ldr	r1, [r7, #24]
 80072b6:	0148      	lsls	r0, r1, #5
 80072b8:	69f9      	ldr	r1, [r7, #28]
 80072ba:	4401      	add	r1, r0
 80072bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072c0:	4313      	orrs	r3, r2
 80072c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d0:	691a      	ldr	r2, [r3, #16]
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	8af9      	ldrh	r1, [r7, #22]
 80072d8:	fb01 f303 	mul.w	r3, r1, r3
 80072dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072e0:	69b9      	ldr	r1, [r7, #24]
 80072e2:	0148      	lsls	r0, r1, #5
 80072e4:	69f9      	ldr	r1, [r7, #28]
 80072e6:	4401      	add	r1, r0
 80072e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072ec:	4313      	orrs	r3, r2
 80072ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80072f0:	79fb      	ldrb	r3, [r7, #7]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d10d      	bne.n	8007312 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d009      	beq.n	8007312 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	68d9      	ldr	r1, [r3, #12]
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	4413      	add	r3, r2
 800730a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800730e:	460a      	mov	r2, r1
 8007310:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	78db      	ldrb	r3, [r3, #3]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d128      	bne.n	800736c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007326:	2b00      	cmp	r3, #0
 8007328:	d110      	bne.n	800734c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	015a      	lsls	r2, r3, #5
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	4413      	add	r3, r2
 8007332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	69ba      	ldr	r2, [r7, #24]
 800733a:	0151      	lsls	r1, r2, #5
 800733c:	69fa      	ldr	r2, [r7, #28]
 800733e:	440a      	add	r2, r1
 8007340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007344:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007348:	6013      	str	r3, [r2, #0]
 800734a:	e00f      	b.n	800736c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	4413      	add	r3, r2
 8007354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	69ba      	ldr	r2, [r7, #24]
 800735c:	0151      	lsls	r1, r2, #5
 800735e:	69fa      	ldr	r2, [r7, #28]
 8007360:	440a      	add	r2, r1
 8007362:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800736a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	69ba      	ldr	r2, [r7, #24]
 800737c:	0151      	lsls	r1, r2, #5
 800737e:	69fa      	ldr	r2, [r7, #28]
 8007380:	440a      	add	r2, r1
 8007382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007386:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800738a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3720      	adds	r7, #32
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	1ff80000 	.word	0x1ff80000

0800739c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	4613      	mov	r3, r2
 80073a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	785b      	ldrb	r3, [r3, #1]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	f040 80cd 	bne.w	8007558 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d132      	bne.n	800742c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	0151      	lsls	r1, r2, #5
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	440a      	add	r2, r1
 80073dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	0151      	lsls	r1, r2, #5
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	440a      	add	r2, r1
 8007400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007404:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007408:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	4413      	add	r3, r2
 8007412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	0151      	lsls	r1, r2, #5
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	440a      	add	r2, r1
 8007420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007424:	0cdb      	lsrs	r3, r3, #19
 8007426:	04db      	lsls	r3, r3, #19
 8007428:	6113      	str	r3, [r2, #16]
 800742a:	e04e      	b.n	80074ca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	4413      	add	r3, r2
 8007434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	0151      	lsls	r1, r2, #5
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	440a      	add	r2, r1
 8007442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007446:	0cdb      	lsrs	r3, r3, #19
 8007448:	04db      	lsls	r3, r3, #19
 800744a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	4413      	add	r3, r2
 8007454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	0151      	lsls	r1, r2, #5
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	440a      	add	r2, r1
 8007462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007466:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800746a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800746e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	695a      	ldr	r2, [r3, #20]
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	429a      	cmp	r2, r3
 800747a:	d903      	bls.n	8007484 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	0151      	lsls	r1, r2, #5
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	440a      	add	r2, r1
 800749a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800749e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b0:	691a      	ldr	r2, [r3, #16]
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074ba:	6939      	ldr	r1, [r7, #16]
 80074bc:	0148      	lsls	r0, r1, #5
 80074be:	6979      	ldr	r1, [r7, #20]
 80074c0:	4401      	add	r1, r0
 80074c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80074c6:	4313      	orrs	r3, r2
 80074c8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80074ca:	79fb      	ldrb	r3, [r7, #7]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d11e      	bne.n	800750e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d009      	beq.n	80074ec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e4:	461a      	mov	r2, r3
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	0151      	lsls	r1, r2, #5
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	440a      	add	r2, r1
 8007502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007506:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800750a:	6013      	str	r3, [r2, #0]
 800750c:	e092      	b.n	8007634 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	015a      	lsls	r2, r3, #5
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	4413      	add	r3, r2
 8007516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	0151      	lsls	r1, r2, #5
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	440a      	add	r2, r1
 8007524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007528:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800752c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d07e      	beq.n	8007634 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	f003 030f 	and.w	r3, r3, #15
 8007546:	2101      	movs	r1, #1
 8007548:	fa01 f303 	lsl.w	r3, r1, r3
 800754c:	6979      	ldr	r1, [r7, #20]
 800754e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007552:	4313      	orrs	r3, r2
 8007554:	634b      	str	r3, [r1, #52]	; 0x34
 8007556:	e06d      	b.n	8007634 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	4413      	add	r3, r2
 8007560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	0151      	lsls	r1, r2, #5
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	440a      	add	r2, r1
 800756e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007572:	0cdb      	lsrs	r3, r3, #19
 8007574:	04db      	lsls	r3, r3, #19
 8007576:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	4413      	add	r3, r2
 8007580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	0151      	lsls	r1, r2, #5
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	440a      	add	r2, r1
 800758e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007592:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007596:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800759a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d003      	beq.n	80075ac <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	693a      	ldr	r2, [r7, #16]
 80075bc:	0151      	lsls	r1, r2, #5
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	440a      	add	r2, r1
 80075c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	015a      	lsls	r2, r3, #5
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d8:	691a      	ldr	r2, [r3, #16]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075e2:	6939      	ldr	r1, [r7, #16]
 80075e4:	0148      	lsls	r0, r1, #5
 80075e6:	6979      	ldr	r1, [r7, #20]
 80075e8:	4401      	add	r1, r0
 80075ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075ee:	4313      	orrs	r3, r2
 80075f0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80075f2:	79fb      	ldrb	r3, [r7, #7]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d10d      	bne.n	8007614 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d009      	beq.n	8007614 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	68d9      	ldr	r1, [r3, #12]
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	015a      	lsls	r2, r3, #5
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	4413      	add	r3, r2
 800760c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007610:	460a      	mov	r2, r1
 8007612:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	0151      	lsls	r1, r2, #5
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	440a      	add	r2, r1
 800762a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800762e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007632:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	371c      	adds	r7, #28
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007642:	b480      	push	{r7}
 8007644:	b089      	sub	sp, #36	; 0x24
 8007646:	af00      	add	r7, sp, #0
 8007648:	60f8      	str	r0, [r7, #12]
 800764a:	60b9      	str	r1, [r7, #8]
 800764c:	4611      	mov	r1, r2
 800764e:	461a      	mov	r2, r3
 8007650:	460b      	mov	r3, r1
 8007652:	71fb      	strb	r3, [r7, #7]
 8007654:	4613      	mov	r3, r2
 8007656:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007660:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007664:	2b00      	cmp	r3, #0
 8007666:	d123      	bne.n	80076b0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007668:	88bb      	ldrh	r3, [r7, #4]
 800766a:	3303      	adds	r3, #3
 800766c:	089b      	lsrs	r3, r3, #2
 800766e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007670:	2300      	movs	r3, #0
 8007672:	61bb      	str	r3, [r7, #24]
 8007674:	e018      	b.n	80076a8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007676:	79fb      	ldrb	r3, [r7, #7]
 8007678:	031a      	lsls	r2, r3, #12
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	4413      	add	r3, r2
 800767e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007682:	461a      	mov	r2, r3
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6013      	str	r3, [r2, #0]
      pSrc++;
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	3301      	adds	r3, #1
 800768e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	3301      	adds	r3, #1
 8007694:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	3301      	adds	r3, #1
 800769a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	3301      	adds	r3, #1
 80076a0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	3301      	adds	r3, #1
 80076a6:	61bb      	str	r3, [r7, #24]
 80076a8:	69ba      	ldr	r2, [r7, #24]
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d3e2      	bcc.n	8007676 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3724      	adds	r7, #36	; 0x24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80076be:	b480      	push	{r7}
 80076c0:	b08b      	sub	sp, #44	; 0x2c
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	60f8      	str	r0, [r7, #12]
 80076c6:	60b9      	str	r1, [r7, #8]
 80076c8:	4613      	mov	r3, r2
 80076ca:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80076d4:	88fb      	ldrh	r3, [r7, #6]
 80076d6:	089b      	lsrs	r3, r3, #2
 80076d8:	b29b      	uxth	r3, r3
 80076da:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80076dc:	88fb      	ldrh	r3, [r7, #6]
 80076de:	f003 0303 	and.w	r3, r3, #3
 80076e2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80076e4:	2300      	movs	r3, #0
 80076e6:	623b      	str	r3, [r7, #32]
 80076e8:	e014      	b.n	8007714 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	601a      	str	r2, [r3, #0]
    pDest++;
 80076f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f8:	3301      	adds	r3, #1
 80076fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80076fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fe:	3301      	adds	r3, #1
 8007700:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	3301      	adds	r3, #1
 8007706:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770a:	3301      	adds	r3, #1
 800770c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	3301      	adds	r3, #1
 8007712:	623b      	str	r3, [r7, #32]
 8007714:	6a3a      	ldr	r2, [r7, #32]
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	429a      	cmp	r2, r3
 800771a:	d3e6      	bcc.n	80076ea <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800771c:	8bfb      	ldrh	r3, [r7, #30]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d01e      	beq.n	8007760 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007722:	2300      	movs	r3, #0
 8007724:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800772c:	461a      	mov	r2, r3
 800772e:	f107 0310 	add.w	r3, r7, #16
 8007732:	6812      	ldr	r2, [r2, #0]
 8007734:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	b2db      	uxtb	r3, r3
 800773c:	00db      	lsls	r3, r3, #3
 800773e:	fa22 f303 	lsr.w	r3, r2, r3
 8007742:	b2da      	uxtb	r2, r3
 8007744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007746:	701a      	strb	r2, [r3, #0]
      i++;
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	3301      	adds	r3, #1
 800774c:	623b      	str	r3, [r7, #32]
      pDest++;
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	3301      	adds	r3, #1
 8007752:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007754:	8bfb      	ldrh	r3, [r7, #30]
 8007756:	3b01      	subs	r3, #1
 8007758:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800775a:	8bfb      	ldrh	r3, [r7, #30]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1ea      	bne.n	8007736 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007762:	4618      	mov	r0, r3
 8007764:	372c      	adds	r7, #44	; 0x2c
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800776e:	b480      	push	{r7}
 8007770:	b085      	sub	sp, #20
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	785b      	ldrb	r3, [r3, #1]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d12c      	bne.n	80077e4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	4413      	add	r3, r2
 8007792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	db12      	blt.n	80077c2 <USB_EPSetStall+0x54>
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00f      	beq.n	80077c2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	015a      	lsls	r2, r3, #5
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	4413      	add	r3, r2
 80077aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	0151      	lsls	r1, r2, #5
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	440a      	add	r2, r1
 80077b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077c0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	015a      	lsls	r2, r3, #5
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	4413      	add	r3, r2
 80077ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	0151      	lsls	r1, r2, #5
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	440a      	add	r2, r1
 80077d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077e0:	6013      	str	r3, [r2, #0]
 80077e2:	e02b      	b.n	800783c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	db12      	blt.n	800781c <USB_EPSetStall+0xae>
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00f      	beq.n	800781c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	015a      	lsls	r2, r3, #5
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	4413      	add	r3, r2
 8007804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	0151      	lsls	r1, r2, #5
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	440a      	add	r2, r1
 8007812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007816:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800781a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	0151      	lsls	r1, r2, #5
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	440a      	add	r2, r1
 8007832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007836:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800783a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800784a:	b480      	push	{r7}
 800784c:	b085      	sub	sp, #20
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	785b      	ldrb	r3, [r3, #1]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d128      	bne.n	80078b8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	0151      	lsls	r1, r2, #5
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	440a      	add	r2, r1
 800787c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007880:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007884:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	78db      	ldrb	r3, [r3, #3]
 800788a:	2b03      	cmp	r3, #3
 800788c:	d003      	beq.n	8007896 <USB_EPClearStall+0x4c>
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	78db      	ldrb	r3, [r3, #3]
 8007892:	2b02      	cmp	r3, #2
 8007894:	d138      	bne.n	8007908 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	015a      	lsls	r2, r3, #5
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	4413      	add	r3, r2
 800789e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	0151      	lsls	r1, r2, #5
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	440a      	add	r2, r1
 80078ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	e027      	b.n	8007908 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	0151      	lsls	r1, r2, #5
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	440a      	add	r2, r1
 80078ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	78db      	ldrb	r3, [r3, #3]
 80078dc:	2b03      	cmp	r3, #3
 80078de:	d003      	beq.n	80078e8 <USB_EPClearStall+0x9e>
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	78db      	ldrb	r3, [r3, #3]
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d10f      	bne.n	8007908 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	0151      	lsls	r1, r2, #5
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	440a      	add	r2, r1
 80078fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007906:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007916:	b480      	push	{r7}
 8007918:	b085      	sub	sp, #20
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	460b      	mov	r3, r1
 8007920:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007934:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007938:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	78fb      	ldrb	r3, [r7, #3]
 8007944:	011b      	lsls	r3, r3, #4
 8007946:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800794a:	68f9      	ldr	r1, [r7, #12]
 800794c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007950:	4313      	orrs	r3, r2
 8007952:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3714      	adds	r7, #20
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007962:	b480      	push	{r7}
 8007964:	b085      	sub	sp, #20
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800797c:	f023 0303 	bic.w	r3, r3, #3
 8007980:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007990:	f023 0302 	bic.w	r3, r3, #2
 8007994:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079be:	f023 0303 	bic.w	r3, r3, #3
 80079c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079d2:	f043 0302 	orr.w	r3, r3, #2
 80079d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b085      	sub	sp, #20
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	4013      	ands	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80079fe:	68fb      	ldr	r3, [r7, #12]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	0c1b      	lsrs	r3, r3, #16
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	4013      	ands	r3, r2
 8007a62:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	b29b      	uxth	r3, r3
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007a84:	78fb      	ldrb	r3, [r7, #3]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007aa2:	68bb      	ldr	r3, [r7, #8]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b087      	sub	sp, #28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007ad4:	78fb      	ldrb	r3, [r7, #3]
 8007ad6:	f003 030f 	and.w	r3, r3, #15
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae0:	01db      	lsls	r3, r3, #7
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007aea:	78fb      	ldrb	r3, [r7, #3]
 8007aec:	015a      	lsls	r2, r3, #5
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	4413      	add	r3, r2
 8007af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	4013      	ands	r3, r2
 8007afc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007afe:	68bb      	ldr	r3, [r7, #8]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	371c      	adds	r7, #28
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	f003 0301 	and.w	r3, r3, #1
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b42:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007b46:	f023 0307 	bic.w	r3, r3, #7
 8007b4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
	...

08007b70 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b087      	sub	sp, #28
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	607a      	str	r2, [r7, #4]
 8007b7c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	333c      	adds	r3, #60	; 0x3c
 8007b86:	3304      	adds	r3, #4
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	4a26      	ldr	r2, [pc, #152]	; (8007c28 <USB_EP0_OutStart+0xb8>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d90a      	bls.n	8007baa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ba4:	d101      	bne.n	8007baa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e037      	b.n	8007c1a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bd8:	f043 0318 	orr.w	r3, r3, #24
 8007bdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007bf0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007bf2:	7afb      	ldrb	r3, [r7, #11]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d10f      	bne.n	8007c18 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bfe:	461a      	mov	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c12:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007c16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	371c      	adds	r7, #28
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	4f54300a 	.word	0x4f54300a

08007c2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	60fb      	str	r3, [r7, #12]
 8007c3e:	4a13      	ldr	r2, [pc, #76]	; (8007c8c <USB_CoreReset+0x60>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d901      	bls.n	8007c48 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e01a      	b.n	8007c7e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	daf3      	bge.n	8007c38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c50:	2300      	movs	r3, #0
 8007c52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	f043 0201 	orr.w	r2, r3, #1
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	3301      	adds	r3, #1
 8007c64:	60fb      	str	r3, [r7, #12]
 8007c66:	4a09      	ldr	r2, [pc, #36]	; (8007c8c <USB_CoreReset+0x60>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d901      	bls.n	8007c70 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e006      	b.n	8007c7e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d0f1      	beq.n	8007c60 <USB_CoreReset+0x34>

  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	00030d40 	.word	0x00030d40

08007c90 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007c94:	4904      	ldr	r1, [pc, #16]	; (8007ca8 <MX_FATFS_Init+0x18>)
 8007c96:	4805      	ldr	r0, [pc, #20]	; (8007cac <MX_FATFS_Init+0x1c>)
 8007c98:	f001 ff30 	bl	8009afc <FATFS_LinkDriver>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	4b03      	ldr	r3, [pc, #12]	; (8007cb0 <MX_FATFS_Init+0x20>)
 8007ca2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007ca4:	bf00      	nop
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	20000668 	.word	0x20000668
 8007cac:	0800a6b0 	.word	0x0800a6b0
 8007cb0:	20000664 	.word	0x20000664

08007cb4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007cbe:	f000 f896 	bl	8007dee <BSP_SD_IsDetected>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d001      	beq.n	8007ccc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e012      	b.n	8007cf2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007ccc:	480b      	ldr	r0, [pc, #44]	; (8007cfc <BSP_SD_Init+0x48>)
 8007cce:	f7fb fcfb 	bl	80036c8 <HAL_SD_Init>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007cd6:	79fb      	ldrb	r3, [r7, #7]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d109      	bne.n	8007cf0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007cdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ce0:	4806      	ldr	r0, [pc, #24]	; (8007cfc <BSP_SD_Init+0x48>)
 8007ce2:	f7fc fac7 	bl	8004274 <HAL_SD_ConfigWideBusOperation>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007cf0:	79fb      	ldrb	r3, [r7, #7]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	200005dc 	.word	0x200005dc

08007d00 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	68f9      	ldr	r1, [r7, #12]
 8007d16:	4806      	ldr	r0, [pc, #24]	; (8007d30 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007d18:	f7fb fd84 	bl	8003824 <HAL_SD_ReadBlocks_DMA>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d001      	beq.n	8007d26 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3718      	adds	r7, #24
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	200005dc 	.word	0x200005dc

08007d34 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	68f9      	ldr	r1, [r7, #12]
 8007d4a:	4806      	ldr	r0, [pc, #24]	; (8007d64 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007d4c:	f7fb fe4c 	bl	80039e8 <HAL_SD_WriteBlocks_DMA>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	200005dc 	.word	0x200005dc

08007d68 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007d6c:	4805      	ldr	r0, [pc, #20]	; (8007d84 <BSP_SD_GetCardState+0x1c>)
 8007d6e:	f7fc fb1b 	bl	80043a8 <HAL_SD_GetCardState>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	bf14      	ite	ne
 8007d78:	2301      	movne	r3, #1
 8007d7a:	2300      	moveq	r3, #0
 8007d7c:	b2db      	uxtb	r3, r3
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	200005dc 	.word	0x200005dc

08007d88 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007d90:	6879      	ldr	r1, [r7, #4]
 8007d92:	4803      	ldr	r0, [pc, #12]	; (8007da0 <BSP_SD_GetCardInfo+0x18>)
 8007d94:	f7fc fa42 	bl	800421c <HAL_SD_GetCardInfo>
}
 8007d98:	bf00      	nop
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	200005dc 	.word	0x200005dc

08007da4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007dac:	f000 f818 	bl	8007de0 <BSP_SD_AbortCallback>
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007dc0:	f000 f9a8 	bl	8008114 <BSP_SD_WriteCpltCallback>
}
 8007dc4:	bf00      	nop
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007dd4:	f000 f9aa 	bl	800812c <BSP_SD_ReadCpltCallback>
}
 8007dd8:	bf00      	nop
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007de0:	b480      	push	{r7}
 8007de2:	af00      	add	r7, sp, #0

}
 8007de4:	bf00      	nop
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b082      	sub	sp, #8
 8007df2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007df4:	2301      	movs	r3, #1
 8007df6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007df8:	f000 f80c 	bl	8007e14 <BSP_PlatformIsDetected>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007e02:	2300      	movs	r3, #0
 8007e04:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007e06:	79fb      	ldrb	r3, [r7, #7]
 8007e08:	b2db      	uxtb	r3, r3
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
	...

08007e14 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007e1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007e22:	4806      	ldr	r0, [pc, #24]	; (8007e3c <BSP_PlatformIsDetected+0x28>)
 8007e24:	f7f9 fe54 	bl	8001ad0 <HAL_GPIO_ReadPin>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d001      	beq.n	8007e32 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007e32:	79fb      	ldrb	r3, [r7, #7]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	40020400 	.word	0x40020400

08007e40 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8007e48:	f7f8 ff56 	bl	8000cf8 <HAL_GetTick>
 8007e4c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8007e4e:	e006      	b.n	8007e5e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007e50:	f7ff ff8a 	bl	8007d68 <BSP_SD_GetCardState>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	e009      	b.n	8007e72 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8007e5e:	f7f8 ff4b 	bl	8000cf8 <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d8f0      	bhi.n	8007e50 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007e6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
	...

08007e7c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	4603      	mov	r3, r0
 8007e84:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007e86:	4b0b      	ldr	r3, [pc, #44]	; (8007eb4 <SD_CheckStatus+0x38>)
 8007e88:	2201      	movs	r2, #1
 8007e8a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007e8c:	f7ff ff6c 	bl	8007d68 <BSP_SD_GetCardState>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d107      	bne.n	8007ea6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007e96:	4b07      	ldr	r3, [pc, #28]	; (8007eb4 <SD_CheckStatus+0x38>)
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	f023 0301 	bic.w	r3, r3, #1
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	4b04      	ldr	r3, [pc, #16]	; (8007eb4 <SD_CheckStatus+0x38>)
 8007ea4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007ea6:	4b03      	ldr	r3, [pc, #12]	; (8007eb4 <SD_CheckStatus+0x38>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	b2db      	uxtb	r3, r3
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	20000009 	.word	0x20000009

08007eb8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007ec2:	f7ff fef7 	bl	8007cb4 <BSP_SD_Init>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d107      	bne.n	8007edc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007ecc:	79fb      	ldrb	r3, [r7, #7]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7ff ffd4 	bl	8007e7c <SD_CheckStatus>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	4b04      	ldr	r3, [pc, #16]	; (8007eec <SD_initialize+0x34>)
 8007eda:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007edc:	4b03      	ldr	r3, [pc, #12]	; (8007eec <SD_initialize+0x34>)
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	b2db      	uxtb	r3, r3
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20000009 	.word	0x20000009

08007ef0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007efa:	79fb      	ldrb	r3, [r7, #7]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7ff ffbd 	bl	8007e7c <SD_CheckStatus>
 8007f02:	4603      	mov	r3, r0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3708      	adds	r7, #8
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60b9      	str	r1, [r7, #8]
 8007f14:	607a      	str	r2, [r7, #4]
 8007f16:	603b      	str	r3, [r7, #0]
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007f20:	f247 5030 	movw	r0, #30000	; 0x7530
 8007f24:	f7ff ff8c 	bl	8007e40 <SD_CheckStatusWithTimeout>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	da01      	bge.n	8007f32 <SD_read+0x26>
  {
    return res;
 8007f2e:	7dfb      	ldrb	r3, [r7, #23]
 8007f30:	e03b      	b.n	8007faa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	6879      	ldr	r1, [r7, #4]
 8007f36:	68b8      	ldr	r0, [r7, #8]
 8007f38:	f7ff fee2 	bl	8007d00 <BSP_SD_ReadBlocks_DMA>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d132      	bne.n	8007fa8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8007f42:	4b1c      	ldr	r3, [pc, #112]	; (8007fb4 <SD_read+0xa8>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8007f48:	f7f8 fed6 	bl	8000cf8 <HAL_GetTick>
 8007f4c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007f4e:	bf00      	nop
 8007f50:	4b18      	ldr	r3, [pc, #96]	; (8007fb4 <SD_read+0xa8>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d108      	bne.n	8007f6a <SD_read+0x5e>
 8007f58:	f7f8 fece 	bl	8000cf8 <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	f247 522f 	movw	r2, #29999	; 0x752f
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d9f2      	bls.n	8007f50 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8007f6a:	4b12      	ldr	r3, [pc, #72]	; (8007fb4 <SD_read+0xa8>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d102      	bne.n	8007f78 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	75fb      	strb	r3, [r7, #23]
 8007f76:	e017      	b.n	8007fa8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8007f78:	4b0e      	ldr	r3, [pc, #56]	; (8007fb4 <SD_read+0xa8>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007f7e:	f7f8 febb 	bl	8000cf8 <HAL_GetTick>
 8007f82:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007f84:	e007      	b.n	8007f96 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007f86:	f7ff feef 	bl	8007d68 <BSP_SD_GetCardState>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d102      	bne.n	8007f96 <SD_read+0x8a>
          {
            res = RES_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8007f94:	e008      	b.n	8007fa8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007f96:	f7f8 feaf 	bl	8000cf8 <HAL_GetTick>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	f247 522f 	movw	r2, #29999	; 0x752f
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d9ee      	bls.n	8007f86 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8007fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	200001a4 	.word	0x200001a4

08007fb8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b086      	sub	sp, #24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60b9      	str	r1, [r7, #8]
 8007fc0:	607a      	str	r2, [r7, #4]
 8007fc2:	603b      	str	r3, [r7, #0]
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8007fcc:	4b24      	ldr	r3, [pc, #144]	; (8008060 <SD_write+0xa8>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007fd2:	f247 5030 	movw	r0, #30000	; 0x7530
 8007fd6:	f7ff ff33 	bl	8007e40 <SD_CheckStatusWithTimeout>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	da01      	bge.n	8007fe4 <SD_write+0x2c>
  {
    return res;
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
 8007fe2:	e038      	b.n	8008056 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007fe4:	683a      	ldr	r2, [r7, #0]
 8007fe6:	6879      	ldr	r1, [r7, #4]
 8007fe8:	68b8      	ldr	r0, [r7, #8]
 8007fea:	f7ff fea3 	bl	8007d34 <BSP_SD_WriteBlocks_DMA>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d12f      	bne.n	8008054 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8007ff4:	f7f8 fe80 	bl	8000cf8 <HAL_GetTick>
 8007ff8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007ffa:	bf00      	nop
 8007ffc:	4b18      	ldr	r3, [pc, #96]	; (8008060 <SD_write+0xa8>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d108      	bne.n	8008016 <SD_write+0x5e>
 8008004:	f7f8 fe78 	bl	8000cf8 <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	f247 522f 	movw	r2, #29999	; 0x752f
 8008012:	4293      	cmp	r3, r2
 8008014:	d9f2      	bls.n	8007ffc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8008016:	4b12      	ldr	r3, [pc, #72]	; (8008060 <SD_write+0xa8>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d102      	bne.n	8008024 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	75fb      	strb	r3, [r7, #23]
 8008022:	e017      	b.n	8008054 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8008024:	4b0e      	ldr	r3, [pc, #56]	; (8008060 <SD_write+0xa8>)
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800802a:	f7f8 fe65 	bl	8000cf8 <HAL_GetTick>
 800802e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008030:	e007      	b.n	8008042 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008032:	f7ff fe99 	bl	8007d68 <BSP_SD_GetCardState>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d102      	bne.n	8008042 <SD_write+0x8a>
          {
            res = RES_OK;
 800803c:	2300      	movs	r3, #0
 800803e:	75fb      	strb	r3, [r7, #23]
            break;
 8008040:	e008      	b.n	8008054 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008042:	f7f8 fe59 	bl	8000cf8 <HAL_GetTick>
 8008046:	4602      	mov	r2, r0
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	f247 522f 	movw	r2, #29999	; 0x752f
 8008050:	4293      	cmp	r3, r2
 8008052:	d9ee      	bls.n	8008032 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8008054:	7dfb      	ldrb	r3, [r7, #23]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3718      	adds	r7, #24
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	200001a0 	.word	0x200001a0

08008064 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b08c      	sub	sp, #48	; 0x30
 8008068:	af00      	add	r7, sp, #0
 800806a:	4603      	mov	r3, r0
 800806c:	603a      	str	r2, [r7, #0]
 800806e:	71fb      	strb	r3, [r7, #7]
 8008070:	460b      	mov	r3, r1
 8008072:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800807a:	4b25      	ldr	r3, [pc, #148]	; (8008110 <SD_ioctl+0xac>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	b2db      	uxtb	r3, r3
 8008080:	f003 0301 	and.w	r3, r3, #1
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <SD_ioctl+0x28>
 8008088:	2303      	movs	r3, #3
 800808a:	e03c      	b.n	8008106 <SD_ioctl+0xa2>

  switch (cmd)
 800808c:	79bb      	ldrb	r3, [r7, #6]
 800808e:	2b03      	cmp	r3, #3
 8008090:	d834      	bhi.n	80080fc <SD_ioctl+0x98>
 8008092:	a201      	add	r2, pc, #4	; (adr r2, 8008098 <SD_ioctl+0x34>)
 8008094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008098:	080080a9 	.word	0x080080a9
 800809c:	080080b1 	.word	0x080080b1
 80080a0:	080080c9 	.word	0x080080c9
 80080a4:	080080e3 	.word	0x080080e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80080ae:	e028      	b.n	8008102 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80080b0:	f107 030c 	add.w	r3, r7, #12
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7ff fe67 	bl	8007d88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80080ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80080c6:	e01c      	b.n	8008102 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80080c8:	f107 030c 	add.w	r3, r7, #12
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7ff fe5b 	bl	8007d88 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80080d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80080e0:	e00f      	b.n	8008102 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80080e2:	f107 030c 	add.w	r3, r7, #12
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7ff fe4e 	bl	8007d88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80080ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ee:	0a5a      	lsrs	r2, r3, #9
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80080fa:	e002      	b.n	8008102 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80080fc:	2304      	movs	r3, #4
 80080fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008102:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008106:	4618      	mov	r0, r3
 8008108:	3730      	adds	r7, #48	; 0x30
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20000009 	.word	0x20000009

08008114 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8008114:	b480      	push	{r7}
 8008116:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008118:	4b03      	ldr	r3, [pc, #12]	; (8008128 <BSP_SD_WriteCpltCallback+0x14>)
 800811a:	2201      	movs	r2, #1
 800811c:	601a      	str	r2, [r3, #0]
}
 800811e:	bf00      	nop
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr
 8008128:	200001a0 	.word	0x200001a0

0800812c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800812c:	b480      	push	{r7}
 800812e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8008130:	4b03      	ldr	r3, [pc, #12]	; (8008140 <BSP_SD_ReadCpltCallback+0x14>)
 8008132:	2201      	movs	r2, #1
 8008134:	601a      	str	r2, [r3, #0]
}
 8008136:	bf00      	nop
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	200001a4 	.word	0x200001a4

08008144 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	460b      	mov	r3, r1
 800814e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008150:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008154:	f002 f9f8 	bl	800a548 <USBD_static_malloc>
 8008158:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d105      	bne.n	800816c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008168:	2302      	movs	r3, #2
 800816a:	e066      	b.n	800823a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	7c1b      	ldrb	r3, [r3, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d119      	bne.n	80081b0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800817c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008180:	2202      	movs	r2, #2
 8008182:	2181      	movs	r1, #129	; 0x81
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f002 f8bc 	bl	800a302 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008194:	2202      	movs	r2, #2
 8008196:	2101      	movs	r1, #1
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f002 f8b2 	bl	800a302 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2210      	movs	r2, #16
 80081aa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80081ae:	e016      	b.n	80081de <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80081b0:	2340      	movs	r3, #64	; 0x40
 80081b2:	2202      	movs	r2, #2
 80081b4:	2181      	movs	r1, #129	; 0x81
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f002 f8a3 	bl	800a302 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80081c2:	2340      	movs	r3, #64	; 0x40
 80081c4:	2202      	movs	r2, #2
 80081c6:	2101      	movs	r1, #1
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f002 f89a 	bl	800a302 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2210      	movs	r2, #16
 80081da:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80081de:	2308      	movs	r3, #8
 80081e0:	2203      	movs	r2, #3
 80081e2:	2182      	movs	r1, #130	; 0x82
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f002 f88c 	bl	800a302 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	7c1b      	ldrb	r3, [r3, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d109      	bne.n	8008228 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800821a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800821e:	2101      	movs	r1, #1
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f002 f95d 	bl	800a4e0 <USBD_LL_PrepareReceive>
 8008226:	e007      	b.n	8008238 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800822e:	2340      	movs	r3, #64	; 0x40
 8008230:	2101      	movs	r1, #1
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f002 f954 	bl	800a4e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b082      	sub	sp, #8
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	460b      	mov	r3, r1
 800824c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800824e:	2181      	movs	r1, #129	; 0x81
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f002 f87c 	bl	800a34e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800825c:	2101      	movs	r1, #1
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f002 f875 	bl	800a34e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800826c:	2182      	movs	r1, #130	; 0x82
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f002 f86d 	bl	800a34e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00e      	beq.n	80082ac <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800829e:	4618      	mov	r0, r3
 80082a0:	f002 f960 	bl	800a564 <USBD_static_free>
    pdev->pClassData = NULL;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
	...

080082b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80082ca:	2300      	movs	r3, #0
 80082cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d101      	bne.n	80082e0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80082dc:	2303      	movs	r3, #3
 80082de:	e0af      	b.n	8008440 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d03f      	beq.n	800836c <USBD_CDC_Setup+0xb4>
 80082ec:	2b20      	cmp	r3, #32
 80082ee:	f040 809f 	bne.w	8008430 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	88db      	ldrh	r3, [r3, #6]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d02e      	beq.n	8008358 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	b25b      	sxtb	r3, r3
 8008300:	2b00      	cmp	r3, #0
 8008302:	da16      	bge.n	8008332 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	683a      	ldr	r2, [r7, #0]
 800830e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008310:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	88d2      	ldrh	r2, [r2, #6]
 8008316:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	88db      	ldrh	r3, [r3, #6]
 800831c:	2b07      	cmp	r3, #7
 800831e:	bf28      	it	cs
 8008320:	2307      	movcs	r3, #7
 8008322:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	89fa      	ldrh	r2, [r7, #14]
 8008328:	4619      	mov	r1, r3
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f001 fb19 	bl	8009962 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008330:	e085      	b.n	800843e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	785a      	ldrb	r2, [r3, #1]
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	88db      	ldrh	r3, [r3, #6]
 8008340:	b2da      	uxtb	r2, r3
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008348:	6939      	ldr	r1, [r7, #16]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	88db      	ldrh	r3, [r3, #6]
 800834e:	461a      	mov	r2, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f001 fb32 	bl	80099ba <USBD_CtlPrepareRx>
      break;
 8008356:	e072      	b.n	800843e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	683a      	ldr	r2, [r7, #0]
 8008362:	7850      	ldrb	r0, [r2, #1]
 8008364:	2200      	movs	r2, #0
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	4798      	blx	r3
      break;
 800836a:	e068      	b.n	800843e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	785b      	ldrb	r3, [r3, #1]
 8008370:	2b0b      	cmp	r3, #11
 8008372:	d852      	bhi.n	800841a <USBD_CDC_Setup+0x162>
 8008374:	a201      	add	r2, pc, #4	; (adr r2, 800837c <USBD_CDC_Setup+0xc4>)
 8008376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837a:	bf00      	nop
 800837c:	080083ad 	.word	0x080083ad
 8008380:	08008429 	.word	0x08008429
 8008384:	0800841b 	.word	0x0800841b
 8008388:	0800841b 	.word	0x0800841b
 800838c:	0800841b 	.word	0x0800841b
 8008390:	0800841b 	.word	0x0800841b
 8008394:	0800841b 	.word	0x0800841b
 8008398:	0800841b 	.word	0x0800841b
 800839c:	0800841b 	.word	0x0800841b
 80083a0:	0800841b 	.word	0x0800841b
 80083a4:	080083d7 	.word	0x080083d7
 80083a8:	08008401 	.word	0x08008401
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	d107      	bne.n	80083c8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80083b8:	f107 030a 	add.w	r3, r7, #10
 80083bc:	2202      	movs	r2, #2
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f001 face 	bl	8009962 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083c6:	e032      	b.n	800842e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f001 fa58 	bl	8009880 <USBD_CtlError>
            ret = USBD_FAIL;
 80083d0:	2303      	movs	r3, #3
 80083d2:	75fb      	strb	r3, [r7, #23]
          break;
 80083d4:	e02b      	b.n	800842e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	2b03      	cmp	r3, #3
 80083e0:	d107      	bne.n	80083f2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80083e2:	f107 030d 	add.w	r3, r7, #13
 80083e6:	2201      	movs	r2, #1
 80083e8:	4619      	mov	r1, r3
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f001 fab9 	bl	8009962 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083f0:	e01d      	b.n	800842e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80083f2:	6839      	ldr	r1, [r7, #0]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f001 fa43 	bl	8009880 <USBD_CtlError>
            ret = USBD_FAIL;
 80083fa:	2303      	movs	r3, #3
 80083fc:	75fb      	strb	r3, [r7, #23]
          break;
 80083fe:	e016      	b.n	800842e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b03      	cmp	r3, #3
 800840a:	d00f      	beq.n	800842c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800840c:	6839      	ldr	r1, [r7, #0]
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f001 fa36 	bl	8009880 <USBD_CtlError>
            ret = USBD_FAIL;
 8008414:	2303      	movs	r3, #3
 8008416:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008418:	e008      	b.n	800842c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f001 fa2f 	bl	8009880 <USBD_CtlError>
          ret = USBD_FAIL;
 8008422:	2303      	movs	r3, #3
 8008424:	75fb      	strb	r3, [r7, #23]
          break;
 8008426:	e002      	b.n	800842e <USBD_CDC_Setup+0x176>
          break;
 8008428:	bf00      	nop
 800842a:	e008      	b.n	800843e <USBD_CDC_Setup+0x186>
          break;
 800842c:	bf00      	nop
      }
      break;
 800842e:	e006      	b.n	800843e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f001 fa24 	bl	8009880 <USBD_CtlError>
      ret = USBD_FAIL;
 8008438:	2303      	movs	r3, #3
 800843a:	75fb      	strb	r3, [r7, #23]
      break;
 800843c:	bf00      	nop
  }

  return (uint8_t)ret;
 800843e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3718      	adds	r7, #24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	460b      	mov	r3, r1
 8008452:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800845a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008462:	2b00      	cmp	r3, #0
 8008464:	d101      	bne.n	800846a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008466:	2303      	movs	r3, #3
 8008468:	e04f      	b.n	800850a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008470:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008472:	78fa      	ldrb	r2, [r7, #3]
 8008474:	6879      	ldr	r1, [r7, #4]
 8008476:	4613      	mov	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	440b      	add	r3, r1
 8008480:	3318      	adds	r3, #24
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d029      	beq.n	80084dc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008488:	78fa      	ldrb	r2, [r7, #3]
 800848a:	6879      	ldr	r1, [r7, #4]
 800848c:	4613      	mov	r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4413      	add	r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	440b      	add	r3, r1
 8008496:	3318      	adds	r3, #24
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	78f9      	ldrb	r1, [r7, #3]
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	460b      	mov	r3, r1
 80084a0:	00db      	lsls	r3, r3, #3
 80084a2:	1a5b      	subs	r3, r3, r1
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4403      	add	r3, r0
 80084a8:	3344      	adds	r3, #68	; 0x44
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80084b0:	fb03 f301 	mul.w	r3, r3, r1
 80084b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d110      	bne.n	80084dc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80084ba:	78fa      	ldrb	r2, [r7, #3]
 80084bc:	6879      	ldr	r1, [r7, #4]
 80084be:	4613      	mov	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	440b      	add	r3, r1
 80084c8:	3318      	adds	r3, #24
 80084ca:	2200      	movs	r2, #0
 80084cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80084ce:	78f9      	ldrb	r1, [r7, #3]
 80084d0:	2300      	movs	r3, #0
 80084d2:	2200      	movs	r2, #0
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f001 ffe2 	bl	800a49e <USBD_LL_Transmit>
 80084da:	e015      	b.n	8008508 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	2200      	movs	r2, #0
 80084e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00b      	beq.n	8008508 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008504:	78fa      	ldrb	r2, [r7, #3]
 8008506:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	460b      	mov	r3, r1
 800851c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008524:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008530:	2303      	movs	r3, #3
 8008532:	e015      	b.n	8008560 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008534:	78fb      	ldrb	r3, [r7, #3]
 8008536:	4619      	mov	r1, r3
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f001 fff2 	bl	800a522 <USBD_LL_GetRxDataSize>
 800853e:	4602      	mov	r2, r0
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800855a:	4611      	mov	r1, r2
 800855c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008576:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800857e:	2303      	movs	r3, #3
 8008580:	e01b      	b.n	80085ba <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d015      	beq.n	80085b8 <USBD_CDC_EP0_RxReady+0x50>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008592:	2bff      	cmp	r3, #255	; 0xff
 8008594:	d010      	beq.n	80085b8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80085a4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80085ac:	b292      	uxth	r2, r2
 80085ae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	22ff      	movs	r2, #255	; 0xff
 80085b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
	...

080085c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2243      	movs	r2, #67	; 0x43
 80085d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80085d2:	4b03      	ldr	r3, [pc, #12]	; (80085e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	20000094 	.word	0x20000094

080085e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2243      	movs	r2, #67	; 0x43
 80085f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80085f2:	4b03      	ldr	r3, [pc, #12]	; (8008600 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	20000050 	.word	0x20000050

08008604 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2243      	movs	r2, #67	; 0x43
 8008610:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008612:	4b03      	ldr	r3, [pc, #12]	; (8008620 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008614:	4618      	mov	r0, r3
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr
 8008620:	200000d8 	.word	0x200000d8

08008624 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	220a      	movs	r2, #10
 8008630:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008632:	4b03      	ldr	r3, [pc, #12]	; (8008640 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008634:	4618      	mov	r0, r3
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	2000000c 	.word	0x2000000c

08008644 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d101      	bne.n	8008658 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008654:	2303      	movs	r3, #3
 8008656:	e004      	b.n	8008662 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	683a      	ldr	r2, [r7, #0]
 800865c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	370c      	adds	r7, #12
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800866e:	b480      	push	{r7}
 8008670:	b087      	sub	sp, #28
 8008672:	af00      	add	r7, sp, #0
 8008674:	60f8      	str	r0, [r7, #12]
 8008676:	60b9      	str	r1, [r7, #8]
 8008678:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008680:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d101      	bne.n	800868c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008688:	2303      	movs	r3, #3
 800868a:	e008      	b.n	800869e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	371c      	adds	r7, #28
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b085      	sub	sp, #20
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
 80086b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086ba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d101      	bne.n	80086c6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e004      	b.n	80086d0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	683a      	ldr	r2, [r7, #0]
 80086ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086ea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80086ec:	2301      	movs	r3, #1
 80086ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e01a      	b.n	8008734 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008704:	2b00      	cmp	r3, #0
 8008706:	d114      	bne.n	8008732 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2201      	movs	r2, #1
 800870c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008726:	2181      	movs	r1, #129	; 0x81
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f001 feb8 	bl	800a49e <USBD_LL_Transmit>

    ret = USBD_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008732:	7bfb      	ldrb	r3, [r7, #15]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800874a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008752:	2b00      	cmp	r3, #0
 8008754:	d101      	bne.n	800875a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008756:	2303      	movs	r3, #3
 8008758:	e016      	b.n	8008788 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	7c1b      	ldrb	r3, [r3, #16]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d109      	bne.n	8008776 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008768:	f44f 7300 	mov.w	r3, #512	; 0x200
 800876c:	2101      	movs	r1, #1
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f001 feb6 	bl	800a4e0 <USBD_LL_PrepareReceive>
 8008774:	e007      	b.n	8008786 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800877c:	2340      	movs	r3, #64	; 0x40
 800877e:	2101      	movs	r1, #1
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f001 fead 	bl	800a4e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	4613      	mov	r3, r2
 800879c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e01f      	b.n	80087e8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d003      	beq.n	80087ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	79fa      	ldrb	r2, [r7, #7]
 80087da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f001 fd29 	bl	800a234 <USBD_LL_Init>
 80087e2:	4603      	mov	r3, r0
 80087e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3718      	adds	r7, #24
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087fa:	2300      	movs	r3, #0
 80087fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d101      	bne.n	8008808 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008804:	2303      	movs	r3, #3
 8008806:	e016      	b.n	8008836 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00b      	beq.n	8008834 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008824:	f107 020e 	add.w	r2, r7, #14
 8008828:	4610      	mov	r0, r2
 800882a:	4798      	blx	r3
 800882c:	4602      	mov	r2, r0
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b082      	sub	sp, #8
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f001 fd40 	bl	800a2cc <USBD_LL_Start>
 800884c:	4603      	mov	r3, r0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008856:	b480      	push	{r7}
 8008858:	b083      	sub	sp, #12
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008878:	2303      	movs	r3, #3
 800887a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008882:	2b00      	cmp	r3, #0
 8008884:	d009      	beq.n	800889a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	78fa      	ldrb	r2, [r7, #3]
 8008890:	4611      	mov	r1, r2
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	4798      	blx	r3
 8008896:	4603      	mov	r3, r0
 8008898:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800889a:	7bfb      	ldrb	r3, [r7, #15]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d007      	beq.n	80088ca <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	78fa      	ldrb	r2, [r7, #3]
 80088c4:	4611      	mov	r1, r2
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	4798      	blx	r3
  }

  return USBD_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 ff90 	bl	800980c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80088fa:	461a      	mov	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008908:	f003 031f 	and.w	r3, r3, #31
 800890c:	2b02      	cmp	r3, #2
 800890e:	d01a      	beq.n	8008946 <USBD_LL_SetupStage+0x72>
 8008910:	2b02      	cmp	r3, #2
 8008912:	d822      	bhi.n	800895a <USBD_LL_SetupStage+0x86>
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <USBD_LL_SetupStage+0x4a>
 8008918:	2b01      	cmp	r3, #1
 800891a:	d00a      	beq.n	8008932 <USBD_LL_SetupStage+0x5e>
 800891c:	e01d      	b.n	800895a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008924:	4619      	mov	r1, r3
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fa62 	bl	8008df0 <USBD_StdDevReq>
 800892c:	4603      	mov	r3, r0
 800892e:	73fb      	strb	r3, [r7, #15]
      break;
 8008930:	e020      	b.n	8008974 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fac6 	bl	8008ecc <USBD_StdItfReq>
 8008940:	4603      	mov	r3, r0
 8008942:	73fb      	strb	r3, [r7, #15]
      break;
 8008944:	e016      	b.n	8008974 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800894c:	4619      	mov	r1, r3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fb05 	bl	8008f5e <USBD_StdEPReq>
 8008954:	4603      	mov	r3, r0
 8008956:	73fb      	strb	r3, [r7, #15]
      break;
 8008958:	e00c      	b.n	8008974 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008960:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008964:	b2db      	uxtb	r3, r3
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f001 fd0f 	bl	800a38c <USBD_LL_StallEP>
 800896e:	4603      	mov	r3, r0
 8008970:	73fb      	strb	r3, [r7, #15]
      break;
 8008972:	bf00      	nop
  }

  return ret;
 8008974:	7bfb      	ldrb	r3, [r7, #15]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b086      	sub	sp, #24
 8008982:	af00      	add	r7, sp, #0
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	460b      	mov	r3, r1
 8008988:	607a      	str	r2, [r7, #4]
 800898a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800898c:	7afb      	ldrb	r3, [r7, #11]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d138      	bne.n	8008a04 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008998:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089a0:	2b03      	cmp	r3, #3
 80089a2:	d14a      	bne.n	8008a3a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	689a      	ldr	r2, [r3, #8]
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d913      	bls.n	80089d8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	689a      	ldr	r2, [r3, #8]
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	1ad2      	subs	r2, r2, r3
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	68da      	ldr	r2, [r3, #12]
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	4293      	cmp	r3, r2
 80089c8:	bf28      	it	cs
 80089ca:	4613      	movcs	r3, r2
 80089cc:	461a      	mov	r2, r3
 80089ce:	6879      	ldr	r1, [r7, #4]
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f001 f80f 	bl	80099f4 <USBD_CtlContinueRx>
 80089d6:	e030      	b.n	8008a3a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b03      	cmp	r3, #3
 80089e2:	d10b      	bne.n	80089fc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d005      	beq.n	80089fc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f001 f80a 	bl	8009a16 <USBD_CtlSendStatus>
 8008a02:	e01a      	b.n	8008a3a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b03      	cmp	r3, #3
 8008a0e:	d114      	bne.n	8008a3a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a16:	699b      	ldr	r3, [r3, #24]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00e      	beq.n	8008a3a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	7afa      	ldrb	r2, [r7, #11]
 8008a26:	4611      	mov	r1, r2
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	4798      	blx	r3
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008a30:	7dfb      	ldrb	r3, [r7, #23]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008a36:	7dfb      	ldrb	r3, [r7, #23]
 8008a38:	e000      	b.n	8008a3c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3718      	adds	r7, #24
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	607a      	str	r2, [r7, #4]
 8008a50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008a52:	7afb      	ldrb	r3, [r7, #11]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d16b      	bne.n	8008b30 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	3314      	adds	r3, #20
 8008a5c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d156      	bne.n	8008b16 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	689a      	ldr	r2, [r3, #8]
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d914      	bls.n	8008a9e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	689a      	ldr	r2, [r3, #8]
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	1ad2      	subs	r2, r2, r3
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	461a      	mov	r2, r3
 8008a88:	6879      	ldr	r1, [r7, #4]
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f000 ff84 	bl	8009998 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a90:	2300      	movs	r3, #0
 8008a92:	2200      	movs	r2, #0
 8008a94:	2100      	movs	r1, #0
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f001 fd22 	bl	800a4e0 <USBD_LL_PrepareReceive>
 8008a9c:	e03b      	b.n	8008b16 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	68da      	ldr	r2, [r3, #12]
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d11c      	bne.n	8008ae4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d316      	bcc.n	8008ae4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	685a      	ldr	r2, [r3, #4]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d20f      	bcs.n	8008ae4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	68f8      	ldr	r0, [r7, #12]
 8008aca:	f000 ff65 	bl	8009998 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2100      	movs	r1, #0
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f001 fcff 	bl	800a4e0 <USBD_LL_PrepareReceive>
 8008ae2:	e018      	b.n	8008b16 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	2b03      	cmp	r3, #3
 8008aee:	d10b      	bne.n	8008b08 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d005      	beq.n	8008b08 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b08:	2180      	movs	r1, #128	; 0x80
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f001 fc3e 	bl	800a38c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f000 ff93 	bl	8009a3c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d122      	bne.n	8008b66 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f7ff fe98 	bl	8008856 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008b2e:	e01a      	b.n	8008b66 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d114      	bne.n	8008b66 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00e      	beq.n	8008b66 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	7afa      	ldrb	r2, [r7, #11]
 8008b52:	4611      	mov	r1, r2
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	4798      	blx	r3
 8008b58:	4603      	mov	r3, r0
 8008b5a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008b5c:	7dfb      	ldrb	r3, [r7, #23]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008b62:	7dfb      	ldrb	r3, [r7, #23]
 8008b64:	e000      	b.n	8008b68 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3718      	adds	r7, #24
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e02f      	b.n	8008c04 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00f      	beq.n	8008bce <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d009      	beq.n	8008bce <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	6852      	ldr	r2, [r2, #4]
 8008bc6:	b2d2      	uxtb	r2, r2
 8008bc8:	4611      	mov	r1, r2
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bce:	2340      	movs	r3, #64	; 0x40
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f001 fb94 	bl	800a302 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2240      	movs	r2, #64	; 0x40
 8008be6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bea:	2340      	movs	r3, #64	; 0x40
 8008bec:	2200      	movs	r2, #0
 8008bee:	2180      	movs	r1, #128	; 0x80
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f001 fb86 	bl	800a302 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2240      	movs	r2, #64	; 0x40
 8008c00:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	460b      	mov	r3, r1
 8008c16:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	78fa      	ldrb	r2, [r7, #3]
 8008c1c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c3a:	b2da      	uxtb	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2204      	movs	r2, #4
 8008c46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	2b04      	cmp	r3, #4
 8008c6a:	d106      	bne.n	8008c7a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e012      	b.n	8008cc4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b03      	cmp	r3, #3
 8008ca8:	d10b      	bne.n	8008cc2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d005      	beq.n	8008cc2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cbc:	69db      	ldr	r3, [r3, #28]
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d101      	bne.n	8008ce6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e014      	b.n	8008d10 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2b03      	cmp	r3, #3
 8008cf0:	d10d      	bne.n	8008d0e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf8:	6a1b      	ldr	r3, [r3, #32]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d007      	beq.n	8008d0e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	78fa      	ldrb	r2, [r7, #3]
 8008d08:	4611      	mov	r1, r2
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	460b      	mov	r3, r1
 8008d22:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d101      	bne.n	8008d32 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	e014      	b.n	8008d5c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d10d      	bne.n	8008d5a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d007      	beq.n	8008d5a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d52:	78fa      	ldrb	r2, [r7, #3]
 8008d54:	4611      	mov	r1, r2
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b082      	sub	sp, #8
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d009      	beq.n	8008da8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	6852      	ldr	r2, [r2, #4]
 8008da0:	b2d2      	uxtb	r2, r2
 8008da2:	4611      	mov	r1, r2
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	4798      	blx	r3
  }

  return USBD_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b087      	sub	sp, #28
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008dd0:	8a3b      	ldrh	r3, [r7, #16]
 8008dd2:	021b      	lsls	r3, r3, #8
 8008dd4:	b21a      	sxth	r2, r3
 8008dd6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	b21b      	sxth	r3, r3
 8008dde:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008de0:	89fb      	ldrh	r3, [r7, #14]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	371c      	adds	r7, #28
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
	...

08008df0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e06:	2b40      	cmp	r3, #64	; 0x40
 8008e08:	d005      	beq.n	8008e16 <USBD_StdDevReq+0x26>
 8008e0a:	2b40      	cmp	r3, #64	; 0x40
 8008e0c:	d853      	bhi.n	8008eb6 <USBD_StdDevReq+0xc6>
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00b      	beq.n	8008e2a <USBD_StdDevReq+0x3a>
 8008e12:	2b20      	cmp	r3, #32
 8008e14:	d14f      	bne.n	8008eb6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	6839      	ldr	r1, [r7, #0]
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	4798      	blx	r3
 8008e24:	4603      	mov	r3, r0
 8008e26:	73fb      	strb	r3, [r7, #15]
      break;
 8008e28:	e04a      	b.n	8008ec0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	785b      	ldrb	r3, [r3, #1]
 8008e2e:	2b09      	cmp	r3, #9
 8008e30:	d83b      	bhi.n	8008eaa <USBD_StdDevReq+0xba>
 8008e32:	a201      	add	r2, pc, #4	; (adr r2, 8008e38 <USBD_StdDevReq+0x48>)
 8008e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e38:	08008e8d 	.word	0x08008e8d
 8008e3c:	08008ea1 	.word	0x08008ea1
 8008e40:	08008eab 	.word	0x08008eab
 8008e44:	08008e97 	.word	0x08008e97
 8008e48:	08008eab 	.word	0x08008eab
 8008e4c:	08008e6b 	.word	0x08008e6b
 8008e50:	08008e61 	.word	0x08008e61
 8008e54:	08008eab 	.word	0x08008eab
 8008e58:	08008e83 	.word	0x08008e83
 8008e5c:	08008e75 	.word	0x08008e75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008e60:	6839      	ldr	r1, [r7, #0]
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f9de 	bl	8009224 <USBD_GetDescriptor>
          break;
 8008e68:	e024      	b.n	8008eb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e6a:	6839      	ldr	r1, [r7, #0]
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fb43 	bl	80094f8 <USBD_SetAddress>
          break;
 8008e72:	e01f      	b.n	8008eb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fb82 	bl	8009580 <USBD_SetConfig>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	73fb      	strb	r3, [r7, #15]
          break;
 8008e80:	e018      	b.n	8008eb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fc21 	bl	80096cc <USBD_GetConfig>
          break;
 8008e8a:	e013      	b.n	8008eb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fc52 	bl	8009738 <USBD_GetStatus>
          break;
 8008e94:	e00e      	b.n	8008eb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e96:	6839      	ldr	r1, [r7, #0]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fc81 	bl	80097a0 <USBD_SetFeature>
          break;
 8008e9e:	e009      	b.n	8008eb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ea0:	6839      	ldr	r1, [r7, #0]
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 fc90 	bl	80097c8 <USBD_ClrFeature>
          break;
 8008ea8:	e004      	b.n	8008eb4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fce7 	bl	8009880 <USBD_CtlError>
          break;
 8008eb2:	bf00      	nop
      }
      break;
 8008eb4:	e004      	b.n	8008ec0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008eb6:	6839      	ldr	r1, [r7, #0]
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fce1 	bl	8009880 <USBD_CtlError>
      break;
 8008ebe:	bf00      	nop
  }

  return ret;
 8008ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop

08008ecc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ee2:	2b40      	cmp	r3, #64	; 0x40
 8008ee4:	d005      	beq.n	8008ef2 <USBD_StdItfReq+0x26>
 8008ee6:	2b40      	cmp	r3, #64	; 0x40
 8008ee8:	d82f      	bhi.n	8008f4a <USBD_StdItfReq+0x7e>
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d001      	beq.n	8008ef2 <USBD_StdItfReq+0x26>
 8008eee:	2b20      	cmp	r3, #32
 8008ef0:	d12b      	bne.n	8008f4a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	3b01      	subs	r3, #1
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d81d      	bhi.n	8008f3c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	889b      	ldrh	r3, [r3, #4]
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d813      	bhi.n	8008f32 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	4798      	blx	r3
 8008f18:	4603      	mov	r3, r0
 8008f1a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	88db      	ldrh	r3, [r3, #6]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d110      	bne.n	8008f46 <USBD_StdItfReq+0x7a>
 8008f24:	7bfb      	ldrb	r3, [r7, #15]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10d      	bne.n	8008f46 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fd73 	bl	8009a16 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f30:	e009      	b.n	8008f46 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008f32:	6839      	ldr	r1, [r7, #0]
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fca3 	bl	8009880 <USBD_CtlError>
          break;
 8008f3a:	e004      	b.n	8008f46 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fc9e 	bl	8009880 <USBD_CtlError>
          break;
 8008f44:	e000      	b.n	8008f48 <USBD_StdItfReq+0x7c>
          break;
 8008f46:	bf00      	nop
      }
      break;
 8008f48:	e004      	b.n	8008f54 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008f4a:	6839      	ldr	r1, [r7, #0]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 fc97 	bl	8009880 <USBD_CtlError>
      break;
 8008f52:	bf00      	nop
  }

  return ret;
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b084      	sub	sp, #16
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	889b      	ldrh	r3, [r3, #4]
 8008f70:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f7a:	2b40      	cmp	r3, #64	; 0x40
 8008f7c:	d007      	beq.n	8008f8e <USBD_StdEPReq+0x30>
 8008f7e:	2b40      	cmp	r3, #64	; 0x40
 8008f80:	f200 8145 	bhi.w	800920e <USBD_StdEPReq+0x2b0>
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00c      	beq.n	8008fa2 <USBD_StdEPReq+0x44>
 8008f88:	2b20      	cmp	r3, #32
 8008f8a:	f040 8140 	bne.w	800920e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	4798      	blx	r3
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8008fa0:	e13a      	b.n	8009218 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	785b      	ldrb	r3, [r3, #1]
 8008fa6:	2b03      	cmp	r3, #3
 8008fa8:	d007      	beq.n	8008fba <USBD_StdEPReq+0x5c>
 8008faa:	2b03      	cmp	r3, #3
 8008fac:	f300 8129 	bgt.w	8009202 <USBD_StdEPReq+0x2a4>
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d07f      	beq.n	80090b4 <USBD_StdEPReq+0x156>
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d03c      	beq.n	8009032 <USBD_StdEPReq+0xd4>
 8008fb8:	e123      	b.n	8009202 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d002      	beq.n	8008fcc <USBD_StdEPReq+0x6e>
 8008fc6:	2b03      	cmp	r3, #3
 8008fc8:	d016      	beq.n	8008ff8 <USBD_StdEPReq+0x9a>
 8008fca:	e02c      	b.n	8009026 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fcc:	7bbb      	ldrb	r3, [r7, #14]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00d      	beq.n	8008fee <USBD_StdEPReq+0x90>
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
 8008fd4:	2b80      	cmp	r3, #128	; 0x80
 8008fd6:	d00a      	beq.n	8008fee <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fd8:	7bbb      	ldrb	r3, [r7, #14]
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f001 f9d5 	bl	800a38c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fe2:	2180      	movs	r1, #128	; 0x80
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f001 f9d1 	bl	800a38c <USBD_LL_StallEP>
 8008fea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fec:	e020      	b.n	8009030 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008fee:	6839      	ldr	r1, [r7, #0]
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fc45 	bl	8009880 <USBD_CtlError>
              break;
 8008ff6:	e01b      	b.n	8009030 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	885b      	ldrh	r3, [r3, #2]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10e      	bne.n	800901e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009000:	7bbb      	ldrb	r3, [r7, #14]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00b      	beq.n	800901e <USBD_StdEPReq+0xc0>
 8009006:	7bbb      	ldrb	r3, [r7, #14]
 8009008:	2b80      	cmp	r3, #128	; 0x80
 800900a:	d008      	beq.n	800901e <USBD_StdEPReq+0xc0>
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	88db      	ldrh	r3, [r3, #6]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d104      	bne.n	800901e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009014:	7bbb      	ldrb	r3, [r7, #14]
 8009016:	4619      	mov	r1, r3
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f001 f9b7 	bl	800a38c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fcf9 	bl	8009a16 <USBD_CtlSendStatus>

              break;
 8009024:	e004      	b.n	8009030 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 fc29 	bl	8009880 <USBD_CtlError>
              break;
 800902e:	bf00      	nop
          }
          break;
 8009030:	e0ec      	b.n	800920c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b02      	cmp	r3, #2
 800903c:	d002      	beq.n	8009044 <USBD_StdEPReq+0xe6>
 800903e:	2b03      	cmp	r3, #3
 8009040:	d016      	beq.n	8009070 <USBD_StdEPReq+0x112>
 8009042:	e030      	b.n	80090a6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009044:	7bbb      	ldrb	r3, [r7, #14]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00d      	beq.n	8009066 <USBD_StdEPReq+0x108>
 800904a:	7bbb      	ldrb	r3, [r7, #14]
 800904c:	2b80      	cmp	r3, #128	; 0x80
 800904e:	d00a      	beq.n	8009066 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	4619      	mov	r1, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f001 f999 	bl	800a38c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800905a:	2180      	movs	r1, #128	; 0x80
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f001 f995 	bl	800a38c <USBD_LL_StallEP>
 8009062:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009064:	e025      	b.n	80090b2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009066:	6839      	ldr	r1, [r7, #0]
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fc09 	bl	8009880 <USBD_CtlError>
              break;
 800906e:	e020      	b.n	80090b2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	885b      	ldrh	r3, [r3, #2]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d11b      	bne.n	80090b0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009078:	7bbb      	ldrb	r3, [r7, #14]
 800907a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800907e:	2b00      	cmp	r3, #0
 8009080:	d004      	beq.n	800908c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009082:	7bbb      	ldrb	r3, [r7, #14]
 8009084:	4619      	mov	r1, r3
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f001 f99f 	bl	800a3ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fcc2 	bl	8009a16 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	6839      	ldr	r1, [r7, #0]
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	4798      	blx	r3
 80090a0:	4603      	mov	r3, r0
 80090a2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80090a4:	e004      	b.n	80090b0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80090a6:	6839      	ldr	r1, [r7, #0]
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 fbe9 	bl	8009880 <USBD_CtlError>
              break;
 80090ae:	e000      	b.n	80090b2 <USBD_StdEPReq+0x154>
              break;
 80090b0:	bf00      	nop
          }
          break;
 80090b2:	e0ab      	b.n	800920c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d002      	beq.n	80090c6 <USBD_StdEPReq+0x168>
 80090c0:	2b03      	cmp	r3, #3
 80090c2:	d032      	beq.n	800912a <USBD_StdEPReq+0x1cc>
 80090c4:	e097      	b.n	80091f6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090c6:	7bbb      	ldrb	r3, [r7, #14]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d007      	beq.n	80090dc <USBD_StdEPReq+0x17e>
 80090cc:	7bbb      	ldrb	r3, [r7, #14]
 80090ce:	2b80      	cmp	r3, #128	; 0x80
 80090d0:	d004      	beq.n	80090dc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 fbd3 	bl	8009880 <USBD_CtlError>
                break;
 80090da:	e091      	b.n	8009200 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	da0b      	bge.n	80090fc <USBD_StdEPReq+0x19e>
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
 80090e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090ea:	4613      	mov	r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4413      	add	r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	3310      	adds	r3, #16
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	4413      	add	r3, r2
 80090f8:	3304      	adds	r3, #4
 80090fa:	e00b      	b.n	8009114 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
 80090fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009102:	4613      	mov	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	4413      	add	r3, r2
 8009112:	3304      	adds	r3, #4
 8009114:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	2200      	movs	r2, #0
 800911a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	2202      	movs	r2, #2
 8009120:	4619      	mov	r1, r3
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fc1d 	bl	8009962 <USBD_CtlSendData>
              break;
 8009128:	e06a      	b.n	8009200 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800912a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800912e:	2b00      	cmp	r3, #0
 8009130:	da11      	bge.n	8009156 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	f003 020f 	and.w	r2, r3, #15
 8009138:	6879      	ldr	r1, [r7, #4]
 800913a:	4613      	mov	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	440b      	add	r3, r1
 8009144:	3324      	adds	r3, #36	; 0x24
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d117      	bne.n	800917c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800914c:	6839      	ldr	r1, [r7, #0]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fb96 	bl	8009880 <USBD_CtlError>
                  break;
 8009154:	e054      	b.n	8009200 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009156:	7bbb      	ldrb	r3, [r7, #14]
 8009158:	f003 020f 	and.w	r2, r3, #15
 800915c:	6879      	ldr	r1, [r7, #4]
 800915e:	4613      	mov	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	4413      	add	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	440b      	add	r3, r1
 8009168:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800916c:	881b      	ldrh	r3, [r3, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d104      	bne.n	800917c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fb83 	bl	8009880 <USBD_CtlError>
                  break;
 800917a:	e041      	b.n	8009200 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800917c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009180:	2b00      	cmp	r3, #0
 8009182:	da0b      	bge.n	800919c <USBD_StdEPReq+0x23e>
 8009184:	7bbb      	ldrb	r3, [r7, #14]
 8009186:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800918a:	4613      	mov	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	4413      	add	r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	3310      	adds	r3, #16
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	4413      	add	r3, r2
 8009198:	3304      	adds	r3, #4
 800919a:	e00b      	b.n	80091b4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800919c:	7bbb      	ldrb	r3, [r7, #14]
 800919e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091a2:	4613      	mov	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	4413      	add	r3, r2
 80091b2:	3304      	adds	r3, #4
 80091b4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80091b6:	7bbb      	ldrb	r3, [r7, #14]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d002      	beq.n	80091c2 <USBD_StdEPReq+0x264>
 80091bc:	7bbb      	ldrb	r3, [r7, #14]
 80091be:	2b80      	cmp	r3, #128	; 0x80
 80091c0:	d103      	bne.n	80091ca <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	2200      	movs	r2, #0
 80091c6:	601a      	str	r2, [r3, #0]
 80091c8:	e00e      	b.n	80091e8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80091ca:	7bbb      	ldrb	r3, [r7, #14]
 80091cc:	4619      	mov	r1, r3
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f001 f91a 	bl	800a408 <USBD_LL_IsStallEP>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d003      	beq.n	80091e2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	2201      	movs	r2, #1
 80091de:	601a      	str	r2, [r3, #0]
 80091e0:	e002      	b.n	80091e8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2200      	movs	r2, #0
 80091e6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2202      	movs	r2, #2
 80091ec:	4619      	mov	r1, r3
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fbb7 	bl	8009962 <USBD_CtlSendData>
              break;
 80091f4:	e004      	b.n	8009200 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80091f6:	6839      	ldr	r1, [r7, #0]
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fb41 	bl	8009880 <USBD_CtlError>
              break;
 80091fe:	bf00      	nop
          }
          break;
 8009200:	e004      	b.n	800920c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fb3b 	bl	8009880 <USBD_CtlError>
          break;
 800920a:	bf00      	nop
      }
      break;
 800920c:	e004      	b.n	8009218 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fb35 	bl	8009880 <USBD_CtlError>
      break;
 8009216:	bf00      	nop
  }

  return ret;
 8009218:	7bfb      	ldrb	r3, [r7, #15]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
	...

08009224 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800922e:	2300      	movs	r3, #0
 8009230:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009232:	2300      	movs	r3, #0
 8009234:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009236:	2300      	movs	r3, #0
 8009238:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	885b      	ldrh	r3, [r3, #2]
 800923e:	0a1b      	lsrs	r3, r3, #8
 8009240:	b29b      	uxth	r3, r3
 8009242:	3b01      	subs	r3, #1
 8009244:	2b06      	cmp	r3, #6
 8009246:	f200 8128 	bhi.w	800949a <USBD_GetDescriptor+0x276>
 800924a:	a201      	add	r2, pc, #4	; (adr r2, 8009250 <USBD_GetDescriptor+0x2c>)
 800924c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009250:	0800926d 	.word	0x0800926d
 8009254:	08009285 	.word	0x08009285
 8009258:	080092c5 	.word	0x080092c5
 800925c:	0800949b 	.word	0x0800949b
 8009260:	0800949b 	.word	0x0800949b
 8009264:	0800943b 	.word	0x0800943b
 8009268:	08009467 	.word	0x08009467
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	7c12      	ldrb	r2, [r2, #16]
 8009278:	f107 0108 	add.w	r1, r7, #8
 800927c:	4610      	mov	r0, r2
 800927e:	4798      	blx	r3
 8009280:	60f8      	str	r0, [r7, #12]
      break;
 8009282:	e112      	b.n	80094aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	7c1b      	ldrb	r3, [r3, #16]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10d      	bne.n	80092a8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009294:	f107 0208 	add.w	r2, r7, #8
 8009298:	4610      	mov	r0, r2
 800929a:	4798      	blx	r3
 800929c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3301      	adds	r3, #1
 80092a2:	2202      	movs	r2, #2
 80092a4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80092a6:	e100      	b.n	80094aa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b0:	f107 0208 	add.w	r2, r7, #8
 80092b4:	4610      	mov	r0, r2
 80092b6:	4798      	blx	r3
 80092b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3301      	adds	r3, #1
 80092be:	2202      	movs	r2, #2
 80092c0:	701a      	strb	r2, [r3, #0]
      break;
 80092c2:	e0f2      	b.n	80094aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	885b      	ldrh	r3, [r3, #2]
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	2b05      	cmp	r3, #5
 80092cc:	f200 80ac 	bhi.w	8009428 <USBD_GetDescriptor+0x204>
 80092d0:	a201      	add	r2, pc, #4	; (adr r2, 80092d8 <USBD_GetDescriptor+0xb4>)
 80092d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d6:	bf00      	nop
 80092d8:	080092f1 	.word	0x080092f1
 80092dc:	08009325 	.word	0x08009325
 80092e0:	08009359 	.word	0x08009359
 80092e4:	0800938d 	.word	0x0800938d
 80092e8:	080093c1 	.word	0x080093c1
 80092ec:	080093f5 	.word	0x080093f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00b      	beq.n	8009314 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	7c12      	ldrb	r2, [r2, #16]
 8009308:	f107 0108 	add.w	r1, r7, #8
 800930c:	4610      	mov	r0, r2
 800930e:	4798      	blx	r3
 8009310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009312:	e091      	b.n	8009438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009314:	6839      	ldr	r1, [r7, #0]
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fab2 	bl	8009880 <USBD_CtlError>
            err++;
 800931c:	7afb      	ldrb	r3, [r7, #11]
 800931e:	3301      	adds	r3, #1
 8009320:	72fb      	strb	r3, [r7, #11]
          break;
 8009322:	e089      	b.n	8009438 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00b      	beq.n	8009348 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	7c12      	ldrb	r2, [r2, #16]
 800933c:	f107 0108 	add.w	r1, r7, #8
 8009340:	4610      	mov	r0, r2
 8009342:	4798      	blx	r3
 8009344:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009346:	e077      	b.n	8009438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fa98 	bl	8009880 <USBD_CtlError>
            err++;
 8009350:	7afb      	ldrb	r3, [r7, #11]
 8009352:	3301      	adds	r3, #1
 8009354:	72fb      	strb	r3, [r7, #11]
          break;
 8009356:	e06f      	b.n	8009438 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00b      	beq.n	800937c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	7c12      	ldrb	r2, [r2, #16]
 8009370:	f107 0108 	add.w	r1, r7, #8
 8009374:	4610      	mov	r0, r2
 8009376:	4798      	blx	r3
 8009378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800937a:	e05d      	b.n	8009438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fa7e 	bl	8009880 <USBD_CtlError>
            err++;
 8009384:	7afb      	ldrb	r3, [r7, #11]
 8009386:	3301      	adds	r3, #1
 8009388:	72fb      	strb	r3, [r7, #11]
          break;
 800938a:	e055      	b.n	8009438 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00b      	beq.n	80093b0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	7c12      	ldrb	r2, [r2, #16]
 80093a4:	f107 0108 	add.w	r1, r7, #8
 80093a8:	4610      	mov	r0, r2
 80093aa:	4798      	blx	r3
 80093ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ae:	e043      	b.n	8009438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093b0:	6839      	ldr	r1, [r7, #0]
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fa64 	bl	8009880 <USBD_CtlError>
            err++;
 80093b8:	7afb      	ldrb	r3, [r7, #11]
 80093ba:	3301      	adds	r3, #1
 80093bc:	72fb      	strb	r3, [r7, #11]
          break;
 80093be:	e03b      	b.n	8009438 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00b      	beq.n	80093e4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	7c12      	ldrb	r2, [r2, #16]
 80093d8:	f107 0108 	add.w	r1, r7, #8
 80093dc:	4610      	mov	r0, r2
 80093de:	4798      	blx	r3
 80093e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093e2:	e029      	b.n	8009438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093e4:	6839      	ldr	r1, [r7, #0]
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fa4a 	bl	8009880 <USBD_CtlError>
            err++;
 80093ec:	7afb      	ldrb	r3, [r7, #11]
 80093ee:	3301      	adds	r3, #1
 80093f0:	72fb      	strb	r3, [r7, #11]
          break;
 80093f2:	e021      	b.n	8009438 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00b      	beq.n	8009418 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	7c12      	ldrb	r2, [r2, #16]
 800940c:	f107 0108 	add.w	r1, r7, #8
 8009410:	4610      	mov	r0, r2
 8009412:	4798      	blx	r3
 8009414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009416:	e00f      	b.n	8009438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fa30 	bl	8009880 <USBD_CtlError>
            err++;
 8009420:	7afb      	ldrb	r3, [r7, #11]
 8009422:	3301      	adds	r3, #1
 8009424:	72fb      	strb	r3, [r7, #11]
          break;
 8009426:	e007      	b.n	8009438 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009428:	6839      	ldr	r1, [r7, #0]
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fa28 	bl	8009880 <USBD_CtlError>
          err++;
 8009430:	7afb      	ldrb	r3, [r7, #11]
 8009432:	3301      	adds	r3, #1
 8009434:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009436:	bf00      	nop
      }
      break;
 8009438:	e037      	b.n	80094aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	7c1b      	ldrb	r3, [r3, #16]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d109      	bne.n	8009456 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800944a:	f107 0208 	add.w	r2, r7, #8
 800944e:	4610      	mov	r0, r2
 8009450:	4798      	blx	r3
 8009452:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009454:	e029      	b.n	80094aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009456:	6839      	ldr	r1, [r7, #0]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fa11 	bl	8009880 <USBD_CtlError>
        err++;
 800945e:	7afb      	ldrb	r3, [r7, #11]
 8009460:	3301      	adds	r3, #1
 8009462:	72fb      	strb	r3, [r7, #11]
      break;
 8009464:	e021      	b.n	80094aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	7c1b      	ldrb	r3, [r3, #16]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10d      	bne.n	800948a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009476:	f107 0208 	add.w	r2, r7, #8
 800947a:	4610      	mov	r0, r2
 800947c:	4798      	blx	r3
 800947e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	3301      	adds	r3, #1
 8009484:	2207      	movs	r2, #7
 8009486:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009488:	e00f      	b.n	80094aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800948a:	6839      	ldr	r1, [r7, #0]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 f9f7 	bl	8009880 <USBD_CtlError>
        err++;
 8009492:	7afb      	ldrb	r3, [r7, #11]
 8009494:	3301      	adds	r3, #1
 8009496:	72fb      	strb	r3, [r7, #11]
      break;
 8009498:	e007      	b.n	80094aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800949a:	6839      	ldr	r1, [r7, #0]
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 f9ef 	bl	8009880 <USBD_CtlError>
      err++;
 80094a2:	7afb      	ldrb	r3, [r7, #11]
 80094a4:	3301      	adds	r3, #1
 80094a6:	72fb      	strb	r3, [r7, #11]
      break;
 80094a8:	bf00      	nop
  }

  if (err != 0U)
 80094aa:	7afb      	ldrb	r3, [r7, #11]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d11e      	bne.n	80094ee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	88db      	ldrh	r3, [r3, #6]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d016      	beq.n	80094e6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80094b8:	893b      	ldrh	r3, [r7, #8]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00e      	beq.n	80094dc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	88da      	ldrh	r2, [r3, #6]
 80094c2:	893b      	ldrh	r3, [r7, #8]
 80094c4:	4293      	cmp	r3, r2
 80094c6:	bf28      	it	cs
 80094c8:	4613      	movcs	r3, r2
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80094ce:	893b      	ldrh	r3, [r7, #8]
 80094d0:	461a      	mov	r2, r3
 80094d2:	68f9      	ldr	r1, [r7, #12]
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fa44 	bl	8009962 <USBD_CtlSendData>
 80094da:	e009      	b.n	80094f0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f9ce 	bl	8009880 <USBD_CtlError>
 80094e4:	e004      	b.n	80094f0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fa95 	bl	8009a16 <USBD_CtlSendStatus>
 80094ec:	e000      	b.n	80094f0 <USBD_GetDescriptor+0x2cc>
    return;
 80094ee:	bf00      	nop
  }
}
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop

080094f8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	889b      	ldrh	r3, [r3, #4]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d131      	bne.n	800956e <USBD_SetAddress+0x76>
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	88db      	ldrh	r3, [r3, #6]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d12d      	bne.n	800956e <USBD_SetAddress+0x76>
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	885b      	ldrh	r3, [r3, #2]
 8009516:	2b7f      	cmp	r3, #127	; 0x7f
 8009518:	d829      	bhi.n	800956e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	885b      	ldrh	r3, [r3, #2]
 800951e:	b2db      	uxtb	r3, r3
 8009520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009524:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800952c:	b2db      	uxtb	r3, r3
 800952e:	2b03      	cmp	r3, #3
 8009530:	d104      	bne.n	800953c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f9a3 	bl	8009880 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800953a:	e01d      	b.n	8009578 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	7bfa      	ldrb	r2, [r7, #15]
 8009540:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009544:	7bfb      	ldrb	r3, [r7, #15]
 8009546:	4619      	mov	r1, r3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 ff89 	bl	800a460 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 fa61 	bl	8009a16 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009554:	7bfb      	ldrb	r3, [r7, #15]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d004      	beq.n	8009564 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2202      	movs	r2, #2
 800955e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009562:	e009      	b.n	8009578 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800956c:	e004      	b.n	8009578 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800956e:	6839      	ldr	r1, [r7, #0]
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 f985 	bl	8009880 <USBD_CtlError>
  }
}
 8009576:	bf00      	nop
 8009578:	bf00      	nop
 800957a:	3710      	adds	r7, #16
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800958a:	2300      	movs	r3, #0
 800958c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	885b      	ldrh	r3, [r3, #2]
 8009592:	b2da      	uxtb	r2, r3
 8009594:	4b4c      	ldr	r3, [pc, #304]	; (80096c8 <USBD_SetConfig+0x148>)
 8009596:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009598:	4b4b      	ldr	r3, [pc, #300]	; (80096c8 <USBD_SetConfig+0x148>)
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d905      	bls.n	80095ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80095a0:	6839      	ldr	r1, [r7, #0]
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f96c 	bl	8009880 <USBD_CtlError>
    return USBD_FAIL;
 80095a8:	2303      	movs	r3, #3
 80095aa:	e088      	b.n	80096be <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	2b02      	cmp	r3, #2
 80095b6:	d002      	beq.n	80095be <USBD_SetConfig+0x3e>
 80095b8:	2b03      	cmp	r3, #3
 80095ba:	d025      	beq.n	8009608 <USBD_SetConfig+0x88>
 80095bc:	e071      	b.n	80096a2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80095be:	4b42      	ldr	r3, [pc, #264]	; (80096c8 <USBD_SetConfig+0x148>)
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d01c      	beq.n	8009600 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80095c6:	4b40      	ldr	r3, [pc, #256]	; (80096c8 <USBD_SetConfig+0x148>)
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	461a      	mov	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80095d0:	4b3d      	ldr	r3, [pc, #244]	; (80096c8 <USBD_SetConfig+0x148>)
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	4619      	mov	r1, r3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f7ff f948 	bl	800886c <USBD_SetClassConfig>
 80095dc:	4603      	mov	r3, r0
 80095de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80095e0:	7bfb      	ldrb	r3, [r7, #15]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d004      	beq.n	80095f0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80095e6:	6839      	ldr	r1, [r7, #0]
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 f949 	bl	8009880 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095ee:	e065      	b.n	80096bc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 fa10 	bl	8009a16 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2203      	movs	r2, #3
 80095fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80095fe:	e05d      	b.n	80096bc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 fa08 	bl	8009a16 <USBD_CtlSendStatus>
      break;
 8009606:	e059      	b.n	80096bc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009608:	4b2f      	ldr	r3, [pc, #188]	; (80096c8 <USBD_SetConfig+0x148>)
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d112      	bne.n	8009636 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2202      	movs	r2, #2
 8009614:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009618:	4b2b      	ldr	r3, [pc, #172]	; (80096c8 <USBD_SetConfig+0x148>)
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	461a      	mov	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009622:	4b29      	ldr	r3, [pc, #164]	; (80096c8 <USBD_SetConfig+0x148>)
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f7ff f93b 	bl	80088a4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 f9f1 	bl	8009a16 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009634:	e042      	b.n	80096bc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009636:	4b24      	ldr	r3, [pc, #144]	; (80096c8 <USBD_SetConfig+0x148>)
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	461a      	mov	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	429a      	cmp	r2, r3
 8009642:	d02a      	beq.n	800969a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	b2db      	uxtb	r3, r3
 800964a:	4619      	mov	r1, r3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7ff f929 	bl	80088a4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009652:	4b1d      	ldr	r3, [pc, #116]	; (80096c8 <USBD_SetConfig+0x148>)
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	461a      	mov	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800965c:	4b1a      	ldr	r3, [pc, #104]	; (80096c8 <USBD_SetConfig+0x148>)
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	4619      	mov	r1, r3
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f7ff f902 	bl	800886c <USBD_SetClassConfig>
 8009668:	4603      	mov	r3, r0
 800966a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800966c:	7bfb      	ldrb	r3, [r7, #15]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00f      	beq.n	8009692 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f903 	bl	8009880 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	b2db      	uxtb	r3, r3
 8009680:	4619      	mov	r1, r3
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f7ff f90e 	bl	80088a4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2202      	movs	r2, #2
 800968c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009690:	e014      	b.n	80096bc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f9bf 	bl	8009a16 <USBD_CtlSendStatus>
      break;
 8009698:	e010      	b.n	80096bc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f9bb 	bl	8009a16 <USBD_CtlSendStatus>
      break;
 80096a0:	e00c      	b.n	80096bc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f8eb 	bl	8009880 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80096aa:	4b07      	ldr	r3, [pc, #28]	; (80096c8 <USBD_SetConfig+0x148>)
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	4619      	mov	r1, r3
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f7ff f8f7 	bl	80088a4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80096b6:	2303      	movs	r3, #3
 80096b8:	73fb      	strb	r3, [r7, #15]
      break;
 80096ba:	bf00      	nop
  }

  return ret;
 80096bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	200001a8 	.word	0x200001a8

080096cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	88db      	ldrh	r3, [r3, #6]
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d004      	beq.n	80096e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80096de:	6839      	ldr	r1, [r7, #0]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 f8cd 	bl	8009880 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80096e6:	e023      	b.n	8009730 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	dc02      	bgt.n	80096fa <USBD_GetConfig+0x2e>
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	dc03      	bgt.n	8009700 <USBD_GetConfig+0x34>
 80096f8:	e015      	b.n	8009726 <USBD_GetConfig+0x5a>
 80096fa:	2b03      	cmp	r3, #3
 80096fc:	d00b      	beq.n	8009716 <USBD_GetConfig+0x4a>
 80096fe:	e012      	b.n	8009726 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	3308      	adds	r3, #8
 800970a:	2201      	movs	r2, #1
 800970c:	4619      	mov	r1, r3
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 f927 	bl	8009962 <USBD_CtlSendData>
        break;
 8009714:	e00c      	b.n	8009730 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	3304      	adds	r3, #4
 800971a:	2201      	movs	r2, #1
 800971c:	4619      	mov	r1, r3
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f91f 	bl	8009962 <USBD_CtlSendData>
        break;
 8009724:	e004      	b.n	8009730 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009726:	6839      	ldr	r1, [r7, #0]
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f8a9 	bl	8009880 <USBD_CtlError>
        break;
 800972e:	bf00      	nop
}
 8009730:	bf00      	nop
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009748:	b2db      	uxtb	r3, r3
 800974a:	3b01      	subs	r3, #1
 800974c:	2b02      	cmp	r3, #2
 800974e:	d81e      	bhi.n	800978e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	88db      	ldrh	r3, [r3, #6]
 8009754:	2b02      	cmp	r3, #2
 8009756:	d004      	beq.n	8009762 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f890 	bl	8009880 <USBD_CtlError>
        break;
 8009760:	e01a      	b.n	8009798 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2201      	movs	r2, #1
 8009766:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800976e:	2b00      	cmp	r3, #0
 8009770:	d005      	beq.n	800977e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	f043 0202 	orr.w	r2, r3, #2
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	330c      	adds	r3, #12
 8009782:	2202      	movs	r2, #2
 8009784:	4619      	mov	r1, r3
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f8eb 	bl	8009962 <USBD_CtlSendData>
      break;
 800978c:	e004      	b.n	8009798 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 f875 	bl	8009880 <USBD_CtlError>
      break;
 8009796:	bf00      	nop
  }
}
 8009798:	bf00      	nop
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	885b      	ldrh	r3, [r3, #2]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d106      	bne.n	80097c0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f92b 	bl	8009a16 <USBD_CtlSendStatus>
  }
}
 80097c0:	bf00      	nop
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	3b01      	subs	r3, #1
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d80b      	bhi.n	80097f8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	885b      	ldrh	r3, [r3, #2]
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d10c      	bne.n	8009802 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f910 	bl	8009a16 <USBD_CtlSendStatus>
      }
      break;
 80097f6:	e004      	b.n	8009802 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80097f8:	6839      	ldr	r1, [r7, #0]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f840 	bl	8009880 <USBD_CtlError>
      break;
 8009800:	e000      	b.n	8009804 <USBD_ClrFeature+0x3c>
      break;
 8009802:	bf00      	nop
  }
}
 8009804:	bf00      	nop
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	781a      	ldrb	r2, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	3301      	adds	r3, #1
 8009826:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	781a      	ldrb	r2, [r3, #0]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	3301      	adds	r3, #1
 8009834:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f7ff fabb 	bl	8008db2 <SWAPBYTE>
 800983c:	4603      	mov	r3, r0
 800983e:	461a      	mov	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	3301      	adds	r3, #1
 8009848:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	3301      	adds	r3, #1
 800984e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f7ff faae 	bl	8008db2 <SWAPBYTE>
 8009856:	4603      	mov	r3, r0
 8009858:	461a      	mov	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	3301      	adds	r3, #1
 8009862:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	3301      	adds	r3, #1
 8009868:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f7ff faa1 	bl	8008db2 <SWAPBYTE>
 8009870:	4603      	mov	r3, r0
 8009872:	461a      	mov	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	80da      	strh	r2, [r3, #6]
}
 8009878:	bf00      	nop
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800988a:	2180      	movs	r1, #128	; 0x80
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 fd7d 	bl	800a38c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009892:	2100      	movs	r1, #0
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fd79 	bl	800a38c <USBD_LL_StallEP>
}
 800989a:	bf00      	nop
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b086      	sub	sp, #24
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	60f8      	str	r0, [r7, #12]
 80098aa:	60b9      	str	r1, [r7, #8]
 80098ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80098ae:	2300      	movs	r3, #0
 80098b0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d036      	beq.n	8009926 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80098bc:	6938      	ldr	r0, [r7, #16]
 80098be:	f000 f836 	bl	800992e <USBD_GetLen>
 80098c2:	4603      	mov	r3, r0
 80098c4:	3301      	adds	r3, #1
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	005b      	lsls	r3, r3, #1
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80098d0:	7dfb      	ldrb	r3, [r7, #23]
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	4413      	add	r3, r2
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	7812      	ldrb	r2, [r2, #0]
 80098da:	701a      	strb	r2, [r3, #0]
  idx++;
 80098dc:	7dfb      	ldrb	r3, [r7, #23]
 80098de:	3301      	adds	r3, #1
 80098e0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80098e2:	7dfb      	ldrb	r3, [r7, #23]
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	4413      	add	r3, r2
 80098e8:	2203      	movs	r2, #3
 80098ea:	701a      	strb	r2, [r3, #0]
  idx++;
 80098ec:	7dfb      	ldrb	r3, [r7, #23]
 80098ee:	3301      	adds	r3, #1
 80098f0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80098f2:	e013      	b.n	800991c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80098f4:	7dfb      	ldrb	r3, [r7, #23]
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	4413      	add	r3, r2
 80098fa:	693a      	ldr	r2, [r7, #16]
 80098fc:	7812      	ldrb	r2, [r2, #0]
 80098fe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	3301      	adds	r3, #1
 8009904:	613b      	str	r3, [r7, #16]
    idx++;
 8009906:	7dfb      	ldrb	r3, [r7, #23]
 8009908:	3301      	adds	r3, #1
 800990a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800990c:	7dfb      	ldrb	r3, [r7, #23]
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	4413      	add	r3, r2
 8009912:	2200      	movs	r2, #0
 8009914:	701a      	strb	r2, [r3, #0]
    idx++;
 8009916:	7dfb      	ldrb	r3, [r7, #23]
 8009918:	3301      	adds	r3, #1
 800991a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1e7      	bne.n	80098f4 <USBD_GetString+0x52>
 8009924:	e000      	b.n	8009928 <USBD_GetString+0x86>
    return;
 8009926:	bf00      	nop
  }
}
 8009928:	3718      	adds	r7, #24
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800992e:	b480      	push	{r7}
 8009930:	b085      	sub	sp, #20
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009936:	2300      	movs	r3, #0
 8009938:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800993e:	e005      	b.n	800994c <USBD_GetLen+0x1e>
  {
    len++;
 8009940:	7bfb      	ldrb	r3, [r7, #15]
 8009942:	3301      	adds	r3, #1
 8009944:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	3301      	adds	r3, #1
 800994a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1f5      	bne.n	8009940 <USBD_GetLen+0x12>
  }

  return len;
 8009954:	7bfb      	ldrb	r3, [r7, #15]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3714      	adds	r7, #20
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr

08009962 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b084      	sub	sp, #16
 8009966:	af00      	add	r7, sp, #0
 8009968:	60f8      	str	r0, [r7, #12]
 800996a:	60b9      	str	r1, [r7, #8]
 800996c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2202      	movs	r2, #2
 8009972:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	2100      	movs	r1, #0
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f000 fd88 	bl	800a49e <USBD_LL_Transmit>

  return USBD_OK;
 800998e:	2300      	movs	r3, #0
}
 8009990:	4618      	mov	r0, r3
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	68ba      	ldr	r2, [r7, #8]
 80099a8:	2100      	movs	r1, #0
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f000 fd77 	bl	800a49e <USBD_LL_Transmit>

  return USBD_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b084      	sub	sp, #16
 80099be:	af00      	add	r7, sp, #0
 80099c0:	60f8      	str	r0, [r7, #12]
 80099c2:	60b9      	str	r1, [r7, #8]
 80099c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2203      	movs	r2, #3
 80099ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	68ba      	ldr	r2, [r7, #8]
 80099e2:	2100      	movs	r1, #0
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f000 fd7b 	bl	800a4e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	68ba      	ldr	r2, [r7, #8]
 8009a04:	2100      	movs	r1, #0
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f000 fd6a 	bl	800a4e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b082      	sub	sp, #8
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2204      	movs	r2, #4
 8009a22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a26:	2300      	movs	r3, #0
 8009a28:	2200      	movs	r2, #0
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fd36 	bl	800a49e <USBD_LL_Transmit>

  return USBD_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2205      	movs	r2, #5
 8009a48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	2200      	movs	r2, #0
 8009a50:	2100      	movs	r1, #0
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fd44 	bl	800a4e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
	...

08009a64 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b087      	sub	sp, #28
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009a72:	2301      	movs	r3, #1
 8009a74:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009a76:	2300      	movs	r3, #0
 8009a78:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009a7a:	4b1f      	ldr	r3, [pc, #124]	; (8009af8 <FATFS_LinkDriverEx+0x94>)
 8009a7c:	7a5b      	ldrb	r3, [r3, #9]
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d131      	bne.n	8009ae8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009a84:	4b1c      	ldr	r3, [pc, #112]	; (8009af8 <FATFS_LinkDriverEx+0x94>)
 8009a86:	7a5b      	ldrb	r3, [r3, #9]
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	4b1a      	ldr	r3, [pc, #104]	; (8009af8 <FATFS_LinkDriverEx+0x94>)
 8009a8e:	2100      	movs	r1, #0
 8009a90:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009a92:	4b19      	ldr	r3, [pc, #100]	; (8009af8 <FATFS_LinkDriverEx+0x94>)
 8009a94:	7a5b      	ldrb	r3, [r3, #9]
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	4a17      	ldr	r2, [pc, #92]	; (8009af8 <FATFS_LinkDriverEx+0x94>)
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4413      	add	r3, r2
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009aa2:	4b15      	ldr	r3, [pc, #84]	; (8009af8 <FATFS_LinkDriverEx+0x94>)
 8009aa4:	7a5b      	ldrb	r3, [r3, #9]
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	4b13      	ldr	r3, [pc, #76]	; (8009af8 <FATFS_LinkDriverEx+0x94>)
 8009aac:	4413      	add	r3, r2
 8009aae:	79fa      	ldrb	r2, [r7, #7]
 8009ab0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009ab2:	4b11      	ldr	r3, [pc, #68]	; (8009af8 <FATFS_LinkDriverEx+0x94>)
 8009ab4:	7a5b      	ldrb	r3, [r3, #9]
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	1c5a      	adds	r2, r3, #1
 8009aba:	b2d1      	uxtb	r1, r2
 8009abc:	4a0e      	ldr	r2, [pc, #56]	; (8009af8 <FATFS_LinkDriverEx+0x94>)
 8009abe:	7251      	strb	r1, [r2, #9]
 8009ac0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009ac2:	7dbb      	ldrb	r3, [r7, #22]
 8009ac4:	3330      	adds	r3, #48	; 0x30
 8009ac6:	b2da      	uxtb	r2, r3
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	223a      	movs	r2, #58	; 0x3a
 8009ad2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	3302      	adds	r3, #2
 8009ad8:	222f      	movs	r2, #47	; 0x2f
 8009ada:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	3303      	adds	r3, #3
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	371c      	adds	r7, #28
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	200001ac 	.word	0x200001ac

08009afc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009b06:	2200      	movs	r2, #0
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7ff ffaa 	bl	8009a64 <FATFS_LinkDriverEx>
 8009b10:	4603      	mov	r3, r0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
	...

08009b1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009b20:	2200      	movs	r2, #0
 8009b22:	4912      	ldr	r1, [pc, #72]	; (8009b6c <MX_USB_DEVICE_Init+0x50>)
 8009b24:	4812      	ldr	r0, [pc, #72]	; (8009b70 <MX_USB_DEVICE_Init+0x54>)
 8009b26:	f7fe fe33 	bl	8008790 <USBD_Init>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d001      	beq.n	8009b34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b30:	f7f6 fe66 	bl	8000800 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009b34:	490f      	ldr	r1, [pc, #60]	; (8009b74 <MX_USB_DEVICE_Init+0x58>)
 8009b36:	480e      	ldr	r0, [pc, #56]	; (8009b70 <MX_USB_DEVICE_Init+0x54>)
 8009b38:	f7fe fe5a 	bl	80087f0 <USBD_RegisterClass>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b42:	f7f6 fe5d 	bl	8000800 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009b46:	490c      	ldr	r1, [pc, #48]	; (8009b78 <MX_USB_DEVICE_Init+0x5c>)
 8009b48:	4809      	ldr	r0, [pc, #36]	; (8009b70 <MX_USB_DEVICE_Init+0x54>)
 8009b4a:	f7fe fd7b 	bl	8008644 <USBD_CDC_RegisterInterface>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d001      	beq.n	8009b58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b54:	f7f6 fe54 	bl	8000800 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b58:	4805      	ldr	r0, [pc, #20]	; (8009b70 <MX_USB_DEVICE_Init+0x54>)
 8009b5a:	f7fe fe70 	bl	800883e <USBD_Start>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b64:	f7f6 fe4c 	bl	8000800 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b68:	bf00      	nop
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	20000130 	.word	0x20000130
 8009b70:	20000acc 	.word	0x20000acc
 8009b74:	20000018 	.word	0x20000018
 8009b78:	2000011c 	.word	0x2000011c

08009b7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009b80:	2200      	movs	r2, #0
 8009b82:	4905      	ldr	r1, [pc, #20]	; (8009b98 <CDC_Init_FS+0x1c>)
 8009b84:	4805      	ldr	r0, [pc, #20]	; (8009b9c <CDC_Init_FS+0x20>)
 8009b86:	f7fe fd72 	bl	800866e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009b8a:	4905      	ldr	r1, [pc, #20]	; (8009ba0 <CDC_Init_FS+0x24>)
 8009b8c:	4803      	ldr	r0, [pc, #12]	; (8009b9c <CDC_Init_FS+0x20>)
 8009b8e:	f7fe fd8c 	bl	80086aa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009b92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	2000159c 	.word	0x2000159c
 8009b9c:	20000acc 	.word	0x20000acc
 8009ba0:	20000d9c 	.word	0x20000d9c

08009ba4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009ba8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	4603      	mov	r3, r0
 8009bbc:	6039      	str	r1, [r7, #0]
 8009bbe:	71fb      	strb	r3, [r7, #7]
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 8009bc4:	4a49      	ldr	r2, [pc, #292]	; (8009cec <CDC_Control_FS+0x138>)
 8009bc6:	f107 0308 	add.w	r3, r7, #8
 8009bca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009bce:	6018      	str	r0, [r3, #0]
 8009bd0:	3304      	adds	r3, #4
 8009bd2:	8019      	strh	r1, [r3, #0]
 8009bd4:	3302      	adds	r3, #2
 8009bd6:	0c0a      	lsrs	r2, r1, #16
 8009bd8:	701a      	strb	r2, [r3, #0]
  switch(cmd)
 8009bda:	79fb      	ldrb	r3, [r7, #7]
 8009bdc:	2b23      	cmp	r3, #35	; 0x23
 8009bde:	d87d      	bhi.n	8009cdc <CDC_Control_FS+0x128>
 8009be0:	a201      	add	r2, pc, #4	; (adr r2, 8009be8 <CDC_Control_FS+0x34>)
 8009be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be6:	bf00      	nop
 8009be8:	08009cdd 	.word	0x08009cdd
 8009bec:	08009cdd 	.word	0x08009cdd
 8009bf0:	08009cdd 	.word	0x08009cdd
 8009bf4:	08009cdd 	.word	0x08009cdd
 8009bf8:	08009cdd 	.word	0x08009cdd
 8009bfc:	08009cdd 	.word	0x08009cdd
 8009c00:	08009cdd 	.word	0x08009cdd
 8009c04:	08009cdd 	.word	0x08009cdd
 8009c08:	08009cdd 	.word	0x08009cdd
 8009c0c:	08009cdd 	.word	0x08009cdd
 8009c10:	08009cdd 	.word	0x08009cdd
 8009c14:	08009cdd 	.word	0x08009cdd
 8009c18:	08009cdd 	.word	0x08009cdd
 8009c1c:	08009cdd 	.word	0x08009cdd
 8009c20:	08009cdd 	.word	0x08009cdd
 8009c24:	08009cdd 	.word	0x08009cdd
 8009c28:	08009cdd 	.word	0x08009cdd
 8009c2c:	08009cdd 	.word	0x08009cdd
 8009c30:	08009cdd 	.word	0x08009cdd
 8009c34:	08009cdd 	.word	0x08009cdd
 8009c38:	08009cdd 	.word	0x08009cdd
 8009c3c:	08009cdd 	.word	0x08009cdd
 8009c40:	08009cdd 	.word	0x08009cdd
 8009c44:	08009cdd 	.word	0x08009cdd
 8009c48:	08009cdd 	.word	0x08009cdd
 8009c4c:	08009cdd 	.word	0x08009cdd
 8009c50:	08009cdd 	.word	0x08009cdd
 8009c54:	08009cdd 	.word	0x08009cdd
 8009c58:	08009cdd 	.word	0x08009cdd
 8009c5c:	08009cdd 	.word	0x08009cdd
 8009c60:	08009cdd 	.word	0x08009cdd
 8009c64:	08009cdd 	.word	0x08009cdd
 8009c68:	08009c79 	.word	0x08009c79
 8009c6c:	08009ca5 	.word	0x08009ca5
 8009c70:	08009cdd 	.word	0x08009cdd
 8009c74:	08009cdd 	.word	0x08009cdd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
       tempbuf[0] = pbuf[0];
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	723b      	strb	r3, [r7, #8]
       tempbuf[1] = pbuf[1];
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	785b      	ldrb	r3, [r3, #1]
 8009c82:	727b      	strb	r3, [r7, #9]
       tempbuf[2] = pbuf[2];
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	789b      	ldrb	r3, [r3, #2]
 8009c88:	72bb      	strb	r3, [r7, #10]
       tempbuf[3] = pbuf[3];
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	78db      	ldrb	r3, [r3, #3]
 8009c8e:	72fb      	strb	r3, [r7, #11]
       tempbuf[4] = pbuf[4];
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	791b      	ldrb	r3, [r3, #4]
 8009c94:	733b      	strb	r3, [r7, #12]
       tempbuf[5] = pbuf[5];
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	795b      	ldrb	r3, [r3, #5]
 8009c9a:	737b      	strb	r3, [r7, #13]
       tempbuf[6] = pbuf[6];
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	799b      	ldrb	r3, [r3, #6]
 8009ca0:	73bb      	strb	r3, [r7, #14]
       break;
 8009ca2:	e01c      	b.n	8009cde <CDC_Control_FS+0x12a>

     case CDC_GET_LINE_CODING:
       pbuf[0] = tempbuf[0];
 8009ca4:	7a3a      	ldrb	r2, [r7, #8]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	701a      	strb	r2, [r3, #0]
       pbuf[1] = tempbuf[1];
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	3301      	adds	r3, #1
 8009cae:	7a7a      	ldrb	r2, [r7, #9]
 8009cb0:	701a      	strb	r2, [r3, #0]
       pbuf[2] = tempbuf[2];
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	3302      	adds	r3, #2
 8009cb6:	7aba      	ldrb	r2, [r7, #10]
 8009cb8:	701a      	strb	r2, [r3, #0]
       pbuf[3] = tempbuf[3];
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	3303      	adds	r3, #3
 8009cbe:	7afa      	ldrb	r2, [r7, #11]
 8009cc0:	701a      	strb	r2, [r3, #0]
       pbuf[4] = tempbuf[4];
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	3304      	adds	r3, #4
 8009cc6:	7b3a      	ldrb	r2, [r7, #12]
 8009cc8:	701a      	strb	r2, [r3, #0]
       pbuf[5] = tempbuf[5];
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	3305      	adds	r3, #5
 8009cce:	7b7a      	ldrb	r2, [r7, #13]
 8009cd0:	701a      	strb	r2, [r3, #0]
       pbuf[6] = tempbuf[6];
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	3306      	adds	r3, #6
 8009cd6:	7bba      	ldrb	r2, [r7, #14]
 8009cd8:	701a      	strb	r2, [r3, #0]
       break;
 8009cda:	e000      	b.n	8009cde <CDC_Control_FS+0x12a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009cdc:	bf00      	nop
  }

  return (USBD_OK);
 8009cde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3714      	adds	r7, #20
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	0800a640 	.word	0x0800a640

08009cf0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009cfa:	6879      	ldr	r1, [r7, #4]
 8009cfc:	4805      	ldr	r0, [pc, #20]	; (8009d14 <CDC_Receive_FS+0x24>)
 8009cfe:	f7fe fcd4 	bl	80086aa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009d02:	4804      	ldr	r0, [pc, #16]	; (8009d14 <CDC_Receive_FS+0x24>)
 8009d04:	f7fe fd1a 	bl	800873c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009d08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	20000acc 	.word	0x20000acc

08009d18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	460b      	mov	r3, r1
 8009d22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009d24:	2300      	movs	r3, #0
 8009d26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009d28:	4b0d      	ldr	r3, [pc, #52]	; (8009d60 <CDC_Transmit_FS+0x48>)
 8009d2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d2e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d001      	beq.n	8009d3e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e00b      	b.n	8009d56 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009d3e:	887b      	ldrh	r3, [r7, #2]
 8009d40:	461a      	mov	r2, r3
 8009d42:	6879      	ldr	r1, [r7, #4]
 8009d44:	4806      	ldr	r0, [pc, #24]	; (8009d60 <CDC_Transmit_FS+0x48>)
 8009d46:	f7fe fc92 	bl	800866e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009d4a:	4805      	ldr	r0, [pc, #20]	; (8009d60 <CDC_Transmit_FS+0x48>)
 8009d4c:	f7fe fcc6 	bl	80086dc <USBD_CDC_TransmitPacket>
 8009d50:	4603      	mov	r3, r0
 8009d52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	20000acc 	.word	0x20000acc

08009d64 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b087      	sub	sp, #28
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	4613      	mov	r3, r2
 8009d70:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009d72:	2300      	movs	r3, #0
 8009d74:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009d76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	371c      	adds	r7, #28
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
	...

08009d88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	4603      	mov	r3, r0
 8009d90:	6039      	str	r1, [r7, #0]
 8009d92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	2212      	movs	r2, #18
 8009d98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009d9a:	4b03      	ldr	r3, [pc, #12]	; (8009da8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr
 8009da8:	2000014c 	.word	0x2000014c

08009dac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	4603      	mov	r3, r0
 8009db4:	6039      	str	r1, [r7, #0]
 8009db6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	2204      	movs	r2, #4
 8009dbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009dbe:	4b03      	ldr	r3, [pc, #12]	; (8009dcc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr
 8009dcc:	20000160 	.word	0x20000160

08009dd0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	6039      	str	r1, [r7, #0]
 8009dda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ddc:	79fb      	ldrb	r3, [r7, #7]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d105      	bne.n	8009dee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009de2:	683a      	ldr	r2, [r7, #0]
 8009de4:	4907      	ldr	r1, [pc, #28]	; (8009e04 <USBD_FS_ProductStrDescriptor+0x34>)
 8009de6:	4808      	ldr	r0, [pc, #32]	; (8009e08 <USBD_FS_ProductStrDescriptor+0x38>)
 8009de8:	f7ff fd5b 	bl	80098a2 <USBD_GetString>
 8009dec:	e004      	b.n	8009df8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	4904      	ldr	r1, [pc, #16]	; (8009e04 <USBD_FS_ProductStrDescriptor+0x34>)
 8009df2:	4805      	ldr	r0, [pc, #20]	; (8009e08 <USBD_FS_ProductStrDescriptor+0x38>)
 8009df4:	f7ff fd55 	bl	80098a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009df8:	4b02      	ldr	r3, [pc, #8]	; (8009e04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	20001d9c 	.word	0x20001d9c
 8009e08:	0800a648 	.word	0x0800a648

08009e0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	4603      	mov	r3, r0
 8009e14:	6039      	str	r1, [r7, #0]
 8009e16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e18:	683a      	ldr	r2, [r7, #0]
 8009e1a:	4904      	ldr	r1, [pc, #16]	; (8009e2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009e1c:	4804      	ldr	r0, [pc, #16]	; (8009e30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009e1e:	f7ff fd40 	bl	80098a2 <USBD_GetString>
  return USBD_StrDesc;
 8009e22:	4b02      	ldr	r3, [pc, #8]	; (8009e2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	20001d9c 	.word	0x20001d9c
 8009e30:	0800a660 	.word	0x0800a660

08009e34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	6039      	str	r1, [r7, #0]
 8009e3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	221a      	movs	r2, #26
 8009e44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009e46:	f000 f843 	bl	8009ed0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009e4a:	4b02      	ldr	r3, [pc, #8]	; (8009e54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3708      	adds	r7, #8
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	20000164 	.word	0x20000164

08009e58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	4603      	mov	r3, r0
 8009e60:	6039      	str	r1, [r7, #0]
 8009e62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009e64:	79fb      	ldrb	r3, [r7, #7]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d105      	bne.n	8009e76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e6a:	683a      	ldr	r2, [r7, #0]
 8009e6c:	4907      	ldr	r1, [pc, #28]	; (8009e8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e6e:	4808      	ldr	r0, [pc, #32]	; (8009e90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e70:	f7ff fd17 	bl	80098a2 <USBD_GetString>
 8009e74:	e004      	b.n	8009e80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	4904      	ldr	r1, [pc, #16]	; (8009e8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e7a:	4805      	ldr	r0, [pc, #20]	; (8009e90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e7c:	f7ff fd11 	bl	80098a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e80:	4b02      	ldr	r3, [pc, #8]	; (8009e8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	20001d9c 	.word	0x20001d9c
 8009e90:	0800a674 	.word	0x0800a674

08009e94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	6039      	str	r1, [r7, #0]
 8009e9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ea0:	79fb      	ldrb	r3, [r7, #7]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d105      	bne.n	8009eb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	4907      	ldr	r1, [pc, #28]	; (8009ec8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009eaa:	4808      	ldr	r0, [pc, #32]	; (8009ecc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009eac:	f7ff fcf9 	bl	80098a2 <USBD_GetString>
 8009eb0:	e004      	b.n	8009ebc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	4904      	ldr	r1, [pc, #16]	; (8009ec8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009eb6:	4805      	ldr	r0, [pc, #20]	; (8009ecc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009eb8:	f7ff fcf3 	bl	80098a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ebc:	4b02      	ldr	r3, [pc, #8]	; (8009ec8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	20001d9c 	.word	0x20001d9c
 8009ecc:	0800a680 	.word	0x0800a680

08009ed0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009ed6:	4b0f      	ldr	r3, [pc, #60]	; (8009f14 <Get_SerialNum+0x44>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009edc:	4b0e      	ldr	r3, [pc, #56]	; (8009f18 <Get_SerialNum+0x48>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009ee2:	4b0e      	ldr	r3, [pc, #56]	; (8009f1c <Get_SerialNum+0x4c>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4413      	add	r3, r2
 8009eee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d009      	beq.n	8009f0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ef6:	2208      	movs	r2, #8
 8009ef8:	4909      	ldr	r1, [pc, #36]	; (8009f20 <Get_SerialNum+0x50>)
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f000 f814 	bl	8009f28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009f00:	2204      	movs	r2, #4
 8009f02:	4908      	ldr	r1, [pc, #32]	; (8009f24 <Get_SerialNum+0x54>)
 8009f04:	68b8      	ldr	r0, [r7, #8]
 8009f06:	f000 f80f 	bl	8009f28 <IntToUnicode>
  }
}
 8009f0a:	bf00      	nop
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	1fff7a10 	.word	0x1fff7a10
 8009f18:	1fff7a14 	.word	0x1fff7a14
 8009f1c:	1fff7a18 	.word	0x1fff7a18
 8009f20:	20000166 	.word	0x20000166
 8009f24:	20000176 	.word	0x20000176

08009f28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b087      	sub	sp, #28
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	4613      	mov	r3, r2
 8009f34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009f36:	2300      	movs	r3, #0
 8009f38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	75fb      	strb	r3, [r7, #23]
 8009f3e:	e027      	b.n	8009f90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	0f1b      	lsrs	r3, r3, #28
 8009f44:	2b09      	cmp	r3, #9
 8009f46:	d80b      	bhi.n	8009f60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	0f1b      	lsrs	r3, r3, #28
 8009f4c:	b2da      	uxtb	r2, r3
 8009f4e:	7dfb      	ldrb	r3, [r7, #23]
 8009f50:	005b      	lsls	r3, r3, #1
 8009f52:	4619      	mov	r1, r3
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	440b      	add	r3, r1
 8009f58:	3230      	adds	r2, #48	; 0x30
 8009f5a:	b2d2      	uxtb	r2, r2
 8009f5c:	701a      	strb	r2, [r3, #0]
 8009f5e:	e00a      	b.n	8009f76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	0f1b      	lsrs	r3, r3, #28
 8009f64:	b2da      	uxtb	r2, r3
 8009f66:	7dfb      	ldrb	r3, [r7, #23]
 8009f68:	005b      	lsls	r3, r3, #1
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	440b      	add	r3, r1
 8009f70:	3237      	adds	r2, #55	; 0x37
 8009f72:	b2d2      	uxtb	r2, r2
 8009f74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	011b      	lsls	r3, r3, #4
 8009f7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f7c:	7dfb      	ldrb	r3, [r7, #23]
 8009f7e:	005b      	lsls	r3, r3, #1
 8009f80:	3301      	adds	r3, #1
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	4413      	add	r3, r2
 8009f86:	2200      	movs	r2, #0
 8009f88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f8a:	7dfb      	ldrb	r3, [r7, #23]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	75fb      	strb	r3, [r7, #23]
 8009f90:	7dfa      	ldrb	r2, [r7, #23]
 8009f92:	79fb      	ldrb	r3, [r7, #7]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d3d3      	bcc.n	8009f40 <IntToUnicode+0x18>
  }
}
 8009f98:	bf00      	nop
 8009f9a:	bf00      	nop
 8009f9c:	371c      	adds	r7, #28
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
	...

08009fa8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08a      	sub	sp, #40	; 0x28
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fb0:	f107 0314 	add.w	r3, r7, #20
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	601a      	str	r2, [r3, #0]
 8009fb8:	605a      	str	r2, [r3, #4]
 8009fba:	609a      	str	r2, [r3, #8]
 8009fbc:	60da      	str	r2, [r3, #12]
 8009fbe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fc8:	d13a      	bne.n	800a040 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009fca:	2300      	movs	r3, #0
 8009fcc:	613b      	str	r3, [r7, #16]
 8009fce:	4b1e      	ldr	r3, [pc, #120]	; (800a048 <HAL_PCD_MspInit+0xa0>)
 8009fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd2:	4a1d      	ldr	r2, [pc, #116]	; (800a048 <HAL_PCD_MspInit+0xa0>)
 8009fd4:	f043 0301 	orr.w	r3, r3, #1
 8009fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8009fda:	4b1b      	ldr	r3, [pc, #108]	; (800a048 <HAL_PCD_MspInit+0xa0>)
 8009fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fde:	f003 0301 	and.w	r3, r3, #1
 8009fe2:	613b      	str	r3, [r7, #16]
 8009fe4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009fe6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fec:	2302      	movs	r3, #2
 8009fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009ff8:	230a      	movs	r3, #10
 8009ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ffc:	f107 0314 	add.w	r3, r7, #20
 800a000:	4619      	mov	r1, r3
 800a002:	4812      	ldr	r0, [pc, #72]	; (800a04c <HAL_PCD_MspInit+0xa4>)
 800a004:	f7f7 fbc8 	bl	8001798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a008:	4b0f      	ldr	r3, [pc, #60]	; (800a048 <HAL_PCD_MspInit+0xa0>)
 800a00a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a00c:	4a0e      	ldr	r2, [pc, #56]	; (800a048 <HAL_PCD_MspInit+0xa0>)
 800a00e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a012:	6353      	str	r3, [r2, #52]	; 0x34
 800a014:	2300      	movs	r3, #0
 800a016:	60fb      	str	r3, [r7, #12]
 800a018:	4b0b      	ldr	r3, [pc, #44]	; (800a048 <HAL_PCD_MspInit+0xa0>)
 800a01a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a01c:	4a0a      	ldr	r2, [pc, #40]	; (800a048 <HAL_PCD_MspInit+0xa0>)
 800a01e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a022:	6453      	str	r3, [r2, #68]	; 0x44
 800a024:	4b08      	ldr	r3, [pc, #32]	; (800a048 <HAL_PCD_MspInit+0xa0>)
 800a026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a02c:	60fb      	str	r3, [r7, #12]
 800a02e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a030:	2200      	movs	r2, #0
 800a032:	2100      	movs	r1, #0
 800a034:	2043      	movs	r0, #67	; 0x43
 800a036:	f7f6 ff6a 	bl	8000f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a03a:	2043      	movs	r0, #67	; 0x43
 800a03c:	f7f6 ff83 	bl	8000f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a040:	bf00      	nop
 800a042:	3728      	adds	r7, #40	; 0x28
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	40023800 	.word	0x40023800
 800a04c:	40020000 	.word	0x40020000

0800a050 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a064:	4619      	mov	r1, r3
 800a066:	4610      	mov	r0, r2
 800a068:	f7fe fc34 	bl	80088d4 <USBD_LL_SetupStage>
}
 800a06c:	bf00      	nop
 800a06e:	3708      	adds	r7, #8
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	460b      	mov	r3, r1
 800a07e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a086:	78fa      	ldrb	r2, [r7, #3]
 800a088:	6879      	ldr	r1, [r7, #4]
 800a08a:	4613      	mov	r3, r2
 800a08c:	00db      	lsls	r3, r3, #3
 800a08e:	1a9b      	subs	r3, r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	440b      	add	r3, r1
 800a094:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	78fb      	ldrb	r3, [r7, #3]
 800a09c:	4619      	mov	r1, r3
 800a09e:	f7fe fc6e 	bl	800897e <USBD_LL_DataOutStage>
}
 800a0a2:	bf00      	nop
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b082      	sub	sp, #8
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a0bc:	78fa      	ldrb	r2, [r7, #3]
 800a0be:	6879      	ldr	r1, [r7, #4]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	00db      	lsls	r3, r3, #3
 800a0c4:	1a9b      	subs	r3, r3, r2
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	440b      	add	r3, r1
 800a0ca:	3348      	adds	r3, #72	; 0x48
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	78fb      	ldrb	r3, [r7, #3]
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	f7fe fcb7 	bl	8008a44 <USBD_LL_DataInStage>
}
 800a0d6:	bf00      	nop
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b082      	sub	sp, #8
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7fe fdcb 	bl	8008c88 <USBD_LL_SOF>
}
 800a0f2:	bf00      	nop
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b084      	sub	sp, #16
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a102:	2301      	movs	r3, #1
 800a104:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d102      	bne.n	800a114 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a10e:	2300      	movs	r3, #0
 800a110:	73fb      	strb	r3, [r7, #15]
 800a112:	e008      	b.n	800a126 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d102      	bne.n	800a122 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a11c:	2301      	movs	r3, #1
 800a11e:	73fb      	strb	r3, [r7, #15]
 800a120:	e001      	b.n	800a126 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a122:	f7f6 fb6d 	bl	8000800 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a12c:	7bfa      	ldrb	r2, [r7, #15]
 800a12e:	4611      	mov	r1, r2
 800a130:	4618      	mov	r0, r3
 800a132:	f7fe fd6b 	bl	8008c0c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7fe fd17 	bl	8008b70 <USBD_LL_Reset>
}
 800a142:	bf00      	nop
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
	...

0800a14c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7fe fd66 	bl	8008c2c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	6812      	ldr	r2, [r2, #0]
 800a16e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a172:	f043 0301 	orr.w	r3, r3, #1
 800a176:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a1b      	ldr	r3, [r3, #32]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d005      	beq.n	800a18c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a180:	4b04      	ldr	r3, [pc, #16]	; (800a194 <HAL_PCD_SuspendCallback+0x48>)
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	4a03      	ldr	r2, [pc, #12]	; (800a194 <HAL_PCD_SuspendCallback+0x48>)
 800a186:	f043 0306 	orr.w	r3, r3, #6
 800a18a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a18c:	bf00      	nop
 800a18e:	3708      	adds	r7, #8
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	e000ed00 	.word	0xe000ed00

0800a198 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7fe fd56 	bl	8008c58 <USBD_LL_Resume>
}
 800a1ac:	bf00      	nop
 800a1ae:	3708      	adds	r7, #8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	460b      	mov	r3, r1
 800a1be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a1c6:	78fa      	ldrb	r2, [r7, #3]
 800a1c8:	4611      	mov	r1, r2
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7fe fda4 	bl	8008d18 <USBD_LL_IsoOUTIncomplete>
}
 800a1d0:	bf00      	nop
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a1ea:	78fa      	ldrb	r2, [r7, #3]
 800a1ec:	4611      	mov	r1, r2
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fe fd6c 	bl	8008ccc <USBD_LL_IsoINIncomplete>
}
 800a1f4:	bf00      	nop
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7fe fdaa 	bl	8008d64 <USBD_LL_DevConnected>
}
 800a210:	bf00      	nop
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a226:	4618      	mov	r0, r3
 800a228:	f7fe fda7 	bl	8008d7a <USBD_LL_DevDisconnected>
}
 800a22c:	bf00      	nop
 800a22e:	3708      	adds	r7, #8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d13c      	bne.n	800a2be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a244:	4a20      	ldr	r2, [pc, #128]	; (800a2c8 <USBD_LL_Init+0x94>)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4a1e      	ldr	r2, [pc, #120]	; (800a2c8 <USBD_LL_Init+0x94>)
 800a250:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a254:	4b1c      	ldr	r3, [pc, #112]	; (800a2c8 <USBD_LL_Init+0x94>)
 800a256:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a25a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a25c:	4b1a      	ldr	r3, [pc, #104]	; (800a2c8 <USBD_LL_Init+0x94>)
 800a25e:	2204      	movs	r2, #4
 800a260:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a262:	4b19      	ldr	r3, [pc, #100]	; (800a2c8 <USBD_LL_Init+0x94>)
 800a264:	2202      	movs	r2, #2
 800a266:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a268:	4b17      	ldr	r3, [pc, #92]	; (800a2c8 <USBD_LL_Init+0x94>)
 800a26a:	2200      	movs	r2, #0
 800a26c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a26e:	4b16      	ldr	r3, [pc, #88]	; (800a2c8 <USBD_LL_Init+0x94>)
 800a270:	2202      	movs	r2, #2
 800a272:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a274:	4b14      	ldr	r3, [pc, #80]	; (800a2c8 <USBD_LL_Init+0x94>)
 800a276:	2200      	movs	r2, #0
 800a278:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a27a:	4b13      	ldr	r3, [pc, #76]	; (800a2c8 <USBD_LL_Init+0x94>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a280:	4b11      	ldr	r3, [pc, #68]	; (800a2c8 <USBD_LL_Init+0x94>)
 800a282:	2200      	movs	r2, #0
 800a284:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a286:	4b10      	ldr	r3, [pc, #64]	; (800a2c8 <USBD_LL_Init+0x94>)
 800a288:	2200      	movs	r2, #0
 800a28a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a28c:	4b0e      	ldr	r3, [pc, #56]	; (800a2c8 <USBD_LL_Init+0x94>)
 800a28e:	2200      	movs	r2, #0
 800a290:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a292:	480d      	ldr	r0, [pc, #52]	; (800a2c8 <USBD_LL_Init+0x94>)
 800a294:	f7f7 fc4d 	bl	8001b32 <HAL_PCD_Init>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d001      	beq.n	800a2a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a29e:	f7f6 faaf 	bl	8000800 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a2a2:	2180      	movs	r1, #128	; 0x80
 800a2a4:	4808      	ldr	r0, [pc, #32]	; (800a2c8 <USBD_LL_Init+0x94>)
 800a2a6:	f7f8 fdaa 	bl	8002dfe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a2aa:	2240      	movs	r2, #64	; 0x40
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	4806      	ldr	r0, [pc, #24]	; (800a2c8 <USBD_LL_Init+0x94>)
 800a2b0:	f7f8 fd5e 	bl	8002d70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a2b4:	2280      	movs	r2, #128	; 0x80
 800a2b6:	2101      	movs	r1, #1
 800a2b8:	4803      	ldr	r0, [pc, #12]	; (800a2c8 <USBD_LL_Init+0x94>)
 800a2ba:	f7f8 fd59 	bl	8002d70 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a2be:	2300      	movs	r3, #0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	20001f9c 	.word	0x20001f9c

0800a2cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7f7 fd42 	bl	8001d6c <HAL_PCD_Start>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2ec:	7bfb      	ldrb	r3, [r7, #15]
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f000 f942 	bl	800a578 <USBD_Get_USB_Status>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b084      	sub	sp, #16
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
 800a30a:	4608      	mov	r0, r1
 800a30c:	4611      	mov	r1, r2
 800a30e:	461a      	mov	r2, r3
 800a310:	4603      	mov	r3, r0
 800a312:	70fb      	strb	r3, [r7, #3]
 800a314:	460b      	mov	r3, r1
 800a316:	70bb      	strb	r3, [r7, #2]
 800a318:	4613      	mov	r3, r2
 800a31a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a32a:	78bb      	ldrb	r3, [r7, #2]
 800a32c:	883a      	ldrh	r2, [r7, #0]
 800a32e:	78f9      	ldrb	r1, [r7, #3]
 800a330:	f7f8 f926 	bl	8002580 <HAL_PCD_EP_Open>
 800a334:	4603      	mov	r3, r0
 800a336:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a338:	7bfb      	ldrb	r3, [r7, #15]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f000 f91c 	bl	800a578 <USBD_Get_USB_Status>
 800a340:	4603      	mov	r3, r0
 800a342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a344:	7bbb      	ldrb	r3, [r7, #14]
}
 800a346:	4618      	mov	r0, r3
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b084      	sub	sp, #16
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
 800a356:	460b      	mov	r3, r1
 800a358:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a35a:	2300      	movs	r3, #0
 800a35c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a35e:	2300      	movs	r3, #0
 800a360:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a368:	78fa      	ldrb	r2, [r7, #3]
 800a36a:	4611      	mov	r1, r2
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7f8 f96f 	bl	8002650 <HAL_PCD_EP_Close>
 800a372:	4603      	mov	r3, r0
 800a374:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a376:	7bfb      	ldrb	r3, [r7, #15]
 800a378:	4618      	mov	r0, r3
 800a37a:	f000 f8fd 	bl	800a578 <USBD_Get_USB_Status>
 800a37e:	4603      	mov	r3, r0
 800a380:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a382:	7bbb      	ldrb	r3, [r7, #14]
}
 800a384:	4618      	mov	r0, r3
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	460b      	mov	r3, r1
 800a396:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a398:	2300      	movs	r3, #0
 800a39a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3a6:	78fa      	ldrb	r2, [r7, #3]
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7f8 fa47 	bl	800283e <HAL_PCD_EP_SetStall>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3b4:	7bfb      	ldrb	r3, [r7, #15]
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f000 f8de 	bl	800a578 <USBD_Get_USB_Status>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b084      	sub	sp, #16
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3e4:	78fa      	ldrb	r2, [r7, #3]
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7f8 fa8c 	bl	8002906 <HAL_PCD_EP_ClrStall>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3f2:	7bfb      	ldrb	r3, [r7, #15]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f000 f8bf 	bl	800a578 <USBD_Get_USB_Status>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800a400:	4618      	mov	r0, r3
 800a402:	3710      	adds	r7, #16
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	460b      	mov	r3, r1
 800a412:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a41a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a41c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a420:	2b00      	cmp	r3, #0
 800a422:	da0b      	bge.n	800a43c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a424:	78fb      	ldrb	r3, [r7, #3]
 800a426:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a42a:	68f9      	ldr	r1, [r7, #12]
 800a42c:	4613      	mov	r3, r2
 800a42e:	00db      	lsls	r3, r3, #3
 800a430:	1a9b      	subs	r3, r3, r2
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	440b      	add	r3, r1
 800a436:	333e      	adds	r3, #62	; 0x3e
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	e00b      	b.n	800a454 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a43c:	78fb      	ldrb	r3, [r7, #3]
 800a43e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a442:	68f9      	ldr	r1, [r7, #12]
 800a444:	4613      	mov	r3, r2
 800a446:	00db      	lsls	r3, r3, #3
 800a448:	1a9b      	subs	r3, r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	440b      	add	r3, r1
 800a44e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a452:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a454:	4618      	mov	r0, r3
 800a456:	3714      	adds	r7, #20
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	460b      	mov	r3, r1
 800a46a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a46c:	2300      	movs	r3, #0
 800a46e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a470:	2300      	movs	r3, #0
 800a472:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a47a:	78fa      	ldrb	r2, [r7, #3]
 800a47c:	4611      	mov	r1, r2
 800a47e:	4618      	mov	r0, r3
 800a480:	f7f8 f859 	bl	8002536 <HAL_PCD_SetAddress>
 800a484:	4603      	mov	r3, r0
 800a486:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a488:	7bfb      	ldrb	r3, [r7, #15]
 800a48a:	4618      	mov	r0, r3
 800a48c:	f000 f874 	bl	800a578 <USBD_Get_USB_Status>
 800a490:	4603      	mov	r3, r0
 800a492:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a494:	7bbb      	ldrb	r3, [r7, #14]
}
 800a496:	4618      	mov	r0, r3
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b086      	sub	sp, #24
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	60f8      	str	r0, [r7, #12]
 800a4a6:	607a      	str	r2, [r7, #4]
 800a4a8:	603b      	str	r3, [r7, #0]
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a4bc:	7af9      	ldrb	r1, [r7, #11]
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	f7f8 f972 	bl	80027aa <HAL_PCD_EP_Transmit>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4ca:	7dfb      	ldrb	r3, [r7, #23]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f000 f853 	bl	800a578 <USBD_Get_USB_Status>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a4d6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3718      	adds	r7, #24
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	607a      	str	r2, [r7, #4]
 800a4ea:	603b      	str	r3, [r7, #0]
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a4fe:	7af9      	ldrb	r1, [r7, #11]
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	f7f8 f8ee 	bl	80026e4 <HAL_PCD_EP_Receive>
 800a508:	4603      	mov	r3, r0
 800a50a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a50c:	7dfb      	ldrb	r3, [r7, #23]
 800a50e:	4618      	mov	r0, r3
 800a510:	f000 f832 	bl	800a578 <USBD_Get_USB_Status>
 800a514:	4603      	mov	r3, r0
 800a516:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a518:	7dbb      	ldrb	r3, [r7, #22]
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3718      	adds	r7, #24
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b082      	sub	sp, #8
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
 800a52a:	460b      	mov	r3, r1
 800a52c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a534:	78fa      	ldrb	r2, [r7, #3]
 800a536:	4611      	mov	r1, r2
 800a538:	4618      	mov	r0, r3
 800a53a:	f7f8 f91e 	bl	800277a <HAL_PCD_EP_GetRxCount>
 800a53e:	4603      	mov	r3, r0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3708      	adds	r7, #8
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a550:	4b03      	ldr	r3, [pc, #12]	; (800a560 <USBD_static_malloc+0x18>)
}
 800a552:	4618      	mov	r0, r3
 800a554:	370c      	adds	r7, #12
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	200001b8 	.word	0x200001b8

0800a564 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]

}
 800a56c:	bf00      	nop
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	4603      	mov	r3, r0
 800a580:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a582:	2300      	movs	r3, #0
 800a584:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a586:	79fb      	ldrb	r3, [r7, #7]
 800a588:	2b03      	cmp	r3, #3
 800a58a:	d817      	bhi.n	800a5bc <USBD_Get_USB_Status+0x44>
 800a58c:	a201      	add	r2, pc, #4	; (adr r2, 800a594 <USBD_Get_USB_Status+0x1c>)
 800a58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a592:	bf00      	nop
 800a594:	0800a5a5 	.word	0x0800a5a5
 800a598:	0800a5ab 	.word	0x0800a5ab
 800a59c:	0800a5b1 	.word	0x0800a5b1
 800a5a0:	0800a5b7 	.word	0x0800a5b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a5a8:	e00b      	b.n	800a5c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a5aa:	2303      	movs	r3, #3
 800a5ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a5ae:	e008      	b.n	800a5c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a5b4:	e005      	b.n	800a5c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	73fb      	strb	r3, [r7, #15]
    break;
 800a5ba:	e002      	b.n	800a5c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a5bc:	2303      	movs	r3, #3
 800a5be:	73fb      	strb	r3, [r7, #15]
    break;
 800a5c0:	bf00      	nop
  }
  return usb_status;
 800a5c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3714      	adds	r7, #20
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <__libc_init_array>:
 800a5d0:	b570      	push	{r4, r5, r6, lr}
 800a5d2:	4d0d      	ldr	r5, [pc, #52]	; (800a608 <__libc_init_array+0x38>)
 800a5d4:	4c0d      	ldr	r4, [pc, #52]	; (800a60c <__libc_init_array+0x3c>)
 800a5d6:	1b64      	subs	r4, r4, r5
 800a5d8:	10a4      	asrs	r4, r4, #2
 800a5da:	2600      	movs	r6, #0
 800a5dc:	42a6      	cmp	r6, r4
 800a5de:	d109      	bne.n	800a5f4 <__libc_init_array+0x24>
 800a5e0:	4d0b      	ldr	r5, [pc, #44]	; (800a610 <__libc_init_array+0x40>)
 800a5e2:	4c0c      	ldr	r4, [pc, #48]	; (800a614 <__libc_init_array+0x44>)
 800a5e4:	f000 f820 	bl	800a628 <_init>
 800a5e8:	1b64      	subs	r4, r4, r5
 800a5ea:	10a4      	asrs	r4, r4, #2
 800a5ec:	2600      	movs	r6, #0
 800a5ee:	42a6      	cmp	r6, r4
 800a5f0:	d105      	bne.n	800a5fe <__libc_init_array+0x2e>
 800a5f2:	bd70      	pop	{r4, r5, r6, pc}
 800a5f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5f8:	4798      	blx	r3
 800a5fa:	3601      	adds	r6, #1
 800a5fc:	e7ee      	b.n	800a5dc <__libc_init_array+0xc>
 800a5fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a602:	4798      	blx	r3
 800a604:	3601      	adds	r6, #1
 800a606:	e7f2      	b.n	800a5ee <__libc_init_array+0x1e>
 800a608:	0800a6cc 	.word	0x0800a6cc
 800a60c:	0800a6cc 	.word	0x0800a6cc
 800a610:	0800a6cc 	.word	0x0800a6cc
 800a614:	0800a6d0 	.word	0x0800a6d0

0800a618 <memset>:
 800a618:	4402      	add	r2, r0
 800a61a:	4603      	mov	r3, r0
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d100      	bne.n	800a622 <memset+0xa>
 800a620:	4770      	bx	lr
 800a622:	f803 1b01 	strb.w	r1, [r3], #1
 800a626:	e7f9      	b.n	800a61c <memset+0x4>

0800a628 <_init>:
 800a628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a62a:	bf00      	nop
 800a62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a62e:	bc08      	pop	{r3}
 800a630:	469e      	mov	lr, r3
 800a632:	4770      	bx	lr

0800a634 <_fini>:
 800a634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a636:	bf00      	nop
 800a638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a63a:	bc08      	pop	{r3}
 800a63c:	469e      	mov	lr, r3
 800a63e:	4770      	bx	lr
