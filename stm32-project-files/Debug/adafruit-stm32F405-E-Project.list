
adafruit-stm32F405-E-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba74  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  0800bbfc  0800bbfc  0001bbfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bda0  0800bda0  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800bda0  0800bda0  0001bda0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bda8  0800bda8  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bda8  0800bda8  0001bda8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdac  0800bdac  0001bdac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800bdb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002104  20000180  0800bf30  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002284  0800bf30  00022284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f0a2  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045b8  00000000  00000000  0003f252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  00043810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  00044ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023db7  00000000  00000000  00045b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019616  00000000  00000000  0006992f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0ab6  00000000  00000000  00082f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001439fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b40  00000000  00000000  00143a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bbe4 	.word	0x0800bbe4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	0800bbe4 	.word	0x0800bbe4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b087      	sub	sp, #28
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT fres;
	char* msg = "Successfully written to sd card:D\n";
 80004d6:	4b25      	ldr	r3, [pc, #148]	; (800056c <main+0x9c>)
 80004d8:	613b      	str	r3, [r7, #16]
	char log_path[] = "/LOG.TXT";
 80004da:	4a25      	ldr	r2, [pc, #148]	; (8000570 <main+0xa0>)
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	ca07      	ldmia	r2, {r0, r1, r2}
 80004e0:	c303      	stmia	r3!, {r0, r1}
 80004e2:	701a      	strb	r2, [r3, #0]
	uint32_t currentTick = HAL_GetTick();
 80004e4:	f000 fc6c 	bl	8000dc0 <HAL_GetTick>
 80004e8:	6178      	str	r0, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ea:	f000 fc03 	bl	8000cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ee:	f000 f847 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f2:	f000 f8f7 	bl	80006e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f6:	f000 f8cd 	bl	8000694 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80004fa:	f00a fddd 	bl	800b0b8 <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 80004fe:	f000 f8a9 	bl	8000654 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000502:	f006 fce5 	bl	8006ed0 <MX_FATFS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  if((HAL_GetTick() - currentTick) >= 1000)
 8000506:	f000 fc5b 	bl	8000dc0 <HAL_GetTick>
 800050a:	4602      	mov	r2, r0
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	1ad3      	subs	r3, r2, r3
 8000510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000514:	d3f7      	bcc.n	8000506 <main+0x36>
	{
		//Turn LED on while writing to file
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000516:	2201      	movs	r2, #1
 8000518:	2102      	movs	r1, #2
 800051a:	4816      	ldr	r0, [pc, #88]	; (8000574 <main+0xa4>)
 800051c:	f001 fae4 	bl	8001ae8 <HAL_GPIO_WritePin>
		fres = AppendToFile(log_path, strlen(log_path), msg, strlen(msg));
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff fe50 	bl	80001c8 <strlen>
 8000528:	4604      	mov	r4, r0
 800052a:	6938      	ldr	r0, [r7, #16]
 800052c:	f7ff fe4c 	bl	80001c8 <strlen>
 8000530:	4603      	mov	r3, r0
 8000532:	1d38      	adds	r0, r7, #4
 8000534:	693a      	ldr	r2, [r7, #16]
 8000536:	4621      	mov	r1, r4
 8000538:	f000 f96a 	bl	8000810 <AppendToFile>
 800053c:	4603      	mov	r3, r0
 800053e:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2102      	movs	r1, #2
 8000544:	480b      	ldr	r0, [pc, #44]	; (8000574 <main+0xa4>)
 8000546:	f001 facf 	bl	8001ae8 <HAL_GPIO_WritePin>

		currentTick = HAL_GetTick();
 800054a:	f000 fc39 	bl	8000dc0 <HAL_GetTick>
 800054e:	6178      	str	r0, [r7, #20]
		PrintVCP((char*)"fileappend called\n\r");
 8000550:	4809      	ldr	r0, [pc, #36]	; (8000578 <main+0xa8>)
 8000552:	f000 f943 	bl	80007dc <PrintVCP>

		//If error writing to card, blink 3 times
		if(fres != FR_OK)
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d0d4      	beq.n	8000506 <main+0x36>
		{
			BlinkLED(200, 3);
 800055c:	2103      	movs	r1, #3
 800055e:	20c8      	movs	r0, #200	; 0xc8
 8000560:	f000 f9ee 	bl	8000940 <BlinkLED>
			PrintVCP((char*)"error no SD card present\n\r");
 8000564:	4805      	ldr	r0, [pc, #20]	; (800057c <main+0xac>)
 8000566:	f000 f939 	bl	80007dc <PrintVCP>
	  if((HAL_GetTick() - currentTick) >= 1000)
 800056a:	e7cc      	b.n	8000506 <main+0x36>
 800056c:	0800bbfc 	.word	0x0800bbfc
 8000570:	0800bc50 	.word	0x0800bc50
 8000574:	40020800 	.word	0x40020800
 8000578:	0800bc20 	.word	0x0800bc20
 800057c:	0800bc34 	.word	0x0800bc34

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2230      	movs	r2, #48	; 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f00b fb10 	bl	800bbb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b28      	ldr	r3, [pc, #160]	; (800064c <SystemClock_Config+0xcc>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	4a27      	ldr	r2, [pc, #156]	; (800064c <SystemClock_Config+0xcc>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	; 0x40
 80005b4:	4b25      	ldr	r3, [pc, #148]	; (800064c <SystemClock_Config+0xcc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <SystemClock_Config+0xd0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <SystemClock_Config+0xd0>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <SystemClock_Config+0xd0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80005f0:	2306      	movs	r3, #6
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005f4:	23a8      	movs	r3, #168	; 0xa8
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005fc:	2307      	movs	r3, #7
 80005fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0320 	add.w	r3, r7, #32
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fc25 	bl	8002e54 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000610:	f000 f9b4 	bl	800097c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2302      	movs	r3, #2
 800061a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000620:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000624:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2105      	movs	r1, #5
 8000632:	4618      	mov	r0, r3
 8000634:	f002 fe86 	bl	8003344 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800063e:	f000 f99d 	bl	800097c <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3750      	adds	r7, #80	; 0x50
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_SDIO_SD_Init+0x38>)
 800065a:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <MX_SDIO_SD_Init+0x3c>)
 800065c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <MX_SDIO_SD_Init+0x38>)
 8000660:	2200      	movs	r2, #0
 8000662:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_SDIO_SD_Init+0x38>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <MX_SDIO_SD_Init+0x38>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_SDIO_SD_Init+0x38>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <MX_SDIO_SD_Init+0x38>)
 8000678:	2200      	movs	r2, #0
 800067a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <MX_SDIO_SD_Init+0x38>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	200004bc 	.word	0x200004bc
 8000690:	40012c00 	.word	0x40012c00

08000694 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_DMA_Init+0x4c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a0f      	ldr	r2, [pc, #60]	; (80006e0 <MX_DMA_Init+0x4c>)
 80006a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <MX_DMA_Init+0x4c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	203b      	movs	r0, #59	; 0x3b
 80006bc:	f000 fc8b 	bl	8000fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80006c0:	203b      	movs	r0, #59	; 0x3b
 80006c2:	f000 fca4 	bl	800100e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2045      	movs	r0, #69	; 0x45
 80006cc:	f000 fc83 	bl	8000fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80006d0:	2045      	movs	r0, #69	; 0x45
 80006d2:	f000 fc9c 	bl	800100e <HAL_NVIC_EnableIRQ>

}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <MX_GPIO_Init+0xec>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a33      	ldr	r2, [pc, #204]	; (80007d0 <MX_GPIO_Init+0xec>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b31      	ldr	r3, [pc, #196]	; (80007d0 <MX_GPIO_Init+0xec>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	4b2d      	ldr	r3, [pc, #180]	; (80007d0 <MX_GPIO_Init+0xec>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a2c      	ldr	r2, [pc, #176]	; (80007d0 <MX_GPIO_Init+0xec>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <MX_GPIO_Init+0xec>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <MX_GPIO_Init+0xec>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a25      	ldr	r2, [pc, #148]	; (80007d0 <MX_GPIO_Init+0xec>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <MX_GPIO_Init+0xec>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <MX_GPIO_Init+0xec>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a1e      	ldr	r2, [pc, #120]	; (80007d0 <MX_GPIO_Init+0xec>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_GPIO_Init+0xec>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_GPIO_Init+0xec>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <MX_GPIO_Init+0xec>)
 8000774:	f043 0308 	orr.w	r3, r3, #8
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_GPIO_Init+0xec>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0308 	and.w	r3, r3, #8
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2102      	movs	r1, #2
 800078a:	4812      	ldr	r0, [pc, #72]	; (80007d4 <MX_GPIO_Init+0xf0>)
 800078c:	f001 f9ac 	bl	8001ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8000790:	2302      	movs	r3, #2
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <MX_GPIO_Init+0xf0>)
 80007a8:	f000 ffea 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_GPIO_Init+0xf4>)
 80007c2:	f000 ffdd 	bl	8001780 <HAL_GPIO_Init>

}
 80007c6:	bf00      	nop
 80007c8:	3728      	adds	r7, #40	; 0x28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020800 	.word	0x40020800
 80007d8:	40020400 	.word	0x40020400

080007dc <PrintVCP>:

/* USER CODE BEGIN 4 */
void PrintVCP(char* buf)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	char* eol = "\r\n";
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <PrintVCP+0x30>)
 80007e6:	60fb      	str	r3, [r7, #12]
	strcat(buf, eol);
 80007e8:	68f9      	ldr	r1, [r7, #12]
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f00b f9ea 	bl	800bbc4 <strcat>
	CDC_Transmit_FS((uint8_t*)buf, strlen(buf)); //use sizeof() as it returns size of array of anytype, strlen() expects char pointer in its argument
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff fce9 	bl	80001c8 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	4619      	mov	r1, r3
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f00a fd59 	bl	800b2b4 <CDC_Transmit_FS>
}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	0800bc5c 	.word	0x0800bc5c

08000810 <AppendToFile>:

//Append string to file given a path
FRESULT AppendToFile(char* path, size_t path_len, char* msg, size_t msg_len)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 8000816:	af00      	add	r7, sp, #0
 8000818:	f107 040c 	add.w	r4, r7, #12
 800081c:	6020      	str	r0, [r4, #0]
 800081e:	f107 0008 	add.w	r0, r7, #8
 8000822:	6001      	str	r1, [r0, #0]
 8000824:	1d39      	adds	r1, r7, #4
 8000826:	600a      	str	r2, [r1, #0]
 8000828:	463a      	mov	r2, r7
 800082a:	6013      	str	r3, [r2, #0]
	FIL myfile;
	UINT testByte;
	FRESULT stat;

	//Bounds check on strings(i.e. check if strings are null terminated
	if((path[path_len] != 0) || (msg[msg_len] != 0))
 800082c:	f107 020c 	add.w	r2, r7, #12
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	6812      	ldr	r2, [r2, #0]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4413      	add	r3, r2
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d107      	bne.n	8000850 <AppendToFile+0x40>
 8000840:	1d3a      	adds	r2, r7, #4
 8000842:	463b      	mov	r3, r7
 8000844:	6812      	ldr	r2, [r2, #0]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4413      	add	r3, r2
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <AppendToFile+0x44>
	{
		return FR_INVALID_NAME;
 8000850:	2306      	movs	r3, #6
 8000852:	e06c      	b.n	800092e <AppendToFile+0x11e>
	}

	//Re-initialize SD (allows SD card to be hot pluggable)
	if ( BSP_SD_Init() != MSD_OK)
 8000854:	f006 fb56 	bl	8006f04 <BSP_SD_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <AppendToFile+0x52>
	{
		return FR_NOT_READY;
 800085e:	2303      	movs	r3, #3
 8000860:	e065      	b.n	800092e <AppendToFile+0x11e>
	}

	//Re-initialize FATFS
	if(FATFS_UnLinkDriver(SDPath) != 0)
 8000862:	4835      	ldr	r0, [pc, #212]	; (8000938 <AppendToFile+0x128>)
 8000864:	f00a fc1a 	bl	800b09c <FATFS_UnLinkDriver>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <AppendToFile+0x62>
	{
		return FR_NOT_READY;
 800086e:	2303      	movs	r3, #3
 8000870:	e05d      	b.n	800092e <AppendToFile+0x11e>
	}

	if(FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 8000872:	4931      	ldr	r1, [pc, #196]	; (8000938 <AppendToFile+0x128>)
 8000874:	4831      	ldr	r0, [pc, #196]	; (800093c <AppendToFile+0x12c>)
 8000876:	f00a fbc9 	bl	800b00c <FATFS_LinkDriver>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <AppendToFile+0x74>
	{
		return FR_NOT_READY;
 8000880:	2303      	movs	r3, #3
 8000882:	e054      	b.n	800092e <AppendToFile+0x11e>
	}

	//Re-initialize and re-mount the FAT filesystem
	stat = f_mount(&fs, SDPath, 0);
 8000884:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8000888:	2200      	movs	r2, #0
 800088a:	492b      	ldr	r1, [pc, #172]	; (8000938 <AppendToFile+0x128>)
 800088c:	4618      	mov	r0, r3
 800088e:	f009 ff4f 	bl	800a730 <f_mount>
 8000892:	4603      	mov	r3, r0
 8000894:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	if(stat != FR_OK)
 8000898:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 800089c:	2b00      	cmp	r3, #0
 800089e:	d007      	beq.n	80008b0 <AppendToFile+0xa0>
	{
		//unmount file system
		f_mount(0, SDPath, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	4925      	ldr	r1, [pc, #148]	; (8000938 <AppendToFile+0x128>)
 80008a4:	2000      	movs	r0, #0
 80008a6:	f009 ff43 	bl	800a730 <f_mount>
		//return error back to caller
		return stat;
 80008aa:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 80008ae:	e03e      	b.n	800092e <AppendToFile+0x11e>
	}

	//Open file for appending
	stat = f_open(&myfile, path, FA_WRITE | FA_OPEN_APPEND);
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	f107 0014 	add.w	r0, r7, #20
 80008b8:	2232      	movs	r2, #50	; 0x32
 80008ba:	6819      	ldr	r1, [r3, #0]
 80008bc:	f009 ff7e 	bl	800a7bc <f_open>
 80008c0:	4603      	mov	r3, r0
 80008c2:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	if(stat != FR_OK)
 80008c6:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d007      	beq.n	80008de <AppendToFile+0xce>
	{
		f_mount(0, SDPath, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	4919      	ldr	r1, [pc, #100]	; (8000938 <AppendToFile+0x128>)
 80008d2:	2000      	movs	r0, #0
 80008d4:	f009 ff2c 	bl	800a730 <f_mount>
		return stat;
 80008d8:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 80008dc:	e027      	b.n	800092e <AppendToFile+0x11e>
	}

	//Write message to end of file
	stat = f_write(&myfile, msg, msg_len, &testByte);
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	463a      	mov	r2, r7
 80008e4:	1d39      	adds	r1, r7, #4
 80008e6:	f107 0014 	add.w	r0, r7, #20
 80008ea:	6812      	ldr	r2, [r2, #0]
 80008ec:	6809      	ldr	r1, [r1, #0]
 80008ee:	f00a f923 	bl	800ab38 <f_write>
 80008f2:	4603      	mov	r3, r0
 80008f4:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	if(stat != FR_OK)
 80008f8:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d007      	beq.n	8000910 <AppendToFile+0x100>
	{
		f_mount(0,SDPath, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	490d      	ldr	r1, [pc, #52]	; (8000938 <AppendToFile+0x128>)
 8000904:	2000      	movs	r0, #0
 8000906:	f009 ff13 	bl	800a730 <f_mount>
		return stat;
 800090a:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 800090e:	e00e      	b.n	800092e <AppendToFile+0x11e>
	}

	//Sync, close file, unmount
	stat = f_close(&myfile);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4618      	mov	r0, r3
 8000916:	f00a fb02 	bl	800af1e <f_close>
 800091a:	4603      	mov	r3, r0
 800091c:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	f_mount(0, SDPath, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	4905      	ldr	r1, [pc, #20]	; (8000938 <AppendToFile+0x128>)
 8000924:	2000      	movs	r0, #0
 8000926:	f009 ff03 	bl	800a730 <f_mount>

	return stat;
 800092a:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
}
 800092e:	4618      	mov	r0, r3
 8000930:	f207 477c 	addw	r7, r7, #1148	; 0x47c
 8000934:	46bd      	mov	sp, r7
 8000936:	bd90      	pop	{r4, r7, pc}
 8000938:	20000548 	.word	0x20000548
 800093c:	0800bd0c 	.word	0x0800bd0c

08000940 <BlinkLED>:

//Blink onboard LED
void BlinkLED(uint32_t blink_delay, uint8_t num_blinks)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	460b      	mov	r3, r1
 800094a:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < num_blinks; i++)
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	e009      	b.n	8000966 <BlinkLED+0x26>
	{
		HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000952:	2102      	movs	r1, #2
 8000954:	4808      	ldr	r0, [pc, #32]	; (8000978 <BlinkLED+0x38>)
 8000956:	f001 f8e0 	bl	8001b1a <HAL_GPIO_TogglePin>
		HAL_Delay(blink_delay);
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f000 fa3c 	bl	8000dd8 <HAL_Delay>
	for(int i = 0; i < num_blinks; i++)
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	3301      	adds	r3, #1
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	78fb      	ldrb	r3, [r7, #3]
 8000968:	68fa      	ldr	r2, [r7, #12]
 800096a:	429a      	cmp	r2, r3
 800096c:	dbf1      	blt.n	8000952 <BlinkLED+0x12>
	}
}
 800096e:	bf00      	nop
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40020800 	.word	0x40020800

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	e7fe      	b.n	8000984 <Error_Handler+0x8>
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a0f      	ldr	r2, [pc, #60]	; (80009d4 <HAL_MspInit+0x4c>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a70      	ldr	r2, [pc, #448]	; (8000bb8 <HAL_SD_MspInit+0x1e0>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	f040 80da 	bne.w	8000bb0 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	4b6e      	ldr	r3, [pc, #440]	; (8000bbc <HAL_SD_MspInit+0x1e4>)
 8000a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a04:	4a6d      	ldr	r2, [pc, #436]	; (8000bbc <HAL_SD_MspInit+0x1e4>)
 8000a06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a0a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0c:	4b6b      	ldr	r3, [pc, #428]	; (8000bbc <HAL_SD_MspInit+0x1e4>)
 8000a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	4b67      	ldr	r3, [pc, #412]	; (8000bbc <HAL_SD_MspInit+0x1e4>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	4a66      	ldr	r2, [pc, #408]	; (8000bbc <HAL_SD_MspInit+0x1e4>)
 8000a22:	f043 0304 	orr.w	r3, r3, #4
 8000a26:	6313      	str	r3, [r2, #48]	; 0x30
 8000a28:	4b64      	ldr	r3, [pc, #400]	; (8000bbc <HAL_SD_MspInit+0x1e4>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	4b60      	ldr	r3, [pc, #384]	; (8000bbc <HAL_SD_MspInit+0x1e4>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3c:	4a5f      	ldr	r2, [pc, #380]	; (8000bbc <HAL_SD_MspInit+0x1e4>)
 8000a3e:	f043 0308 	orr.w	r3, r3, #8
 8000a42:	6313      	str	r3, [r2, #48]	; 0x30
 8000a44:	4b5d      	ldr	r3, [pc, #372]	; (8000bbc <HAL_SD_MspInit+0x1e4>)
 8000a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a48:	f003 0308 	and.w	r3, r3, #8
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000a50:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a62:	230c      	movs	r3, #12
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4854      	ldr	r0, [pc, #336]	; (8000bc0 <HAL_SD_MspInit+0x1e8>)
 8000a6e:	f000 fe87 	bl	8001780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a84:	230c      	movs	r3, #12
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	484c      	ldr	r0, [pc, #304]	; (8000bc0 <HAL_SD_MspInit+0x1e8>)
 8000a90:	f000 fe76 	bl	8001780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a94:	2304      	movs	r3, #4
 8000a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000aa4:	230c      	movs	r3, #12
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4845      	ldr	r0, [pc, #276]	; (8000bc4 <HAL_SD_MspInit+0x1ec>)
 8000ab0:	f000 fe66 	bl	8001780 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000ab4:	4b44      	ldr	r3, [pc, #272]	; (8000bc8 <HAL_SD_MspInit+0x1f0>)
 8000ab6:	4a45      	ldr	r2, [pc, #276]	; (8000bcc <HAL_SD_MspInit+0x1f4>)
 8000ab8:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000aba:	4b43      	ldr	r3, [pc, #268]	; (8000bc8 <HAL_SD_MspInit+0x1f0>)
 8000abc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ac0:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ac2:	4b41      	ldr	r3, [pc, #260]	; (8000bc8 <HAL_SD_MspInit+0x1f0>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac8:	4b3f      	ldr	r3, [pc, #252]	; (8000bc8 <HAL_SD_MspInit+0x1f0>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ace:	4b3e      	ldr	r3, [pc, #248]	; (8000bc8 <HAL_SD_MspInit+0x1f0>)
 8000ad0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ad4:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ad6:	4b3c      	ldr	r3, [pc, #240]	; (8000bc8 <HAL_SD_MspInit+0x1f0>)
 8000ad8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000adc:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ade:	4b3a      	ldr	r3, [pc, #232]	; (8000bc8 <HAL_SD_MspInit+0x1f0>)
 8000ae0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ae4:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000ae6:	4b38      	ldr	r3, [pc, #224]	; (8000bc8 <HAL_SD_MspInit+0x1f0>)
 8000ae8:	2220      	movs	r2, #32
 8000aea:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000aec:	4b36      	ldr	r3, [pc, #216]	; (8000bc8 <HAL_SD_MspInit+0x1f0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000af2:	4b35      	ldr	r3, [pc, #212]	; (8000bc8 <HAL_SD_MspInit+0x1f0>)
 8000af4:	2204      	movs	r2, #4
 8000af6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000af8:	4b33      	ldr	r3, [pc, #204]	; (8000bc8 <HAL_SD_MspInit+0x1f0>)
 8000afa:	2203      	movs	r2, #3
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000afe:	4b32      	ldr	r3, [pc, #200]	; (8000bc8 <HAL_SD_MspInit+0x1f0>)
 8000b00:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b04:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000b06:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <HAL_SD_MspInit+0x1f0>)
 8000b08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b0c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000b0e:	482e      	ldr	r0, [pc, #184]	; (8000bc8 <HAL_SD_MspInit+0x1f0>)
 8000b10:	f000 fa98 	bl	8001044 <HAL_DMA_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8000b1a:	f7ff ff2f 	bl	800097c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a29      	ldr	r2, [pc, #164]	; (8000bc8 <HAL_SD_MspInit+0x1f0>)
 8000b22:	641a      	str	r2, [r3, #64]	; 0x40
 8000b24:	4a28      	ldr	r2, [pc, #160]	; (8000bc8 <HAL_SD_MspInit+0x1f0>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000b2a:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <HAL_SD_MspInit+0x1f8>)
 8000b2c:	4a29      	ldr	r2, [pc, #164]	; (8000bd4 <HAL_SD_MspInit+0x1fc>)
 8000b2e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000b30:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <HAL_SD_MspInit+0x1f8>)
 8000b32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b36:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b38:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <HAL_SD_MspInit+0x1f8>)
 8000b3a:	2240      	movs	r2, #64	; 0x40
 8000b3c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b3e:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <HAL_SD_MspInit+0x1f8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <HAL_SD_MspInit+0x1f8>)
 8000b46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b4a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b4c:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <HAL_SD_MspInit+0x1f8>)
 8000b4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b52:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b54:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <HAL_SD_MspInit+0x1f8>)
 8000b56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b5a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <HAL_SD_MspInit+0x1f8>)
 8000b5e:	2220      	movs	r2, #32
 8000b60:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b62:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <HAL_SD_MspInit+0x1f8>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <HAL_SD_MspInit+0x1f8>)
 8000b6a:	2204      	movs	r2, #4
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <HAL_SD_MspInit+0x1f8>)
 8000b70:	2203      	movs	r2, #3
 8000b72:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000b74:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <HAL_SD_MspInit+0x1f8>)
 8000b76:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b7a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_SD_MspInit+0x1f8>)
 8000b7e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b82:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000b84:	4812      	ldr	r0, [pc, #72]	; (8000bd0 <HAL_SD_MspInit+0x1f8>)
 8000b86:	f000 fa5d 	bl	8001044 <HAL_DMA_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8000b90:	f7ff fef4 	bl	800097c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <HAL_SD_MspInit+0x1f8>)
 8000b98:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b9a:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <HAL_SD_MspInit+0x1f8>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2031      	movs	r0, #49	; 0x31
 8000ba6:	f000 fa16 	bl	8000fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000baa:	2031      	movs	r0, #49	; 0x31
 8000bac:	f000 fa2f 	bl	800100e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000bb0:	bf00      	nop
 8000bb2:	3728      	adds	r7, #40	; 0x28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40012c00 	.word	0x40012c00
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020800 	.word	0x40020800
 8000bc4:	40020c00 	.word	0x40020c00
 8000bc8:	200003fc 	.word	0x200003fc
 8000bcc:	40026458 	.word	0x40026458
 8000bd0:	2000045c 	.word	0x2000045c
 8000bd4:	400264a0 	.word	0x400264a0

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <NMI_Handler+0x4>

08000bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <MemManage_Handler+0x4>

08000bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c24:	f000 f8b8 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <SDIO_IRQHandler+0x10>)
 8000c32:	f002 ffa5 	bl	8003b80 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200004bc 	.word	0x200004bc

08000c40 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <DMA2_Stream3_IRQHandler+0x10>)
 8000c46:	f000 fb25 	bl	8001294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200003fc 	.word	0x200003fc

08000c54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <OTG_FS_IRQHandler+0x10>)
 8000c5a:	f001 f8c8 	bl	8001dee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20001e7c 	.word	0x20001e7c

08000c68 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <DMA2_Stream6_IRQHandler+0x10>)
 8000c6e:	f000 fb11 	bl	8001294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2000045c 	.word	0x2000045c

08000c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <SystemInit+0x20>)
 8000c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c86:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <SystemInit+0x20>)
 8000c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ca6:	490e      	ldr	r1, [pc, #56]	; (8000ce0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cbc:	4c0b      	ldr	r4, [pc, #44]	; (8000cec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cca:	f7ff ffd7 	bl	8000c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cce:	f00a ff4d 	bl	800bb6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd2:	f7ff fbfd 	bl	80004d0 <main>
  bx  lr    
 8000cd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce0:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000ce4:	0800bdb0 	.word	0x0800bdb0
  ldr r2, =_sbss
 8000ce8:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000cec:	20002284 	.word	0x20002284

08000cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC_IRQHandler>
	...

08000cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <HAL_Init+0x40>)
 8000cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_Init+0x40>)
 8000d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_Init+0x40>)
 8000d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 f94f 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d22:	2000      	movs	r0, #0
 8000d24:	f000 f808 	bl	8000d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d28:	f7ff fe2e 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023c00 	.word	0x40023c00

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x54>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x58>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f967 	bl	800102a <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00e      	b.n	8000d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d80a      	bhi.n	8000d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f000 f92f 	bl	8000fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d78:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <HAL_InitTick+0x5c>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e000      	b.n	8000d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000004 	.word	0x20000004

08000d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x20>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x24>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_IncTick+0x24>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000540 	.word	0x20000540

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000540 	.word	0x20000540

08000dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de0:	f7ff ffee 	bl	8000dc0 <HAL_GetTick>
 8000de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df0:	d005      	beq.n	8000dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_Delay+0x44>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dfe:	bf00      	nop
 8000e00:	f7ff ffde 	bl	8000dc0 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d8f7      	bhi.n	8000e00 <HAL_Delay+0x28>
  {
  }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008

08000e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e52:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	60d3      	str	r3, [r2, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <__NVIC_GetPriorityGrouping+0x18>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	f003 0307 	and.w	r3, r3, #7
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db0b      	blt.n	8000eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f003 021f 	and.w	r2, r3, #31
 8000e9c:	4907      	ldr	r1, [pc, #28]	; (8000ebc <__NVIC_EnableIRQ+0x38>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	095b      	lsrs	r3, r3, #5
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	; (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	; (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	; 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f8c:	d301      	bcc.n	8000f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00f      	b.n	8000fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <SysTick_Config+0x40>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f7ff ff8e 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SysTick_Config+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <SysTick_Config+0x40>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff29 	bl	8000e20 <__NVIC_SetPriorityGrouping>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe8:	f7ff ff3e 	bl	8000e68 <__NVIC_GetPriorityGrouping>
 8000fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff ff8e 	bl	8000f14 <NVIC_EncodePriority>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff5d 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff31 	bl	8000e84 <__NVIC_EnableIRQ>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffa2 	bl	8000f7c <SysTick_Config>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff feb6 	bl	8000dc0 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e099      	b.n	8001194 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2202      	movs	r2, #2
 8001064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 0201 	bic.w	r2, r2, #1
 800107e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001080:	e00f      	b.n	80010a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001082:	f7ff fe9d 	bl	8000dc0 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b05      	cmp	r3, #5
 800108e:	d908      	bls.n	80010a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2220      	movs	r2, #32
 8001094:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2203      	movs	r2, #3
 800109a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e078      	b.n	8001194 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1e8      	bne.n	8001082 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	4b38      	ldr	r3, [pc, #224]	; (800119c <HAL_DMA_Init+0x158>)
 80010bc:	4013      	ands	r3, r2
 80010be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d107      	bne.n	800110c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	4313      	orrs	r3, r2
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	4313      	orrs	r3, r2
 800110a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f023 0307 	bic.w	r3, r3, #7
 8001122:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	4313      	orrs	r3, r2
 800112c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	2b04      	cmp	r3, #4
 8001134:	d117      	bne.n	8001166 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	4313      	orrs	r3, r2
 800113e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00e      	beq.n	8001166 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 fa9d 	bl	8001688 <DMA_CheckFifoParam>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d008      	beq.n	8001166 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2240      	movs	r2, #64	; 0x40
 8001158:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001162:	2301      	movs	r3, #1
 8001164:	e016      	b.n	8001194 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 fa54 	bl	800161c <DMA_CalcBaseAndBitshift>
 8001174:	4603      	mov	r3, r0
 8001176:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117c:	223f      	movs	r2, #63	; 0x3f
 800117e:	409a      	lsls	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	f010803f 	.word	0xf010803f

080011a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d101      	bne.n	80011c6 <HAL_DMA_Start_IT+0x26>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e040      	b.n	8001248 <HAL_DMA_Start_IT+0xa8>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d12f      	bne.n	800123a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2202      	movs	r2, #2
 80011de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2200      	movs	r2, #0
 80011e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f000 f9e6 	bl	80015c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f8:	223f      	movs	r2, #63	; 0x3f
 80011fa:	409a      	lsls	r2, r3
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0216 	orr.w	r2, r2, #22
 800120e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	2b00      	cmp	r3, #0
 8001216:	d007      	beq.n	8001228 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0208 	orr.w	r2, r2, #8
 8001226:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 0201 	orr.w	r2, r2, #1
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	e005      	b.n	8001246 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001242:	2302      	movs	r3, #2
 8001244:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001246:	7dfb      	ldrb	r3, [r7, #23]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d004      	beq.n	800126e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2280      	movs	r2, #128	; 0x80
 8001268:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e00c      	b.n	8001288 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2205      	movs	r2, #5
 8001272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0201 	bic.w	r2, r2, #1
 8001284:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012a0:	4b92      	ldr	r3, [pc, #584]	; (80014ec <HAL_DMA_IRQHandler+0x258>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a92      	ldr	r2, [pc, #584]	; (80014f0 <HAL_DMA_IRQHandler+0x25c>)
 80012a6:	fba2 2303 	umull	r2, r3, r2, r3
 80012aa:	0a9b      	lsrs	r3, r3, #10
 80012ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012be:	2208      	movs	r2, #8
 80012c0:	409a      	lsls	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d01a      	beq.n	8001300 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d013      	beq.n	8001300 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0204 	bic.w	r2, r2, #4
 80012e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ec:	2208      	movs	r2, #8
 80012ee:	409a      	lsls	r2, r3
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f8:	f043 0201 	orr.w	r2, r3, #1
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001304:	2201      	movs	r2, #1
 8001306:	409a      	lsls	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4013      	ands	r3, r2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d012      	beq.n	8001336 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00b      	beq.n	8001336 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001322:	2201      	movs	r2, #1
 8001324:	409a      	lsls	r2, r3
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132e:	f043 0202 	orr.w	r2, r3, #2
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133a:	2204      	movs	r2, #4
 800133c:	409a      	lsls	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4013      	ands	r3, r2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d012      	beq.n	800136c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00b      	beq.n	800136c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001358:	2204      	movs	r2, #4
 800135a:	409a      	lsls	r2, r3
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001364:	f043 0204 	orr.w	r2, r3, #4
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001370:	2210      	movs	r2, #16
 8001372:	409a      	lsls	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4013      	ands	r3, r2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d043      	beq.n	8001404 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d03c      	beq.n	8001404 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138e:	2210      	movs	r2, #16
 8001390:	409a      	lsls	r2, r3
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d018      	beq.n	80013d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d108      	bne.n	80013c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d024      	beq.n	8001404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	4798      	blx	r3
 80013c2:	e01f      	b.n	8001404 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d01b      	beq.n	8001404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	4798      	blx	r3
 80013d4:	e016      	b.n	8001404 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d107      	bne.n	80013f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 0208 	bic.w	r2, r2, #8
 80013f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001408:	2220      	movs	r2, #32
 800140a:	409a      	lsls	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4013      	ands	r3, r2
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 808e 	beq.w	8001532 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0310 	and.w	r3, r3, #16
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 8086 	beq.w	8001532 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142a:	2220      	movs	r2, #32
 800142c:	409a      	lsls	r2, r3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b05      	cmp	r3, #5
 800143c:	d136      	bne.n	80014ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 0216 	bic.w	r2, r2, #22
 800144c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	695a      	ldr	r2, [r3, #20]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800145c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	2b00      	cmp	r3, #0
 8001464:	d103      	bne.n	800146e <HAL_DMA_IRQHandler+0x1da>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146a:	2b00      	cmp	r3, #0
 800146c:	d007      	beq.n	800147e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 0208 	bic.w	r2, r2, #8
 800147c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001482:	223f      	movs	r2, #63	; 0x3f
 8001484:	409a      	lsls	r2, r3
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d07d      	beq.n	800159e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	4798      	blx	r3
        }
        return;
 80014aa:	e078      	b.n	800159e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d01c      	beq.n	80014f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d108      	bne.n	80014da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d030      	beq.n	8001532 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	4798      	blx	r3
 80014d8:	e02b      	b.n	8001532 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d027      	beq.n	8001532 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	4798      	blx	r3
 80014ea:	e022      	b.n	8001532 <HAL_DMA_IRQHandler+0x29e>
 80014ec:	20000000 	.word	0x20000000
 80014f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10f      	bne.n	8001522 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0210 	bic.w	r2, r2, #16
 8001510:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001536:	2b00      	cmp	r3, #0
 8001538:	d032      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d022      	beq.n	800158c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2205      	movs	r2, #5
 800154a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0201 	bic.w	r2, r2, #1
 800155c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	3301      	adds	r3, #1
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	429a      	cmp	r2, r3
 8001568:	d307      	bcc.n	800157a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f2      	bne.n	800155e <HAL_DMA_IRQHandler+0x2ca>
 8001578:	e000      	b.n	800157c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800157a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	4798      	blx	r3
 800159c:	e000      	b.n	80015a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800159e:	bf00      	nop
    }
  }
}
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop

080015a8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b40      	cmp	r3, #64	; 0x40
 80015ec:	d108      	bne.n	8001600 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80015fe:	e007      	b.n	8001610 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	60da      	str	r2, [r3, #12]
}
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	3b10      	subs	r3, #16
 800162c:	4a14      	ldr	r2, [pc, #80]	; (8001680 <DMA_CalcBaseAndBitshift+0x64>)
 800162e:	fba2 2303 	umull	r2, r3, r2, r3
 8001632:	091b      	lsrs	r3, r3, #4
 8001634:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001636:	4a13      	ldr	r2, [pc, #76]	; (8001684 <DMA_CalcBaseAndBitshift+0x68>)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4413      	add	r3, r2
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b03      	cmp	r3, #3
 8001648:	d909      	bls.n	800165e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001652:	f023 0303 	bic.w	r3, r3, #3
 8001656:	1d1a      	adds	r2, r3, #4
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	659a      	str	r2, [r3, #88]	; 0x58
 800165c:	e007      	b.n	800166e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001666:	f023 0303 	bic.w	r3, r3, #3
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001672:	4618      	mov	r0, r3
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	aaaaaaab 	.word	0xaaaaaaab
 8001684:	0800bd04 	.word	0x0800bd04

08001688 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d11f      	bne.n	80016e2 <DMA_CheckFifoParam+0x5a>
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d856      	bhi.n	8001756 <DMA_CheckFifoParam+0xce>
 80016a8:	a201      	add	r2, pc, #4	; (adr r2, 80016b0 <DMA_CheckFifoParam+0x28>)
 80016aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ae:	bf00      	nop
 80016b0:	080016c1 	.word	0x080016c1
 80016b4:	080016d3 	.word	0x080016d3
 80016b8:	080016c1 	.word	0x080016c1
 80016bc:	08001757 	.word	0x08001757
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d046      	beq.n	800175a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016d0:	e043      	b.n	800175a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016da:	d140      	bne.n	800175e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016e0:	e03d      	b.n	800175e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016ea:	d121      	bne.n	8001730 <DMA_CheckFifoParam+0xa8>
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d837      	bhi.n	8001762 <DMA_CheckFifoParam+0xda>
 80016f2:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <DMA_CheckFifoParam+0x70>)
 80016f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f8:	08001709 	.word	0x08001709
 80016fc:	0800170f 	.word	0x0800170f
 8001700:	08001709 	.word	0x08001709
 8001704:	08001721 	.word	0x08001721
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
      break;
 800170c:	e030      	b.n	8001770 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d025      	beq.n	8001766 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800171e:	e022      	b.n	8001766 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001728:	d11f      	bne.n	800176a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800172e:	e01c      	b.n	800176a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d903      	bls.n	800173e <DMA_CheckFifoParam+0xb6>
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	2b03      	cmp	r3, #3
 800173a:	d003      	beq.n	8001744 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800173c:	e018      	b.n	8001770 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	73fb      	strb	r3, [r7, #15]
      break;
 8001742:	e015      	b.n	8001770 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00e      	beq.n	800176e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
      break;
 8001754:	e00b      	b.n	800176e <DMA_CheckFifoParam+0xe6>
      break;
 8001756:	bf00      	nop
 8001758:	e00a      	b.n	8001770 <DMA_CheckFifoParam+0xe8>
      break;
 800175a:	bf00      	nop
 800175c:	e008      	b.n	8001770 <DMA_CheckFifoParam+0xe8>
      break;
 800175e:	bf00      	nop
 8001760:	e006      	b.n	8001770 <DMA_CheckFifoParam+0xe8>
      break;
 8001762:	bf00      	nop
 8001764:	e004      	b.n	8001770 <DMA_CheckFifoParam+0xe8>
      break;
 8001766:	bf00      	nop
 8001768:	e002      	b.n	8001770 <DMA_CheckFifoParam+0xe8>
      break;   
 800176a:	bf00      	nop
 800176c:	e000      	b.n	8001770 <DMA_CheckFifoParam+0xe8>
      break;
 800176e:	bf00      	nop
    }
  } 
  
  return status; 
 8001770:	7bfb      	ldrb	r3, [r7, #15]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop

08001780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
 800179a:	e16b      	b.n	8001a74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800179c:	2201      	movs	r2, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	f040 815a 	bne.w	8001a6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d005      	beq.n	80017d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d130      	bne.n	8001834 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	2203      	movs	r2, #3
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	68da      	ldr	r2, [r3, #12]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001808:	2201      	movs	r2, #1
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	f003 0201 	and.w	r2, r3, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	2b03      	cmp	r3, #3
 800183e:	d017      	beq.n	8001870 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d123      	bne.n	80018c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	08da      	lsrs	r2, r3, #3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3208      	adds	r2, #8
 8001884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	220f      	movs	r2, #15
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	691a      	ldr	r2, [r3, #16]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	08da      	lsrs	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3208      	adds	r2, #8
 80018be:	69b9      	ldr	r1, [r7, #24]
 80018c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0203 	and.w	r2, r3, #3
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80b4 	beq.w	8001a6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b60      	ldr	r3, [pc, #384]	; (8001a8c <HAL_GPIO_Init+0x30c>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	4a5f      	ldr	r2, [pc, #380]	; (8001a8c <HAL_GPIO_Init+0x30c>)
 8001910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001914:	6453      	str	r3, [r2, #68]	; 0x44
 8001916:	4b5d      	ldr	r3, [pc, #372]	; (8001a8c <HAL_GPIO_Init+0x30c>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001922:	4a5b      	ldr	r2, [pc, #364]	; (8001a90 <HAL_GPIO_Init+0x310>)
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	3302      	adds	r3, #2
 800192a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	220f      	movs	r2, #15
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a52      	ldr	r2, [pc, #328]	; (8001a94 <HAL_GPIO_Init+0x314>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d02b      	beq.n	80019a6 <HAL_GPIO_Init+0x226>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a51      	ldr	r2, [pc, #324]	; (8001a98 <HAL_GPIO_Init+0x318>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d025      	beq.n	80019a2 <HAL_GPIO_Init+0x222>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a50      	ldr	r2, [pc, #320]	; (8001a9c <HAL_GPIO_Init+0x31c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d01f      	beq.n	800199e <HAL_GPIO_Init+0x21e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4f      	ldr	r2, [pc, #316]	; (8001aa0 <HAL_GPIO_Init+0x320>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d019      	beq.n	800199a <HAL_GPIO_Init+0x21a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4e      	ldr	r2, [pc, #312]	; (8001aa4 <HAL_GPIO_Init+0x324>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_GPIO_Init+0x216>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4d      	ldr	r2, [pc, #308]	; (8001aa8 <HAL_GPIO_Init+0x328>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00d      	beq.n	8001992 <HAL_GPIO_Init+0x212>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4c      	ldr	r2, [pc, #304]	; (8001aac <HAL_GPIO_Init+0x32c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d007      	beq.n	800198e <HAL_GPIO_Init+0x20e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4b      	ldr	r2, [pc, #300]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d101      	bne.n	800198a <HAL_GPIO_Init+0x20a>
 8001986:	2307      	movs	r3, #7
 8001988:	e00e      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800198a:	2308      	movs	r3, #8
 800198c:	e00c      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800198e:	2306      	movs	r3, #6
 8001990:	e00a      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 8001992:	2305      	movs	r3, #5
 8001994:	e008      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 8001996:	2304      	movs	r3, #4
 8001998:	e006      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800199a:	2303      	movs	r3, #3
 800199c:	e004      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800199e:	2302      	movs	r3, #2
 80019a0:	e002      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 80019a6:	2300      	movs	r3, #0
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	f002 0203 	and.w	r2, r2, #3
 80019ae:	0092      	lsls	r2, r2, #2
 80019b0:	4093      	lsls	r3, r2
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b8:	4935      	ldr	r1, [pc, #212]	; (8001a90 <HAL_GPIO_Init+0x310>)
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	3302      	adds	r3, #2
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c6:	4b3b      	ldr	r3, [pc, #236]	; (8001ab4 <HAL_GPIO_Init+0x334>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019ea:	4a32      	ldr	r2, [pc, #200]	; (8001ab4 <HAL_GPIO_Init+0x334>)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019f0:	4b30      	ldr	r3, [pc, #192]	; (8001ab4 <HAL_GPIO_Init+0x334>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a14:	4a27      	ldr	r2, [pc, #156]	; (8001ab4 <HAL_GPIO_Init+0x334>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a1a:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <HAL_GPIO_Init+0x334>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a3e:	4a1d      	ldr	r2, [pc, #116]	; (8001ab4 <HAL_GPIO_Init+0x334>)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <HAL_GPIO_Init+0x334>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a68:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <HAL_GPIO_Init+0x334>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3301      	adds	r3, #1
 8001a72:	61fb      	str	r3, [r7, #28]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	2b0f      	cmp	r3, #15
 8001a78:	f67f ae90 	bls.w	800179c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3724      	adds	r7, #36	; 0x24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40013800 	.word	0x40013800
 8001a94:	40020000 	.word	0x40020000
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	40020800 	.word	0x40020800
 8001aa0:	40020c00 	.word	0x40020c00
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40021400 	.word	0x40021400
 8001aac:	40021800 	.word	0x40021800
 8001ab0:	40021c00 	.word	0x40021c00
 8001ab4:	40013c00 	.word	0x40013c00

08001ab8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691a      	ldr	r2, [r3, #16]
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
 8001ad4:	e001      	b.n	8001ada <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	807b      	strh	r3, [r7, #2]
 8001af4:	4613      	mov	r3, r2
 8001af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001af8:	787b      	ldrb	r3, [r7, #1]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001afe:	887a      	ldrh	r2, [r7, #2]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b04:	e003      	b.n	8001b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b06:	887b      	ldrh	r3, [r7, #2]
 8001b08:	041a      	lsls	r2, r3, #16
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	619a      	str	r2, [r3, #24]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	460b      	mov	r3, r1
 8001b24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b2c:	887a      	ldrh	r2, [r7, #2]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4013      	ands	r3, r2
 8001b32:	041a      	lsls	r2, r3, #16
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	887b      	ldrh	r3, [r7, #2]
 8001b3a:	400b      	ands	r3, r1
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	619a      	str	r2, [r3, #24]
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b50:	b08f      	sub	sp, #60	; 0x3c
 8001b52:	af0a      	add	r7, sp, #40	; 0x28
 8001b54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e10f      	b.n	8001d80 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d106      	bne.n	8001b80 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f009 fce2 	bl	800b544 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2203      	movs	r2, #3
 8001b84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d102      	bne.n	8001b9a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 ff31 	bl	8005a06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	603b      	str	r3, [r7, #0]
 8001baa:	687e      	ldr	r6, [r7, #4]
 8001bac:	466d      	mov	r5, sp
 8001bae:	f106 0410 	add.w	r4, r6, #16
 8001bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bc2:	1d33      	adds	r3, r6, #4
 8001bc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bc6:	6838      	ldr	r0, [r7, #0]
 8001bc8:	f003 fe08 	bl	80057dc <USB_CoreInit>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e0d0      	b.n	8001d80 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f003 ff1f 	bl	8005a28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	73fb      	strb	r3, [r7, #15]
 8001bee:	e04a      	b.n	8001c86 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bf0:	7bfa      	ldrb	r2, [r7, #15]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	1a9b      	subs	r3, r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	333d      	adds	r3, #61	; 0x3d
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c04:	7bfa      	ldrb	r2, [r7, #15]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	333c      	adds	r3, #60	; 0x3c
 8001c14:	7bfa      	ldrb	r2, [r7, #15]
 8001c16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	b298      	uxth	r0, r3
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	3342      	adds	r3, #66	; 0x42
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c30:	7bfa      	ldrb	r2, [r7, #15]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	1a9b      	subs	r3, r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	333f      	adds	r3, #63	; 0x3f
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	3344      	adds	r3, #68	; 0x44
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c58:	7bfa      	ldrb	r2, [r7, #15]
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	1a9b      	subs	r3, r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	3348      	adds	r3, #72	; 0x48
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c6c:	7bfa      	ldrb	r2, [r7, #15]
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	3350      	adds	r3, #80	; 0x50
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	3301      	adds	r3, #1
 8001c84:	73fb      	strb	r3, [r7, #15]
 8001c86:	7bfa      	ldrb	r2, [r7, #15]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d3af      	bcc.n	8001bf0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]
 8001c94:	e044      	b.n	8001d20 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	1a9b      	subs	r3, r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	1a9b      	subs	r3, r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cc2:	7bfa      	ldrb	r2, [r7, #15]
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	1a9b      	subs	r3, r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cd8:	7bfa      	ldrb	r2, [r7, #15]
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	1a9b      	subs	r3, r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d3b5      	bcc.n	8001c96 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	687e      	ldr	r6, [r7, #4]
 8001d32:	466d      	mov	r5, sp
 8001d34:	f106 0410 	add.w	r4, r6, #16
 8001d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d44:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d48:	1d33      	adds	r3, r6, #4
 8001d4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d4c:	6838      	ldr	r0, [r7, #0]
 8001d4e:	f003 feb7 	bl	8005ac0 <USB_DevInit>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e00d      	b.n	8001d80 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f004 ff33 	bl	8006be4 <USB_DevDisconnect>

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d88 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_PCD_Start+0x1c>
 8001da0:	2302      	movs	r3, #2
 8001da2:	e020      	b.n	8001de6 <HAL_PCD_Start+0x5e>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d109      	bne.n	8001dc8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d005      	beq.n	8001dc8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 fe09 	bl	80059e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f004 fee3 	bl	8006ba2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001dee:	b590      	push	{r4, r7, lr}
 8001df0:	b08d      	sub	sp, #52	; 0x34
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f004 ffa1 	bl	8006d4c <USB_GetMode>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f040 839d 	bne.w	800254c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f004 ff05 	bl	8006c26 <USB_ReadInterrupts>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 8393 	beq.w	800254a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f004 fefc 	bl	8006c26 <USB_ReadInterrupts>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d107      	bne.n	8001e48 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f002 0202 	and.w	r2, r2, #2
 8001e46:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f004 feea 	bl	8006c26 <USB_ReadInterrupts>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f003 0310 	and.w	r3, r3, #16
 8001e58:	2b10      	cmp	r3, #16
 8001e5a:	d161      	bne.n	8001f20 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699a      	ldr	r2, [r3, #24]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0210 	bic.w	r2, r2, #16
 8001e6a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	f003 020f 	and.w	r2, r3, #15
 8001e78:	4613      	mov	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	1a9b      	subs	r3, r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4413      	add	r3, r2
 8001e88:	3304      	adds	r3, #4
 8001e8a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	0c5b      	lsrs	r3, r3, #17
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d124      	bne.n	8001ee2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d035      	beq.n	8001f10 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	091b      	lsrs	r3, r3, #4
 8001eac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001eae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	6a38      	ldr	r0, [r7, #32]
 8001eb8:	f004 fd21 	bl	80068fe <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	091b      	lsrs	r3, r3, #4
 8001ec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ec8:	441a      	add	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	699a      	ldr	r2, [r3, #24]
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eda:	441a      	add	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	619a      	str	r2, [r3, #24]
 8001ee0:	e016      	b.n	8001f10 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	0c5b      	lsrs	r3, r3, #17
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d110      	bne.n	8001f10 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ef4:	2208      	movs	r2, #8
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6a38      	ldr	r0, [r7, #32]
 8001efa:	f004 fd00 	bl	80068fe <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	699a      	ldr	r2, [r3, #24]
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f0a:	441a      	add	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699a      	ldr	r2, [r3, #24]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0210 	orr.w	r2, r2, #16
 8001f1e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f004 fe7e 	bl	8006c26 <USB_ReadInterrupts>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f34:	d16e      	bne.n	8002014 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f004 fe84 	bl	8006c4c <USB_ReadDevAllOutEpInterrupt>
 8001f44:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f46:	e062      	b.n	800200e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d057      	beq.n	8002002 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f004 fea9 	bl	8006cb4 <USB_ReadDevOutEPInterrupt>
 8001f62:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00c      	beq.n	8001f88 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	015a      	lsls	r2, r3, #5
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 fdb0 	bl	8002ae8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00c      	beq.n	8001fac <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001fa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 feaa 	bl	8002d00 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d008      	beq.n	8001fc8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	015a      	lsls	r2, r3, #5
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2310      	movs	r3, #16
 8001fc6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d008      	beq.n	8001fe4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	015a      	lsls	r2, r3, #5
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fde:	461a      	mov	r2, r3
 8001fe0:	2320      	movs	r3, #32
 8001fe2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d009      	beq.n	8002002 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	015a      	lsls	r2, r3, #5
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002000:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	3301      	adds	r3, #1
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200a:	085b      	lsrs	r3, r3, #1
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800200e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002010:	2b00      	cmp	r3, #0
 8002012:	d199      	bne.n	8001f48 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f004 fe04 	bl	8006c26 <USB_ReadInterrupts>
 800201e:	4603      	mov	r3, r0
 8002020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002024:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002028:	f040 80c0 	bne.w	80021ac <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f004 fe25 	bl	8006c80 <USB_ReadDevAllInEpInterrupt>
 8002036:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800203c:	e0b2      	b.n	80021a4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800203e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80a7 	beq.w	8002198 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f004 fe4b 	bl	8006cf0 <USB_ReadDevInEPInterrupt>
 800205a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d057      	beq.n	8002116 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	f003 030f 	and.w	r3, r3, #15
 800206c:	2201      	movs	r2, #1
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800207a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	43db      	mvns	r3, r3
 8002080:	69f9      	ldr	r1, [r7, #28]
 8002082:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002086:	4013      	ands	r3, r2
 8002088:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	015a      	lsls	r2, r3, #5
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	4413      	add	r3, r2
 8002092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002096:	461a      	mov	r2, r3
 8002098:	2301      	movs	r3, #1
 800209a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d132      	bne.n	800210a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	3348      	adds	r3, #72	; 0x48
 80020b4:	6819      	ldr	r1, [r3, #0]
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4403      	add	r3, r0
 80020c4:	3344      	adds	r3, #68	; 0x44
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4419      	add	r1, r3
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4403      	add	r3, r0
 80020d8:	3348      	adds	r3, #72	; 0x48
 80020da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d113      	bne.n	800210a <HAL_PCD_IRQHandler+0x31c>
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	3350      	adds	r3, #80	; 0x50
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d108      	bne.n	800210a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002102:	461a      	mov	r2, r3
 8002104:	2101      	movs	r1, #1
 8002106:	f004 fe53 	bl	8006db0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	b2db      	uxtb	r3, r3
 800210e:	4619      	mov	r1, r3
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f009 fa98 	bl	800b646 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	4413      	add	r3, r2
 8002128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800212c:	461a      	mov	r2, r3
 800212e:	2308      	movs	r3, #8
 8002130:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	4413      	add	r3, r2
 8002144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002148:	461a      	mov	r2, r3
 800214a:	2310      	movs	r3, #16
 800214c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	4413      	add	r3, r2
 8002160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002164:	461a      	mov	r2, r3
 8002166:	2340      	movs	r3, #64	; 0x40
 8002168:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	4413      	add	r3, r2
 800217c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002180:	461a      	mov	r2, r3
 8002182:	2302      	movs	r3, #2
 8002184:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002190:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fc1b 	bl	80029ce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	3301      	adds	r3, #1
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800219e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a0:	085b      	lsrs	r3, r3, #1
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f47f af49 	bne.w	800203e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f004 fd38 	bl	8006c26 <USB_ReadInterrupts>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021c0:	d122      	bne.n	8002208 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	69fa      	ldr	r2, [r7, #28]
 80021cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d108      	bne.n	80021f2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021e8:	2100      	movs	r1, #0
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 fe26 	bl	8002e3c <HAL_PCDEx_LPM_Callback>
 80021f0:	e002      	b.n	80021f8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f009 fa9e 	bl	800b734 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002206:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f004 fd0a 	bl	8006c26 <USB_ReadInterrupts>
 8002212:	4603      	mov	r3, r0
 8002214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800221c:	d112      	bne.n	8002244 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b01      	cmp	r3, #1
 800222c:	d102      	bne.n	8002234 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f009 fa5a 	bl	800b6e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002242:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f004 fcec 	bl	8006c26 <USB_ReadInterrupts>
 800224e:	4603      	mov	r3, r0
 8002250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002258:	f040 80c7 	bne.w	80023ea <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2110      	movs	r1, #16
 8002276:	4618      	mov	r0, r3
 8002278:	f003 fd86 	bl	8005d88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800227c:	2300      	movs	r3, #0
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002280:	e056      	b.n	8002330 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	4413      	add	r3, r2
 800228a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800228e:	461a      	mov	r2, r3
 8002290:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002294:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	4413      	add	r3, r2
 800229e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022a6:	0151      	lsls	r1, r2, #5
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	440a      	add	r2, r1
 80022ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022b4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022c6:	0151      	lsls	r1, r2, #5
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	440a      	add	r2, r1
 80022cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e2:	461a      	mov	r2, r3
 80022e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022e8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80022ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ec:	015a      	lsls	r2, r3, #5
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	4413      	add	r3, r2
 80022f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022fa:	0151      	lsls	r1, r2, #5
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	440a      	add	r2, r1
 8002300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002304:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002308:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	4413      	add	r3, r2
 8002312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800231a:	0151      	lsls	r1, r2, #5
 800231c:	69fa      	ldr	r2, [r7, #28]
 800231e:	440a      	add	r2, r1
 8002320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002324:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002328:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232c:	3301      	adds	r3, #1
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002336:	429a      	cmp	r2, r3
 8002338:	d3a3      	bcc.n	8002282 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	69fa      	ldr	r2, [r7, #28]
 8002344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002348:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800234c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	2b00      	cmp	r3, #0
 8002354:	d016      	beq.n	8002384 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800235c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002360:	69fa      	ldr	r2, [r7, #28]
 8002362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002366:	f043 030b 	orr.w	r3, r3, #11
 800236a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	69fa      	ldr	r2, [r7, #28]
 8002378:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800237c:	f043 030b 	orr.w	r3, r3, #11
 8002380:	6453      	str	r3, [r2, #68]	; 0x44
 8002382:	e015      	b.n	80023b0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002392:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002396:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800239a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023aa:	f043 030b 	orr.w	r3, r3, #11
 80023ae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80023c2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023d4:	461a      	mov	r2, r3
 80023d6:	f004 fceb 	bl	8006db0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695a      	ldr	r2, [r3, #20]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80023e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f004 fc19 	bl	8006c26 <USB_ReadInterrupts>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023fe:	d124      	bne.n	800244a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f004 fcaf 	bl	8006d68 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f003 fd17 	bl	8005e42 <USB_GetDevSpeed>
 8002414:	4603      	mov	r3, r0
 8002416:	461a      	mov	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681c      	ldr	r4, [r3, #0]
 8002420:	f001 f92c 	bl	800367c <HAL_RCC_GetHCLKFreq>
 8002424:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800242a:	b2db      	uxtb	r3, r3
 800242c:	461a      	mov	r2, r3
 800242e:	4620      	mov	r0, r4
 8002430:	f003 fa36 	bl	80058a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f009 f92e 	bl	800b696 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695a      	ldr	r2, [r3, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002448:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f004 fbe9 	bl	8006c26 <USB_ReadInterrupts>
 8002454:	4603      	mov	r3, r0
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b08      	cmp	r3, #8
 800245c:	d10a      	bne.n	8002474 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f009 f90b 	bl	800b67a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695a      	ldr	r2, [r3, #20]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f002 0208 	and.w	r2, r2, #8
 8002472:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f004 fbd4 	bl	8006c26 <USB_ReadInterrupts>
 800247e:	4603      	mov	r3, r0
 8002480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002484:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002488:	d10f      	bne.n	80024aa <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800248a:	2300      	movs	r3, #0
 800248c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	b2db      	uxtb	r3, r3
 8002492:	4619      	mov	r1, r3
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f009 f96d 	bl	800b774 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80024a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f004 fbb9 	bl	8006c26 <USB_ReadInterrupts>
 80024b4:	4603      	mov	r3, r0
 80024b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024be:	d10f      	bne.n	80024e0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	4619      	mov	r1, r3
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f009 f940 	bl	800b750 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	695a      	ldr	r2, [r3, #20]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80024de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f004 fb9e 	bl	8006c26 <USB_ReadInterrupts>
 80024ea:	4603      	mov	r3, r0
 80024ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80024f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f4:	d10a      	bne.n	800250c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f009 f94e 	bl	800b798 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800250a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f004 fb88 	bl	8006c26 <USB_ReadInterrupts>
 8002516:	4603      	mov	r3, r0
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b04      	cmp	r3, #4
 800251e:	d115      	bne.n	800254c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f009 f93e 	bl	800b7b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6859      	ldr	r1, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	430a      	orrs	r2, r1
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	e000      	b.n	800254c <HAL_PCD_IRQHandler+0x75e>
      return;
 800254a:	bf00      	nop
    }
  }
}
 800254c:	3734      	adds	r7, #52	; 0x34
 800254e:	46bd      	mov	sp, r7
 8002550:	bd90      	pop	{r4, r7, pc}

08002552 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	460b      	mov	r3, r1
 800255c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_PCD_SetAddress+0x1a>
 8002568:	2302      	movs	r3, #2
 800256a:	e013      	b.n	8002594 <HAL_PCD_SetAddress+0x42>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	78fa      	ldrb	r2, [r7, #3]
 8002578:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f004 fae6 	bl	8006b56 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	4608      	mov	r0, r1
 80025a6:	4611      	mov	r1, r2
 80025a8:	461a      	mov	r2, r3
 80025aa:	4603      	mov	r3, r0
 80025ac:	70fb      	strb	r3, [r7, #3]
 80025ae:	460b      	mov	r3, r1
 80025b0:	803b      	strh	r3, [r7, #0]
 80025b2:	4613      	mov	r3, r2
 80025b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	da0f      	bge.n	80025e2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	f003 020f 	and.w	r2, r3, #15
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	1a9b      	subs	r3, r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	3338      	adds	r3, #56	; 0x38
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	3304      	adds	r3, #4
 80025d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	705a      	strb	r2, [r3, #1]
 80025e0:	e00f      	b.n	8002602 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	f003 020f 	and.w	r2, r3, #15
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	4413      	add	r3, r2
 80025f8:	3304      	adds	r3, #4
 80025fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	b2da      	uxtb	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800260e:	883a      	ldrh	r2, [r7, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	78ba      	ldrb	r2, [r7, #2]
 8002618:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	785b      	ldrb	r3, [r3, #1]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d004      	beq.n	800262c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800262c:	78bb      	ldrb	r3, [r7, #2]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d102      	bne.n	8002638 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_PCD_EP_Open+0xaa>
 8002642:	2302      	movs	r3, #2
 8002644:	e00e      	b.n	8002664 <HAL_PCD_EP_Open+0xc8>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68f9      	ldr	r1, [r7, #12]
 8002654:	4618      	mov	r0, r3
 8002656:	f003 fc19 	bl	8005e8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002662:	7afb      	ldrb	r3, [r7, #11]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002678:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800267c:	2b00      	cmp	r3, #0
 800267e:	da0f      	bge.n	80026a0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	f003 020f 	and.w	r2, r3, #15
 8002686:	4613      	mov	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	1a9b      	subs	r3, r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	3338      	adds	r3, #56	; 0x38
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4413      	add	r3, r2
 8002694:	3304      	adds	r3, #4
 8002696:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2201      	movs	r2, #1
 800269c:	705a      	strb	r2, [r3, #1]
 800269e:	e00f      	b.n	80026c0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	f003 020f 	and.w	r2, r3, #15
 80026a6:	4613      	mov	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	1a9b      	subs	r3, r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	3304      	adds	r3, #4
 80026b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80026c0:	78fb      	ldrb	r3, [r7, #3]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_PCD_EP_Close+0x6e>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e00e      	b.n	80026f8 <HAL_PCD_EP_Close+0x8c>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68f9      	ldr	r1, [r7, #12]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f003 fc57 	bl	8005f9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	460b      	mov	r3, r1
 800270e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002710:	7afb      	ldrb	r3, [r7, #11]
 8002712:	f003 020f 	and.w	r2, r3, #15
 8002716:	4613      	mov	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	1a9b      	subs	r3, r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4413      	add	r3, r2
 8002726:	3304      	adds	r3, #4
 8002728:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	2200      	movs	r2, #0
 8002740:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002742:	7afb      	ldrb	r3, [r7, #11]
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	b2da      	uxtb	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d102      	bne.n	800275c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800275c:	7afb      	ldrb	r3, [r7, #11]
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	b2db      	uxtb	r3, r3
 8002770:	461a      	mov	r2, r3
 8002772:	6979      	ldr	r1, [r7, #20]
 8002774:	f003 ff32 	bl	80065dc <USB_EP0StartXfer>
 8002778:	e008      	b.n	800278c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	461a      	mov	r2, r3
 8002786:	6979      	ldr	r1, [r7, #20]
 8002788:	f003 fce4 	bl	8006154 <USB_EPStartXfer>
  }

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	460b      	mov	r3, r1
 80027a0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027a2:	78fb      	ldrb	r3, [r7, #3]
 80027a4:	f003 020f 	and.w	r2, r3, #15
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80027b8:	681b      	ldr	r3, [r3, #0]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	460b      	mov	r3, r1
 80027d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027d6:	7afb      	ldrb	r3, [r7, #11]
 80027d8:	f003 020f 	and.w	r2, r3, #15
 80027dc:	4613      	mov	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	3338      	adds	r3, #56	; 0x38
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4413      	add	r3, r2
 80027ea:	3304      	adds	r3, #4
 80027ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2201      	movs	r2, #1
 8002804:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002806:	7afb      	ldrb	r3, [r7, #11]
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	b2da      	uxtb	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d102      	bne.n	8002820 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002820:	7afb      	ldrb	r3, [r7, #11]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6818      	ldr	r0, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	6979      	ldr	r1, [r7, #20]
 8002838:	f003 fed0 	bl	80065dc <USB_EP0StartXfer>
 800283c:	e008      	b.n	8002850 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	461a      	mov	r2, r3
 800284a:	6979      	ldr	r1, [r7, #20]
 800284c:	f003 fc82 	bl	8006154 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	460b      	mov	r3, r1
 8002864:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	f003 020f 	and.w	r2, r3, #15
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	429a      	cmp	r2, r3
 8002872:	d901      	bls.n	8002878 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e050      	b.n	800291a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002878:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800287c:	2b00      	cmp	r3, #0
 800287e:	da0f      	bge.n	80028a0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002880:	78fb      	ldrb	r3, [r7, #3]
 8002882:	f003 020f 	and.w	r2, r3, #15
 8002886:	4613      	mov	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	1a9b      	subs	r3, r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	3338      	adds	r3, #56	; 0x38
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	4413      	add	r3, r2
 8002894:	3304      	adds	r3, #4
 8002896:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2201      	movs	r2, #1
 800289c:	705a      	strb	r2, [r3, #1]
 800289e:	e00d      	b.n	80028bc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	4613      	mov	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	1a9b      	subs	r3, r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	4413      	add	r3, r2
 80028b2:	3304      	adds	r3, #4
 80028b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2201      	movs	r2, #1
 80028c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_PCD_EP_SetStall+0x82>
 80028d8:	2302      	movs	r3, #2
 80028da:	e01e      	b.n	800291a <HAL_PCD_EP_SetStall+0xc0>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68f9      	ldr	r1, [r7, #12]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f004 f85f 	bl	80069ae <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10a      	bne.n	8002910 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	b2d9      	uxtb	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800290a:	461a      	mov	r2, r3
 800290c:	f004 fa50 	bl	8006db0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b084      	sub	sp, #16
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	460b      	mov	r3, r1
 800292c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	f003 020f 	and.w	r2, r3, #15
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	d901      	bls.n	8002940 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e042      	b.n	80029c6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002940:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002944:	2b00      	cmp	r3, #0
 8002946:	da0f      	bge.n	8002968 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	f003 020f 	and.w	r2, r3, #15
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	3338      	adds	r3, #56	; 0x38
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4413      	add	r3, r2
 800295c:	3304      	adds	r3, #4
 800295e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2201      	movs	r2, #1
 8002964:	705a      	strb	r2, [r3, #1]
 8002966:	e00f      	b.n	8002988 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	f003 020f 	and.w	r2, r3, #15
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	3304      	adds	r3, #4
 8002980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	b2da      	uxtb	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_PCD_EP_ClrStall+0x86>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e00e      	b.n	80029c6 <HAL_PCD_EP_ClrStall+0xa4>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68f9      	ldr	r1, [r7, #12]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f004 f867 	bl	8006a8a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b08a      	sub	sp, #40	; 0x28
 80029d2:	af02      	add	r7, sp, #8
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	4613      	mov	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	3338      	adds	r3, #56	; 0x38
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	3304      	adds	r3, #4
 80029f4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d901      	bls.n	8002a06 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e06c      	b.n	8002ae0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d902      	bls.n	8002a22 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3303      	adds	r3, #3
 8002a26:	089b      	lsrs	r3, r3, #2
 8002a28:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a2a:	e02b      	b.n	8002a84 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	695a      	ldr	r2, [r3, #20]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d902      	bls.n	8002a48 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	3303      	adds	r3, #3
 8002a4c:	089b      	lsrs	r3, r3, #2
 8002a4e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	68d9      	ldr	r1, [r3, #12]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	4603      	mov	r3, r0
 8002a66:	6978      	ldr	r0, [r7, #20]
 8002a68:	f003 ff0b 	bl	8006882 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	441a      	add	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	699a      	ldr	r2, [r3, #24]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	441a      	add	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d809      	bhi.n	8002aae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d203      	bcs.n	8002aae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1be      	bne.n	8002a2c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d811      	bhi.n	8002ade <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	6939      	ldr	r1, [r7, #16]
 8002ad6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ada:	4013      	ands	r3, r2
 8002adc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3720      	adds	r7, #32
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	333c      	adds	r3, #60	; 0x3c
 8002b00:	3304      	adds	r3, #4
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	f040 80a0 	bne.w	8002c60 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d015      	beq.n	8002b56 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4a72      	ldr	r2, [pc, #456]	; (8002cf8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	f240 80dd 	bls.w	8002cee <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 80d7 	beq.w	8002cee <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b52:	6093      	str	r3, [r2, #8]
 8002b54:	e0cb      	b.n	8002cee <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d009      	beq.n	8002b74 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	2320      	movs	r3, #32
 8002b70:	6093      	str	r3, [r2, #8]
 8002b72:	e0bc      	b.n	8002cee <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f040 80b7 	bne.w	8002cee <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4a5d      	ldr	r2, [pc, #372]	; (8002cf8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d90f      	bls.n	8002ba8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ba4:	6093      	str	r3, [r2, #8]
 8002ba6:	e0a2      	b.n	8002cee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002bba:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	0159      	lsls	r1, r3, #5
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002bce:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4403      	add	r3, r0
 8002bde:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002be2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	4613      	mov	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bf6:	6819      	ldr	r1, [r3, #0]
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4403      	add	r3, r0
 8002c06:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4419      	add	r1, r3
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4403      	add	r3, r0
 8002c1c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c20:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d114      	bne.n	8002c52 <PCD_EP_OutXfrComplete_int+0x16a>
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	1a9b      	subs	r3, r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d108      	bne.n	8002c52 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	f004 f8af 	bl	8006db0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	4619      	mov	r1, r3
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f008 fcd9 	bl	800b610 <HAL_PCD_DataOutStageCallback>
 8002c5e:	e046      	b.n	8002cee <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4a26      	ldr	r2, [pc, #152]	; (8002cfc <PCD_EP_OutXfrComplete_int+0x214>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d124      	bne.n	8002cb2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c84:	6093      	str	r3, [r2, #8]
 8002c86:	e032      	b.n	8002cee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	2320      	movs	r3, #32
 8002ca2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	4619      	mov	r1, r3
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f008 fcb0 	bl	800b610 <HAL_PCD_DataOutStageCallback>
 8002cb0:	e01d      	b.n	8002cee <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d114      	bne.n	8002ce2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	1a9b      	subs	r3, r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d108      	bne.n	8002ce2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2100      	movs	r1, #0
 8002cde:	f004 f867 	bl	8006db0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f008 fc91 	bl	800b610 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	4f54300a 	.word	0x4f54300a
 8002cfc:	4f54310a 	.word	0x4f54310a

08002d00 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	333c      	adds	r3, #60	; 0x3c
 8002d18:	3304      	adds	r3, #4
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4a15      	ldr	r2, [pc, #84]	; (8002d88 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d90e      	bls.n	8002d54 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d009      	beq.n	8002d54 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d52:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f008 fc49 	bl	800b5ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4a0a      	ldr	r2, [pc, #40]	; (8002d88 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d90c      	bls.n	8002d7c <PCD_EP_OutSetupPacket_int+0x7c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d108      	bne.n	8002d7c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d74:	461a      	mov	r2, r3
 8002d76:	2101      	movs	r1, #1
 8002d78:	f004 f81a 	bl	8006db0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	4f54300a 	.word	0x4f54300a

08002d8c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	70fb      	strb	r3, [r7, #3]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d107      	bne.n	8002dba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002daa:	883b      	ldrh	r3, [r7, #0]
 8002dac:	0419      	lsls	r1, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28
 8002db8:	e028      	b.n	8002e0c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002dc8:	2300      	movs	r3, #0
 8002dca:	73fb      	strb	r3, [r7, #15]
 8002dcc:	e00d      	b.n	8002dea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	3340      	adds	r3, #64	; 0x40
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	0c1b      	lsrs	r3, r3, #16
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	4413      	add	r3, r2
 8002de2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	3301      	adds	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
 8002dea:	7bfa      	ldrb	r2, [r7, #15]
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d3ec      	bcc.n	8002dce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002df4:	883b      	ldrh	r3, [r7, #0]
 8002df6:	0418      	lsls	r0, r3, #16
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6819      	ldr	r1, [r3, #0]
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	4302      	orrs	r2, r0
 8002e04:	3340      	adds	r3, #64	; 0x40
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	460b      	mov	r3, r1
 8002e24:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	887a      	ldrh	r2, [r7, #2]
 8002e2c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e264      	b.n	8003330 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d075      	beq.n	8002f5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e72:	4ba3      	ldr	r3, [pc, #652]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d00c      	beq.n	8002e98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e7e:	4ba0      	ldr	r3, [pc, #640]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d112      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e8a:	4b9d      	ldr	r3, [pc, #628]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e96:	d10b      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e98:	4b99      	ldr	r3, [pc, #612]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d05b      	beq.n	8002f5c <HAL_RCC_OscConfig+0x108>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d157      	bne.n	8002f5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e23f      	b.n	8003330 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb8:	d106      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x74>
 8002eba:	4b91      	ldr	r3, [pc, #580]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a90      	ldr	r2, [pc, #576]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	e01d      	b.n	8002f04 <HAL_RCC_OscConfig+0xb0>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x98>
 8002ed2:	4b8b      	ldr	r3, [pc, #556]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a8a      	ldr	r2, [pc, #552]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	4b88      	ldr	r3, [pc, #544]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a87      	ldr	r2, [pc, #540]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	e00b      	b.n	8002f04 <HAL_RCC_OscConfig+0xb0>
 8002eec:	4b84      	ldr	r3, [pc, #528]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a83      	ldr	r2, [pc, #524]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef6:	6013      	str	r3, [r2, #0]
 8002ef8:	4b81      	ldr	r3, [pc, #516]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a80      	ldr	r2, [pc, #512]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d013      	beq.n	8002f34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fd ff58 	bl	8000dc0 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f14:	f7fd ff54 	bl	8000dc0 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b64      	cmp	r3, #100	; 0x64
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e204      	b.n	8003330 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f26:	4b76      	ldr	r3, [pc, #472]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0xc0>
 8002f32:	e014      	b.n	8002f5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fd ff44 	bl	8000dc0 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7fd ff40 	bl	8000dc0 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	; 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e1f0      	b.n	8003330 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4e:	4b6c      	ldr	r3, [pc, #432]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0xe8>
 8002f5a:	e000      	b.n	8002f5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d063      	beq.n	8003032 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f6a:	4b65      	ldr	r3, [pc, #404]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00b      	beq.n	8002f8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f76:	4b62      	ldr	r3, [pc, #392]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d11c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f82:	4b5f      	ldr	r3, [pc, #380]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d116      	bne.n	8002fbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8e:	4b5c      	ldr	r3, [pc, #368]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d005      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x152>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d001      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e1c4      	b.n	8003330 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa6:	4b56      	ldr	r3, [pc, #344]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4952      	ldr	r1, [pc, #328]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fba:	e03a      	b.n	8003032 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d020      	beq.n	8003006 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc4:	4b4f      	ldr	r3, [pc, #316]	; (8003104 <HAL_RCC_OscConfig+0x2b0>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fca:	f7fd fef9 	bl	8000dc0 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fd2:	f7fd fef5 	bl	8000dc0 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e1a5      	b.n	8003330 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe4:	4b46      	ldr	r3, [pc, #280]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff0:	4b43      	ldr	r3, [pc, #268]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4940      	ldr	r1, [pc, #256]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8003000:	4313      	orrs	r3, r2
 8003002:	600b      	str	r3, [r1, #0]
 8003004:	e015      	b.n	8003032 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003006:	4b3f      	ldr	r3, [pc, #252]	; (8003104 <HAL_RCC_OscConfig+0x2b0>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7fd fed8 	bl	8000dc0 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003014:	f7fd fed4 	bl	8000dc0 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e184      	b.n	8003330 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003026:	4b36      	ldr	r3, [pc, #216]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d030      	beq.n	80030a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d016      	beq.n	8003074 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003046:	4b30      	ldr	r3, [pc, #192]	; (8003108 <HAL_RCC_OscConfig+0x2b4>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304c:	f7fd feb8 	bl	8000dc0 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003054:	f7fd feb4 	bl	8000dc0 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e164      	b.n	8003330 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003066:	4b26      	ldr	r3, [pc, #152]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8003068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x200>
 8003072:	e015      	b.n	80030a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003074:	4b24      	ldr	r3, [pc, #144]	; (8003108 <HAL_RCC_OscConfig+0x2b4>)
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307a:	f7fd fea1 	bl	8000dc0 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003082:	f7fd fe9d 	bl	8000dc0 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e14d      	b.n	8003330 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003094:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 8003096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f0      	bne.n	8003082 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 80a0 	beq.w	80031ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ae:	2300      	movs	r3, #0
 80030b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b2:	4b13      	ldr	r3, [pc, #76]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10f      	bne.n	80030de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	4a0e      	ldr	r2, [pc, #56]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030cc:	6413      	str	r3, [r2, #64]	; 0x40
 80030ce:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030da:	2301      	movs	r3, #1
 80030dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030de:	4b0b      	ldr	r3, [pc, #44]	; (800310c <HAL_RCC_OscConfig+0x2b8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d121      	bne.n	800312e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ea:	4b08      	ldr	r3, [pc, #32]	; (800310c <HAL_RCC_OscConfig+0x2b8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a07      	ldr	r2, [pc, #28]	; (800310c <HAL_RCC_OscConfig+0x2b8>)
 80030f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f6:	f7fd fe63 	bl	8000dc0 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fc:	e011      	b.n	8003122 <HAL_RCC_OscConfig+0x2ce>
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800
 8003104:	42470000 	.word	0x42470000
 8003108:	42470e80 	.word	0x42470e80
 800310c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003110:	f7fd fe56 	bl	8000dc0 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e106      	b.n	8003330 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003122:	4b85      	ldr	r3, [pc, #532]	; (8003338 <HAL_RCC_OscConfig+0x4e4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d106      	bne.n	8003144 <HAL_RCC_OscConfig+0x2f0>
 8003136:	4b81      	ldr	r3, [pc, #516]	; (800333c <HAL_RCC_OscConfig+0x4e8>)
 8003138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313a:	4a80      	ldr	r2, [pc, #512]	; (800333c <HAL_RCC_OscConfig+0x4e8>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	6713      	str	r3, [r2, #112]	; 0x70
 8003142:	e01c      	b.n	800317e <HAL_RCC_OscConfig+0x32a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b05      	cmp	r3, #5
 800314a:	d10c      	bne.n	8003166 <HAL_RCC_OscConfig+0x312>
 800314c:	4b7b      	ldr	r3, [pc, #492]	; (800333c <HAL_RCC_OscConfig+0x4e8>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003150:	4a7a      	ldr	r2, [pc, #488]	; (800333c <HAL_RCC_OscConfig+0x4e8>)
 8003152:	f043 0304 	orr.w	r3, r3, #4
 8003156:	6713      	str	r3, [r2, #112]	; 0x70
 8003158:	4b78      	ldr	r3, [pc, #480]	; (800333c <HAL_RCC_OscConfig+0x4e8>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	4a77      	ldr	r2, [pc, #476]	; (800333c <HAL_RCC_OscConfig+0x4e8>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6713      	str	r3, [r2, #112]	; 0x70
 8003164:	e00b      	b.n	800317e <HAL_RCC_OscConfig+0x32a>
 8003166:	4b75      	ldr	r3, [pc, #468]	; (800333c <HAL_RCC_OscConfig+0x4e8>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316a:	4a74      	ldr	r2, [pc, #464]	; (800333c <HAL_RCC_OscConfig+0x4e8>)
 800316c:	f023 0301 	bic.w	r3, r3, #1
 8003170:	6713      	str	r3, [r2, #112]	; 0x70
 8003172:	4b72      	ldr	r3, [pc, #456]	; (800333c <HAL_RCC_OscConfig+0x4e8>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003176:	4a71      	ldr	r2, [pc, #452]	; (800333c <HAL_RCC_OscConfig+0x4e8>)
 8003178:	f023 0304 	bic.w	r3, r3, #4
 800317c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d015      	beq.n	80031b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003186:	f7fd fe1b 	bl	8000dc0 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318c:	e00a      	b.n	80031a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800318e:	f7fd fe17 	bl	8000dc0 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	f241 3288 	movw	r2, #5000	; 0x1388
 800319c:	4293      	cmp	r3, r2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e0c5      	b.n	8003330 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a4:	4b65      	ldr	r3, [pc, #404]	; (800333c <HAL_RCC_OscConfig+0x4e8>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0ee      	beq.n	800318e <HAL_RCC_OscConfig+0x33a>
 80031b0:	e014      	b.n	80031dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b2:	f7fd fe05 	bl	8000dc0 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b8:	e00a      	b.n	80031d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ba:	f7fd fe01 	bl	8000dc0 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e0af      	b.n	8003330 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d0:	4b5a      	ldr	r3, [pc, #360]	; (800333c <HAL_RCC_OscConfig+0x4e8>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1ee      	bne.n	80031ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031dc:	7dfb      	ldrb	r3, [r7, #23]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d105      	bne.n	80031ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e2:	4b56      	ldr	r3, [pc, #344]	; (800333c <HAL_RCC_OscConfig+0x4e8>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	4a55      	ldr	r2, [pc, #340]	; (800333c <HAL_RCC_OscConfig+0x4e8>)
 80031e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 809b 	beq.w	800332e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031f8:	4b50      	ldr	r3, [pc, #320]	; (800333c <HAL_RCC_OscConfig+0x4e8>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 030c 	and.w	r3, r3, #12
 8003200:	2b08      	cmp	r3, #8
 8003202:	d05c      	beq.n	80032be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d141      	bne.n	8003290 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320c:	4b4c      	ldr	r3, [pc, #304]	; (8003340 <HAL_RCC_OscConfig+0x4ec>)
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003212:	f7fd fdd5 	bl	8000dc0 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800321a:	f7fd fdd1 	bl	8000dc0 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e081      	b.n	8003330 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322c:	4b43      	ldr	r3, [pc, #268]	; (800333c <HAL_RCC_OscConfig+0x4e8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1f0      	bne.n	800321a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69da      	ldr	r2, [r3, #28]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	019b      	lsls	r3, r3, #6
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	085b      	lsrs	r3, r3, #1
 8003250:	3b01      	subs	r3, #1
 8003252:	041b      	lsls	r3, r3, #16
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	061b      	lsls	r3, r3, #24
 800325c:	4937      	ldr	r1, [pc, #220]	; (800333c <HAL_RCC_OscConfig+0x4e8>)
 800325e:	4313      	orrs	r3, r2
 8003260:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003262:	4b37      	ldr	r3, [pc, #220]	; (8003340 <HAL_RCC_OscConfig+0x4ec>)
 8003264:	2201      	movs	r2, #1
 8003266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7fd fdaa 	bl	8000dc0 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003270:	f7fd fda6 	bl	8000dc0 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e056      	b.n	8003330 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003282:	4b2e      	ldr	r3, [pc, #184]	; (800333c <HAL_RCC_OscConfig+0x4e8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0x41c>
 800328e:	e04e      	b.n	800332e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003290:	4b2b      	ldr	r3, [pc, #172]	; (8003340 <HAL_RCC_OscConfig+0x4ec>)
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003296:	f7fd fd93 	bl	8000dc0 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329e:	f7fd fd8f 	bl	8000dc0 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e03f      	b.n	8003330 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b0:	4b22      	ldr	r3, [pc, #136]	; (800333c <HAL_RCC_OscConfig+0x4e8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1f0      	bne.n	800329e <HAL_RCC_OscConfig+0x44a>
 80032bc:	e037      	b.n	800332e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e032      	b.n	8003330 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032ca:	4b1c      	ldr	r3, [pc, #112]	; (800333c <HAL_RCC_OscConfig+0x4e8>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d028      	beq.n	800332a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d121      	bne.n	800332a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d11a      	bne.n	800332a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032fa:	4013      	ands	r3, r2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003300:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003302:	4293      	cmp	r3, r2
 8003304:	d111      	bne.n	800332a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	085b      	lsrs	r3, r3, #1
 8003312:	3b01      	subs	r3, #1
 8003314:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003316:	429a      	cmp	r2, r3
 8003318:	d107      	bne.n	800332a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003326:	429a      	cmp	r2, r3
 8003328:	d001      	beq.n	800332e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40007000 	.word	0x40007000
 800333c:	40023800 	.word	0x40023800
 8003340:	42470060 	.word	0x42470060

08003344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0cc      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003358:	4b68      	ldr	r3, [pc, #416]	; (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d90c      	bls.n	8003380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b65      	ldr	r3, [pc, #404]	; (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336e:	4b63      	ldr	r3, [pc, #396]	; (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0b8      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d020      	beq.n	80033ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003398:	4b59      	ldr	r3, [pc, #356]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	4a58      	ldr	r2, [pc, #352]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033b0:	4b53      	ldr	r3, [pc, #332]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4a52      	ldr	r2, [pc, #328]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033bc:	4b50      	ldr	r3, [pc, #320]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	494d      	ldr	r1, [pc, #308]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d044      	beq.n	8003464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d107      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e2:	4b47      	ldr	r3, [pc, #284]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d119      	bne.n	8003422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e07f      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d003      	beq.n	8003402 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d107      	bne.n	8003412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003402:	4b3f      	ldr	r3, [pc, #252]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e06f      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003412:	4b3b      	ldr	r3, [pc, #236]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e067      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003422:	4b37      	ldr	r3, [pc, #220]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f023 0203 	bic.w	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	4934      	ldr	r1, [pc, #208]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	4313      	orrs	r3, r2
 8003432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003434:	f7fd fcc4 	bl	8000dc0 <HAL_GetTick>
 8003438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343a:	e00a      	b.n	8003452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800343c:	f7fd fcc0 	bl	8000dc0 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	; 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e04f      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003452:	4b2b      	ldr	r3, [pc, #172]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 020c 	and.w	r2, r3, #12
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	429a      	cmp	r2, r3
 8003462:	d1eb      	bne.n	800343c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003464:	4b25      	ldr	r3, [pc, #148]	; (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d20c      	bcs.n	800348c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003472:	4b22      	ldr	r3, [pc, #136]	; (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800347a:	4b20      	ldr	r3, [pc, #128]	; (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e032      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003498:	4b19      	ldr	r3, [pc, #100]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4916      	ldr	r1, [pc, #88]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d009      	beq.n	80034ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034b6:	4b12      	ldr	r3, [pc, #72]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	490e      	ldr	r1, [pc, #56]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034ca:	f000 f821 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 80034ce:	4602      	mov	r2, r0
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	490a      	ldr	r1, [pc, #40]	; (8003504 <HAL_RCC_ClockConfig+0x1c0>)
 80034dc:	5ccb      	ldrb	r3, [r1, r3]
 80034de:	fa22 f303 	lsr.w	r3, r2, r3
 80034e2:	4a09      	ldr	r2, [pc, #36]	; (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034e6:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_RCC_ClockConfig+0x1c8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd fc24 	bl	8000d38 <HAL_InitTick>

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40023c00 	.word	0x40023c00
 8003500:	40023800 	.word	0x40023800
 8003504:	0800bcf4 	.word	0x0800bcf4
 8003508:	20000000 	.word	0x20000000
 800350c:	20000004 	.word	0x20000004

08003510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003510:	b5b0      	push	{r4, r5, r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003516:	2100      	movs	r1, #0
 8003518:	6079      	str	r1, [r7, #4]
 800351a:	2100      	movs	r1, #0
 800351c:	60f9      	str	r1, [r7, #12]
 800351e:	2100      	movs	r1, #0
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003522:	2100      	movs	r1, #0
 8003524:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003526:	4952      	ldr	r1, [pc, #328]	; (8003670 <HAL_RCC_GetSysClockFreq+0x160>)
 8003528:	6889      	ldr	r1, [r1, #8]
 800352a:	f001 010c 	and.w	r1, r1, #12
 800352e:	2908      	cmp	r1, #8
 8003530:	d00d      	beq.n	800354e <HAL_RCC_GetSysClockFreq+0x3e>
 8003532:	2908      	cmp	r1, #8
 8003534:	f200 8094 	bhi.w	8003660 <HAL_RCC_GetSysClockFreq+0x150>
 8003538:	2900      	cmp	r1, #0
 800353a:	d002      	beq.n	8003542 <HAL_RCC_GetSysClockFreq+0x32>
 800353c:	2904      	cmp	r1, #4
 800353e:	d003      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0x38>
 8003540:	e08e      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003542:	4b4c      	ldr	r3, [pc, #304]	; (8003674 <HAL_RCC_GetSysClockFreq+0x164>)
 8003544:	60bb      	str	r3, [r7, #8]
       break;
 8003546:	e08e      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003548:	4b4b      	ldr	r3, [pc, #300]	; (8003678 <HAL_RCC_GetSysClockFreq+0x168>)
 800354a:	60bb      	str	r3, [r7, #8]
      break;
 800354c:	e08b      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800354e:	4948      	ldr	r1, [pc, #288]	; (8003670 <HAL_RCC_GetSysClockFreq+0x160>)
 8003550:	6849      	ldr	r1, [r1, #4]
 8003552:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003556:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003558:	4945      	ldr	r1, [pc, #276]	; (8003670 <HAL_RCC_GetSysClockFreq+0x160>)
 800355a:	6849      	ldr	r1, [r1, #4]
 800355c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003560:	2900      	cmp	r1, #0
 8003562:	d024      	beq.n	80035ae <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003564:	4942      	ldr	r1, [pc, #264]	; (8003670 <HAL_RCC_GetSysClockFreq+0x160>)
 8003566:	6849      	ldr	r1, [r1, #4]
 8003568:	0989      	lsrs	r1, r1, #6
 800356a:	4608      	mov	r0, r1
 800356c:	f04f 0100 	mov.w	r1, #0
 8003570:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003574:	f04f 0500 	mov.w	r5, #0
 8003578:	ea00 0204 	and.w	r2, r0, r4
 800357c:	ea01 0305 	and.w	r3, r1, r5
 8003580:	493d      	ldr	r1, [pc, #244]	; (8003678 <HAL_RCC_GetSysClockFreq+0x168>)
 8003582:	fb01 f003 	mul.w	r0, r1, r3
 8003586:	2100      	movs	r1, #0
 8003588:	fb01 f102 	mul.w	r1, r1, r2
 800358c:	1844      	adds	r4, r0, r1
 800358e:	493a      	ldr	r1, [pc, #232]	; (8003678 <HAL_RCC_GetSysClockFreq+0x168>)
 8003590:	fba2 0101 	umull	r0, r1, r2, r1
 8003594:	1863      	adds	r3, r4, r1
 8003596:	4619      	mov	r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	461a      	mov	r2, r3
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	f7fc fe1a 	bl	80001d8 <__aeabi_uldivmod>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4613      	mov	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	e04a      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ae:	4b30      	ldr	r3, [pc, #192]	; (8003670 <HAL_RCC_GetSysClockFreq+0x160>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	099b      	lsrs	r3, r3, #6
 80035b4:	461a      	mov	r2, r3
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035be:	f04f 0100 	mov.w	r1, #0
 80035c2:	ea02 0400 	and.w	r4, r2, r0
 80035c6:	ea03 0501 	and.w	r5, r3, r1
 80035ca:	4620      	mov	r0, r4
 80035cc:	4629      	mov	r1, r5
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	014b      	lsls	r3, r1, #5
 80035d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035dc:	0142      	lsls	r2, r0, #5
 80035de:	4610      	mov	r0, r2
 80035e0:	4619      	mov	r1, r3
 80035e2:	1b00      	subs	r0, r0, r4
 80035e4:	eb61 0105 	sbc.w	r1, r1, r5
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	018b      	lsls	r3, r1, #6
 80035f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035f6:	0182      	lsls	r2, r0, #6
 80035f8:	1a12      	subs	r2, r2, r0
 80035fa:	eb63 0301 	sbc.w	r3, r3, r1
 80035fe:	f04f 0000 	mov.w	r0, #0
 8003602:	f04f 0100 	mov.w	r1, #0
 8003606:	00d9      	lsls	r1, r3, #3
 8003608:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800360c:	00d0      	lsls	r0, r2, #3
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	1912      	adds	r2, r2, r4
 8003614:	eb45 0303 	adc.w	r3, r5, r3
 8003618:	f04f 0000 	mov.w	r0, #0
 800361c:	f04f 0100 	mov.w	r1, #0
 8003620:	0299      	lsls	r1, r3, #10
 8003622:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003626:	0290      	lsls	r0, r2, #10
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4610      	mov	r0, r2
 800362e:	4619      	mov	r1, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	461a      	mov	r2, r3
 8003634:	f04f 0300 	mov.w	r3, #0
 8003638:	f7fc fdce 	bl	80001d8 <__aeabi_uldivmod>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4613      	mov	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003644:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <HAL_RCC_GetSysClockFreq+0x160>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	0c1b      	lsrs	r3, r3, #16
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	3301      	adds	r3, #1
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	fbb2 f3f3 	udiv	r3, r2, r3
 800365c:	60bb      	str	r3, [r7, #8]
      break;
 800365e:	e002      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003660:	4b04      	ldr	r3, [pc, #16]	; (8003674 <HAL_RCC_GetSysClockFreq+0x164>)
 8003662:	60bb      	str	r3, [r7, #8]
      break;
 8003664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003666:	68bb      	ldr	r3, [r7, #8]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bdb0      	pop	{r4, r5, r7, pc}
 8003670:	40023800 	.word	0x40023800
 8003674:	00f42400 	.word	0x00f42400
 8003678:	00b71b00 	.word	0x00b71b00

0800367c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003680:	4b03      	ldr	r3, [pc, #12]	; (8003690 <HAL_RCC_GetHCLKFreq+0x14>)
 8003682:	681b      	ldr	r3, [r3, #0]
}
 8003684:	4618      	mov	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	20000000 	.word	0x20000000

08003694 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e022      	b.n	80036ec <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d105      	bne.n	80036be <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7fd f98d 	bl	80009d8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2203      	movs	r2, #3
 80036c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f814 	bl	80036f4 <HAL_SD_InitCard>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e00a      	b.n	80036ec <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80036f4:	b5b0      	push	{r4, r5, r7, lr}
 80036f6:	b08e      	sub	sp, #56	; 0x38
 80036f8:	af04      	add	r7, sp, #16
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003704:	2300      	movs	r3, #0
 8003706:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800370c:	2300      	movs	r3, #0
 800370e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003710:	2376      	movs	r3, #118	; 0x76
 8003712:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681d      	ldr	r5, [r3, #0]
 8003718:	466c      	mov	r4, sp
 800371a:	f107 0314 	add.w	r3, r7, #20
 800371e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003722:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003726:	f107 0308 	add.w	r3, r7, #8
 800372a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800372c:	4628      	mov	r0, r5
 800372e:	f001 fae0 	bl	8004cf2 <SDIO_Init>
 8003732:	4603      	mov	r3, r0
 8003734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e04c      	b.n	80037de <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003744:	4b28      	ldr	r3, [pc, #160]	; (80037e8 <HAL_SD_InitCard+0xf4>)
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f001 fb18 	bl	8004d84 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003754:	4b24      	ldr	r3, [pc, #144]	; (80037e8 <HAL_SD_InitCard+0xf4>)
 8003756:	2201      	movs	r2, #1
 8003758:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f001 f804 	bl	8004768 <SD_PowerON>
 8003760:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00b      	beq.n	8003780 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e02e      	b.n	80037de <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 ff25 	bl	80045d0 <SD_InitCard>
 8003786:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e01b      	b.n	80037de <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 fb7b 	bl	8004eaa <SDMMC_CmdBlockLength>
 80037b4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00f      	beq.n	80037dc <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a0a      	ldr	r2, [pc, #40]	; (80037ec <HAL_SD_InitCard+0xf8>)
 80037c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3728      	adds	r7, #40	; 0x28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bdb0      	pop	{r4, r5, r7, pc}
 80037e6:	bf00      	nop
 80037e8:	422580a0 	.word	0x422580a0
 80037ec:	004005ff 	.word	0x004005ff

080037f0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08c      	sub	sp, #48	; 0x30
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d107      	bne.n	8003818 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0c0      	b.n	800399a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b01      	cmp	r3, #1
 8003822:	f040 80b9 	bne.w	8003998 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800382c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	441a      	add	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003836:	429a      	cmp	r2, r3
 8003838:	d907      	bls.n	800384a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e0a7      	b.n	800399a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2203      	movs	r2, #3
 800384e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2200      	movs	r2, #0
 8003858:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003868:	f043 0302 	orr.w	r3, r3, #2
 800386c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	4a4c      	ldr	r2, [pc, #304]	; (80039a4 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8003874:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	4a4b      	ldr	r2, [pc, #300]	; (80039a8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800387c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	2200      	movs	r2, #0
 8003884:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	2200      	movs	r2, #0
 800388c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3380      	adds	r3, #128	; 0x80
 80038b4:	4619      	mov	r1, r3
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	025b      	lsls	r3, r3, #9
 80038bc:	089b      	lsrs	r3, r3, #2
 80038be:	f7fd fc6f 	bl	80011a0 <HAL_DMA_Start_IT>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d017      	beq.n	80038f8 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80038d6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a33      	ldr	r2, [pc, #204]	; (80039ac <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80038de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e050      	b.n	800399a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80038f8:	4b2d      	ldr	r3, [pc, #180]	; (80039b0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003902:	2b01      	cmp	r3, #1
 8003904:	d002      	beq.n	800390c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	025b      	lsls	r3, r3, #9
 800390a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800390c:	f04f 33ff 	mov.w	r3, #4294967295
 8003910:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	025b      	lsls	r3, r3, #9
 8003916:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003918:	2390      	movs	r3, #144	; 0x90
 800391a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800391c:	2302      	movs	r3, #2
 800391e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003920:	2300      	movs	r3, #0
 8003922:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003924:	2301      	movs	r3, #1
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f107 0210 	add.w	r2, r7, #16
 8003930:	4611      	mov	r1, r2
 8003932:	4618      	mov	r0, r3
 8003934:	f001 fa8d 	bl	8004e52 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d90a      	bls.n	8003954 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2282      	movs	r2, #130	; 0x82
 8003942:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800394a:	4618      	mov	r0, r3
 800394c:	f001 faf1 	bl	8004f32 <SDMMC_CmdReadMultiBlock>
 8003950:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003952:	e009      	b.n	8003968 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2281      	movs	r2, #129	; 0x81
 8003958:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003960:	4618      	mov	r0, r3
 8003962:	f001 fac4 	bl	8004eee <SDMMC_CmdReadSingleBlock>
 8003966:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396a:	2b00      	cmp	r3, #0
 800396c:	d012      	beq.n	8003994 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a0e      	ldr	r2, [pc, #56]	; (80039ac <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003974:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800397a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397c:	431a      	orrs	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e002      	b.n	800399a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	e000      	b.n	800399a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003998:	2302      	movs	r3, #2
  }
}
 800399a:	4618      	mov	r0, r3
 800399c:	3730      	adds	r7, #48	; 0x30
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	080043df 	.word	0x080043df
 80039a8:	08004451 	.word	0x08004451
 80039ac:	004005ff 	.word	0x004005ff
 80039b0:	4225858c 	.word	0x4225858c

080039b4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08c      	sub	sp, #48	; 0x30
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d107      	bne.n	80039dc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0c5      	b.n	8003b68 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	f040 80be 	bne.w	8003b66 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80039f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	441a      	add	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d907      	bls.n	8003a0e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e0ac      	b.n	8003b68 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2203      	movs	r2, #3
 8003a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003a2c:	f043 0302 	orr.w	r3, r3, #2
 8003a30:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a36:	4a4e      	ldr	r2, [pc, #312]	; (8003b70 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003a38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3e:	4a4d      	ldr	r2, [pc, #308]	; (8003b74 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003a40:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	2200      	movs	r2, #0
 8003a48:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d002      	beq.n	8003a58 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	025b      	lsls	r3, r3, #9
 8003a56:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d90a      	bls.n	8003a74 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	22a0      	movs	r2, #160	; 0xa0
 8003a62:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f001 faa5 	bl	8004fba <SDMMC_CmdWriteMultiBlock>
 8003a70:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003a72:	e009      	b.n	8003a88 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2290      	movs	r2, #144	; 0x90
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a80:	4618      	mov	r0, r3
 8003a82:	f001 fa78 	bl	8004f76 <SDMMC_CmdWriteSingleBlock>
 8003a86:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d012      	beq.n	8003ab4 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a39      	ldr	r2, [pc, #228]	; (8003b78 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003a94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e059      	b.n	8003b68 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003ab4:	4b31      	ldr	r3, [pc, #196]	; (8003b7c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abe:	2240      	movs	r2, #64	; 0x40
 8003ac0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003ae2:	68b9      	ldr	r1, [r7, #8]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3380      	adds	r3, #128	; 0x80
 8003aea:	461a      	mov	r2, r3
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	025b      	lsls	r3, r3, #9
 8003af0:	089b      	lsrs	r3, r3, #2
 8003af2:	f7fd fb55 	bl	80011a0 <HAL_DMA_Start_IT>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d01c      	beq.n	8003b36 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	6812      	ldr	r2, [r2, #0]
 8003b06:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8003b0a:	f023 0302 	bic.w	r3, r3, #2
 8003b0e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a18      	ldr	r2, [pc, #96]	; (8003b78 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003b16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e018      	b.n	8003b68 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003b36:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	025b      	lsls	r3, r3, #9
 8003b40:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003b42:	2390      	movs	r3, #144	; 0x90
 8003b44:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f107 0210 	add.w	r2, r7, #16
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f001 f978 	bl	8004e52 <SDIO_ConfigData>

      return HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	e000      	b.n	8003b68 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003b66:	2302      	movs	r3, #2
  }
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3730      	adds	r7, #48	; 0x30
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	080043b5 	.word	0x080043b5
 8003b74:	08004451 	.word	0x08004451
 8003b78:	004005ff 	.word	0x004005ff
 8003b7c:	4225858c 	.word	0x4225858c

08003b80 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d008      	beq.n	8003bae <HAL_SD_IRQHandler+0x2e>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fffd 	bl	8004ba6 <SD_Read_IT>
 8003bac:	e165      	b.n	8003e7a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 808f 	beq.w	8003cdc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bc6:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003bd6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003bda:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d039      	beq.n	8003c6a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d104      	bne.n	8003c0a <HAL_SD_IRQHandler+0x8a>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d011      	beq.n	8003c2e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f001 f9f6 	bl	8005000 <SDMMC_CmdStopTransfer>
 8003c14:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f92f 	bl	8003e8c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c36:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d104      	bne.n	8003c5a <HAL_SD_IRQHandler+0xda>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f003 f9de 	bl	800701c <HAL_SD_RxCpltCallback>
 8003c60:	e10b      	b.n	8003e7a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f003 f9d0 	bl	8007008 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c68:	e107      	b.n	8003e7a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 8102 	beq.w	8003e7a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d011      	beq.n	8003ca4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f001 f9bb 	bl	8005000 <SDMMC_CmdStopTransfer>
 8003c8a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d008      	beq.n	8003ca4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f8f4 	bl	8003e8c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f040 80e5 	bne.w	8003e7a <HAL_SD_IRQHandler+0x2fa>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f040 80df 	bne.w	8003e7a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0208 	bic.w	r2, r2, #8
 8003cca:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f003 f997 	bl	8007008 <HAL_SD_TxCpltCallback>
}
 8003cda:	e0ce      	b.n	8003e7a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d008      	beq.n	8003cfc <HAL_SD_IRQHandler+0x17c>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 ffa7 	bl	8004c48 <SD_Write_IT>
 8003cfa:	e0be      	b.n	8003e7a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d02:	f240 233a 	movw	r3, #570	; 0x23a
 8003d06:	4013      	ands	r3, r2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 80b6 	beq.w	8003e7a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d20:	f043 0202 	orr.w	r2, r3, #2
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d005      	beq.n	8003d42 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3a:	f043 0208 	orr.w	r2, r3, #8
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	f043 0220 	orr.w	r2, r3, #32
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6e:	f043 0210 	orr.w	r2, r3, #16
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	f043 0208 	orr.w	r2, r3, #8
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f240 723a 	movw	r2, #1850	; 0x73a
 8003d98:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003da8:	f023 0302 	bic.w	r3, r3, #2
 8003dac:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 f924 	bl	8005000 <SDMMC_CmdStopTransfer>
 8003db8:	4602      	mov	r2, r0
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f855 	bl	8003e8c <HAL_SD_ErrorCallback>
}
 8003de2:	e04a      	b.n	8003e7a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d045      	beq.n	8003e7a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d104      	bne.n	8003e02 <HAL_SD_IRQHandler+0x282>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f003 0320 	and.w	r3, r3, #32
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d011      	beq.n	8003e26 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e06:	4a1f      	ldr	r2, [pc, #124]	; (8003e84 <HAL_SD_IRQHandler+0x304>)
 8003e08:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fd fa1e 	bl	8001250 <HAL_DMA_Abort_IT>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d02f      	beq.n	8003e7a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fb68 	bl	80044f4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003e24:	e029      	b.n	8003e7a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d104      	bne.n	8003e3a <HAL_SD_IRQHandler+0x2ba>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d011      	beq.n	8003e5e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	4a12      	ldr	r2, [pc, #72]	; (8003e88 <HAL_SD_IRQHandler+0x308>)
 8003e40:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fd fa02 	bl	8001250 <HAL_DMA_Abort_IT>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d013      	beq.n	8003e7a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fb83 	bl	8004562 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003e5c:	e00d      	b.n	8003e7a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f003 f8be 	bl	8006ff4 <HAL_SD_AbortCallback>
}
 8003e78:	e7ff      	b.n	8003e7a <HAL_SD_IRQHandler+0x2fa>
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	080044f5 	.word	0x080044f5
 8003e88:	08004563 	.word	0x08004563

08003e8c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eae:	0f9b      	lsrs	r3, r3, #30
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eba:	0e9b      	lsrs	r3, r3, #26
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ecc:	0e1b      	lsrs	r3, r3, #24
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ede:	0c1b      	lsrs	r3, r3, #16
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eea:	0a1b      	lsrs	r3, r3, #8
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f00:	0d1b      	lsrs	r3, r3, #20
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f0c:	0c1b      	lsrs	r3, r3, #16
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f1e:	0bdb      	lsrs	r3, r3, #15
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f30:	0b9b      	lsrs	r3, r3, #14
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f42:	0b5b      	lsrs	r3, r3, #13
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f54:	0b1b      	lsrs	r3, r3, #12
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2200      	movs	r2, #0
 8003f66:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d163      	bne.n	8004038 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f74:	009a      	lsls	r2, r3, #2
 8003f76:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003f80:	0f92      	lsrs	r2, r2, #30
 8003f82:	431a      	orrs	r2, r3
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f8c:	0edb      	lsrs	r3, r3, #27
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f9e:	0e1b      	lsrs	r3, r3, #24
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fb0:	0d5b      	lsrs	r3, r3, #21
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fc2:	0c9b      	lsrs	r3, r3, #18
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fd4:	0bdb      	lsrs	r3, r3, #15
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	7e1b      	ldrb	r3, [r3, #24]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	3302      	adds	r3, #2
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004002:	fb02 f203 	mul.w	r2, r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	7a1b      	ldrb	r3, [r3, #8]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	2201      	movs	r2, #1
 8004016:	409a      	lsls	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004024:	0a52      	lsrs	r2, r2, #9
 8004026:	fb02 f203 	mul.w	r2, r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004034:	661a      	str	r2, [r3, #96]	; 0x60
 8004036:	e031      	b.n	800409c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403c:	2b01      	cmp	r3, #1
 800403e:	d11d      	bne.n	800407c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004044:	041b      	lsls	r3, r3, #16
 8004046:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800404e:	0c1b      	lsrs	r3, r3, #16
 8004050:	431a      	orrs	r2, r3
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	3301      	adds	r3, #1
 800405c:	029a      	lsls	r2, r3, #10
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004070:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	661a      	str	r2, [r3, #96]	; 0x60
 800407a:	e00f      	b.n	800409c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a58      	ldr	r2, [pc, #352]	; (80041e4 <HAL_SD_GetCardCSD+0x344>)
 8004082:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e09d      	b.n	80041d8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a0:	0b9b      	lsrs	r3, r3, #14
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040b2:	09db      	lsrs	r3, r3, #7
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d4:	0fdb      	lsrs	r3, r3, #31
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e0:	0f5b      	lsrs	r3, r3, #29
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	f003 0303 	and.w	r3, r3, #3
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f2:	0e9b      	lsrs	r3, r3, #26
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004104:	0d9b      	lsrs	r3, r3, #22
 8004106:	b2db      	uxtb	r3, r3
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	b2da      	uxtb	r2, r3
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004116:	0d5b      	lsrs	r3, r3, #21
 8004118:	b2db      	uxtb	r3, r3
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	b2da      	uxtb	r2, r3
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004132:	0c1b      	lsrs	r3, r3, #16
 8004134:	b2db      	uxtb	r3, r3
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	b2da      	uxtb	r2, r3
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004146:	0bdb      	lsrs	r3, r3, #15
 8004148:	b2db      	uxtb	r3, r3
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	b2da      	uxtb	r2, r3
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415a:	0b9b      	lsrs	r3, r3, #14
 800415c:	b2db      	uxtb	r3, r3
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	b2da      	uxtb	r2, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	0b5b      	lsrs	r3, r3, #13
 8004170:	b2db      	uxtb	r3, r3
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	b2da      	uxtb	r2, r3
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004182:	0b1b      	lsrs	r3, r3, #12
 8004184:	b2db      	uxtb	r3, r3
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	b2da      	uxtb	r2, r3
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004196:	0a9b      	lsrs	r3, r3, #10
 8004198:	b2db      	uxtb	r3, r3
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	0a1b      	lsrs	r3, r3, #8
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	004005ff 	.word	0x004005ff

080041e8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004240:	b5b0      	push	{r4, r5, r7, lr}
 8004242:	b08e      	sub	sp, #56	; 0x38
 8004244:	af04      	add	r7, sp, #16
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2203      	movs	r2, #3
 8004254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425c:	2b03      	cmp	r3, #3
 800425e:	d02e      	beq.n	80042be <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004266:	d106      	bne.n	8004276 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	639a      	str	r2, [r3, #56]	; 0x38
 8004274:	e029      	b.n	80042ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800427c:	d10a      	bne.n	8004294 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fb28 	bl	80048d4 <SD_WideBus_Enable>
 8004284:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	639a      	str	r2, [r3, #56]	; 0x38
 8004292:	e01a      	b.n	80042ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fb65 	bl	800496a <SD_WideBus_Disable>
 80042a0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	639a      	str	r2, [r3, #56]	; 0x38
 80042ae:	e00c      	b.n	80042ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	639a      	str	r2, [r3, #56]	; 0x38
 80042bc:	e005      	b.n	80042ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00b      	beq.n	80042ea <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a26      	ldr	r2, [pc, #152]	; (8004370 <HAL_SD_ConfigWideBusOperation+0x130>)
 80042d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80042e8:	e01f      	b.n	800432a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681d      	ldr	r5, [r3, #0]
 8004310:	466c      	mov	r4, sp
 8004312:	f107 0314 	add.w	r3, r7, #20
 8004316:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800431a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800431e:	f107 0308 	add.w	r3, r7, #8
 8004322:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004324:	4628      	mov	r0, r5
 8004326:	f000 fce4 	bl	8004cf2 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fdb9 	bl	8004eaa <SDMMC_CmdBlockLength>
 8004338:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00c      	beq.n	800435a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a0a      	ldr	r2, [pc, #40]	; (8004370 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004346:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004366:	4618      	mov	r0, r3
 8004368:	3728      	adds	r7, #40	; 0x28
 800436a:	46bd      	mov	sp, r7
 800436c:	bdb0      	pop	{r4, r5, r7, pc}
 800436e:	bf00      	nop
 8004370:	004005ff 	.word	0x004005ff

08004374 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800437c:	2300      	movs	r3, #0
 800437e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004380:	f107 030c 	add.w	r3, r7, #12
 8004384:	4619      	mov	r1, r3
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fa7c 	bl	8004884 <SD_SendStatus>
 800438c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	0a5b      	lsrs	r3, r3, #9
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80043aa:	693b      	ldr	r3, [r7, #16]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043d0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80043d2:	bf00      	nop
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f0:	2b82      	cmp	r3, #130	; 0x82
 80043f2:	d111      	bne.n	8004418 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 fe01 	bl	8005000 <SDMMC_CmdStopTransfer>
 80043fe:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d008      	beq.n	8004418 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	431a      	orrs	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f7ff fd3a 	bl	8003e8c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0208 	bic.w	r2, r2, #8
 8004426:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004430:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f002 fdeb 	bl	800701c <HAL_SD_RxCpltCallback>
#endif
}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fd f8a2 	bl	80015a8 <HAL_DMA_GetError>
 8004464:	4603      	mov	r3, r0
 8004466:	2b02      	cmp	r3, #2
 8004468:	d03e      	beq.n	80044e8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004470:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004478:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d002      	beq.n	8004486 <SD_DMAError+0x36>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d12d      	bne.n	80044e2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a19      	ldr	r2, [pc, #100]	; (80044f0 <SD_DMAError+0xa0>)
 800448c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800449c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80044aa:	6978      	ldr	r0, [r7, #20]
 80044ac:	f7ff ff62 	bl	8004374 <HAL_SD_GetCardState>
 80044b0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b06      	cmp	r3, #6
 80044b6:	d002      	beq.n	80044be <SD_DMAError+0x6e>
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b05      	cmp	r3, #5
 80044bc:	d10a      	bne.n	80044d4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fd9c 	bl	8005000 <SDMMC_CmdStopTransfer>
 80044c8:	4602      	mov	r2, r0
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	431a      	orrs	r2, r3
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2200      	movs	r2, #0
 80044e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80044e2:	6978      	ldr	r0, [r7, #20]
 80044e4:	f7ff fcd2 	bl	8003e8c <HAL_SD_ErrorCallback>
#endif
  }
}
 80044e8:	bf00      	nop
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	004005ff 	.word	0x004005ff

080044f4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004500:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f240 523a 	movw	r2, #1338	; 0x53a
 800450a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f7ff ff31 	bl	8004374 <HAL_SD_GetCardState>
 8004512:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b06      	cmp	r3, #6
 8004526:	d002      	beq.n	800452e <SD_DMATxAbort+0x3a>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b05      	cmp	r3, #5
 800452c:	d10a      	bne.n	8004544 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fd64 	bl	8005000 <SDMMC_CmdStopTransfer>
 8004538:	4602      	mov	r2, r0
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	431a      	orrs	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004548:	2b00      	cmp	r3, #0
 800454a:	d103      	bne.n	8004554 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f002 fd51 	bl	8006ff4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004552:	e002      	b.n	800455a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f7ff fc99 	bl	8003e8c <HAL_SD_ErrorCallback>
}
 800455a:	bf00      	nop
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f240 523a 	movw	r2, #1338	; 0x53a
 8004578:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f7ff fefa 	bl	8004374 <HAL_SD_GetCardState>
 8004580:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b06      	cmp	r3, #6
 8004594:	d002      	beq.n	800459c <SD_DMARxAbort+0x3a>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b05      	cmp	r3, #5
 800459a:	d10a      	bne.n	80045b2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fd2d 	bl	8005000 <SDMMC_CmdStopTransfer>
 80045a6:	4602      	mov	r2, r0
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ac:	431a      	orrs	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d103      	bne.n	80045c2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f002 fd1a 	bl	8006ff4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80045c0:	e002      	b.n	80045c8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f7ff fc62 	bl	8003e8c <HAL_SD_ErrorCallback>
}
 80045c8:	bf00      	nop
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80045d0:	b5b0      	push	{r4, r5, r7, lr}
 80045d2:	b094      	sub	sp, #80	; 0x50
 80045d4:	af04      	add	r7, sp, #16
 80045d6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80045d8:	2301      	movs	r3, #1
 80045da:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fbde 	bl	8004da2 <SDIO_GetPowerState>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d102      	bne.n	80045f2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80045ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80045f0:	e0b6      	b.n	8004760 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d02f      	beq.n	800465a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fe08 	bl	8005214 <SDMMC_CmdSendCID>
 8004604:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <SD_InitCard+0x40>
    {
      return errorstate;
 800460c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800460e:	e0a7      	b.n	8004760 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2100      	movs	r1, #0
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fc08 	bl	8004e2c <SDIO_GetResponse>
 800461c:	4602      	mov	r2, r0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2104      	movs	r1, #4
 8004628:	4618      	mov	r0, r3
 800462a:	f000 fbff 	bl	8004e2c <SDIO_GetResponse>
 800462e:	4602      	mov	r2, r0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2108      	movs	r1, #8
 800463a:	4618      	mov	r0, r3
 800463c:	f000 fbf6 	bl	8004e2c <SDIO_GetResponse>
 8004640:	4602      	mov	r2, r0
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	210c      	movs	r1, #12
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fbed 	bl	8004e2c <SDIO_GetResponse>
 8004652:	4602      	mov	r2, r0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465e:	2b03      	cmp	r3, #3
 8004660:	d00d      	beq.n	800467e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f107 020e 	add.w	r2, r7, #14
 800466a:	4611      	mov	r1, r2
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fe0e 	bl	800528e <SDMMC_CmdSetRelAdd>
 8004672:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <SD_InitCard+0xae>
    {
      return errorstate;
 800467a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467c:	e070      	b.n	8004760 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004682:	2b03      	cmp	r3, #3
 8004684:	d036      	beq.n	80046f4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004686:	89fb      	ldrh	r3, [r7, #14]
 8004688:	461a      	mov	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004696:	041b      	lsls	r3, r3, #16
 8004698:	4619      	mov	r1, r3
 800469a:	4610      	mov	r0, r2
 800469c:	f000 fdd8 	bl	8005250 <SDMMC_CmdSendCSD>
 80046a0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80046a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <SD_InitCard+0xdc>
    {
      return errorstate;
 80046a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046aa:	e059      	b.n	8004760 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2100      	movs	r1, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fbba 	bl	8004e2c <SDIO_GetResponse>
 80046b8:	4602      	mov	r2, r0
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2104      	movs	r1, #4
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fbb1 	bl	8004e2c <SDIO_GetResponse>
 80046ca:	4602      	mov	r2, r0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2108      	movs	r1, #8
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fba8 	bl	8004e2c <SDIO_GetResponse>
 80046dc:	4602      	mov	r2, r0
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	210c      	movs	r1, #12
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 fb9f 	bl	8004e2c <SDIO_GetResponse>
 80046ee:	4602      	mov	r2, r0
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2104      	movs	r1, #4
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fb96 	bl	8004e2c <SDIO_GetResponse>
 8004700:	4603      	mov	r3, r0
 8004702:	0d1a      	lsrs	r2, r3, #20
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004708:	f107 0310 	add.w	r3, r7, #16
 800470c:	4619      	mov	r1, r3
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff fbc6 	bl	8003ea0 <HAL_SD_GetCardCSD>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800471a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800471e:	e01f      	b.n	8004760 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6819      	ldr	r1, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004728:	041b      	lsls	r3, r3, #16
 800472a:	461a      	mov	r2, r3
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	4608      	mov	r0, r1
 8004732:	f000 fc87 	bl	8005044 <SDMMC_CmdSelDesel>
 8004736:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <SD_InitCard+0x172>
  {
    return errorstate;
 800473e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004740:	e00e      	b.n	8004760 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681d      	ldr	r5, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	466c      	mov	r4, sp
 800474a:	f103 0210 	add.w	r2, r3, #16
 800474e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004750:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004754:	3304      	adds	r3, #4
 8004756:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004758:	4628      	mov	r0, r5
 800475a:	f000 faca 	bl	8004cf2 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3740      	adds	r7, #64	; 0x40
 8004764:	46bd      	mov	sp, r7
 8004766:	bdb0      	pop	{r4, r5, r7, pc}

08004768 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	2300      	movs	r3, #0
 800477a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fc82 	bl	800508a <SDMMC_CmdGoIdleState>
 8004786:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <SD_PowerON+0x2a>
  {
    return errorstate;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	e072      	b.n	8004878 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fc95 	bl	80050c6 <SDMMC_CmdOperCond>
 800479c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00d      	beq.n	80047c0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fc6b 	bl	800508a <SDMMC_CmdGoIdleState>
 80047b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d004      	beq.n	80047c6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	e05b      	b.n	8004878 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d137      	bne.n	800483e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2100      	movs	r1, #0
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fc95 	bl	8005104 <SDMMC_CmdAppCommand>
 80047da:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d02d      	beq.n	800483e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80047e6:	e047      	b.n	8004878 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2100      	movs	r1, #0
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fc88 	bl	8005104 <SDMMC_CmdAppCommand>
 80047f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <SD_PowerON+0x98>
    {
      return errorstate;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	e03b      	b.n	8004878 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	491e      	ldr	r1, [pc, #120]	; (8004880 <SD_PowerON+0x118>)
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fc9e 	bl	8005148 <SDMMC_CmdAppOperCommand>
 800480c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004814:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004818:	e02e      	b.n	8004878 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2100      	movs	r1, #0
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fb03 	bl	8004e2c <SDIO_GetResponse>
 8004826:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	0fdb      	lsrs	r3, r3, #31
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <SD_PowerON+0xcc>
 8004830:	2301      	movs	r3, #1
 8004832:	e000      	b.n	8004836 <SD_PowerON+0xce>
 8004834:	2300      	movs	r3, #0
 8004836:	613b      	str	r3, [r7, #16]

    count++;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	3301      	adds	r3, #1
 800483c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004844:	4293      	cmp	r3, r2
 8004846:	d802      	bhi.n	800484e <SD_PowerON+0xe6>
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0cc      	beq.n	80047e8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004854:	4293      	cmp	r3, r2
 8004856:	d902      	bls.n	800485e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004858:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800485c:	e00c      	b.n	8004878 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	645a      	str	r2, [r3, #68]	; 0x44
 800486e:	e002      	b.n	8004876 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	c1100000 	.word	0xc1100000

08004884 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d102      	bne.n	800489a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004894:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004898:	e018      	b.n	80048cc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a2:	041b      	lsls	r3, r3, #16
 80048a4:	4619      	mov	r1, r3
 80048a6:	4610      	mov	r0, r2
 80048a8:	f000 fd12 	bl	80052d0 <SDMMC_CmdSendStatus>
 80048ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	e009      	b.n	80048cc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2100      	movs	r1, #0
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fab4 	bl	8004e2c <SDIO_GetResponse>
 80048c4:	4602      	mov	r2, r0
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	2300      	movs	r3, #0
 80048e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2100      	movs	r1, #0
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fa9e 	bl	8004e2c <SDIO_GetResponse>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048fa:	d102      	bne.n	8004902 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80048fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004900:	e02f      	b.n	8004962 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004902:	f107 030c 	add.w	r3, r7, #12
 8004906:	4619      	mov	r1, r3
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f879 	bl	8004a00 <SD_FindSCR>
 800490e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	e023      	b.n	8004962 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01c      	beq.n	800495e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800492c:	041b      	lsls	r3, r3, #16
 800492e:	4619      	mov	r1, r3
 8004930:	4610      	mov	r0, r2
 8004932:	f000 fbe7 	bl	8005104 <SDMMC_CmdAppCommand>
 8004936:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	e00f      	b.n	8004962 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2102      	movs	r1, #2
 8004948:	4618      	mov	r0, r3
 800494a:	f000 fc20 	bl	800518e <SDMMC_CmdBusWidth>
 800494e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	e003      	b.n	8004962 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800495a:	2300      	movs	r3, #0
 800495c:	e001      	b.n	8004962 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800495e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004962:	4618      	mov	r0, r3
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b086      	sub	sp, #24
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	2300      	movs	r3, #0
 8004978:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2100      	movs	r1, #0
 8004980:	4618      	mov	r0, r3
 8004982:	f000 fa53 	bl	8004e2c <SDIO_GetResponse>
 8004986:	4603      	mov	r3, r0
 8004988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004990:	d102      	bne.n	8004998 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004992:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004996:	e02f      	b.n	80049f8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004998:	f107 030c 	add.w	r3, r7, #12
 800499c:	4619      	mov	r1, r3
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f82e 	bl	8004a00 <SD_FindSCR>
 80049a4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	e023      	b.n	80049f8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d01c      	beq.n	80049f4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c2:	041b      	lsls	r3, r3, #16
 80049c4:	4619      	mov	r1, r3
 80049c6:	4610      	mov	r0, r2
 80049c8:	f000 fb9c 	bl	8005104 <SDMMC_CmdAppCommand>
 80049cc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	e00f      	b.n	80049f8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2100      	movs	r1, #0
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fbd5 	bl	800518e <SDMMC_CmdBusWidth>
 80049e4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	e003      	b.n	80049f8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80049f0:	2300      	movs	r3, #0
 80049f2:	e001      	b.n	80049f8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80049f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004a00:	b590      	push	{r4, r7, lr}
 8004a02:	b08f      	sub	sp, #60	; 0x3c
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004a0a:	f7fc f9d9 	bl	8000dc0 <HAL_GetTick>
 8004a0e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004a14:	2300      	movs	r3, #0
 8004a16:	60bb      	str	r3, [r7, #8]
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2108      	movs	r1, #8
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fa3f 	bl	8004eaa <SDMMC_CmdBlockLength>
 8004a2c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	e0b2      	b.n	8004b9e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a40:	041b      	lsls	r3, r3, #16
 8004a42:	4619      	mov	r1, r3
 8004a44:	4610      	mov	r0, r2
 8004a46:	f000 fb5d 	bl	8005104 <SDMMC_CmdAppCommand>
 8004a4a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	e0a3      	b.n	8004b9e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004a56:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004a5c:	2308      	movs	r3, #8
 8004a5e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004a60:	2330      	movs	r3, #48	; 0x30
 8004a62:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004a64:	2302      	movs	r3, #2
 8004a66:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f107 0210 	add.w	r2, r7, #16
 8004a78:	4611      	mov	r1, r2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 f9e9 	bl	8004e52 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fba4 	bl	80051d2 <SDMMC_CmdSendSCR>
 8004a8a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d02a      	beq.n	8004ae8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	e083      	b.n	8004b9e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00f      	beq.n	8004ac4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6819      	ldr	r1, [r3, #0]
 8004aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	f107 0208 	add.w	r2, r7, #8
 8004ab0:	18d4      	adds	r4, r2, r3
 8004ab2:	4608      	mov	r0, r1
 8004ab4:	f000 f948 	bl	8004d48 <SDIO_ReadFIFO>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	6023      	str	r3, [r4, #0]
      index++;
 8004abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abe:	3301      	adds	r3, #1
 8004ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ac2:	e006      	b.n	8004ad2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d012      	beq.n	8004af8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004ad2:	f7fc f975 	bl	8000dc0 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae0:	d102      	bne.n	8004ae8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004ae2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ae6:	e05a      	b.n	8004b9e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aee:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0cf      	beq.n	8004a96 <SD_FindSCR+0x96>
 8004af6:	e000      	b.n	8004afa <SD_FindSCR+0xfa>
      break;
 8004af8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2208      	movs	r2, #8
 8004b0e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004b10:	2308      	movs	r3, #8
 8004b12:	e044      	b.n	8004b9e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d005      	beq.n	8004b2e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2202      	movs	r2, #2
 8004b28:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e037      	b.n	8004b9e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b34:	f003 0320 	and.w	r3, r3, #32
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2220      	movs	r2, #32
 8004b42:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004b44:	2320      	movs	r3, #32
 8004b46:	e02a      	b.n	8004b9e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b50:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	061a      	lsls	r2, r3, #24
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	021b      	lsls	r3, r3, #8
 8004b5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b5e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	0a1b      	lsrs	r3, r3, #8
 8004b64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004b68:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	0e1b      	lsrs	r3, r3, #24
 8004b6e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b72:	601a      	str	r2, [r3, #0]
    scr++;
 8004b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b76:	3304      	adds	r3, #4
 8004b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	061a      	lsls	r2, r3, #24
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	021b      	lsls	r3, r3, #8
 8004b82:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b86:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	0a1b      	lsrs	r3, r3, #8
 8004b8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004b90:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	0e1b      	lsrs	r3, r3, #24
 8004b96:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	373c      	adds	r7, #60	; 0x3c
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd90      	pop	{r4, r7, pc}

08004ba6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b086      	sub	sp, #24
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d03f      	beq.n	8004c40 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	e033      	b.n	8004c2e <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 f8bc 	bl	8004d48 <SDIO_ReadFIFO>
 8004bd0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	0a1b      	lsrs	r3, r3, #8
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	0c1b      	lsrs	r3, r3, #16
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	0e1b      	lsrs	r3, r3, #24
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	3b01      	subs	r3, #1
 8004c26:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	617b      	str	r3, [r7, #20]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2b07      	cmp	r3, #7
 8004c32:	d9c8      	bls.n	8004bc6 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004c40:	bf00      	nop
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d043      	beq.n	8004cea <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	e037      	b.n	8004cd8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3301      	adds	r3, #1
 8004c72:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	021a      	lsls	r2, r3, #8
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	041a      	lsls	r2, r3, #16
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	061a      	lsls	r2, r3, #24
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f107 0208 	add.w	r2, r7, #8
 8004cca:	4611      	mov	r1, r2
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 f848 	bl	8004d62 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2b07      	cmp	r3, #7
 8004cdc:	d9c4      	bls.n	8004c68 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004cea:	bf00      	nop
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	f107 001c 	add.w	r0, r7, #28
 8004d00:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004d08:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004d0c:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004d10:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004d14:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004d18:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004d1c:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004d2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	b004      	add	sp, #16
 8004d46:	4770      	bx	lr

08004d48 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2203      	movs	r2, #3
 8004d90:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004d92:	2002      	movs	r0, #2
 8004d94:	f7fc f820 	bl	8000dd8 <HAL_Delay>
  
  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0303 	and.w	r3, r3, #3
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b085      	sub	sp, #20
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004ddc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004de2:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004de8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004df8:	f023 030f 	bic.w	r3, r3, #15
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	b2db      	uxtb	r3, r3
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3314      	adds	r3, #20
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	4413      	add	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
}  
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b085      	sub	sp, #20
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004e78:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004e7e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004e84:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e90:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0

}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b088      	sub	sp, #32
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004eb8:	2310      	movs	r3, #16
 8004eba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ebc:	2340      	movs	r3, #64	; 0x40
 8004ebe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ec8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004eca:	f107 0308 	add.w	r3, r7, #8
 8004ece:	4619      	mov	r1, r3
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff ff74 	bl	8004dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eda:	2110      	movs	r1, #16
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fa45 	bl	800536c <SDMMC_GetCmdResp1>
 8004ee2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ee4:	69fb      	ldr	r3, [r7, #28]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3720      	adds	r7, #32
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b088      	sub	sp, #32
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004efc:	2311      	movs	r3, #17
 8004efe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f00:	2340      	movs	r3, #64	; 0x40
 8004f02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f04:	2300      	movs	r3, #0
 8004f06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f0e:	f107 0308 	add.w	r3, r7, #8
 8004f12:	4619      	mov	r1, r3
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff ff52 	bl	8004dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1e:	2111      	movs	r1, #17
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fa23 	bl	800536c <SDMMC_GetCmdResp1>
 8004f26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f28:	69fb      	ldr	r3, [r7, #28]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3720      	adds	r7, #32
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b088      	sub	sp, #32
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004f40:	2312      	movs	r3, #18
 8004f42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f44:	2340      	movs	r3, #64	; 0x40
 8004f46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f52:	f107 0308 	add.w	r3, r7, #8
 8004f56:	4619      	mov	r1, r3
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff ff30 	bl	8004dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f62:	2112      	movs	r1, #18
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fa01 	bl	800536c <SDMMC_GetCmdResp1>
 8004f6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3720      	adds	r7, #32
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b088      	sub	sp, #32
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004f84:	2318      	movs	r3, #24
 8004f86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f88:	2340      	movs	r3, #64	; 0x40
 8004f8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f96:	f107 0308 	add.w	r3, r7, #8
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff ff0e 	bl	8004dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa6:	2118      	movs	r1, #24
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f9df 	bl	800536c <SDMMC_GetCmdResp1>
 8004fae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fb0:	69fb      	ldr	r3, [r7, #28]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3720      	adds	r7, #32
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b088      	sub	sp, #32
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004fc8:	2319      	movs	r3, #25
 8004fca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fcc:	2340      	movs	r3, #64	; 0x40
 8004fce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fd8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fda:	f107 0308 	add.w	r3, r7, #8
 8004fde:	4619      	mov	r1, r3
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff feec 	bl	8004dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fea:	2119      	movs	r1, #25
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f9bd 	bl	800536c <SDMMC_GetCmdResp1>
 8004ff2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3720      	adds	r7, #32
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800500c:	230c      	movs	r3, #12
 800500e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005010:	2340      	movs	r3, #64	; 0x40
 8005012:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005014:	2300      	movs	r3, #0
 8005016:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800501c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800501e:	f107 0308 	add.w	r3, r7, #8
 8005022:	4619      	mov	r1, r3
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff feca 	bl	8004dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800502a:	4a05      	ldr	r2, [pc, #20]	; (8005040 <SDMMC_CmdStopTransfer+0x40>)
 800502c:	210c      	movs	r1, #12
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f99c 	bl	800536c <SDMMC_GetCmdResp1>
 8005034:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005036:	69fb      	ldr	r3, [r7, #28]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3720      	adds	r7, #32
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	05f5e100 	.word	0x05f5e100

08005044 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b08a      	sub	sp, #40	; 0x28
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005054:	2307      	movs	r3, #7
 8005056:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005058:	2340      	movs	r3, #64	; 0x40
 800505a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800505c:	2300      	movs	r3, #0
 800505e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005064:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005066:	f107 0310 	add.w	r3, r7, #16
 800506a:	4619      	mov	r1, r3
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f7ff fea6 	bl	8004dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005072:	f241 3288 	movw	r2, #5000	; 0x1388
 8005076:	2107      	movs	r1, #7
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 f977 	bl	800536c <SDMMC_GetCmdResp1>
 800507e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005082:	4618      	mov	r0, r3
 8005084:	3728      	adds	r7, #40	; 0x28
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b088      	sub	sp, #32
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005096:	2300      	movs	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800509a:	2300      	movs	r3, #0
 800509c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800509e:	2300      	movs	r3, #0
 80050a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050a8:	f107 0308 	add.w	r3, r7, #8
 80050ac:	4619      	mov	r1, r3
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7ff fe85 	bl	8004dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f92d 	bl	8005314 <SDMMC_GetCmdError>
 80050ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050bc:	69fb      	ldr	r3, [r7, #28]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3720      	adds	r7, #32
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b088      	sub	sp, #32
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80050ce:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80050d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80050d4:	2308      	movs	r3, #8
 80050d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050d8:	2340      	movs	r3, #64	; 0x40
 80050da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050dc:	2300      	movs	r3, #0
 80050de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050e6:	f107 0308 	add.w	r3, r7, #8
 80050ea:	4619      	mov	r1, r3
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff fe66 	bl	8004dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fb24 	bl	8005740 <SDMMC_GetCmdResp7>
 80050f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050fa:	69fb      	ldr	r3, [r7, #28]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3720      	adds	r7, #32
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005112:	2337      	movs	r3, #55	; 0x37
 8005114:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005116:	2340      	movs	r3, #64	; 0x40
 8005118:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800511e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005122:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005124:	f107 0308 	add.w	r3, r7, #8
 8005128:	4619      	mov	r1, r3
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff fe47 	bl	8004dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005130:	f241 3288 	movw	r2, #5000	; 0x1388
 8005134:	2137      	movs	r1, #55	; 0x37
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f918 	bl	800536c <SDMMC_GetCmdResp1>
 800513c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800513e:	69fb      	ldr	r3, [r7, #28]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3720      	adds	r7, #32
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b088      	sub	sp, #32
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005158:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800515c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800515e:	2329      	movs	r3, #41	; 0x29
 8005160:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005162:	2340      	movs	r3, #64	; 0x40
 8005164:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005166:	2300      	movs	r3, #0
 8005168:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800516a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800516e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005170:	f107 0308 	add.w	r3, r7, #8
 8005174:	4619      	mov	r1, r3
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7ff fe21 	bl	8004dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 fa2b 	bl	80055d8 <SDMMC_GetCmdResp3>
 8005182:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005184:	69fb      	ldr	r3, [r7, #28]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3720      	adds	r7, #32
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b088      	sub	sp, #32
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800519c:	2306      	movs	r3, #6
 800519e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051a0:	2340      	movs	r3, #64	; 0x40
 80051a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051ae:	f107 0308 	add.w	r3, r7, #8
 80051b2:	4619      	mov	r1, r3
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7ff fe02 	bl	8004dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80051ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80051be:	2106      	movs	r1, #6
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f8d3 	bl	800536c <SDMMC_GetCmdResp1>
 80051c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051c8:	69fb      	ldr	r3, [r7, #28]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3720      	adds	r7, #32
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b088      	sub	sp, #32
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80051de:	2333      	movs	r3, #51	; 0x33
 80051e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051e2:	2340      	movs	r3, #64	; 0x40
 80051e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051e6:	2300      	movs	r3, #0
 80051e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051f0:	f107 0308 	add.w	r3, r7, #8
 80051f4:	4619      	mov	r1, r3
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7ff fde1 	bl	8004dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80051fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005200:	2133      	movs	r1, #51	; 0x33
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f8b2 	bl	800536c <SDMMC_GetCmdResp1>
 8005208:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800520a:	69fb      	ldr	r3, [r7, #28]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3720      	adds	r7, #32
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005220:	2302      	movs	r3, #2
 8005222:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005224:	23c0      	movs	r3, #192	; 0xc0
 8005226:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005228:	2300      	movs	r3, #0
 800522a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800522c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005230:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005232:	f107 0308 	add.w	r3, r7, #8
 8005236:	4619      	mov	r1, r3
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff fdc0 	bl	8004dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f982 	bl	8005548 <SDMMC_GetCmdResp2>
 8005244:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005246:	69fb      	ldr	r3, [r7, #28]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3720      	adds	r7, #32
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800525e:	2309      	movs	r3, #9
 8005260:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005262:	23c0      	movs	r3, #192	; 0xc0
 8005264:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800526a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800526e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005270:	f107 0308 	add.w	r3, r7, #8
 8005274:	4619      	mov	r1, r3
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff fda1 	bl	8004dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f963 	bl	8005548 <SDMMC_GetCmdResp2>
 8005282:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005284:	69fb      	ldr	r3, [r7, #28]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3720      	adds	r7, #32
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b088      	sub	sp, #32
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800529c:	2303      	movs	r3, #3
 800529e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052a0:	2340      	movs	r3, #64	; 0x40
 80052a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052a4:	2300      	movs	r3, #0
 80052a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052ae:	f107 0308 	add.w	r3, r7, #8
 80052b2:	4619      	mov	r1, r3
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff fd82 	bl	8004dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	2103      	movs	r1, #3
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f9c8 	bl	8005654 <SDMMC_GetCmdResp6>
 80052c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052c6:	69fb      	ldr	r3, [r7, #28]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3720      	adds	r7, #32
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b088      	sub	sp, #32
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80052de:	230d      	movs	r3, #13
 80052e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052e2:	2340      	movs	r3, #64	; 0x40
 80052e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052e6:	2300      	movs	r3, #0
 80052e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052f0:	f107 0308 	add.w	r3, r7, #8
 80052f4:	4619      	mov	r1, r3
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7ff fd61 	bl	8004dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80052fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005300:	210d      	movs	r1, #13
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f832 	bl	800536c <SDMMC_GetCmdResp1>
 8005308:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800530a:	69fb      	ldr	r3, [r7, #28]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3720      	adds	r7, #32
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800531c:	4b11      	ldr	r3, [pc, #68]	; (8005364 <SDMMC_GetCmdError+0x50>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a11      	ldr	r2, [pc, #68]	; (8005368 <SDMMC_GetCmdError+0x54>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	0a5b      	lsrs	r3, r3, #9
 8005328:	f241 3288 	movw	r2, #5000	; 0x1388
 800532c:	fb02 f303 	mul.w	r3, r2, r3
 8005330:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1e5a      	subs	r2, r3, #1
 8005336:	60fa      	str	r2, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d102      	bne.n	8005342 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800533c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005340:	e009      	b.n	8005356 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0f1      	beq.n	8005332 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	22c5      	movs	r2, #197	; 0xc5
 8005352:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000000 	.word	0x20000000
 8005368:	10624dd3 	.word	0x10624dd3

0800536c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	460b      	mov	r3, r1
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800537a:	4b70      	ldr	r3, [pc, #448]	; (800553c <SDMMC_GetCmdResp1+0x1d0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a70      	ldr	r2, [pc, #448]	; (8005540 <SDMMC_GetCmdResp1+0x1d4>)
 8005380:	fba2 2303 	umull	r2, r3, r2, r3
 8005384:	0a5a      	lsrs	r2, r3, #9
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	fb02 f303 	mul.w	r3, r2, r3
 800538c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	1e5a      	subs	r2, r3, #1
 8005392:	61fa      	str	r2, [r7, #28]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d102      	bne.n	800539e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005398:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800539c:	e0c9      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0ef      	beq.n	800538e <SDMMC_GetCmdResp1+0x22>
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1ea      	bne.n	800538e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d004      	beq.n	80053ce <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2204      	movs	r2, #4
 80053c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80053ca:	2304      	movs	r3, #4
 80053cc:	e0b1      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d004      	beq.n	80053e4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e0a6      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	22c5      	movs	r2, #197	; 0xc5
 80053e8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f7ff fd11 	bl	8004e12 <SDIO_GetCommandResponse>
 80053f0:	4603      	mov	r3, r0
 80053f2:	461a      	mov	r2, r3
 80053f4:	7afb      	ldrb	r3, [r7, #11]
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d001      	beq.n	80053fe <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e099      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80053fe:	2100      	movs	r1, #0
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f7ff fd13 	bl	8004e2c <SDIO_GetResponse>
 8005406:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	4b4e      	ldr	r3, [pc, #312]	; (8005544 <SDMMC_GetCmdResp1+0x1d8>)
 800540c:	4013      	ands	r3, r2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005412:	2300      	movs	r3, #0
 8005414:	e08d      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2b00      	cmp	r3, #0
 800541a:	da02      	bge.n	8005422 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800541c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005420:	e087      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800542c:	2340      	movs	r3, #64	; 0x40
 800542e:	e080      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800543a:	2380      	movs	r3, #128	; 0x80
 800543c:	e079      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800544c:	e071      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800545c:	e069      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800546c:	e061      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005478:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800547c:	e059      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800548c:	e051      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800549c:	e049      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80054a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054ac:	e041      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80054b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054bc:	e039      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80054c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054cc:	e031      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80054d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80054dc:	e029      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80054e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80054ec:	e021      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80054f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80054fc:	e019      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005508:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800550c:	e011      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005518:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800551c:	e009      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005528:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800552c:	e001      	b.n	8005532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800552e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005532:	4618      	mov	r0, r3
 8005534:	3720      	adds	r7, #32
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	20000000 	.word	0x20000000
 8005540:	10624dd3 	.word	0x10624dd3
 8005544:	fdffe008 	.word	0xfdffe008

08005548 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005550:	4b1f      	ldr	r3, [pc, #124]	; (80055d0 <SDMMC_GetCmdResp2+0x88>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a1f      	ldr	r2, [pc, #124]	; (80055d4 <SDMMC_GetCmdResp2+0x8c>)
 8005556:	fba2 2303 	umull	r2, r3, r2, r3
 800555a:	0a5b      	lsrs	r3, r3, #9
 800555c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005560:	fb02 f303 	mul.w	r3, r2, r3
 8005564:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	1e5a      	subs	r2, r3, #1
 800556a:	60fa      	str	r2, [r7, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d102      	bne.n	8005576 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005570:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005574:	e026      	b.n	80055c4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0ef      	beq.n	8005566 <SDMMC_GetCmdResp2+0x1e>
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1ea      	bne.n	8005566 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	d004      	beq.n	80055a6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2204      	movs	r2, #4
 80055a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055a2:	2304      	movs	r3, #4
 80055a4:	e00e      	b.n	80055c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d004      	beq.n	80055bc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e003      	b.n	80055c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	22c5      	movs	r2, #197	; 0xc5
 80055c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	20000000 	.word	0x20000000
 80055d4:	10624dd3 	.word	0x10624dd3

080055d8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80055e0:	4b1a      	ldr	r3, [pc, #104]	; (800564c <SDMMC_GetCmdResp3+0x74>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a1a      	ldr	r2, [pc, #104]	; (8005650 <SDMMC_GetCmdResp3+0x78>)
 80055e6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ea:	0a5b      	lsrs	r3, r3, #9
 80055ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f0:	fb02 f303 	mul.w	r3, r2, r3
 80055f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	1e5a      	subs	r2, r3, #1
 80055fa:	60fa      	str	r2, [r7, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d102      	bne.n	8005606 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005600:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005604:	e01b      	b.n	800563e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005612:	2b00      	cmp	r3, #0
 8005614:	d0ef      	beq.n	80055f6 <SDMMC_GetCmdResp3+0x1e>
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1ea      	bne.n	80055f6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d004      	beq.n	8005636 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2204      	movs	r2, #4
 8005630:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005632:	2304      	movs	r3, #4
 8005634:	e003      	b.n	800563e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	22c5      	movs	r2, #197	; 0xc5
 800563a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	20000000 	.word	0x20000000
 8005650:	10624dd3 	.word	0x10624dd3

08005654 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	460b      	mov	r3, r1
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005662:	4b35      	ldr	r3, [pc, #212]	; (8005738 <SDMMC_GetCmdResp6+0xe4>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a35      	ldr	r2, [pc, #212]	; (800573c <SDMMC_GetCmdResp6+0xe8>)
 8005668:	fba2 2303 	umull	r2, r3, r2, r3
 800566c:	0a5b      	lsrs	r3, r3, #9
 800566e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005672:	fb02 f303 	mul.w	r3, r2, r3
 8005676:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	1e5a      	subs	r2, r3, #1
 800567c:	61fa      	str	r2, [r7, #28]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d102      	bne.n	8005688 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005682:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005686:	e052      	b.n	800572e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0ef      	beq.n	8005678 <SDMMC_GetCmdResp6+0x24>
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1ea      	bne.n	8005678 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d004      	beq.n	80056b8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2204      	movs	r2, #4
 80056b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80056b4:	2304      	movs	r3, #4
 80056b6:	e03a      	b.n	800572e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d004      	beq.n	80056ce <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2201      	movs	r2, #1
 80056c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e02f      	b.n	800572e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f7ff fb9f 	bl	8004e12 <SDIO_GetCommandResponse>
 80056d4:	4603      	mov	r3, r0
 80056d6:	461a      	mov	r2, r3
 80056d8:	7afb      	ldrb	r3, [r7, #11]
 80056da:	4293      	cmp	r3, r2
 80056dc:	d001      	beq.n	80056e2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056de:	2301      	movs	r3, #1
 80056e0:	e025      	b.n	800572e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	22c5      	movs	r2, #197	; 0xc5
 80056e6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80056e8:	2100      	movs	r1, #0
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f7ff fb9e 	bl	8004e2c <SDIO_GetResponse>
 80056f0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d106      	bne.n	800570a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	0c1b      	lsrs	r3, r3, #16
 8005700:	b29a      	uxth	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005706:	2300      	movs	r3, #0
 8005708:	e011      	b.n	800572e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005718:	e009      	b.n	800572e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005728:	e001      	b.n	800572e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800572a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800572e:	4618      	mov	r0, r3
 8005730:	3720      	adds	r7, #32
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20000000 	.word	0x20000000
 800573c:	10624dd3 	.word	0x10624dd3

08005740 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005748:	4b22      	ldr	r3, [pc, #136]	; (80057d4 <SDMMC_GetCmdResp7+0x94>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a22      	ldr	r2, [pc, #136]	; (80057d8 <SDMMC_GetCmdResp7+0x98>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	0a5b      	lsrs	r3, r3, #9
 8005754:	f241 3288 	movw	r2, #5000	; 0x1388
 8005758:	fb02 f303 	mul.w	r3, r2, r3
 800575c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	1e5a      	subs	r2, r3, #1
 8005762:	60fa      	str	r2, [r7, #12]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d102      	bne.n	800576e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005768:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800576c:	e02c      	b.n	80057c8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005772:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0ef      	beq.n	800575e <SDMMC_GetCmdResp7+0x1e>
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1ea      	bne.n	800575e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	d004      	beq.n	800579e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2204      	movs	r2, #4
 8005798:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800579a:	2304      	movs	r3, #4
 800579c:	e014      	b.n	80057c8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d004      	beq.n	80057b4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e009      	b.n	80057c8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2240      	movs	r2, #64	; 0x40
 80057c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80057c6:	2300      	movs	r3, #0
  
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	20000000 	.word	0x20000000
 80057d8:	10624dd3 	.word	0x10624dd3

080057dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057dc:	b084      	sub	sp, #16
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	f107 001c 	add.w	r0, r7, #28
 80057ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d122      	bne.n	800583a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800581c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800581e:	2b01      	cmp	r3, #1
 8005820:	d105      	bne.n	800582e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f001 fb1c 	bl	8006e6c <USB_CoreReset>
 8005834:	4603      	mov	r3, r0
 8005836:	73fb      	strb	r3, [r7, #15]
 8005838:	e01a      	b.n	8005870 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f001 fb10 	bl	8006e6c <USB_CoreReset>
 800584c:	4603      	mov	r3, r0
 800584e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d106      	bne.n	8005864 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	639a      	str	r2, [r3, #56]	; 0x38
 8005862:	e005      	b.n	8005870 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	2b01      	cmp	r3, #1
 8005874:	d10b      	bne.n	800588e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f043 0206 	orr.w	r2, r3, #6
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f043 0220 	orr.w	r2, r3, #32
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800588e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800589a:	b004      	add	sp, #16
 800589c:	4770      	bx	lr
	...

080058a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	4613      	mov	r3, r2
 80058ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80058ae:	79fb      	ldrb	r3, [r7, #7]
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d165      	bne.n	8005980 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4a41      	ldr	r2, [pc, #260]	; (80059bc <USB_SetTurnaroundTime+0x11c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d906      	bls.n	80058ca <USB_SetTurnaroundTime+0x2a>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	4a40      	ldr	r2, [pc, #256]	; (80059c0 <USB_SetTurnaroundTime+0x120>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d202      	bcs.n	80058ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80058c4:	230f      	movs	r3, #15
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	e062      	b.n	8005990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	4a3c      	ldr	r2, [pc, #240]	; (80059c0 <USB_SetTurnaroundTime+0x120>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d306      	bcc.n	80058e0 <USB_SetTurnaroundTime+0x40>
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	4a3b      	ldr	r2, [pc, #236]	; (80059c4 <USB_SetTurnaroundTime+0x124>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d202      	bcs.n	80058e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80058da:	230e      	movs	r3, #14
 80058dc:	617b      	str	r3, [r7, #20]
 80058de:	e057      	b.n	8005990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4a38      	ldr	r2, [pc, #224]	; (80059c4 <USB_SetTurnaroundTime+0x124>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d306      	bcc.n	80058f6 <USB_SetTurnaroundTime+0x56>
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4a37      	ldr	r2, [pc, #220]	; (80059c8 <USB_SetTurnaroundTime+0x128>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d202      	bcs.n	80058f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80058f0:	230d      	movs	r3, #13
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	e04c      	b.n	8005990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	4a33      	ldr	r2, [pc, #204]	; (80059c8 <USB_SetTurnaroundTime+0x128>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d306      	bcc.n	800590c <USB_SetTurnaroundTime+0x6c>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	4a32      	ldr	r2, [pc, #200]	; (80059cc <USB_SetTurnaroundTime+0x12c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d802      	bhi.n	800590c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005906:	230c      	movs	r3, #12
 8005908:	617b      	str	r3, [r7, #20]
 800590a:	e041      	b.n	8005990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4a2f      	ldr	r2, [pc, #188]	; (80059cc <USB_SetTurnaroundTime+0x12c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d906      	bls.n	8005922 <USB_SetTurnaroundTime+0x82>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4a2e      	ldr	r2, [pc, #184]	; (80059d0 <USB_SetTurnaroundTime+0x130>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d802      	bhi.n	8005922 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800591c:	230b      	movs	r3, #11
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	e036      	b.n	8005990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	4a2a      	ldr	r2, [pc, #168]	; (80059d0 <USB_SetTurnaroundTime+0x130>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d906      	bls.n	8005938 <USB_SetTurnaroundTime+0x98>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	4a29      	ldr	r2, [pc, #164]	; (80059d4 <USB_SetTurnaroundTime+0x134>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d802      	bhi.n	8005938 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005932:	230a      	movs	r3, #10
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	e02b      	b.n	8005990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	4a26      	ldr	r2, [pc, #152]	; (80059d4 <USB_SetTurnaroundTime+0x134>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d906      	bls.n	800594e <USB_SetTurnaroundTime+0xae>
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4a25      	ldr	r2, [pc, #148]	; (80059d8 <USB_SetTurnaroundTime+0x138>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d202      	bcs.n	800594e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005948:	2309      	movs	r3, #9
 800594a:	617b      	str	r3, [r7, #20]
 800594c:	e020      	b.n	8005990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	4a21      	ldr	r2, [pc, #132]	; (80059d8 <USB_SetTurnaroundTime+0x138>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d306      	bcc.n	8005964 <USB_SetTurnaroundTime+0xc4>
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	4a20      	ldr	r2, [pc, #128]	; (80059dc <USB_SetTurnaroundTime+0x13c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d802      	bhi.n	8005964 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800595e:	2308      	movs	r3, #8
 8005960:	617b      	str	r3, [r7, #20]
 8005962:	e015      	b.n	8005990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4a1d      	ldr	r2, [pc, #116]	; (80059dc <USB_SetTurnaroundTime+0x13c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d906      	bls.n	800597a <USB_SetTurnaroundTime+0xda>
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	4a1c      	ldr	r2, [pc, #112]	; (80059e0 <USB_SetTurnaroundTime+0x140>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d202      	bcs.n	800597a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005974:	2307      	movs	r3, #7
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	e00a      	b.n	8005990 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800597a:	2306      	movs	r3, #6
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	e007      	b.n	8005990 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005980:	79fb      	ldrb	r3, [r7, #7]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d102      	bne.n	800598c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005986:	2309      	movs	r3, #9
 8005988:	617b      	str	r3, [r7, #20]
 800598a:	e001      	b.n	8005990 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800598c:	2309      	movs	r3, #9
 800598e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	68da      	ldr	r2, [r3, #12]
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	029b      	lsls	r3, r3, #10
 80059a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80059a8:	431a      	orrs	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	371c      	adds	r7, #28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	00d8acbf 	.word	0x00d8acbf
 80059c0:	00e4e1c0 	.word	0x00e4e1c0
 80059c4:	00f42400 	.word	0x00f42400
 80059c8:	01067380 	.word	0x01067380
 80059cc:	011a499f 	.word	0x011a499f
 80059d0:	01312cff 	.word	0x01312cff
 80059d4:	014ca43f 	.word	0x014ca43f
 80059d8:	016e3600 	.word	0x016e3600
 80059dc:	01a6ab1f 	.word	0x01a6ab1f
 80059e0:	01e84800 	.word	0x01e84800

080059e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f043 0201 	orr.w	r2, r3, #1
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f023 0201 	bic.w	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d115      	bne.n	8005a76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a56:	2001      	movs	r0, #1
 8005a58:	f7fb f9be 	bl	8000dd8 <HAL_Delay>
      ms++;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f001 f972 	bl	8006d4c <USB_GetMode>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d01e      	beq.n	8005aac <USB_SetCurrentMode+0x84>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b31      	cmp	r3, #49	; 0x31
 8005a72:	d9f0      	bls.n	8005a56 <USB_SetCurrentMode+0x2e>
 8005a74:	e01a      	b.n	8005aac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a76:	78fb      	ldrb	r3, [r7, #3]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d115      	bne.n	8005aa8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a88:	2001      	movs	r0, #1
 8005a8a:	f7fb f9a5 	bl	8000dd8 <HAL_Delay>
      ms++;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	3301      	adds	r3, #1
 8005a92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f001 f959 	bl	8006d4c <USB_GetMode>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d005      	beq.n	8005aac <USB_SetCurrentMode+0x84>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b31      	cmp	r3, #49	; 0x31
 8005aa4:	d9f0      	bls.n	8005a88 <USB_SetCurrentMode+0x60>
 8005aa6:	e001      	b.n	8005aac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e005      	b.n	8005ab8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b32      	cmp	r3, #50	; 0x32
 8005ab0:	d101      	bne.n	8005ab6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e000      	b.n	8005ab8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ac0:	b084      	sub	sp, #16
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b086      	sub	sp, #24
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ada:	2300      	movs	r3, #0
 8005adc:	613b      	str	r3, [r7, #16]
 8005ade:	e009      	b.n	8005af4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	3340      	adds	r3, #64	; 0x40
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	2200      	movs	r2, #0
 8005aec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	3301      	adds	r3, #1
 8005af2:	613b      	str	r3, [r7, #16]
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	2b0e      	cmp	r3, #14
 8005af8:	d9f2      	bls.n	8005ae0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d11c      	bne.n	8005b3a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b0e:	f043 0302 	orr.w	r3, r3, #2
 8005b12:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b24:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b30:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	639a      	str	r2, [r3, #56]	; 0x38
 8005b38:	e00b      	b.n	8005b52 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b58:	461a      	mov	r2, r3
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b64:	4619      	mov	r1, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	680b      	ldr	r3, [r1, #0]
 8005b70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d10c      	bne.n	8005b92 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d104      	bne.n	8005b88 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b7e:	2100      	movs	r1, #0
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f945 	bl	8005e10 <USB_SetDevSpeed>
 8005b86:	e008      	b.n	8005b9a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b88:	2101      	movs	r1, #1
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f940 	bl	8005e10 <USB_SetDevSpeed>
 8005b90:	e003      	b.n	8005b9a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b92:	2103      	movs	r1, #3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f93b 	bl	8005e10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b9a:	2110      	movs	r1, #16
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f8f3 	bl	8005d88 <USB_FlushTxFifo>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f90f 	bl	8005dd0 <USB_FlushRxFifo>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bce:	461a      	mov	r2, r3
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bda:	461a      	mov	r2, r3
 8005bdc:	2300      	movs	r3, #0
 8005bde:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005be0:	2300      	movs	r3, #0
 8005be2:	613b      	str	r3, [r7, #16]
 8005be4:	e043      	b.n	8005c6e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bfc:	d118      	bne.n	8005c30 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10a      	bne.n	8005c1a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c10:	461a      	mov	r2, r3
 8005c12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c16:	6013      	str	r3, [r2, #0]
 8005c18:	e013      	b.n	8005c42 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c26:	461a      	mov	r2, r3
 8005c28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	e008      	b.n	8005c42 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	2300      	movs	r3, #0
 8005c40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4e:	461a      	mov	r2, r3
 8005c50:	2300      	movs	r3, #0
 8005c52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c60:	461a      	mov	r2, r3
 8005c62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	613b      	str	r3, [r7, #16]
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d3b7      	bcc.n	8005be6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c76:	2300      	movs	r3, #0
 8005c78:	613b      	str	r3, [r7, #16]
 8005c7a:	e043      	b.n	8005d04 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c92:	d118      	bne.n	8005cc6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10a      	bne.n	8005cb0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	e013      	b.n	8005cd8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	e008      	b.n	8005cd8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cfc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	3301      	adds	r3, #1
 8005d02:	613b      	str	r3, [r7, #16]
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d3b7      	bcc.n	8005c7c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d105      	bne.n	8005d40 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	f043 0210 	orr.w	r2, r3, #16
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	699a      	ldr	r2, [r3, #24]
 8005d44:	4b0f      	ldr	r3, [pc, #60]	; (8005d84 <USB_DevInit+0x2c4>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d005      	beq.n	8005d5e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	f043 0208 	orr.w	r2, r3, #8
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d107      	bne.n	8005d74 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d6c:	f043 0304 	orr.w	r3, r3, #4
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d80:	b004      	add	sp, #16
 8005d82:	4770      	bx	lr
 8005d84:	803c3800 	.word	0x803c3800

08005d88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	019b      	lsls	r3, r3, #6
 8005d9a:	f043 0220 	orr.w	r2, r3, #32
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	3301      	adds	r3, #1
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	4a08      	ldr	r2, [pc, #32]	; (8005dcc <USB_FlushTxFifo+0x44>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d901      	bls.n	8005db2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e006      	b.n	8005dc0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b20      	cmp	r3, #32
 8005dbc:	d0f1      	beq.n	8005da2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	00030d40 	.word	0x00030d40

08005dd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2210      	movs	r2, #16
 8005de0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3301      	adds	r3, #1
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	4a08      	ldr	r2, [pc, #32]	; (8005e0c <USB_FlushRxFifo+0x3c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d901      	bls.n	8005df2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e006      	b.n	8005e00 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f003 0310 	and.w	r3, r3, #16
 8005dfa:	2b10      	cmp	r3, #16
 8005dfc:	d0f1      	beq.n	8005de2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	00030d40 	.word	0x00030d40

08005e10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	68f9      	ldr	r1, [r7, #12]
 8005e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e30:	4313      	orrs	r3, r2
 8005e32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b087      	sub	sp, #28
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 0306 	and.w	r3, r3, #6
 8005e5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d102      	bne.n	8005e68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005e62:	2300      	movs	r3, #0
 8005e64:	75fb      	strb	r3, [r7, #23]
 8005e66:	e00a      	b.n	8005e7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d002      	beq.n	8005e74 <USB_GetDevSpeed+0x32>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2b06      	cmp	r3, #6
 8005e72:	d102      	bne.n	8005e7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005e74:	2302      	movs	r3, #2
 8005e76:	75fb      	strb	r3, [r7, #23]
 8005e78:	e001      	b.n	8005e7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005e7a:	230f      	movs	r3, #15
 8005e7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	371c      	adds	r7, #28
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	785b      	ldrb	r3, [r3, #1]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d13a      	bne.n	8005f1e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eae:	69da      	ldr	r2, [r3, #28]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	f003 030f 	and.w	r3, r3, #15
 8005eb8:	2101      	movs	r1, #1
 8005eba:	fa01 f303 	lsl.w	r3, r1, r3
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	68f9      	ldr	r1, [r7, #12]
 8005ec2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d155      	bne.n	8005f8c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	78db      	ldrb	r3, [r3, #3]
 8005efa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005efc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	059b      	lsls	r3, r3, #22
 8005f02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f04:	4313      	orrs	r3, r2
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	0151      	lsls	r1, r2, #5
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	440a      	add	r2, r1
 8005f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	e036      	b.n	8005f8c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f24:	69da      	ldr	r2, [r3, #28]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	f003 030f 	and.w	r3, r3, #15
 8005f2e:	2101      	movs	r1, #1
 8005f30:	fa01 f303 	lsl.w	r3, r1, r3
 8005f34:	041b      	lsls	r3, r3, #16
 8005f36:	68f9      	ldr	r1, [r7, #12]
 8005f38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d11a      	bne.n	8005f8c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	78db      	ldrb	r3, [r3, #3]
 8005f70:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f72:	430b      	orrs	r3, r1
 8005f74:	4313      	orrs	r3, r2
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	0151      	lsls	r1, r2, #5
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	440a      	add	r2, r1
 8005f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f8a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
	...

08005f9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	785b      	ldrb	r3, [r3, #1]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d161      	bne.n	800607c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fce:	d11f      	bne.n	8006010 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	0151      	lsls	r1, r2, #5
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	440a      	add	r2, r1
 8005fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	0151      	lsls	r1, r2, #5
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	440a      	add	r2, r1
 8006006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800600a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800600e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	f003 030f 	and.w	r3, r3, #15
 8006020:	2101      	movs	r1, #1
 8006022:	fa01 f303 	lsl.w	r3, r1, r3
 8006026:	b29b      	uxth	r3, r3
 8006028:	43db      	mvns	r3, r3
 800602a:	68f9      	ldr	r1, [r7, #12]
 800602c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006030:	4013      	ands	r3, r2
 8006032:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603a:	69da      	ldr	r2, [r3, #28]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	f003 030f 	and.w	r3, r3, #15
 8006044:	2101      	movs	r1, #1
 8006046:	fa01 f303 	lsl.w	r3, r1, r3
 800604a:	b29b      	uxth	r3, r3
 800604c:	43db      	mvns	r3, r3
 800604e:	68f9      	ldr	r1, [r7, #12]
 8006050:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006054:	4013      	ands	r3, r2
 8006056:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	0159      	lsls	r1, r3, #5
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	440b      	add	r3, r1
 800606e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006072:	4619      	mov	r1, r3
 8006074:	4b35      	ldr	r3, [pc, #212]	; (800614c <USB_DeactivateEndpoint+0x1b0>)
 8006076:	4013      	ands	r3, r2
 8006078:	600b      	str	r3, [r1, #0]
 800607a:	e060      	b.n	800613e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800608e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006092:	d11f      	bne.n	80060d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	0151      	lsls	r1, r2, #5
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	440a      	add	r2, r1
 80060aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	f003 030f 	and.w	r3, r3, #15
 80060e4:	2101      	movs	r1, #1
 80060e6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ea:	041b      	lsls	r3, r3, #16
 80060ec:	43db      	mvns	r3, r3
 80060ee:	68f9      	ldr	r1, [r7, #12]
 80060f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060f4:	4013      	ands	r3, r2
 80060f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fe:	69da      	ldr	r2, [r3, #28]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	f003 030f 	and.w	r3, r3, #15
 8006108:	2101      	movs	r1, #1
 800610a:	fa01 f303 	lsl.w	r3, r1, r3
 800610e:	041b      	lsls	r3, r3, #16
 8006110:	43db      	mvns	r3, r3
 8006112:	68f9      	ldr	r1, [r7, #12]
 8006114:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006118:	4013      	ands	r3, r2
 800611a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	0159      	lsls	r1, r3, #5
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	440b      	add	r3, r1
 8006132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006136:	4619      	mov	r1, r3
 8006138:	4b05      	ldr	r3, [pc, #20]	; (8006150 <USB_DeactivateEndpoint+0x1b4>)
 800613a:	4013      	ands	r3, r2
 800613c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	ec337800 	.word	0xec337800
 8006150:	eff37800 	.word	0xeff37800

08006154 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b08a      	sub	sp, #40	; 0x28
 8006158:	af02      	add	r7, sp, #8
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	4613      	mov	r3, r2
 8006160:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	785b      	ldrb	r3, [r3, #1]
 8006170:	2b01      	cmp	r3, #1
 8006172:	f040 815c 	bne.w	800642e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d132      	bne.n	80061e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	0151      	lsls	r1, r2, #5
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	440a      	add	r2, r1
 8006194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006198:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800619c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	0151      	lsls	r1, r2, #5
 80061b4:	69fa      	ldr	r2, [r7, #28]
 80061b6:	440a      	add	r2, r1
 80061b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	0151      	lsls	r1, r2, #5
 80061d4:	69fa      	ldr	r2, [r7, #28]
 80061d6:	440a      	add	r2, r1
 80061d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061dc:	0cdb      	lsrs	r3, r3, #19
 80061de:	04db      	lsls	r3, r3, #19
 80061e0:	6113      	str	r3, [r2, #16]
 80061e2:	e074      	b.n	80062ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	0151      	lsls	r1, r2, #5
 80061f6:	69fa      	ldr	r2, [r7, #28]
 80061f8:	440a      	add	r2, r1
 80061fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061fe:	0cdb      	lsrs	r3, r3, #19
 8006200:	04db      	lsls	r3, r3, #19
 8006202:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	0151      	lsls	r1, r2, #5
 8006216:	69fa      	ldr	r2, [r7, #28]
 8006218:	440a      	add	r2, r1
 800621a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006222:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006226:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006234:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	6959      	ldr	r1, [r3, #20]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	440b      	add	r3, r1
 8006240:	1e59      	subs	r1, r3, #1
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	fbb1 f3f3 	udiv	r3, r1, r3
 800624a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800624c:	4b9d      	ldr	r3, [pc, #628]	; (80064c4 <USB_EPStartXfer+0x370>)
 800624e:	400b      	ands	r3, r1
 8006250:	69b9      	ldr	r1, [r7, #24]
 8006252:	0148      	lsls	r0, r1, #5
 8006254:	69f9      	ldr	r1, [r7, #28]
 8006256:	4401      	add	r1, r0
 8006258:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800625c:	4313      	orrs	r3, r2
 800625e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626c:	691a      	ldr	r2, [r3, #16]
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006276:	69b9      	ldr	r1, [r7, #24]
 8006278:	0148      	lsls	r0, r1, #5
 800627a:	69f9      	ldr	r1, [r7, #28]
 800627c:	4401      	add	r1, r0
 800627e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006282:	4313      	orrs	r3, r2
 8006284:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	78db      	ldrb	r3, [r3, #3]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d11f      	bne.n	80062ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	4413      	add	r3, r2
 8006296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	0151      	lsls	r1, r2, #5
 80062a0:	69fa      	ldr	r2, [r7, #28]
 80062a2:	440a      	add	r2, r1
 80062a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80062ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	0151      	lsls	r1, r2, #5
 80062c0:	69fa      	ldr	r2, [r7, #28]
 80062c2:	440a      	add	r2, r1
 80062c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80062ce:	79fb      	ldrb	r3, [r7, #7]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d14b      	bne.n	800636c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d009      	beq.n	80062f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e8:	461a      	mov	r2, r3
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	78db      	ldrb	r3, [r3, #3]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d128      	bne.n	800634a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006304:	2b00      	cmp	r3, #0
 8006306:	d110      	bne.n	800632a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	0151      	lsls	r1, r2, #5
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	440a      	add	r2, r1
 800631e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006322:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006326:	6013      	str	r3, [r2, #0]
 8006328:	e00f      	b.n	800634a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	4413      	add	r3, r2
 8006332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	0151      	lsls	r1, r2, #5
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	440a      	add	r2, r1
 8006340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006348:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	0151      	lsls	r1, r2, #5
 800635c:	69fa      	ldr	r2, [r7, #28]
 800635e:	440a      	add	r2, r1
 8006360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006364:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	e12f      	b.n	80065cc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	0151      	lsls	r1, r2, #5
 800637e:	69fa      	ldr	r2, [r7, #28]
 8006380:	440a      	add	r2, r1
 8006382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006386:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800638a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	78db      	ldrb	r3, [r3, #3]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d015      	beq.n	80063c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 8117 	beq.w	80065cc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	f003 030f 	and.w	r3, r3, #15
 80063ae:	2101      	movs	r1, #1
 80063b0:	fa01 f303 	lsl.w	r3, r1, r3
 80063b4:	69f9      	ldr	r1, [r7, #28]
 80063b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063ba:	4313      	orrs	r3, r2
 80063bc:	634b      	str	r3, [r1, #52]	; 0x34
 80063be:	e105      	b.n	80065cc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d110      	bne.n	80063f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	0151      	lsls	r1, r2, #5
 80063e2:	69fa      	ldr	r2, [r7, #28]
 80063e4:	440a      	add	r2, r1
 80063e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	e00f      	b.n	8006412 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	0151      	lsls	r1, r2, #5
 8006404:	69fa      	ldr	r2, [r7, #28]
 8006406:	440a      	add	r2, r1
 8006408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800640c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006410:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	68d9      	ldr	r1, [r3, #12]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	781a      	ldrb	r2, [r3, #0]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	b298      	uxth	r0, r3
 8006420:	79fb      	ldrb	r3, [r7, #7]
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	4603      	mov	r3, r0
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 fa2b 	bl	8006882 <USB_WritePacket>
 800642c:	e0ce      	b.n	80065cc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	0151      	lsls	r1, r2, #5
 8006440:	69fa      	ldr	r2, [r7, #28]
 8006442:	440a      	add	r2, r1
 8006444:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006448:	0cdb      	lsrs	r3, r3, #19
 800644a:	04db      	lsls	r3, r3, #19
 800644c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	0151      	lsls	r1, r2, #5
 8006460:	69fa      	ldr	r2, [r7, #28]
 8006462:	440a      	add	r2, r1
 8006464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006468:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800646c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006470:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d126      	bne.n	80064c8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006486:	691a      	ldr	r2, [r3, #16]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006490:	69b9      	ldr	r1, [r7, #24]
 8006492:	0148      	lsls	r0, r1, #5
 8006494:	69f9      	ldr	r1, [r7, #28]
 8006496:	4401      	add	r1, r0
 8006498:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800649c:	4313      	orrs	r3, r2
 800649e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	69fa      	ldr	r2, [r7, #28]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064be:	6113      	str	r3, [r2, #16]
 80064c0:	e036      	b.n	8006530 <USB_EPStartXfer+0x3dc>
 80064c2:	bf00      	nop
 80064c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	695a      	ldr	r2, [r3, #20]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	4413      	add	r3, r2
 80064d2:	1e5a      	subs	r2, r3, #1
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064dc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ea:	691a      	ldr	r2, [r3, #16]
 80064ec:	8afb      	ldrh	r3, [r7, #22]
 80064ee:	04d9      	lsls	r1, r3, #19
 80064f0:	4b39      	ldr	r3, [pc, #228]	; (80065d8 <USB_EPStartXfer+0x484>)
 80064f2:	400b      	ands	r3, r1
 80064f4:	69b9      	ldr	r1, [r7, #24]
 80064f6:	0148      	lsls	r0, r1, #5
 80064f8:	69f9      	ldr	r1, [r7, #28]
 80064fa:	4401      	add	r1, r0
 80064fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006500:	4313      	orrs	r3, r2
 8006502:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	4413      	add	r3, r2
 800650c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006510:	691a      	ldr	r2, [r3, #16]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	8af9      	ldrh	r1, [r7, #22]
 8006518:	fb01 f303 	mul.w	r3, r1, r3
 800651c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006520:	69b9      	ldr	r1, [r7, #24]
 8006522:	0148      	lsls	r0, r1, #5
 8006524:	69f9      	ldr	r1, [r7, #28]
 8006526:	4401      	add	r1, r0
 8006528:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800652c:	4313      	orrs	r3, r2
 800652e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006530:	79fb      	ldrb	r3, [r7, #7]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d10d      	bne.n	8006552 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d009      	beq.n	8006552 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	68d9      	ldr	r1, [r3, #12]
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654e:	460a      	mov	r2, r1
 8006550:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	78db      	ldrb	r3, [r3, #3]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d128      	bne.n	80065ac <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006566:	2b00      	cmp	r3, #0
 8006568:	d110      	bne.n	800658c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	0151      	lsls	r1, r2, #5
 800657c:	69fa      	ldr	r2, [r7, #28]
 800657e:	440a      	add	r2, r1
 8006580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006584:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	e00f      	b.n	80065ac <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	4413      	add	r3, r2
 8006594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	0151      	lsls	r1, r2, #5
 800659e:	69fa      	ldr	r2, [r7, #28]
 80065a0:	440a      	add	r2, r1
 80065a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69ba      	ldr	r2, [r7, #24]
 80065bc:	0151      	lsls	r1, r2, #5
 80065be:	69fa      	ldr	r2, [r7, #28]
 80065c0:	440a      	add	r2, r1
 80065c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3720      	adds	r7, #32
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	1ff80000 	.word	0x1ff80000

080065dc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	4613      	mov	r3, r2
 80065e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	785b      	ldrb	r3, [r3, #1]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	f040 80cd 	bne.w	8006798 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d132      	bne.n	800666c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	0151      	lsls	r1, r2, #5
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	440a      	add	r2, r1
 800661c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006620:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006624:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006628:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	4413      	add	r3, r2
 8006632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	0151      	lsls	r1, r2, #5
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	440a      	add	r2, r1
 8006640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006644:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006648:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	0151      	lsls	r1, r2, #5
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	440a      	add	r2, r1
 8006660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006664:	0cdb      	lsrs	r3, r3, #19
 8006666:	04db      	lsls	r3, r3, #19
 8006668:	6113      	str	r3, [r2, #16]
 800666a:	e04e      	b.n	800670a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	0151      	lsls	r1, r2, #5
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	440a      	add	r2, r1
 8006682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006686:	0cdb      	lsrs	r3, r3, #19
 8006688:	04db      	lsls	r3, r3, #19
 800668a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	0151      	lsls	r1, r2, #5
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	440a      	add	r2, r1
 80066a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066ae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	695a      	ldr	r2, [r3, #20]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d903      	bls.n	80066c4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	689a      	ldr	r2, [r3, #8]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	0151      	lsls	r1, r2, #5
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	440a      	add	r2, r1
 80066da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f0:	691a      	ldr	r2, [r3, #16]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066fa:	6939      	ldr	r1, [r7, #16]
 80066fc:	0148      	lsls	r0, r1, #5
 80066fe:	6979      	ldr	r1, [r7, #20]
 8006700:	4401      	add	r1, r0
 8006702:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006706:	4313      	orrs	r3, r2
 8006708:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800670a:	79fb      	ldrb	r3, [r7, #7]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d11e      	bne.n	800674e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d009      	beq.n	800672c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006724:	461a      	mov	r2, r3
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	4413      	add	r3, r2
 8006734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	0151      	lsls	r1, r2, #5
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	440a      	add	r2, r1
 8006742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006746:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800674a:	6013      	str	r3, [r2, #0]
 800674c:	e092      	b.n	8006874 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	0151      	lsls	r1, r2, #5
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	440a      	add	r2, r1
 8006764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006768:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800676c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d07e      	beq.n	8006874 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	f003 030f 	and.w	r3, r3, #15
 8006786:	2101      	movs	r1, #1
 8006788:	fa01 f303 	lsl.w	r3, r1, r3
 800678c:	6979      	ldr	r1, [r7, #20]
 800678e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006792:	4313      	orrs	r3, r2
 8006794:	634b      	str	r3, [r1, #52]	; 0x34
 8006796:	e06d      	b.n	8006874 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	0151      	lsls	r1, r2, #5
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	440a      	add	r2, r1
 80067ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067b2:	0cdb      	lsrs	r3, r3, #19
 80067b4:	04db      	lsls	r3, r3, #19
 80067b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	0151      	lsls	r1, r2, #5
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	440a      	add	r2, r1
 80067ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067da:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d003      	beq.n	80067ec <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	0151      	lsls	r1, r2, #5
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	440a      	add	r2, r1
 8006802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006806:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800680a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006818:	691a      	ldr	r2, [r3, #16]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006822:	6939      	ldr	r1, [r7, #16]
 8006824:	0148      	lsls	r0, r1, #5
 8006826:	6979      	ldr	r1, [r7, #20]
 8006828:	4401      	add	r1, r0
 800682a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800682e:	4313      	orrs	r3, r2
 8006830:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006832:	79fb      	ldrb	r3, [r7, #7]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d10d      	bne.n	8006854 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d009      	beq.n	8006854 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	68d9      	ldr	r1, [r3, #12]
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006850:	460a      	mov	r2, r1
 8006852:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	0151      	lsls	r1, r2, #5
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	440a      	add	r2, r1
 800686a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800686e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006872:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	371c      	adds	r7, #28
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006882:	b480      	push	{r7}
 8006884:	b089      	sub	sp, #36	; 0x24
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	4611      	mov	r1, r2
 800688e:	461a      	mov	r2, r3
 8006890:	460b      	mov	r3, r1
 8006892:	71fb      	strb	r3, [r7, #7]
 8006894:	4613      	mov	r3, r2
 8006896:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80068a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d123      	bne.n	80068f0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80068a8:	88bb      	ldrh	r3, [r7, #4]
 80068aa:	3303      	adds	r3, #3
 80068ac:	089b      	lsrs	r3, r3, #2
 80068ae:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80068b0:	2300      	movs	r3, #0
 80068b2:	61bb      	str	r3, [r7, #24]
 80068b4:	e018      	b.n	80068e8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80068b6:	79fb      	ldrb	r3, [r7, #7]
 80068b8:	031a      	lsls	r2, r3, #12
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068c2:	461a      	mov	r2, r3
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	3301      	adds	r3, #1
 80068ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	3301      	adds	r3, #1
 80068d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	3301      	adds	r3, #1
 80068da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	3301      	adds	r3, #1
 80068e0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	3301      	adds	r3, #1
 80068e6:	61bb      	str	r3, [r7, #24]
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d3e2      	bcc.n	80068b6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3724      	adds	r7, #36	; 0x24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80068fe:	b480      	push	{r7}
 8006900:	b08b      	sub	sp, #44	; 0x2c
 8006902:	af00      	add	r7, sp, #0
 8006904:	60f8      	str	r0, [r7, #12]
 8006906:	60b9      	str	r1, [r7, #8]
 8006908:	4613      	mov	r3, r2
 800690a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006914:	88fb      	ldrh	r3, [r7, #6]
 8006916:	089b      	lsrs	r3, r3, #2
 8006918:	b29b      	uxth	r3, r3
 800691a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800691c:	88fb      	ldrh	r3, [r7, #6]
 800691e:	f003 0303 	and.w	r3, r3, #3
 8006922:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006924:	2300      	movs	r3, #0
 8006926:	623b      	str	r3, [r7, #32]
 8006928:	e014      	b.n	8006954 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	601a      	str	r2, [r3, #0]
    pDest++;
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	3301      	adds	r3, #1
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	3301      	adds	r3, #1
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	3301      	adds	r3, #1
 8006946:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	3301      	adds	r3, #1
 800694c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	3301      	adds	r3, #1
 8006952:	623b      	str	r3, [r7, #32]
 8006954:	6a3a      	ldr	r2, [r7, #32]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	429a      	cmp	r2, r3
 800695a:	d3e6      	bcc.n	800692a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800695c:	8bfb      	ldrh	r3, [r7, #30]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d01e      	beq.n	80069a0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800696c:	461a      	mov	r2, r3
 800696e:	f107 0310 	add.w	r3, r7, #16
 8006972:	6812      	ldr	r2, [r2, #0]
 8006974:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	b2db      	uxtb	r3, r3
 800697c:	00db      	lsls	r3, r3, #3
 800697e:	fa22 f303 	lsr.w	r3, r2, r3
 8006982:	b2da      	uxtb	r2, r3
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	701a      	strb	r2, [r3, #0]
      i++;
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	3301      	adds	r3, #1
 800698c:	623b      	str	r3, [r7, #32]
      pDest++;
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	3301      	adds	r3, #1
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006994:	8bfb      	ldrh	r3, [r7, #30]
 8006996:	3b01      	subs	r3, #1
 8006998:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800699a:	8bfb      	ldrh	r3, [r7, #30]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1ea      	bne.n	8006976 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	372c      	adds	r7, #44	; 0x2c
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b085      	sub	sp, #20
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	785b      	ldrb	r3, [r3, #1]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d12c      	bne.n	8006a24 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	db12      	blt.n	8006a02 <USB_EPSetStall+0x54>
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00f      	beq.n	8006a02 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	0151      	lsls	r1, r2, #5
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	440a      	add	r2, r1
 80069f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a00:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	0151      	lsls	r1, r2, #5
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	440a      	add	r2, r1
 8006a18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a20:	6013      	str	r3, [r2, #0]
 8006a22:	e02b      	b.n	8006a7c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	db12      	blt.n	8006a5c <USB_EPSetStall+0xae>
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00f      	beq.n	8006a5c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	0151      	lsls	r1, r2, #5
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	440a      	add	r2, r1
 8006a52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a5a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	0151      	lsls	r1, r2, #5
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	440a      	add	r2, r1
 8006a72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b085      	sub	sp, #20
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	785b      	ldrb	r3, [r3, #1]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d128      	bne.n	8006af8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	015a      	lsls	r2, r3, #5
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	4413      	add	r3, r2
 8006aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	0151      	lsls	r1, r2, #5
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	440a      	add	r2, r1
 8006abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ac4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	78db      	ldrb	r3, [r3, #3]
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d003      	beq.n	8006ad6 <USB_EPClearStall+0x4c>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	78db      	ldrb	r3, [r3, #3]
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d138      	bne.n	8006b48 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	0151      	lsls	r1, r2, #5
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	440a      	add	r2, r1
 8006aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	e027      	b.n	8006b48 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	0151      	lsls	r1, r2, #5
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	440a      	add	r2, r1
 8006b0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	78db      	ldrb	r3, [r3, #3]
 8006b1c:	2b03      	cmp	r3, #3
 8006b1e:	d003      	beq.n	8006b28 <USB_EPClearStall+0x9e>
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	78db      	ldrb	r3, [r3, #3]
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d10f      	bne.n	8006b48 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	0151      	lsls	r1, r2, #5
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	440a      	add	r2, r1
 8006b3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b46:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b085      	sub	sp, #20
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	460b      	mov	r3, r1
 8006b60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b74:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006b78:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	78fb      	ldrb	r3, [r7, #3]
 8006b84:	011b      	lsls	r3, r3, #4
 8006b86:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006b8a:	68f9      	ldr	r1, [r7, #12]
 8006b8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b90:	4313      	orrs	r3, r2
 8006b92:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b085      	sub	sp, #20
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006bbc:	f023 0303 	bic.w	r3, r3, #3
 8006bc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bd0:	f023 0302 	bic.w	r3, r3, #2
 8006bd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006bfe:	f023 0303 	bic.w	r3, r3, #3
 8006c02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c12:	f043 0302 	orr.w	r3, r3, #2
 8006c16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b085      	sub	sp, #20
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	0c1b      	lsrs	r3, r3, #16
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	b29b      	uxth	r3, r3
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006cc4:	78fb      	ldrb	r3, [r7, #3]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d12:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006d14:	78fb      	ldrb	r3, [r7, #3]
 8006d16:	f003 030f 	and.w	r3, r3, #15
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d20:	01db      	lsls	r3, r3, #7
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006d2a:	78fb      	ldrb	r3, [r7, #3]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	371c      	adds	r7, #28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	f003 0301 	and.w	r3, r3, #1
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d82:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006d86:	f023 0307 	bic.w	r3, r3, #7
 8006d8a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d9e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3714      	adds	r7, #20
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
	...

08006db0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	460b      	mov	r3, r1
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	333c      	adds	r3, #60	; 0x3c
 8006dc6:	3304      	adds	r3, #4
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	4a26      	ldr	r2, [pc, #152]	; (8006e68 <USB_EP0_OutStart+0xb8>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d90a      	bls.n	8006dea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006de0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006de4:	d101      	bne.n	8006dea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	e037      	b.n	8006e5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df0:	461a      	mov	r2, r3
 8006df2:	2300      	movs	r3, #0
 8006df4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e18:	f043 0318 	orr.w	r3, r3, #24
 8006e1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e2c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006e30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006e32:	7afb      	ldrb	r3, [r7, #11]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d10f      	bne.n	8006e58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3e:	461a      	mov	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e52:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006e56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	371c      	adds	r7, #28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	4f54300a 	.word	0x4f54300a

08006e6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	4a13      	ldr	r2, [pc, #76]	; (8006ecc <USB_CoreReset+0x60>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d901      	bls.n	8006e88 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e01a      	b.n	8006ebe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	daf3      	bge.n	8006e78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	f043 0201 	orr.w	r2, r3, #1
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	4a09      	ldr	r2, [pc, #36]	; (8006ecc <USB_CoreReset+0x60>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d901      	bls.n	8006eb0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e006      	b.n	8006ebe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d0f1      	beq.n	8006ea0 <USB_CoreReset+0x34>

  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	00030d40 	.word	0x00030d40

08006ed0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006ed4:	4904      	ldr	r1, [pc, #16]	; (8006ee8 <MX_FATFS_Init+0x18>)
 8006ed6:	4805      	ldr	r0, [pc, #20]	; (8006eec <MX_FATFS_Init+0x1c>)
 8006ed8:	f004 f898 	bl	800b00c <FATFS_LinkDriver>
 8006edc:	4603      	mov	r3, r0
 8006ede:	461a      	mov	r2, r3
 8006ee0:	4b03      	ldr	r3, [pc, #12]	; (8006ef0 <MX_FATFS_Init+0x20>)
 8006ee2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006ee4:	bf00      	nop
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	20000548 	.word	0x20000548
 8006eec:	0800bd0c 	.word	0x0800bd0c
 8006ef0:	20000544 	.word	0x20000544

08006ef4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006ef8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006f0e:	f000 f896 	bl	800703e <BSP_SD_IsDetected>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d001      	beq.n	8006f1c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e012      	b.n	8006f42 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006f1c:	480b      	ldr	r0, [pc, #44]	; (8006f4c <BSP_SD_Init+0x48>)
 8006f1e:	f7fc fbb9 	bl	8003694 <HAL_SD_Init>
 8006f22:	4603      	mov	r3, r0
 8006f24:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006f26:	79fb      	ldrb	r3, [r7, #7]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d109      	bne.n	8006f40 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006f2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f30:	4806      	ldr	r0, [pc, #24]	; (8006f4c <BSP_SD_Init+0x48>)
 8006f32:	f7fd f985 	bl	8004240 <HAL_SD_ConfigWideBusOperation>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006f40:	79fb      	ldrb	r3, [r7, #7]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	200004bc 	.word	0x200004bc

08006f50 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	68f9      	ldr	r1, [r7, #12]
 8006f66:	4806      	ldr	r0, [pc, #24]	; (8006f80 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006f68:	f7fc fc42 	bl	80037f0 <HAL_SD_ReadBlocks_DMA>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	200004bc 	.word	0x200004bc

08006f84 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	68f9      	ldr	r1, [r7, #12]
 8006f9a:	4806      	ldr	r0, [pc, #24]	; (8006fb4 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006f9c:	f7fc fd0a 	bl	80039b4 <HAL_SD_WriteBlocks_DMA>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3718      	adds	r7, #24
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	200004bc 	.word	0x200004bc

08006fb8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006fbc:	4805      	ldr	r0, [pc, #20]	; (8006fd4 <BSP_SD_GetCardState+0x1c>)
 8006fbe:	f7fd f9d9 	bl	8004374 <HAL_SD_GetCardState>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b04      	cmp	r3, #4
 8006fc6:	bf14      	ite	ne
 8006fc8:	2301      	movne	r3, #1
 8006fca:	2300      	moveq	r3, #0
 8006fcc:	b2db      	uxtb	r3, r3
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	200004bc 	.word	0x200004bc

08006fd8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006fe0:	6879      	ldr	r1, [r7, #4]
 8006fe2:	4803      	ldr	r0, [pc, #12]	; (8006ff0 <BSP_SD_GetCardInfo+0x18>)
 8006fe4:	f7fd f900 	bl	80041e8 <HAL_SD_GetCardInfo>
}
 8006fe8:	bf00      	nop
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	200004bc 	.word	0x200004bc

08006ff4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006ffc:	f000 f818 	bl	8007030 <BSP_SD_AbortCallback>
}
 8007000:	bf00      	nop
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007010:	f000 f9a8 	bl	8007364 <BSP_SD_WriteCpltCallback>
}
 8007014:	bf00      	nop
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007024:	f000 f9aa 	bl	800737c <BSP_SD_ReadCpltCallback>
}
 8007028:	bf00      	nop
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007030:	b480      	push	{r7}
 8007032:	af00      	add	r7, sp, #0

}
 8007034:	bf00      	nop
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b082      	sub	sp, #8
 8007042:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007044:	2301      	movs	r3, #1
 8007046:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007048:	f000 f80c 	bl	8007064 <BSP_PlatformIsDetected>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007052:	2300      	movs	r3, #0
 8007054:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007056:	79fb      	ldrb	r3, [r7, #7]
 8007058:	b2db      	uxtb	r3, r3
}
 800705a:	4618      	mov	r0, r3
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
	...

08007064 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800706a:	2301      	movs	r3, #1
 800706c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800706e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007072:	4806      	ldr	r0, [pc, #24]	; (800708c <BSP_PlatformIsDetected+0x28>)
 8007074:	f7fa fd20 	bl	8001ab8 <HAL_GPIO_ReadPin>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800707e:	2300      	movs	r3, #0
 8007080:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007082:	79fb      	ldrb	r3, [r7, #7]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	40020400 	.word	0x40020400

08007090 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8007098:	f7f9 fe92 	bl	8000dc0 <HAL_GetTick>
 800709c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800709e:	e006      	b.n	80070ae <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80070a0:	f7ff ff8a 	bl	8006fb8 <BSP_SD_GetCardState>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80070aa:	2300      	movs	r3, #0
 80070ac:	e009      	b.n	80070c2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80070ae:	f7f9 fe87 	bl	8000dc0 <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d8f0      	bhi.n	80070a0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80070be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
	...

080070cc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	4603      	mov	r3, r0
 80070d4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80070d6:	4b0b      	ldr	r3, [pc, #44]	; (8007104 <SD_CheckStatus+0x38>)
 80070d8:	2201      	movs	r2, #1
 80070da:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80070dc:	f7ff ff6c 	bl	8006fb8 <BSP_SD_GetCardState>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d107      	bne.n	80070f6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80070e6:	4b07      	ldr	r3, [pc, #28]	; (8007104 <SD_CheckStatus+0x38>)
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	f023 0301 	bic.w	r3, r3, #1
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	4b04      	ldr	r3, [pc, #16]	; (8007104 <SD_CheckStatus+0x38>)
 80070f4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80070f6:	4b03      	ldr	r3, [pc, #12]	; (8007104 <SD_CheckStatus+0x38>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	b2db      	uxtb	r3, r3
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20000009 	.word	0x20000009

08007108 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	4603      	mov	r3, r0
 8007110:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007112:	f7ff fef7 	bl	8006f04 <BSP_SD_Init>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d107      	bne.n	800712c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800711c:	79fb      	ldrb	r3, [r7, #7]
 800711e:	4618      	mov	r0, r3
 8007120:	f7ff ffd4 	bl	80070cc <SD_CheckStatus>
 8007124:	4603      	mov	r3, r0
 8007126:	461a      	mov	r2, r3
 8007128:	4b04      	ldr	r3, [pc, #16]	; (800713c <SD_initialize+0x34>)
 800712a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800712c:	4b03      	ldr	r3, [pc, #12]	; (800713c <SD_initialize+0x34>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	b2db      	uxtb	r3, r3
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	20000009 	.word	0x20000009

08007140 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	4603      	mov	r3, r0
 8007148:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800714a:	79fb      	ldrb	r3, [r7, #7]
 800714c:	4618      	mov	r0, r3
 800714e:	f7ff ffbd 	bl	80070cc <SD_CheckStatus>
 8007152:	4603      	mov	r3, r0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	60b9      	str	r1, [r7, #8]
 8007164:	607a      	str	r2, [r7, #4]
 8007166:	603b      	str	r3, [r7, #0]
 8007168:	4603      	mov	r3, r0
 800716a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007170:	f247 5030 	movw	r0, #30000	; 0x7530
 8007174:	f7ff ff8c 	bl	8007090 <SD_CheckStatusWithTimeout>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	da01      	bge.n	8007182 <SD_read+0x26>
  {
    return res;
 800717e:	7dfb      	ldrb	r3, [r7, #23]
 8007180:	e03b      	b.n	80071fa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	6879      	ldr	r1, [r7, #4]
 8007186:	68b8      	ldr	r0, [r7, #8]
 8007188:	f7ff fee2 	bl	8006f50 <BSP_SD_ReadBlocks_DMA>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d132      	bne.n	80071f8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8007192:	4b1c      	ldr	r3, [pc, #112]	; (8007204 <SD_read+0xa8>)
 8007194:	2200      	movs	r2, #0
 8007196:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8007198:	f7f9 fe12 	bl	8000dc0 <HAL_GetTick>
 800719c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800719e:	bf00      	nop
 80071a0:	4b18      	ldr	r3, [pc, #96]	; (8007204 <SD_read+0xa8>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d108      	bne.n	80071ba <SD_read+0x5e>
 80071a8:	f7f9 fe0a 	bl	8000dc0 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	f247 522f 	movw	r2, #29999	; 0x752f
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d9f2      	bls.n	80071a0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80071ba:	4b12      	ldr	r3, [pc, #72]	; (8007204 <SD_read+0xa8>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d102      	bne.n	80071c8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	75fb      	strb	r3, [r7, #23]
 80071c6:	e017      	b.n	80071f8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80071c8:	4b0e      	ldr	r3, [pc, #56]	; (8007204 <SD_read+0xa8>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80071ce:	f7f9 fdf7 	bl	8000dc0 <HAL_GetTick>
 80071d2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80071d4:	e007      	b.n	80071e6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80071d6:	f7ff feef 	bl	8006fb8 <BSP_SD_GetCardState>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d102      	bne.n	80071e6 <SD_read+0x8a>
          {
            res = RES_OK;
 80071e0:	2300      	movs	r3, #0
 80071e2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80071e4:	e008      	b.n	80071f8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80071e6:	f7f9 fdeb 	bl	8000dc0 <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	f247 522f 	movw	r2, #29999	; 0x752f
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d9ee      	bls.n	80071d6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80071f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	200001a0 	.word	0x200001a0

08007208 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	60b9      	str	r1, [r7, #8]
 8007210:	607a      	str	r2, [r7, #4]
 8007212:	603b      	str	r3, [r7, #0]
 8007214:	4603      	mov	r3, r0
 8007216:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800721c:	4b24      	ldr	r3, [pc, #144]	; (80072b0 <SD_write+0xa8>)
 800721e:	2200      	movs	r2, #0
 8007220:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007222:	f247 5030 	movw	r0, #30000	; 0x7530
 8007226:	f7ff ff33 	bl	8007090 <SD_CheckStatusWithTimeout>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	da01      	bge.n	8007234 <SD_write+0x2c>
  {
    return res;
 8007230:	7dfb      	ldrb	r3, [r7, #23]
 8007232:	e038      	b.n	80072a6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	68b8      	ldr	r0, [r7, #8]
 800723a:	f7ff fea3 	bl	8006f84 <BSP_SD_WriteBlocks_DMA>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d12f      	bne.n	80072a4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8007244:	f7f9 fdbc 	bl	8000dc0 <HAL_GetTick>
 8007248:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800724a:	bf00      	nop
 800724c:	4b18      	ldr	r3, [pc, #96]	; (80072b0 <SD_write+0xa8>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d108      	bne.n	8007266 <SD_write+0x5e>
 8007254:	f7f9 fdb4 	bl	8000dc0 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	f247 522f 	movw	r2, #29999	; 0x752f
 8007262:	4293      	cmp	r3, r2
 8007264:	d9f2      	bls.n	800724c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8007266:	4b12      	ldr	r3, [pc, #72]	; (80072b0 <SD_write+0xa8>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d102      	bne.n	8007274 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	75fb      	strb	r3, [r7, #23]
 8007272:	e017      	b.n	80072a4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8007274:	4b0e      	ldr	r3, [pc, #56]	; (80072b0 <SD_write+0xa8>)
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800727a:	f7f9 fda1 	bl	8000dc0 <HAL_GetTick>
 800727e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007280:	e007      	b.n	8007292 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007282:	f7ff fe99 	bl	8006fb8 <BSP_SD_GetCardState>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d102      	bne.n	8007292 <SD_write+0x8a>
          {
            res = RES_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	75fb      	strb	r3, [r7, #23]
            break;
 8007290:	e008      	b.n	80072a4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007292:	f7f9 fd95 	bl	8000dc0 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	f247 522f 	movw	r2, #29999	; 0x752f
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d9ee      	bls.n	8007282 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80072a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	2000019c 	.word	0x2000019c

080072b4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b08c      	sub	sp, #48	; 0x30
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	4603      	mov	r3, r0
 80072bc:	603a      	str	r2, [r7, #0]
 80072be:	71fb      	strb	r3, [r7, #7]
 80072c0:	460b      	mov	r3, r1
 80072c2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80072ca:	4b25      	ldr	r3, [pc, #148]	; (8007360 <SD_ioctl+0xac>)
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	f003 0301 	and.w	r3, r3, #1
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <SD_ioctl+0x28>
 80072d8:	2303      	movs	r3, #3
 80072da:	e03c      	b.n	8007356 <SD_ioctl+0xa2>

  switch (cmd)
 80072dc:	79bb      	ldrb	r3, [r7, #6]
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d834      	bhi.n	800734c <SD_ioctl+0x98>
 80072e2:	a201      	add	r2, pc, #4	; (adr r2, 80072e8 <SD_ioctl+0x34>)
 80072e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e8:	080072f9 	.word	0x080072f9
 80072ec:	08007301 	.word	0x08007301
 80072f0:	08007319 	.word	0x08007319
 80072f4:	08007333 	.word	0x08007333
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80072fe:	e028      	b.n	8007352 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007300:	f107 030c 	add.w	r3, r7, #12
 8007304:	4618      	mov	r0, r3
 8007306:	f7ff fe67 	bl	8006fd8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800730a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007310:	2300      	movs	r3, #0
 8007312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007316:	e01c      	b.n	8007352 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007318:	f107 030c 	add.w	r3, r7, #12
 800731c:	4618      	mov	r0, r3
 800731e:	f7ff fe5b 	bl	8006fd8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007324:	b29a      	uxth	r2, r3
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007330:	e00f      	b.n	8007352 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007332:	f107 030c 	add.w	r3, r7, #12
 8007336:	4618      	mov	r0, r3
 8007338:	f7ff fe4e 	bl	8006fd8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	0a5a      	lsrs	r2, r3, #9
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007344:	2300      	movs	r3, #0
 8007346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800734a:	e002      	b.n	8007352 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800734c:	2304      	movs	r3, #4
 800734e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007352:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007356:	4618      	mov	r0, r3
 8007358:	3730      	adds	r7, #48	; 0x30
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20000009 	.word	0x20000009

08007364 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8007364:	b480      	push	{r7}
 8007366:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8007368:	4b03      	ldr	r3, [pc, #12]	; (8007378 <BSP_SD_WriteCpltCallback+0x14>)
 800736a:	2201      	movs	r2, #1
 800736c:	601a      	str	r2, [r3, #0]
}
 800736e:	bf00      	nop
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	2000019c 	.word	0x2000019c

0800737c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800737c:	b480      	push	{r7}
 800737e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8007380:	4b03      	ldr	r3, [pc, #12]	; (8007390 <BSP_SD_ReadCpltCallback+0x14>)
 8007382:	2201      	movs	r2, #1
 8007384:	601a      	str	r2, [r3, #0]
}
 8007386:	bf00      	nop
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	200001a0 	.word	0x200001a0

08007394 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80073a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80073a4:	f004 fb9e 	bl	800bae4 <USBD_static_malloc>
 80073a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d105      	bne.n	80073bc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80073b8:	2302      	movs	r3, #2
 80073ba:	e066      	b.n	800748a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	7c1b      	ldrb	r3, [r3, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d119      	bne.n	8007400 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80073cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073d0:	2202      	movs	r2, #2
 80073d2:	2181      	movs	r1, #129	; 0x81
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f004 fa62 	bl	800b89e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80073e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073e4:	2202      	movs	r2, #2
 80073e6:	2101      	movs	r1, #1
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f004 fa58 	bl	800b89e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2210      	movs	r2, #16
 80073fa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80073fe:	e016      	b.n	800742e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007400:	2340      	movs	r3, #64	; 0x40
 8007402:	2202      	movs	r2, #2
 8007404:	2181      	movs	r1, #129	; 0x81
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f004 fa49 	bl	800b89e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007412:	2340      	movs	r3, #64	; 0x40
 8007414:	2202      	movs	r2, #2
 8007416:	2101      	movs	r1, #1
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f004 fa40 	bl	800b89e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2210      	movs	r2, #16
 800742a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800742e:	2308      	movs	r3, #8
 8007430:	2203      	movs	r2, #3
 8007432:	2182      	movs	r1, #130	; 0x82
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f004 fa32 	bl	800b89e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	7c1b      	ldrb	r3, [r3, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d109      	bne.n	8007478 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800746a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800746e:	2101      	movs	r1, #1
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f004 fb03 	bl	800ba7c <USBD_LL_PrepareReceive>
 8007476:	e007      	b.n	8007488 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800747e:	2340      	movs	r3, #64	; 0x40
 8007480:	2101      	movs	r1, #1
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f004 fafa 	bl	800ba7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b082      	sub	sp, #8
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	460b      	mov	r3, r1
 800749c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800749e:	2181      	movs	r1, #129	; 0x81
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f004 fa22 	bl	800b8ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80074ac:	2101      	movs	r1, #1
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f004 fa1b 	bl	800b8ea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80074bc:	2182      	movs	r1, #130	; 0x82
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f004 fa13 	bl	800b8ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00e      	beq.n	80074fc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074ee:	4618      	mov	r0, r3
 80074f0:	f004 fb06 	bl	800bb00 <USBD_static_free>
    pdev->pClassData = NULL;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
	...

08007508 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007518:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800751a:	2300      	movs	r3, #0
 800751c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800752c:	2303      	movs	r3, #3
 800752e:	e0af      	b.n	8007690 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007538:	2b00      	cmp	r3, #0
 800753a:	d03f      	beq.n	80075bc <USBD_CDC_Setup+0xb4>
 800753c:	2b20      	cmp	r3, #32
 800753e:	f040 809f 	bne.w	8007680 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	88db      	ldrh	r3, [r3, #6]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d02e      	beq.n	80075a8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	b25b      	sxtb	r3, r3
 8007550:	2b00      	cmp	r3, #0
 8007552:	da16      	bge.n	8007582 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	683a      	ldr	r2, [r7, #0]
 800755e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007560:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	88d2      	ldrh	r2, [r2, #6]
 8007566:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	88db      	ldrh	r3, [r3, #6]
 800756c:	2b07      	cmp	r3, #7
 800756e:	bf28      	it	cs
 8007570:	2307      	movcs	r3, #7
 8007572:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	89fa      	ldrh	r2, [r7, #14]
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f001 fb19 	bl	8008bb2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007580:	e085      	b.n	800768e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	785a      	ldrb	r2, [r3, #1]
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	88db      	ldrh	r3, [r3, #6]
 8007590:	b2da      	uxtb	r2, r3
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007598:	6939      	ldr	r1, [r7, #16]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	88db      	ldrh	r3, [r3, #6]
 800759e:	461a      	mov	r2, r3
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f001 fb32 	bl	8008c0a <USBD_CtlPrepareRx>
      break;
 80075a6:	e072      	b.n	800768e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	7850      	ldrb	r0, [r2, #1]
 80075b4:	2200      	movs	r2, #0
 80075b6:	6839      	ldr	r1, [r7, #0]
 80075b8:	4798      	blx	r3
      break;
 80075ba:	e068      	b.n	800768e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	785b      	ldrb	r3, [r3, #1]
 80075c0:	2b0b      	cmp	r3, #11
 80075c2:	d852      	bhi.n	800766a <USBD_CDC_Setup+0x162>
 80075c4:	a201      	add	r2, pc, #4	; (adr r2, 80075cc <USBD_CDC_Setup+0xc4>)
 80075c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ca:	bf00      	nop
 80075cc:	080075fd 	.word	0x080075fd
 80075d0:	08007679 	.word	0x08007679
 80075d4:	0800766b 	.word	0x0800766b
 80075d8:	0800766b 	.word	0x0800766b
 80075dc:	0800766b 	.word	0x0800766b
 80075e0:	0800766b 	.word	0x0800766b
 80075e4:	0800766b 	.word	0x0800766b
 80075e8:	0800766b 	.word	0x0800766b
 80075ec:	0800766b 	.word	0x0800766b
 80075f0:	0800766b 	.word	0x0800766b
 80075f4:	08007627 	.word	0x08007627
 80075f8:	08007651 	.word	0x08007651
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b03      	cmp	r3, #3
 8007606:	d107      	bne.n	8007618 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007608:	f107 030a 	add.w	r3, r7, #10
 800760c:	2202      	movs	r2, #2
 800760e:	4619      	mov	r1, r3
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f001 face 	bl	8008bb2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007616:	e032      	b.n	800767e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 fa58 	bl	8008ad0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007620:	2303      	movs	r3, #3
 8007622:	75fb      	strb	r3, [r7, #23]
          break;
 8007624:	e02b      	b.n	800767e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b03      	cmp	r3, #3
 8007630:	d107      	bne.n	8007642 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007632:	f107 030d 	add.w	r3, r7, #13
 8007636:	2201      	movs	r2, #1
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f001 fab9 	bl	8008bb2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007640:	e01d      	b.n	800767e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f001 fa43 	bl	8008ad0 <USBD_CtlError>
            ret = USBD_FAIL;
 800764a:	2303      	movs	r3, #3
 800764c:	75fb      	strb	r3, [r7, #23]
          break;
 800764e:	e016      	b.n	800767e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2b03      	cmp	r3, #3
 800765a:	d00f      	beq.n	800767c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f001 fa36 	bl	8008ad0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007664:	2303      	movs	r3, #3
 8007666:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007668:	e008      	b.n	800767c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800766a:	6839      	ldr	r1, [r7, #0]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f001 fa2f 	bl	8008ad0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007672:	2303      	movs	r3, #3
 8007674:	75fb      	strb	r3, [r7, #23]
          break;
 8007676:	e002      	b.n	800767e <USBD_CDC_Setup+0x176>
          break;
 8007678:	bf00      	nop
 800767a:	e008      	b.n	800768e <USBD_CDC_Setup+0x186>
          break;
 800767c:	bf00      	nop
      }
      break;
 800767e:	e006      	b.n	800768e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f001 fa24 	bl	8008ad0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007688:	2303      	movs	r3, #3
 800768a:	75fb      	strb	r3, [r7, #23]
      break;
 800768c:	bf00      	nop
  }

  return (uint8_t)ret;
 800768e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	460b      	mov	r3, r1
 80076a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e04f      	b.n	800775a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80076c2:	78fa      	ldrb	r2, [r7, #3]
 80076c4:	6879      	ldr	r1, [r7, #4]
 80076c6:	4613      	mov	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	440b      	add	r3, r1
 80076d0:	3318      	adds	r3, #24
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d029      	beq.n	800772c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80076d8:	78fa      	ldrb	r2, [r7, #3]
 80076da:	6879      	ldr	r1, [r7, #4]
 80076dc:	4613      	mov	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	440b      	add	r3, r1
 80076e6:	3318      	adds	r3, #24
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	78f9      	ldrb	r1, [r7, #3]
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	460b      	mov	r3, r1
 80076f0:	00db      	lsls	r3, r3, #3
 80076f2:	1a5b      	subs	r3, r3, r1
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4403      	add	r3, r0
 80076f8:	3344      	adds	r3, #68	; 0x44
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8007700:	fb03 f301 	mul.w	r3, r3, r1
 8007704:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007706:	2b00      	cmp	r3, #0
 8007708:	d110      	bne.n	800772c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800770a:	78fa      	ldrb	r2, [r7, #3]
 800770c:	6879      	ldr	r1, [r7, #4]
 800770e:	4613      	mov	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	440b      	add	r3, r1
 8007718:	3318      	adds	r3, #24
 800771a:	2200      	movs	r2, #0
 800771c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800771e:	78f9      	ldrb	r1, [r7, #3]
 8007720:	2300      	movs	r3, #0
 8007722:	2200      	movs	r2, #0
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f004 f988 	bl	800ba3a <USBD_LL_Transmit>
 800772a:	e015      	b.n	8007758 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2200      	movs	r2, #0
 8007730:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00b      	beq.n	8007758 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007754:	78fa      	ldrb	r2, [r7, #3]
 8007756:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b084      	sub	sp, #16
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	460b      	mov	r3, r1
 800776c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007774:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800777c:	2b00      	cmp	r3, #0
 800777e:	d101      	bne.n	8007784 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007780:	2303      	movs	r3, #3
 8007782:	e015      	b.n	80077b0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007784:	78fb      	ldrb	r3, [r7, #3]
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f004 f998 	bl	800babe <USBD_LL_GetRxDataSize>
 800778e:	4602      	mov	r2, r0
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80077aa:	4611      	mov	r1, r2
 80077ac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d101      	bne.n	80077d2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e01b      	b.n	800780a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d015      	beq.n	8007808 <USBD_CDC_EP0_RxReady+0x50>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80077e2:	2bff      	cmp	r3, #255	; 0xff
 80077e4:	d010      	beq.n	8007808 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80077f4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80077fc:	b292      	uxth	r2, r2
 80077fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	22ff      	movs	r2, #255	; 0xff
 8007804:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
	...

08007814 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2243      	movs	r2, #67	; 0x43
 8007820:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007822:	4b03      	ldr	r3, [pc, #12]	; (8007830 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007824:	4618      	mov	r0, r3
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	20000094 	.word	0x20000094

08007834 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2243      	movs	r2, #67	; 0x43
 8007840:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007842:	4b03      	ldr	r3, [pc, #12]	; (8007850 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007844:	4618      	mov	r0, r3
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	20000050 	.word	0x20000050

08007854 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2243      	movs	r2, #67	; 0x43
 8007860:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007862:	4b03      	ldr	r3, [pc, #12]	; (8007870 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007864:	4618      	mov	r0, r3
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	200000d8 	.word	0x200000d8

08007874 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	220a      	movs	r2, #10
 8007880:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007882:	4b03      	ldr	r3, [pc, #12]	; (8007890 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007884:	4618      	mov	r0, r3
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	2000000c 	.word	0x2000000c

08007894 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d101      	bne.n	80078a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e004      	b.n	80078b2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80078be:	b480      	push	{r7}
 80078c0:	b087      	sub	sp, #28
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	60f8      	str	r0, [r7, #12]
 80078c6:	60b9      	str	r1, [r7, #8]
 80078c8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078d0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80078d8:	2303      	movs	r3, #3
 80078da:	e008      	b.n	80078ee <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	371c      	adds	r7, #28
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b085      	sub	sp, #20
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800790a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007912:	2303      	movs	r3, #3
 8007914:	e004      	b.n	8007920 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800793a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800793c:	2301      	movs	r3, #1
 800793e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800794a:	2303      	movs	r3, #3
 800794c:	e01a      	b.n	8007984 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007954:	2b00      	cmp	r3, #0
 8007956:	d114      	bne.n	8007982 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2201      	movs	r2, #1
 800795c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007976:	2181      	movs	r1, #129	; 0x81
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f004 f85e 	bl	800ba3a <USBD_LL_Transmit>

    ret = USBD_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007982:	7bfb      	ldrb	r3, [r7, #15]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800799a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d101      	bne.n	80079aa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e016      	b.n	80079d8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	7c1b      	ldrb	r3, [r3, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d109      	bne.n	80079c6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079bc:	2101      	movs	r1, #1
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f004 f85c 	bl	800ba7c <USBD_LL_PrepareReceive>
 80079c4:	e007      	b.n	80079d6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079cc:	2340      	movs	r3, #64	; 0x40
 80079ce:	2101      	movs	r1, #1
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f004 f853 	bl	800ba7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	4613      	mov	r3, r2
 80079ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d101      	bne.n	80079f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e01f      	b.n	8007a38 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	68ba      	ldr	r2, [r7, #8]
 8007a1a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	79fa      	ldrb	r2, [r7, #7]
 8007a2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f003 fecf 	bl	800b7d0 <USBD_LL_Init>
 8007a32:	4603      	mov	r3, r0
 8007a34:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d101      	bne.n	8007a58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007a54:	2303      	movs	r3, #3
 8007a56:	e016      	b.n	8007a86 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00b      	beq.n	8007a84 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a74:	f107 020e 	add.w	r2, r7, #14
 8007a78:	4610      	mov	r0, r2
 8007a7a:	4798      	blx	r3
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b082      	sub	sp, #8
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f003 fee6 	bl	800b868 <USBD_LL_Start>
 8007a9c:	4603      	mov	r3, r0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b083      	sub	sp, #12
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d009      	beq.n	8007aea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	78fa      	ldrb	r2, [r7, #3]
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	4798      	blx	r3
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d007      	beq.n	8007b1a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	78fa      	ldrb	r2, [r7, #3]
 8007b14:	4611      	mov	r1, r2
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	4798      	blx	r3
  }

  return USBD_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 ff90 	bl	8008a5c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b58:	f003 031f 	and.w	r3, r3, #31
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d01a      	beq.n	8007b96 <USBD_LL_SetupStage+0x72>
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d822      	bhi.n	8007baa <USBD_LL_SetupStage+0x86>
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d002      	beq.n	8007b6e <USBD_LL_SetupStage+0x4a>
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d00a      	beq.n	8007b82 <USBD_LL_SetupStage+0x5e>
 8007b6c:	e01d      	b.n	8007baa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b74:	4619      	mov	r1, r3
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fa62 	bl	8008040 <USBD_StdDevReq>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b80:	e020      	b.n	8007bc4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b88:	4619      	mov	r1, r3
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fac6 	bl	800811c <USBD_StdItfReq>
 8007b90:	4603      	mov	r3, r0
 8007b92:	73fb      	strb	r3, [r7, #15]
      break;
 8007b94:	e016      	b.n	8007bc4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fb05 	bl	80081ae <USBD_StdEPReq>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba8:	e00c      	b.n	8007bc4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007bb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f003 feb5 	bl	800b928 <USBD_LL_StallEP>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	73fb      	strb	r3, [r7, #15]
      break;
 8007bc2:	bf00      	nop
  }

  return ret;
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b086      	sub	sp, #24
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	60f8      	str	r0, [r7, #12]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	607a      	str	r2, [r7, #4]
 8007bda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007bdc:	7afb      	ldrb	r3, [r7, #11]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d138      	bne.n	8007c54 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007be8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bf0:	2b03      	cmp	r3, #3
 8007bf2:	d14a      	bne.n	8007c8a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	689a      	ldr	r2, [r3, #8]
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d913      	bls.n	8007c28 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	689a      	ldr	r2, [r3, #8]
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	1ad2      	subs	r2, r2, r3
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	68da      	ldr	r2, [r3, #12]
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	4293      	cmp	r3, r2
 8007c18:	bf28      	it	cs
 8007c1a:	4613      	movcs	r3, r2
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	6879      	ldr	r1, [r7, #4]
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f001 f80f 	bl	8008c44 <USBD_CtlContinueRx>
 8007c26:	e030      	b.n	8007c8a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b03      	cmp	r3, #3
 8007c32:	d10b      	bne.n	8007c4c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d005      	beq.n	8007c4c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f001 f80a 	bl	8008c66 <USBD_CtlSendStatus>
 8007c52:	e01a      	b.n	8007c8a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	d114      	bne.n	8007c8a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00e      	beq.n	8007c8a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	7afa      	ldrb	r2, [r7, #11]
 8007c76:	4611      	mov	r1, r2
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	4798      	blx	r3
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007c80:	7dfb      	ldrb	r3, [r7, #23]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
 8007c88:	e000      	b.n	8007c8c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3718      	adds	r7, #24
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007ca2:	7afb      	ldrb	r3, [r7, #11]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d16b      	bne.n	8007d80 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	3314      	adds	r3, #20
 8007cac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d156      	bne.n	8007d66 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d914      	bls.n	8007cee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	689a      	ldr	r2, [r3, #8]
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	1ad2      	subs	r2, r2, r3
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	6879      	ldr	r1, [r7, #4]
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f000 ff84 	bl	8008be8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f003 fec8 	bl	800ba7c <USBD_LL_PrepareReceive>
 8007cec:	e03b      	b.n	8007d66 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	68da      	ldr	r2, [r3, #12]
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d11c      	bne.n	8007d34 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d316      	bcc.n	8007d34 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	685a      	ldr	r2, [r3, #4]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d20f      	bcs.n	8007d34 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d14:	2200      	movs	r2, #0
 8007d16:	2100      	movs	r1, #0
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 ff65 	bl	8008be8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d26:	2300      	movs	r3, #0
 8007d28:	2200      	movs	r2, #0
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f003 fea5 	bl	800ba7c <USBD_LL_PrepareReceive>
 8007d32:	e018      	b.n	8007d66 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b03      	cmp	r3, #3
 8007d3e:	d10b      	bne.n	8007d58 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d005      	beq.n	8007d58 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d58:	2180      	movs	r1, #128	; 0x80
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f003 fde4 	bl	800b928 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 ff93 	bl	8008c8c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d122      	bne.n	8007db6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f7ff fe98 	bl	8007aa6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007d7e:	e01a      	b.n	8007db6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d114      	bne.n	8007db6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d92:	695b      	ldr	r3, [r3, #20]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00e      	beq.n	8007db6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	7afa      	ldrb	r2, [r7, #11]
 8007da2:	4611      	mov	r1, r2
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	4798      	blx	r3
 8007da8:	4603      	mov	r3, r0
 8007daa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007dac:	7dfb      	ldrb	r3, [r7, #23]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d001      	beq.n	8007db6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
 8007db4:	e000      	b.n	8007db8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d101      	bne.n	8007df4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e02f      	b.n	8007e54 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00f      	beq.n	8007e1e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d009      	beq.n	8007e1e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	6852      	ldr	r2, [r2, #4]
 8007e16:	b2d2      	uxtb	r2, r2
 8007e18:	4611      	mov	r1, r2
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e1e:	2340      	movs	r3, #64	; 0x40
 8007e20:	2200      	movs	r2, #0
 8007e22:	2100      	movs	r1, #0
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f003 fd3a 	bl	800b89e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2240      	movs	r2, #64	; 0x40
 8007e36:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e3a:	2340      	movs	r3, #64	; 0x40
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	2180      	movs	r1, #128	; 0x80
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f003 fd2c 	bl	800b89e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2240      	movs	r2, #64	; 0x40
 8007e50:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	460b      	mov	r3, r1
 8007e66:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	78fa      	ldrb	r2, [r7, #3]
 8007e6c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2204      	movs	r2, #4
 8007e96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	d106      	bne.n	8007eca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e012      	b.n	8007f14 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b03      	cmp	r3, #3
 8007ef8:	d10b      	bne.n	8007f12 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f00:	69db      	ldr	r3, [r3, #28]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d005      	beq.n	8007f12 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	460b      	mov	r3, r1
 8007f26:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e014      	b.n	8007f60 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b03      	cmp	r3, #3
 8007f40:	d10d      	bne.n	8007f5e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d007      	beq.n	8007f5e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	78fa      	ldrb	r2, [r7, #3]
 8007f58:	4611      	mov	r1, r2
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d101      	bne.n	8007f82 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e014      	b.n	8007fac <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d10d      	bne.n	8007faa <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d007      	beq.n	8007faa <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa2:	78fa      	ldrb	r2, [r7, #3]
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d009      	beq.n	8007ff8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	6852      	ldr	r2, [r2, #4]
 8007ff0:	b2d2      	uxtb	r2, r2
 8007ff2:	4611      	mov	r1, r2
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	4798      	blx	r3
  }

  return USBD_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008002:	b480      	push	{r7}
 8008004:	b087      	sub	sp, #28
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	3301      	adds	r3, #1
 8008018:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008020:	8a3b      	ldrh	r3, [r7, #16]
 8008022:	021b      	lsls	r3, r3, #8
 8008024:	b21a      	sxth	r2, r3
 8008026:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800802a:	4313      	orrs	r3, r2
 800802c:	b21b      	sxth	r3, r3
 800802e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008030:	89fb      	ldrh	r3, [r7, #14]
}
 8008032:	4618      	mov	r0, r3
 8008034:	371c      	adds	r7, #28
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
	...

08008040 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008056:	2b40      	cmp	r3, #64	; 0x40
 8008058:	d005      	beq.n	8008066 <USBD_StdDevReq+0x26>
 800805a:	2b40      	cmp	r3, #64	; 0x40
 800805c:	d853      	bhi.n	8008106 <USBD_StdDevReq+0xc6>
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00b      	beq.n	800807a <USBD_StdDevReq+0x3a>
 8008062:	2b20      	cmp	r3, #32
 8008064:	d14f      	bne.n	8008106 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	4798      	blx	r3
 8008074:	4603      	mov	r3, r0
 8008076:	73fb      	strb	r3, [r7, #15]
      break;
 8008078:	e04a      	b.n	8008110 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	785b      	ldrb	r3, [r3, #1]
 800807e:	2b09      	cmp	r3, #9
 8008080:	d83b      	bhi.n	80080fa <USBD_StdDevReq+0xba>
 8008082:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <USBD_StdDevReq+0x48>)
 8008084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008088:	080080dd 	.word	0x080080dd
 800808c:	080080f1 	.word	0x080080f1
 8008090:	080080fb 	.word	0x080080fb
 8008094:	080080e7 	.word	0x080080e7
 8008098:	080080fb 	.word	0x080080fb
 800809c:	080080bb 	.word	0x080080bb
 80080a0:	080080b1 	.word	0x080080b1
 80080a4:	080080fb 	.word	0x080080fb
 80080a8:	080080d3 	.word	0x080080d3
 80080ac:	080080c5 	.word	0x080080c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f9de 	bl	8008474 <USBD_GetDescriptor>
          break;
 80080b8:	e024      	b.n	8008104 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fb43 	bl	8008748 <USBD_SetAddress>
          break;
 80080c2:	e01f      	b.n	8008104 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fb82 	bl	80087d0 <USBD_SetConfig>
 80080cc:	4603      	mov	r3, r0
 80080ce:	73fb      	strb	r3, [r7, #15]
          break;
 80080d0:	e018      	b.n	8008104 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fc21 	bl	800891c <USBD_GetConfig>
          break;
 80080da:	e013      	b.n	8008104 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80080dc:	6839      	ldr	r1, [r7, #0]
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fc52 	bl	8008988 <USBD_GetStatus>
          break;
 80080e4:	e00e      	b.n	8008104 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fc81 	bl	80089f0 <USBD_SetFeature>
          break;
 80080ee:	e009      	b.n	8008104 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fc90 	bl	8008a18 <USBD_ClrFeature>
          break;
 80080f8:	e004      	b.n	8008104 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fce7 	bl	8008ad0 <USBD_CtlError>
          break;
 8008102:	bf00      	nop
      }
      break;
 8008104:	e004      	b.n	8008110 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fce1 	bl	8008ad0 <USBD_CtlError>
      break;
 800810e:	bf00      	nop
  }

  return ret;
 8008110:	7bfb      	ldrb	r3, [r7, #15]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop

0800811c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008126:	2300      	movs	r3, #0
 8008128:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008132:	2b40      	cmp	r3, #64	; 0x40
 8008134:	d005      	beq.n	8008142 <USBD_StdItfReq+0x26>
 8008136:	2b40      	cmp	r3, #64	; 0x40
 8008138:	d82f      	bhi.n	800819a <USBD_StdItfReq+0x7e>
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <USBD_StdItfReq+0x26>
 800813e:	2b20      	cmp	r3, #32
 8008140:	d12b      	bne.n	800819a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008148:	b2db      	uxtb	r3, r3
 800814a:	3b01      	subs	r3, #1
 800814c:	2b02      	cmp	r3, #2
 800814e:	d81d      	bhi.n	800818c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	889b      	ldrh	r3, [r3, #4]
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b01      	cmp	r3, #1
 8008158:	d813      	bhi.n	8008182 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	6839      	ldr	r1, [r7, #0]
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	4798      	blx	r3
 8008168:	4603      	mov	r3, r0
 800816a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	88db      	ldrh	r3, [r3, #6]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d110      	bne.n	8008196 <USBD_StdItfReq+0x7a>
 8008174:	7bfb      	ldrb	r3, [r7, #15]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10d      	bne.n	8008196 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fd73 	bl	8008c66 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008180:	e009      	b.n	8008196 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fca3 	bl	8008ad0 <USBD_CtlError>
          break;
 800818a:	e004      	b.n	8008196 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fc9e 	bl	8008ad0 <USBD_CtlError>
          break;
 8008194:	e000      	b.n	8008198 <USBD_StdItfReq+0x7c>
          break;
 8008196:	bf00      	nop
      }
      break;
 8008198:	e004      	b.n	80081a4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fc97 	bl	8008ad0 <USBD_CtlError>
      break;
 80081a2:	bf00      	nop
  }

  return ret;
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	889b      	ldrh	r3, [r3, #4]
 80081c0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081ca:	2b40      	cmp	r3, #64	; 0x40
 80081cc:	d007      	beq.n	80081de <USBD_StdEPReq+0x30>
 80081ce:	2b40      	cmp	r3, #64	; 0x40
 80081d0:	f200 8145 	bhi.w	800845e <USBD_StdEPReq+0x2b0>
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00c      	beq.n	80081f2 <USBD_StdEPReq+0x44>
 80081d8:	2b20      	cmp	r3, #32
 80081da:	f040 8140 	bne.w	800845e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	6839      	ldr	r1, [r7, #0]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	4798      	blx	r3
 80081ec:	4603      	mov	r3, r0
 80081ee:	73fb      	strb	r3, [r7, #15]
      break;
 80081f0:	e13a      	b.n	8008468 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	785b      	ldrb	r3, [r3, #1]
 80081f6:	2b03      	cmp	r3, #3
 80081f8:	d007      	beq.n	800820a <USBD_StdEPReq+0x5c>
 80081fa:	2b03      	cmp	r3, #3
 80081fc:	f300 8129 	bgt.w	8008452 <USBD_StdEPReq+0x2a4>
 8008200:	2b00      	cmp	r3, #0
 8008202:	d07f      	beq.n	8008304 <USBD_StdEPReq+0x156>
 8008204:	2b01      	cmp	r3, #1
 8008206:	d03c      	beq.n	8008282 <USBD_StdEPReq+0xd4>
 8008208:	e123      	b.n	8008452 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b02      	cmp	r3, #2
 8008214:	d002      	beq.n	800821c <USBD_StdEPReq+0x6e>
 8008216:	2b03      	cmp	r3, #3
 8008218:	d016      	beq.n	8008248 <USBD_StdEPReq+0x9a>
 800821a:	e02c      	b.n	8008276 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800821c:	7bbb      	ldrb	r3, [r7, #14]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00d      	beq.n	800823e <USBD_StdEPReq+0x90>
 8008222:	7bbb      	ldrb	r3, [r7, #14]
 8008224:	2b80      	cmp	r3, #128	; 0x80
 8008226:	d00a      	beq.n	800823e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008228:	7bbb      	ldrb	r3, [r7, #14]
 800822a:	4619      	mov	r1, r3
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f003 fb7b 	bl	800b928 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008232:	2180      	movs	r1, #128	; 0x80
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f003 fb77 	bl	800b928 <USBD_LL_StallEP>
 800823a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800823c:	e020      	b.n	8008280 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fc45 	bl	8008ad0 <USBD_CtlError>
              break;
 8008246:	e01b      	b.n	8008280 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	885b      	ldrh	r3, [r3, #2]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10e      	bne.n	800826e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00b      	beq.n	800826e <USBD_StdEPReq+0xc0>
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	2b80      	cmp	r3, #128	; 0x80
 800825a:	d008      	beq.n	800826e <USBD_StdEPReq+0xc0>
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	88db      	ldrh	r3, [r3, #6]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d104      	bne.n	800826e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f003 fb5d 	bl	800b928 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fcf9 	bl	8008c66 <USBD_CtlSendStatus>

              break;
 8008274:	e004      	b.n	8008280 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fc29 	bl	8008ad0 <USBD_CtlError>
              break;
 800827e:	bf00      	nop
          }
          break;
 8008280:	e0ec      	b.n	800845c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b02      	cmp	r3, #2
 800828c:	d002      	beq.n	8008294 <USBD_StdEPReq+0xe6>
 800828e:	2b03      	cmp	r3, #3
 8008290:	d016      	beq.n	80082c0 <USBD_StdEPReq+0x112>
 8008292:	e030      	b.n	80082f6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008294:	7bbb      	ldrb	r3, [r7, #14]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00d      	beq.n	80082b6 <USBD_StdEPReq+0x108>
 800829a:	7bbb      	ldrb	r3, [r7, #14]
 800829c:	2b80      	cmp	r3, #128	; 0x80
 800829e:	d00a      	beq.n	80082b6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082a0:	7bbb      	ldrb	r3, [r7, #14]
 80082a2:	4619      	mov	r1, r3
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f003 fb3f 	bl	800b928 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082aa:	2180      	movs	r1, #128	; 0x80
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f003 fb3b 	bl	800b928 <USBD_LL_StallEP>
 80082b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082b4:	e025      	b.n	8008302 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fc09 	bl	8008ad0 <USBD_CtlError>
              break;
 80082be:	e020      	b.n	8008302 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	885b      	ldrh	r3, [r3, #2]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d11b      	bne.n	8008300 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80082c8:	7bbb      	ldrb	r3, [r7, #14]
 80082ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d004      	beq.n	80082dc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80082d2:	7bbb      	ldrb	r3, [r7, #14]
 80082d4:	4619      	mov	r1, r3
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f003 fb45 	bl	800b966 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fcc2 	bl	8008c66 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	4798      	blx	r3
 80082f0:	4603      	mov	r3, r0
 80082f2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80082f4:	e004      	b.n	8008300 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fbe9 	bl	8008ad0 <USBD_CtlError>
              break;
 80082fe:	e000      	b.n	8008302 <USBD_StdEPReq+0x154>
              break;
 8008300:	bf00      	nop
          }
          break;
 8008302:	e0ab      	b.n	800845c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b02      	cmp	r3, #2
 800830e:	d002      	beq.n	8008316 <USBD_StdEPReq+0x168>
 8008310:	2b03      	cmp	r3, #3
 8008312:	d032      	beq.n	800837a <USBD_StdEPReq+0x1cc>
 8008314:	e097      	b.n	8008446 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d007      	beq.n	800832c <USBD_StdEPReq+0x17e>
 800831c:	7bbb      	ldrb	r3, [r7, #14]
 800831e:	2b80      	cmp	r3, #128	; 0x80
 8008320:	d004      	beq.n	800832c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fbd3 	bl	8008ad0 <USBD_CtlError>
                break;
 800832a:	e091      	b.n	8008450 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800832c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008330:	2b00      	cmp	r3, #0
 8008332:	da0b      	bge.n	800834c <USBD_StdEPReq+0x19e>
 8008334:	7bbb      	ldrb	r3, [r7, #14]
 8008336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800833a:	4613      	mov	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	3310      	adds	r3, #16
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	4413      	add	r3, r2
 8008348:	3304      	adds	r3, #4
 800834a:	e00b      	b.n	8008364 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008352:	4613      	mov	r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4413      	add	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	4413      	add	r3, r2
 8008362:	3304      	adds	r3, #4
 8008364:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	2200      	movs	r2, #0
 800836a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2202      	movs	r2, #2
 8008370:	4619      	mov	r1, r3
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fc1d 	bl	8008bb2 <USBD_CtlSendData>
              break;
 8008378:	e06a      	b.n	8008450 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800837a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800837e:	2b00      	cmp	r3, #0
 8008380:	da11      	bge.n	80083a6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008382:	7bbb      	ldrb	r3, [r7, #14]
 8008384:	f003 020f 	and.w	r2, r3, #15
 8008388:	6879      	ldr	r1, [r7, #4]
 800838a:	4613      	mov	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	440b      	add	r3, r1
 8008394:	3324      	adds	r3, #36	; 0x24
 8008396:	881b      	ldrh	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d117      	bne.n	80083cc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fb96 	bl	8008ad0 <USBD_CtlError>
                  break;
 80083a4:	e054      	b.n	8008450 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083a6:	7bbb      	ldrb	r3, [r7, #14]
 80083a8:	f003 020f 	and.w	r2, r3, #15
 80083ac:	6879      	ldr	r1, [r7, #4]
 80083ae:	4613      	mov	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	440b      	add	r3, r1
 80083b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083bc:	881b      	ldrh	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d104      	bne.n	80083cc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fb83 	bl	8008ad0 <USBD_CtlError>
                  break;
 80083ca:	e041      	b.n	8008450 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	da0b      	bge.n	80083ec <USBD_StdEPReq+0x23e>
 80083d4:	7bbb      	ldrb	r3, [r7, #14]
 80083d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083da:	4613      	mov	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	3310      	adds	r3, #16
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	4413      	add	r3, r2
 80083e8:	3304      	adds	r3, #4
 80083ea:	e00b      	b.n	8008404 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083ec:	7bbb      	ldrb	r3, [r7, #14]
 80083ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083f2:	4613      	mov	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	4413      	add	r3, r2
 8008402:	3304      	adds	r3, #4
 8008404:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008406:	7bbb      	ldrb	r3, [r7, #14]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d002      	beq.n	8008412 <USBD_StdEPReq+0x264>
 800840c:	7bbb      	ldrb	r3, [r7, #14]
 800840e:	2b80      	cmp	r3, #128	; 0x80
 8008410:	d103      	bne.n	800841a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	2200      	movs	r2, #0
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	e00e      	b.n	8008438 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800841a:	7bbb      	ldrb	r3, [r7, #14]
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f003 fac0 	bl	800b9a4 <USBD_LL_IsStallEP>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2201      	movs	r2, #1
 800842e:	601a      	str	r2, [r3, #0]
 8008430:	e002      	b.n	8008438 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	2200      	movs	r2, #0
 8008436:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	2202      	movs	r2, #2
 800843c:	4619      	mov	r1, r3
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fbb7 	bl	8008bb2 <USBD_CtlSendData>
              break;
 8008444:	e004      	b.n	8008450 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fb41 	bl	8008ad0 <USBD_CtlError>
              break;
 800844e:	bf00      	nop
          }
          break;
 8008450:	e004      	b.n	800845c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008452:	6839      	ldr	r1, [r7, #0]
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 fb3b 	bl	8008ad0 <USBD_CtlError>
          break;
 800845a:	bf00      	nop
      }
      break;
 800845c:	e004      	b.n	8008468 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fb35 	bl	8008ad0 <USBD_CtlError>
      break;
 8008466:	bf00      	nop
  }

  return ret;
 8008468:	7bfb      	ldrb	r3, [r7, #15]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
	...

08008474 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800847e:	2300      	movs	r3, #0
 8008480:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008482:	2300      	movs	r3, #0
 8008484:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008486:	2300      	movs	r3, #0
 8008488:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	885b      	ldrh	r3, [r3, #2]
 800848e:	0a1b      	lsrs	r3, r3, #8
 8008490:	b29b      	uxth	r3, r3
 8008492:	3b01      	subs	r3, #1
 8008494:	2b06      	cmp	r3, #6
 8008496:	f200 8128 	bhi.w	80086ea <USBD_GetDescriptor+0x276>
 800849a:	a201      	add	r2, pc, #4	; (adr r2, 80084a0 <USBD_GetDescriptor+0x2c>)
 800849c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a0:	080084bd 	.word	0x080084bd
 80084a4:	080084d5 	.word	0x080084d5
 80084a8:	08008515 	.word	0x08008515
 80084ac:	080086eb 	.word	0x080086eb
 80084b0:	080086eb 	.word	0x080086eb
 80084b4:	0800868b 	.word	0x0800868b
 80084b8:	080086b7 	.word	0x080086b7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	7c12      	ldrb	r2, [r2, #16]
 80084c8:	f107 0108 	add.w	r1, r7, #8
 80084cc:	4610      	mov	r0, r2
 80084ce:	4798      	blx	r3
 80084d0:	60f8      	str	r0, [r7, #12]
      break;
 80084d2:	e112      	b.n	80086fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	7c1b      	ldrb	r3, [r3, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10d      	bne.n	80084f8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e4:	f107 0208 	add.w	r2, r7, #8
 80084e8:	4610      	mov	r0, r2
 80084ea:	4798      	blx	r3
 80084ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	3301      	adds	r3, #1
 80084f2:	2202      	movs	r2, #2
 80084f4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80084f6:	e100      	b.n	80086fa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008500:	f107 0208 	add.w	r2, r7, #8
 8008504:	4610      	mov	r0, r2
 8008506:	4798      	blx	r3
 8008508:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3301      	adds	r3, #1
 800850e:	2202      	movs	r2, #2
 8008510:	701a      	strb	r2, [r3, #0]
      break;
 8008512:	e0f2      	b.n	80086fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	885b      	ldrh	r3, [r3, #2]
 8008518:	b2db      	uxtb	r3, r3
 800851a:	2b05      	cmp	r3, #5
 800851c:	f200 80ac 	bhi.w	8008678 <USBD_GetDescriptor+0x204>
 8008520:	a201      	add	r2, pc, #4	; (adr r2, 8008528 <USBD_GetDescriptor+0xb4>)
 8008522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008526:	bf00      	nop
 8008528:	08008541 	.word	0x08008541
 800852c:	08008575 	.word	0x08008575
 8008530:	080085a9 	.word	0x080085a9
 8008534:	080085dd 	.word	0x080085dd
 8008538:	08008611 	.word	0x08008611
 800853c:	08008645 	.word	0x08008645
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00b      	beq.n	8008564 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	7c12      	ldrb	r2, [r2, #16]
 8008558:	f107 0108 	add.w	r1, r7, #8
 800855c:	4610      	mov	r0, r2
 800855e:	4798      	blx	r3
 8008560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008562:	e091      	b.n	8008688 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fab2 	bl	8008ad0 <USBD_CtlError>
            err++;
 800856c:	7afb      	ldrb	r3, [r7, #11]
 800856e:	3301      	adds	r3, #1
 8008570:	72fb      	strb	r3, [r7, #11]
          break;
 8008572:	e089      	b.n	8008688 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00b      	beq.n	8008598 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	7c12      	ldrb	r2, [r2, #16]
 800858c:	f107 0108 	add.w	r1, r7, #8
 8008590:	4610      	mov	r0, r2
 8008592:	4798      	blx	r3
 8008594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008596:	e077      	b.n	8008688 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fa98 	bl	8008ad0 <USBD_CtlError>
            err++;
 80085a0:	7afb      	ldrb	r3, [r7, #11]
 80085a2:	3301      	adds	r3, #1
 80085a4:	72fb      	strb	r3, [r7, #11]
          break;
 80085a6:	e06f      	b.n	8008688 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00b      	beq.n	80085cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	7c12      	ldrb	r2, [r2, #16]
 80085c0:	f107 0108 	add.w	r1, r7, #8
 80085c4:	4610      	mov	r0, r2
 80085c6:	4798      	blx	r3
 80085c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ca:	e05d      	b.n	8008688 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fa7e 	bl	8008ad0 <USBD_CtlError>
            err++;
 80085d4:	7afb      	ldrb	r3, [r7, #11]
 80085d6:	3301      	adds	r3, #1
 80085d8:	72fb      	strb	r3, [r7, #11]
          break;
 80085da:	e055      	b.n	8008688 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00b      	beq.n	8008600 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	7c12      	ldrb	r2, [r2, #16]
 80085f4:	f107 0108 	add.w	r1, r7, #8
 80085f8:	4610      	mov	r0, r2
 80085fa:	4798      	blx	r3
 80085fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085fe:	e043      	b.n	8008688 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fa64 	bl	8008ad0 <USBD_CtlError>
            err++;
 8008608:	7afb      	ldrb	r3, [r7, #11]
 800860a:	3301      	adds	r3, #1
 800860c:	72fb      	strb	r3, [r7, #11]
          break;
 800860e:	e03b      	b.n	8008688 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008616:	695b      	ldr	r3, [r3, #20]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00b      	beq.n	8008634 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008622:	695b      	ldr	r3, [r3, #20]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	7c12      	ldrb	r2, [r2, #16]
 8008628:	f107 0108 	add.w	r1, r7, #8
 800862c:	4610      	mov	r0, r2
 800862e:	4798      	blx	r3
 8008630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008632:	e029      	b.n	8008688 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fa4a 	bl	8008ad0 <USBD_CtlError>
            err++;
 800863c:	7afb      	ldrb	r3, [r7, #11]
 800863e:	3301      	adds	r3, #1
 8008640:	72fb      	strb	r3, [r7, #11]
          break;
 8008642:	e021      	b.n	8008688 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00b      	beq.n	8008668 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	7c12      	ldrb	r2, [r2, #16]
 800865c:	f107 0108 	add.w	r1, r7, #8
 8008660:	4610      	mov	r0, r2
 8008662:	4798      	blx	r3
 8008664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008666:	e00f      	b.n	8008688 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008668:	6839      	ldr	r1, [r7, #0]
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fa30 	bl	8008ad0 <USBD_CtlError>
            err++;
 8008670:	7afb      	ldrb	r3, [r7, #11]
 8008672:	3301      	adds	r3, #1
 8008674:	72fb      	strb	r3, [r7, #11]
          break;
 8008676:	e007      	b.n	8008688 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa28 	bl	8008ad0 <USBD_CtlError>
          err++;
 8008680:	7afb      	ldrb	r3, [r7, #11]
 8008682:	3301      	adds	r3, #1
 8008684:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008686:	bf00      	nop
      }
      break;
 8008688:	e037      	b.n	80086fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	7c1b      	ldrb	r3, [r3, #16]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d109      	bne.n	80086a6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800869a:	f107 0208 	add.w	r2, r7, #8
 800869e:	4610      	mov	r0, r2
 80086a0:	4798      	blx	r3
 80086a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086a4:	e029      	b.n	80086fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086a6:	6839      	ldr	r1, [r7, #0]
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fa11 	bl	8008ad0 <USBD_CtlError>
        err++;
 80086ae:	7afb      	ldrb	r3, [r7, #11]
 80086b0:	3301      	adds	r3, #1
 80086b2:	72fb      	strb	r3, [r7, #11]
      break;
 80086b4:	e021      	b.n	80086fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	7c1b      	ldrb	r3, [r3, #16]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10d      	bne.n	80086da <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c6:	f107 0208 	add.w	r2, r7, #8
 80086ca:	4610      	mov	r0, r2
 80086cc:	4798      	blx	r3
 80086ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	3301      	adds	r3, #1
 80086d4:	2207      	movs	r2, #7
 80086d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086d8:	e00f      	b.n	80086fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f9f7 	bl	8008ad0 <USBD_CtlError>
        err++;
 80086e2:	7afb      	ldrb	r3, [r7, #11]
 80086e4:	3301      	adds	r3, #1
 80086e6:	72fb      	strb	r3, [r7, #11]
      break;
 80086e8:	e007      	b.n	80086fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f9ef 	bl	8008ad0 <USBD_CtlError>
      err++;
 80086f2:	7afb      	ldrb	r3, [r7, #11]
 80086f4:	3301      	adds	r3, #1
 80086f6:	72fb      	strb	r3, [r7, #11]
      break;
 80086f8:	bf00      	nop
  }

  if (err != 0U)
 80086fa:	7afb      	ldrb	r3, [r7, #11]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d11e      	bne.n	800873e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	88db      	ldrh	r3, [r3, #6]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d016      	beq.n	8008736 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008708:	893b      	ldrh	r3, [r7, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00e      	beq.n	800872c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	88da      	ldrh	r2, [r3, #6]
 8008712:	893b      	ldrh	r3, [r7, #8]
 8008714:	4293      	cmp	r3, r2
 8008716:	bf28      	it	cs
 8008718:	4613      	movcs	r3, r2
 800871a:	b29b      	uxth	r3, r3
 800871c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800871e:	893b      	ldrh	r3, [r7, #8]
 8008720:	461a      	mov	r2, r3
 8008722:	68f9      	ldr	r1, [r7, #12]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fa44 	bl	8008bb2 <USBD_CtlSendData>
 800872a:	e009      	b.n	8008740 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f9ce 	bl	8008ad0 <USBD_CtlError>
 8008734:	e004      	b.n	8008740 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fa95 	bl	8008c66 <USBD_CtlSendStatus>
 800873c:	e000      	b.n	8008740 <USBD_GetDescriptor+0x2cc>
    return;
 800873e:	bf00      	nop
  }
}
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop

08008748 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	889b      	ldrh	r3, [r3, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d131      	bne.n	80087be <USBD_SetAddress+0x76>
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	88db      	ldrh	r3, [r3, #6]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d12d      	bne.n	80087be <USBD_SetAddress+0x76>
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	885b      	ldrh	r3, [r3, #2]
 8008766:	2b7f      	cmp	r3, #127	; 0x7f
 8008768:	d829      	bhi.n	80087be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	885b      	ldrh	r3, [r3, #2]
 800876e:	b2db      	uxtb	r3, r3
 8008770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008774:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800877c:	b2db      	uxtb	r3, r3
 800877e:	2b03      	cmp	r3, #3
 8008780:	d104      	bne.n	800878c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f9a3 	bl	8008ad0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800878a:	e01d      	b.n	80087c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	7bfa      	ldrb	r2, [r7, #15]
 8008790:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008794:	7bfb      	ldrb	r3, [r7, #15]
 8008796:	4619      	mov	r1, r3
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f003 f92f 	bl	800b9fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fa61 	bl	8008c66 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d004      	beq.n	80087b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2202      	movs	r2, #2
 80087ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087b2:	e009      	b.n	80087c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087bc:	e004      	b.n	80087c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f985 	bl	8008ad0 <USBD_CtlError>
  }
}
 80087c6:	bf00      	nop
 80087c8:	bf00      	nop
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087da:	2300      	movs	r3, #0
 80087dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	885b      	ldrh	r3, [r3, #2]
 80087e2:	b2da      	uxtb	r2, r3
 80087e4:	4b4c      	ldr	r3, [pc, #304]	; (8008918 <USBD_SetConfig+0x148>)
 80087e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80087e8:	4b4b      	ldr	r3, [pc, #300]	; (8008918 <USBD_SetConfig+0x148>)
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d905      	bls.n	80087fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80087f0:	6839      	ldr	r1, [r7, #0]
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f96c 	bl	8008ad0 <USBD_CtlError>
    return USBD_FAIL;
 80087f8:	2303      	movs	r3, #3
 80087fa:	e088      	b.n	800890e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008802:	b2db      	uxtb	r3, r3
 8008804:	2b02      	cmp	r3, #2
 8008806:	d002      	beq.n	800880e <USBD_SetConfig+0x3e>
 8008808:	2b03      	cmp	r3, #3
 800880a:	d025      	beq.n	8008858 <USBD_SetConfig+0x88>
 800880c:	e071      	b.n	80088f2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800880e:	4b42      	ldr	r3, [pc, #264]	; (8008918 <USBD_SetConfig+0x148>)
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d01c      	beq.n	8008850 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008816:	4b40      	ldr	r3, [pc, #256]	; (8008918 <USBD_SetConfig+0x148>)
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008820:	4b3d      	ldr	r3, [pc, #244]	; (8008918 <USBD_SetConfig+0x148>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7ff f948 	bl	8007abc <USBD_SetClassConfig>
 800882c:	4603      	mov	r3, r0
 800882e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008830:	7bfb      	ldrb	r3, [r7, #15]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d004      	beq.n	8008840 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 f949 	bl	8008ad0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800883e:	e065      	b.n	800890c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fa10 	bl	8008c66 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2203      	movs	r2, #3
 800884a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800884e:	e05d      	b.n	800890c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fa08 	bl	8008c66 <USBD_CtlSendStatus>
      break;
 8008856:	e059      	b.n	800890c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008858:	4b2f      	ldr	r3, [pc, #188]	; (8008918 <USBD_SetConfig+0x148>)
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d112      	bne.n	8008886 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2202      	movs	r2, #2
 8008864:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008868:	4b2b      	ldr	r3, [pc, #172]	; (8008918 <USBD_SetConfig+0x148>)
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	461a      	mov	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008872:	4b29      	ldr	r3, [pc, #164]	; (8008918 <USBD_SetConfig+0x148>)
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7ff f93b 	bl	8007af4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f9f1 	bl	8008c66 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008884:	e042      	b.n	800890c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008886:	4b24      	ldr	r3, [pc, #144]	; (8008918 <USBD_SetConfig+0x148>)
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	429a      	cmp	r2, r3
 8008892:	d02a      	beq.n	80088ea <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	b2db      	uxtb	r3, r3
 800889a:	4619      	mov	r1, r3
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f7ff f929 	bl	8007af4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80088a2:	4b1d      	ldr	r3, [pc, #116]	; (8008918 <USBD_SetConfig+0x148>)
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088ac:	4b1a      	ldr	r3, [pc, #104]	; (8008918 <USBD_SetConfig+0x148>)
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	4619      	mov	r1, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7ff f902 	bl	8007abc <USBD_SetClassConfig>
 80088b8:	4603      	mov	r3, r0
 80088ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00f      	beq.n	80088e2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80088c2:	6839      	ldr	r1, [r7, #0]
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f903 	bl	8008ad0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	4619      	mov	r1, r3
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7ff f90e 	bl	8007af4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2202      	movs	r2, #2
 80088dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088e0:	e014      	b.n	800890c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f9bf 	bl	8008c66 <USBD_CtlSendStatus>
      break;
 80088e8:	e010      	b.n	800890c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 f9bb 	bl	8008c66 <USBD_CtlSendStatus>
      break;
 80088f0:	e00c      	b.n	800890c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80088f2:	6839      	ldr	r1, [r7, #0]
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 f8eb 	bl	8008ad0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088fa:	4b07      	ldr	r3, [pc, #28]	; (8008918 <USBD_SetConfig+0x148>)
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	4619      	mov	r1, r3
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f7ff f8f7 	bl	8007af4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008906:	2303      	movs	r3, #3
 8008908:	73fb      	strb	r3, [r7, #15]
      break;
 800890a:	bf00      	nop
  }

  return ret;
 800890c:	7bfb      	ldrb	r3, [r7, #15]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	200001a4 	.word	0x200001a4

0800891c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	88db      	ldrh	r3, [r3, #6]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d004      	beq.n	8008938 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f8cd 	bl	8008ad0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008936:	e023      	b.n	8008980 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800893e:	b2db      	uxtb	r3, r3
 8008940:	2b02      	cmp	r3, #2
 8008942:	dc02      	bgt.n	800894a <USBD_GetConfig+0x2e>
 8008944:	2b00      	cmp	r3, #0
 8008946:	dc03      	bgt.n	8008950 <USBD_GetConfig+0x34>
 8008948:	e015      	b.n	8008976 <USBD_GetConfig+0x5a>
 800894a:	2b03      	cmp	r3, #3
 800894c:	d00b      	beq.n	8008966 <USBD_GetConfig+0x4a>
 800894e:	e012      	b.n	8008976 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	3308      	adds	r3, #8
 800895a:	2201      	movs	r2, #1
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f927 	bl	8008bb2 <USBD_CtlSendData>
        break;
 8008964:	e00c      	b.n	8008980 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	3304      	adds	r3, #4
 800896a:	2201      	movs	r2, #1
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f91f 	bl	8008bb2 <USBD_CtlSendData>
        break;
 8008974:	e004      	b.n	8008980 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008976:	6839      	ldr	r1, [r7, #0]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f8a9 	bl	8008ad0 <USBD_CtlError>
        break;
 800897e:	bf00      	nop
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008998:	b2db      	uxtb	r3, r3
 800899a:	3b01      	subs	r3, #1
 800899c:	2b02      	cmp	r3, #2
 800899e:	d81e      	bhi.n	80089de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	88db      	ldrh	r3, [r3, #6]
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d004      	beq.n	80089b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f890 	bl	8008ad0 <USBD_CtlError>
        break;
 80089b0:	e01a      	b.n	80089e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d005      	beq.n	80089ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	f043 0202 	orr.w	r2, r3, #2
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	330c      	adds	r3, #12
 80089d2:	2202      	movs	r2, #2
 80089d4:	4619      	mov	r1, r3
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f8eb 	bl	8008bb2 <USBD_CtlSendData>
      break;
 80089dc:	e004      	b.n	80089e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f875 	bl	8008ad0 <USBD_CtlError>
      break;
 80089e6:	bf00      	nop
  }
}
 80089e8:	bf00      	nop
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	885b      	ldrh	r3, [r3, #2]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d106      	bne.n	8008a10 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f92b 	bl	8008c66 <USBD_CtlSendStatus>
  }
}
 8008a10:	bf00      	nop
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d80b      	bhi.n	8008a48 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	885b      	ldrh	r3, [r3, #2]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d10c      	bne.n	8008a52 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 f910 	bl	8008c66 <USBD_CtlSendStatus>
      }
      break;
 8008a46:	e004      	b.n	8008a52 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008a48:	6839      	ldr	r1, [r7, #0]
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f840 	bl	8008ad0 <USBD_CtlError>
      break;
 8008a50:	e000      	b.n	8008a54 <USBD_ClrFeature+0x3c>
      break;
 8008a52:	bf00      	nop
  }
}
 8008a54:	bf00      	nop
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	781a      	ldrb	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	3301      	adds	r3, #1
 8008a76:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	781a      	ldrb	r2, [r3, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	3301      	adds	r3, #1
 8008a84:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f7ff fabb 	bl	8008002 <SWAPBYTE>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	461a      	mov	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	3301      	adds	r3, #1
 8008a98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f7ff faae 	bl	8008002 <SWAPBYTE>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f7ff faa1 	bl	8008002 <SWAPBYTE>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	80da      	strh	r2, [r3, #6]
}
 8008ac8:	bf00      	nop
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ada:	2180      	movs	r1, #128	; 0x80
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f002 ff23 	bl	800b928 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f002 ff1f 	bl	800b928 <USBD_LL_StallEP>
}
 8008aea:	bf00      	nop
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b086      	sub	sp, #24
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	60f8      	str	r0, [r7, #12]
 8008afa:	60b9      	str	r1, [r7, #8]
 8008afc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d036      	beq.n	8008b76 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008b0c:	6938      	ldr	r0, [r7, #16]
 8008b0e:	f000 f836 	bl	8008b7e <USBD_GetLen>
 8008b12:	4603      	mov	r3, r0
 8008b14:	3301      	adds	r3, #1
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	005b      	lsls	r3, r3, #1
 8008b1a:	b29a      	uxth	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008b20:	7dfb      	ldrb	r3, [r7, #23]
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	4413      	add	r3, r2
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	7812      	ldrb	r2, [r2, #0]
 8008b2a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b2c:	7dfb      	ldrb	r3, [r7, #23]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b32:	7dfb      	ldrb	r3, [r7, #23]
 8008b34:	68ba      	ldr	r2, [r7, #8]
 8008b36:	4413      	add	r3, r2
 8008b38:	2203      	movs	r2, #3
 8008b3a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b3c:	7dfb      	ldrb	r3, [r7, #23]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b42:	e013      	b.n	8008b6c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008b44:	7dfb      	ldrb	r3, [r7, #23]
 8008b46:	68ba      	ldr	r2, [r7, #8]
 8008b48:	4413      	add	r3, r2
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	7812      	ldrb	r2, [r2, #0]
 8008b4e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	3301      	adds	r3, #1
 8008b54:	613b      	str	r3, [r7, #16]
    idx++;
 8008b56:	7dfb      	ldrb	r3, [r7, #23]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008b5c:	7dfb      	ldrb	r3, [r7, #23]
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	4413      	add	r3, r2
 8008b62:	2200      	movs	r2, #0
 8008b64:	701a      	strb	r2, [r3, #0]
    idx++;
 8008b66:	7dfb      	ldrb	r3, [r7, #23]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1e7      	bne.n	8008b44 <USBD_GetString+0x52>
 8008b74:	e000      	b.n	8008b78 <USBD_GetString+0x86>
    return;
 8008b76:	bf00      	nop
  }
}
 8008b78:	3718      	adds	r7, #24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b085      	sub	sp, #20
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008b86:	2300      	movs	r3, #0
 8008b88:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008b8e:	e005      	b.n	8008b9c <USBD_GetLen+0x1e>
  {
    len++;
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	3301      	adds	r3, #1
 8008b94:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1f5      	bne.n	8008b90 <USBD_GetLen+0x12>
  }

  return len;
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr

08008bb2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	60f8      	str	r0, [r7, #12]
 8008bba:	60b9      	str	r1, [r7, #8]
 8008bbc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2202      	movs	r2, #2
 8008bc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f002 ff2e 	bl	800ba3a <USBD_LL_Transmit>

  return USBD_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f002 ff1d 	bl	800ba3a <USBD_LL_Transmit>

  return USBD_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b084      	sub	sp, #16
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	60f8      	str	r0, [r7, #12]
 8008c12:	60b9      	str	r1, [r7, #8]
 8008c14:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2203      	movs	r2, #3
 8008c1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	2100      	movs	r1, #0
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f002 ff21 	bl	800ba7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	2100      	movs	r1, #0
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f002 ff10 	bl	800ba7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b082      	sub	sp, #8
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2204      	movs	r2, #4
 8008c72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c76:	2300      	movs	r3, #0
 8008c78:	2200      	movs	r2, #0
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f002 fedc 	bl	800ba3a <USBD_LL_Transmit>

  return USBD_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2205      	movs	r2, #5
 8008c98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f002 feea 	bl	800ba7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
	...

08008cb4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008cbe:	79fb      	ldrb	r3, [r7, #7]
 8008cc0:	4a08      	ldr	r2, [pc, #32]	; (8008ce4 <disk_status+0x30>)
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	79fa      	ldrb	r2, [r7, #7]
 8008ccc:	4905      	ldr	r1, [pc, #20]	; (8008ce4 <disk_status+0x30>)
 8008cce:	440a      	add	r2, r1
 8008cd0:	7a12      	ldrb	r2, [r2, #8]
 8008cd2:	4610      	mov	r0, r2
 8008cd4:	4798      	blx	r3
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	200001d0 	.word	0x200001d0

08008ce8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	4603      	mov	r3, r0
 8008cf0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008cf6:	79fb      	ldrb	r3, [r7, #7]
 8008cf8:	4a0d      	ldr	r2, [pc, #52]	; (8008d30 <disk_initialize+0x48>)
 8008cfa:	5cd3      	ldrb	r3, [r2, r3]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d111      	bne.n	8008d24 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008d00:	79fb      	ldrb	r3, [r7, #7]
 8008d02:	4a0b      	ldr	r2, [pc, #44]	; (8008d30 <disk_initialize+0x48>)
 8008d04:	2101      	movs	r1, #1
 8008d06:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008d08:	79fb      	ldrb	r3, [r7, #7]
 8008d0a:	4a09      	ldr	r2, [pc, #36]	; (8008d30 <disk_initialize+0x48>)
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	79fa      	ldrb	r2, [r7, #7]
 8008d16:	4906      	ldr	r1, [pc, #24]	; (8008d30 <disk_initialize+0x48>)
 8008d18:	440a      	add	r2, r1
 8008d1a:	7a12      	ldrb	r2, [r2, #8]
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4798      	blx	r3
 8008d20:	4603      	mov	r3, r0
 8008d22:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	200001d0 	.word	0x200001d0

08008d34 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008d34:	b590      	push	{r4, r7, lr}
 8008d36:	b087      	sub	sp, #28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60b9      	str	r1, [r7, #8]
 8008d3c:	607a      	str	r2, [r7, #4]
 8008d3e:	603b      	str	r3, [r7, #0]
 8008d40:	4603      	mov	r3, r0
 8008d42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
 8008d46:	4a0a      	ldr	r2, [pc, #40]	; (8008d70 <disk_read+0x3c>)
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	4413      	add	r3, r2
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	689c      	ldr	r4, [r3, #8]
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
 8008d52:	4a07      	ldr	r2, [pc, #28]	; (8008d70 <disk_read+0x3c>)
 8008d54:	4413      	add	r3, r2
 8008d56:	7a18      	ldrb	r0, [r3, #8]
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	68b9      	ldr	r1, [r7, #8]
 8008d5e:	47a0      	blx	r4
 8008d60:	4603      	mov	r3, r0
 8008d62:	75fb      	strb	r3, [r7, #23]
  return res;
 8008d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd90      	pop	{r4, r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	200001d0 	.word	0x200001d0

08008d74 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008d74:	b590      	push	{r4, r7, lr}
 8008d76:	b087      	sub	sp, #28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60b9      	str	r1, [r7, #8]
 8008d7c:	607a      	str	r2, [r7, #4]
 8008d7e:	603b      	str	r3, [r7, #0]
 8008d80:	4603      	mov	r3, r0
 8008d82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008d84:	7bfb      	ldrb	r3, [r7, #15]
 8008d86:	4a0a      	ldr	r2, [pc, #40]	; (8008db0 <disk_write+0x3c>)
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4413      	add	r3, r2
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	68dc      	ldr	r4, [r3, #12]
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
 8008d92:	4a07      	ldr	r2, [pc, #28]	; (8008db0 <disk_write+0x3c>)
 8008d94:	4413      	add	r3, r2
 8008d96:	7a18      	ldrb	r0, [r3, #8]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	68b9      	ldr	r1, [r7, #8]
 8008d9e:	47a0      	blx	r4
 8008da0:	4603      	mov	r3, r0
 8008da2:	75fb      	strb	r3, [r7, #23]
  return res;
 8008da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	371c      	adds	r7, #28
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd90      	pop	{r4, r7, pc}
 8008dae:	bf00      	nop
 8008db0:	200001d0 	.word	0x200001d0

08008db4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	4603      	mov	r3, r0
 8008dbc:	603a      	str	r2, [r7, #0]
 8008dbe:	71fb      	strb	r3, [r7, #7]
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008dc4:	79fb      	ldrb	r3, [r7, #7]
 8008dc6:	4a09      	ldr	r2, [pc, #36]	; (8008dec <disk_ioctl+0x38>)
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4413      	add	r3, r2
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	79fa      	ldrb	r2, [r7, #7]
 8008dd2:	4906      	ldr	r1, [pc, #24]	; (8008dec <disk_ioctl+0x38>)
 8008dd4:	440a      	add	r2, r1
 8008dd6:	7a10      	ldrb	r0, [r2, #8]
 8008dd8:	79b9      	ldrb	r1, [r7, #6]
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	4798      	blx	r3
 8008dde:	4603      	mov	r3, r0
 8008de0:	73fb      	strb	r3, [r7, #15]
  return res;
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	200001d0 	.word	0x200001d0

08008df0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008e00:	89fb      	ldrh	r3, [r7, #14]
 8008e02:	021b      	lsls	r3, r3, #8
 8008e04:	b21a      	sxth	r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	b21b      	sxth	r3, r3
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	b21b      	sxth	r3, r3
 8008e10:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008e12:	89fb      	ldrh	r3, [r7, #14]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3714      	adds	r7, #20
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	3303      	adds	r3, #3
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	021b      	lsls	r3, r3, #8
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	3202      	adds	r2, #2
 8008e38:	7812      	ldrb	r2, [r2, #0]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	021b      	lsls	r3, r3, #8
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	3201      	adds	r2, #1
 8008e46:	7812      	ldrb	r2, [r2, #0]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	021b      	lsls	r3, r3, #8
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	7812      	ldrb	r2, [r2, #0]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	60fb      	str	r3, [r7, #12]
	return rv;
 8008e58:	68fb      	ldr	r3, [r7, #12]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3714      	adds	r7, #20
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr

08008e66 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008e66:	b480      	push	{r7}
 8008e68:	b083      	sub	sp, #12
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	460b      	mov	r3, r1
 8008e70:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	1c5a      	adds	r2, r3, #1
 8008e76:	607a      	str	r2, [r7, #4]
 8008e78:	887a      	ldrh	r2, [r7, #2]
 8008e7a:	b2d2      	uxtb	r2, r2
 8008e7c:	701a      	strb	r2, [r3, #0]
 8008e7e:	887b      	ldrh	r3, [r7, #2]
 8008e80:	0a1b      	lsrs	r3, r3, #8
 8008e82:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	1c5a      	adds	r2, r3, #1
 8008e88:	607a      	str	r2, [r7, #4]
 8008e8a:	887a      	ldrh	r2, [r7, #2]
 8008e8c:	b2d2      	uxtb	r2, r2
 8008e8e:	701a      	strb	r2, [r3, #0]
}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	1c5a      	adds	r2, r3, #1
 8008eaa:	607a      	str	r2, [r7, #4]
 8008eac:	683a      	ldr	r2, [r7, #0]
 8008eae:	b2d2      	uxtb	r2, r2
 8008eb0:	701a      	strb	r2, [r3, #0]
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	0a1b      	lsrs	r3, r3, #8
 8008eb6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	1c5a      	adds	r2, r3, #1
 8008ebc:	607a      	str	r2, [r7, #4]
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	b2d2      	uxtb	r2, r2
 8008ec2:	701a      	strb	r2, [r3, #0]
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	0a1b      	lsrs	r3, r3, #8
 8008ec8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	1c5a      	adds	r2, r3, #1
 8008ece:	607a      	str	r2, [r7, #4]
 8008ed0:	683a      	ldr	r2, [r7, #0]
 8008ed2:	b2d2      	uxtb	r2, r2
 8008ed4:	701a      	strb	r2, [r3, #0]
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	0a1b      	lsrs	r3, r3, #8
 8008eda:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	1c5a      	adds	r2, r3, #1
 8008ee0:	607a      	str	r2, [r7, #4]
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	b2d2      	uxtb	r2, r2
 8008ee6:	701a      	strb	r2, [r3, #0]
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008ef4:	b480      	push	{r7}
 8008ef6:	b087      	sub	sp, #28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00d      	beq.n	8008f2a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008f0e:	693a      	ldr	r2, [r7, #16]
 8008f10:	1c53      	adds	r3, r2, #1
 8008f12:	613b      	str	r3, [r7, #16]
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	1c59      	adds	r1, r3, #1
 8008f18:	6179      	str	r1, [r7, #20]
 8008f1a:	7812      	ldrb	r2, [r2, #0]
 8008f1c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	3b01      	subs	r3, #1
 8008f22:	607b      	str	r3, [r7, #4]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1f1      	bne.n	8008f0e <mem_cpy+0x1a>
	}
}
 8008f2a:	bf00      	nop
 8008f2c:	371c      	adds	r7, #28
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr

08008f36 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008f36:	b480      	push	{r7}
 8008f38:	b087      	sub	sp, #28
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	60f8      	str	r0, [r7, #12]
 8008f3e:	60b9      	str	r1, [r7, #8]
 8008f40:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	1c5a      	adds	r2, r3, #1
 8008f4a:	617a      	str	r2, [r7, #20]
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	b2d2      	uxtb	r2, r2
 8008f50:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	3b01      	subs	r3, #1
 8008f56:	607b      	str	r3, [r7, #4]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1f3      	bne.n	8008f46 <mem_set+0x10>
}
 8008f5e:	bf00      	nop
 8008f60:	bf00      	nop
 8008f62:	371c      	adds	r7, #28
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008f6c:	b480      	push	{r7}
 8008f6e:	b089      	sub	sp, #36	; 0x24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	61fb      	str	r3, [r7, #28]
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008f80:	2300      	movs	r3, #0
 8008f82:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	1c5a      	adds	r2, r3, #1
 8008f88:	61fa      	str	r2, [r7, #28]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	1c5a      	adds	r2, r3, #1
 8008f92:	61ba      	str	r2, [r7, #24]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	1acb      	subs	r3, r1, r3
 8008f98:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	607b      	str	r3, [r7, #4]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d002      	beq.n	8008fac <mem_cmp+0x40>
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d0eb      	beq.n	8008f84 <mem_cmp+0x18>

	return r;
 8008fac:	697b      	ldr	r3, [r7, #20]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3724      	adds	r7, #36	; 0x24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr

08008fba <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008fba:	b480      	push	{r7}
 8008fbc:	b083      	sub	sp, #12
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008fc4:	e002      	b.n	8008fcc <chk_chr+0x12>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	607b      	str	r3, [r7, #4]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d005      	beq.n	8008fe0 <chk_chr+0x26>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d1f2      	bne.n	8008fc6 <chk_chr+0xc>
	return *str;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	60bb      	str	r3, [r7, #8]
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	60fb      	str	r3, [r7, #12]
 8009002:	e029      	b.n	8009058 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009004:	4a27      	ldr	r2, [pc, #156]	; (80090a4 <chk_lock+0xb4>)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	011b      	lsls	r3, r3, #4
 800900a:	4413      	add	r3, r2
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d01d      	beq.n	800904e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009012:	4a24      	ldr	r2, [pc, #144]	; (80090a4 <chk_lock+0xb4>)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	011b      	lsls	r3, r3, #4
 8009018:	4413      	add	r3, r2
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	429a      	cmp	r2, r3
 8009022:	d116      	bne.n	8009052 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009024:	4a1f      	ldr	r2, [pc, #124]	; (80090a4 <chk_lock+0xb4>)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	011b      	lsls	r3, r3, #4
 800902a:	4413      	add	r3, r2
 800902c:	3304      	adds	r3, #4
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009034:	429a      	cmp	r2, r3
 8009036:	d10c      	bne.n	8009052 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009038:	4a1a      	ldr	r2, [pc, #104]	; (80090a4 <chk_lock+0xb4>)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	011b      	lsls	r3, r3, #4
 800903e:	4413      	add	r3, r2
 8009040:	3308      	adds	r3, #8
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009048:	429a      	cmp	r2, r3
 800904a:	d102      	bne.n	8009052 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800904c:	e007      	b.n	800905e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800904e:	2301      	movs	r3, #1
 8009050:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	3301      	adds	r3, #1
 8009056:	60fb      	str	r3, [r7, #12]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d9d2      	bls.n	8009004 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2b02      	cmp	r3, #2
 8009062:	d109      	bne.n	8009078 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d102      	bne.n	8009070 <chk_lock+0x80>
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	2b02      	cmp	r3, #2
 800906e:	d101      	bne.n	8009074 <chk_lock+0x84>
 8009070:	2300      	movs	r3, #0
 8009072:	e010      	b.n	8009096 <chk_lock+0xa6>
 8009074:	2312      	movs	r3, #18
 8009076:	e00e      	b.n	8009096 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d108      	bne.n	8009090 <chk_lock+0xa0>
 800907e:	4a09      	ldr	r2, [pc, #36]	; (80090a4 <chk_lock+0xb4>)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	011b      	lsls	r3, r3, #4
 8009084:	4413      	add	r3, r2
 8009086:	330c      	adds	r3, #12
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800908e:	d101      	bne.n	8009094 <chk_lock+0xa4>
 8009090:	2310      	movs	r3, #16
 8009092:	e000      	b.n	8009096 <chk_lock+0xa6>
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	200001b0 	.word	0x200001b0

080090a8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80090ae:	2300      	movs	r3, #0
 80090b0:	607b      	str	r3, [r7, #4]
 80090b2:	e002      	b.n	80090ba <enq_lock+0x12>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	3301      	adds	r3, #1
 80090b8:	607b      	str	r3, [r7, #4]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d806      	bhi.n	80090ce <enq_lock+0x26>
 80090c0:	4a09      	ldr	r2, [pc, #36]	; (80090e8 <enq_lock+0x40>)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	011b      	lsls	r3, r3, #4
 80090c6:	4413      	add	r3, r2
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1f2      	bne.n	80090b4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	bf14      	ite	ne
 80090d4:	2301      	movne	r3, #1
 80090d6:	2300      	moveq	r3, #0
 80090d8:	b2db      	uxtb	r3, r3
}
 80090da:	4618      	mov	r0, r3
 80090dc:	370c      	adds	r7, #12
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	200001b0 	.word	0x200001b0

080090ec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80090f6:	2300      	movs	r3, #0
 80090f8:	60fb      	str	r3, [r7, #12]
 80090fa:	e01f      	b.n	800913c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80090fc:	4a41      	ldr	r2, [pc, #260]	; (8009204 <inc_lock+0x118>)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	011b      	lsls	r3, r3, #4
 8009102:	4413      	add	r3, r2
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	429a      	cmp	r2, r3
 800910c:	d113      	bne.n	8009136 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800910e:	4a3d      	ldr	r2, [pc, #244]	; (8009204 <inc_lock+0x118>)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	011b      	lsls	r3, r3, #4
 8009114:	4413      	add	r3, r2
 8009116:	3304      	adds	r3, #4
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800911e:	429a      	cmp	r2, r3
 8009120:	d109      	bne.n	8009136 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009122:	4a38      	ldr	r2, [pc, #224]	; (8009204 <inc_lock+0x118>)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	011b      	lsls	r3, r3, #4
 8009128:	4413      	add	r3, r2
 800912a:	3308      	adds	r3, #8
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009132:	429a      	cmp	r2, r3
 8009134:	d006      	beq.n	8009144 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	3301      	adds	r3, #1
 800913a:	60fb      	str	r3, [r7, #12]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2b01      	cmp	r3, #1
 8009140:	d9dc      	bls.n	80090fc <inc_lock+0x10>
 8009142:	e000      	b.n	8009146 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009144:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2b02      	cmp	r3, #2
 800914a:	d132      	bne.n	80091b2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800914c:	2300      	movs	r3, #0
 800914e:	60fb      	str	r3, [r7, #12]
 8009150:	e002      	b.n	8009158 <inc_lock+0x6c>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	3301      	adds	r3, #1
 8009156:	60fb      	str	r3, [r7, #12]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2b01      	cmp	r3, #1
 800915c:	d806      	bhi.n	800916c <inc_lock+0x80>
 800915e:	4a29      	ldr	r2, [pc, #164]	; (8009204 <inc_lock+0x118>)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	011b      	lsls	r3, r3, #4
 8009164:	4413      	add	r3, r2
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1f2      	bne.n	8009152 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2b02      	cmp	r3, #2
 8009170:	d101      	bne.n	8009176 <inc_lock+0x8a>
 8009172:	2300      	movs	r3, #0
 8009174:	e040      	b.n	80091f8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	4922      	ldr	r1, [pc, #136]	; (8009204 <inc_lock+0x118>)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	011b      	lsls	r3, r3, #4
 8009180:	440b      	add	r3, r1
 8009182:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	689a      	ldr	r2, [r3, #8]
 8009188:	491e      	ldr	r1, [pc, #120]	; (8009204 <inc_lock+0x118>)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	011b      	lsls	r3, r3, #4
 800918e:	440b      	add	r3, r1
 8009190:	3304      	adds	r3, #4
 8009192:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	695a      	ldr	r2, [r3, #20]
 8009198:	491a      	ldr	r1, [pc, #104]	; (8009204 <inc_lock+0x118>)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	011b      	lsls	r3, r3, #4
 800919e:	440b      	add	r3, r1
 80091a0:	3308      	adds	r3, #8
 80091a2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80091a4:	4a17      	ldr	r2, [pc, #92]	; (8009204 <inc_lock+0x118>)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	011b      	lsls	r3, r3, #4
 80091aa:	4413      	add	r3, r2
 80091ac:	330c      	adds	r3, #12
 80091ae:	2200      	movs	r2, #0
 80091b0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d009      	beq.n	80091cc <inc_lock+0xe0>
 80091b8:	4a12      	ldr	r2, [pc, #72]	; (8009204 <inc_lock+0x118>)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	011b      	lsls	r3, r3, #4
 80091be:	4413      	add	r3, r2
 80091c0:	330c      	adds	r3, #12
 80091c2:	881b      	ldrh	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d001      	beq.n	80091cc <inc_lock+0xe0>
 80091c8:	2300      	movs	r3, #0
 80091ca:	e015      	b.n	80091f8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d108      	bne.n	80091e4 <inc_lock+0xf8>
 80091d2:	4a0c      	ldr	r2, [pc, #48]	; (8009204 <inc_lock+0x118>)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	011b      	lsls	r3, r3, #4
 80091d8:	4413      	add	r3, r2
 80091da:	330c      	adds	r3, #12
 80091dc:	881b      	ldrh	r3, [r3, #0]
 80091de:	3301      	adds	r3, #1
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	e001      	b.n	80091e8 <inc_lock+0xfc>
 80091e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80091e8:	4906      	ldr	r1, [pc, #24]	; (8009204 <inc_lock+0x118>)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	011b      	lsls	r3, r3, #4
 80091ee:	440b      	add	r3, r1
 80091f0:	330c      	adds	r3, #12
 80091f2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	3301      	adds	r3, #1
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	200001b0 	.word	0x200001b0

08009208 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	3b01      	subs	r3, #1
 8009214:	607b      	str	r3, [r7, #4]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d825      	bhi.n	8009268 <dec_lock+0x60>
		n = Files[i].ctr;
 800921c:	4a17      	ldr	r2, [pc, #92]	; (800927c <dec_lock+0x74>)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	011b      	lsls	r3, r3, #4
 8009222:	4413      	add	r3, r2
 8009224:	330c      	adds	r3, #12
 8009226:	881b      	ldrh	r3, [r3, #0]
 8009228:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800922a:	89fb      	ldrh	r3, [r7, #14]
 800922c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009230:	d101      	bne.n	8009236 <dec_lock+0x2e>
 8009232:	2300      	movs	r3, #0
 8009234:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009236:	89fb      	ldrh	r3, [r7, #14]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d002      	beq.n	8009242 <dec_lock+0x3a>
 800923c:	89fb      	ldrh	r3, [r7, #14]
 800923e:	3b01      	subs	r3, #1
 8009240:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009242:	4a0e      	ldr	r2, [pc, #56]	; (800927c <dec_lock+0x74>)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	011b      	lsls	r3, r3, #4
 8009248:	4413      	add	r3, r2
 800924a:	330c      	adds	r3, #12
 800924c:	89fa      	ldrh	r2, [r7, #14]
 800924e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009250:	89fb      	ldrh	r3, [r7, #14]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d105      	bne.n	8009262 <dec_lock+0x5a>
 8009256:	4a09      	ldr	r2, [pc, #36]	; (800927c <dec_lock+0x74>)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	011b      	lsls	r3, r3, #4
 800925c:	4413      	add	r3, r2
 800925e:	2200      	movs	r2, #0
 8009260:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009262:	2300      	movs	r3, #0
 8009264:	737b      	strb	r3, [r7, #13]
 8009266:	e001      	b.n	800926c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009268:	2302      	movs	r3, #2
 800926a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800926c:	7b7b      	ldrb	r3, [r7, #13]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3714      	adds	r7, #20
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	200001b0 	.word	0x200001b0

08009280 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009280:	b480      	push	{r7}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009288:	2300      	movs	r3, #0
 800928a:	60fb      	str	r3, [r7, #12]
 800928c:	e010      	b.n	80092b0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800928e:	4a0d      	ldr	r2, [pc, #52]	; (80092c4 <clear_lock+0x44>)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	011b      	lsls	r3, r3, #4
 8009294:	4413      	add	r3, r2
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	429a      	cmp	r2, r3
 800929c:	d105      	bne.n	80092aa <clear_lock+0x2a>
 800929e:	4a09      	ldr	r2, [pc, #36]	; (80092c4 <clear_lock+0x44>)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	011b      	lsls	r3, r3, #4
 80092a4:	4413      	add	r3, r2
 80092a6:	2200      	movs	r2, #0
 80092a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	3301      	adds	r3, #1
 80092ae:	60fb      	str	r3, [r7, #12]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d9eb      	bls.n	800928e <clear_lock+0xe>
	}
}
 80092b6:	bf00      	nop
 80092b8:	bf00      	nop
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr
 80092c4:	200001b0 	.word	0x200001b0

080092c8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	78db      	ldrb	r3, [r3, #3]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d034      	beq.n	8009346 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	7858      	ldrb	r0, [r3, #1]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80092ec:	2301      	movs	r3, #1
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	f7ff fd40 	bl	8008d74 <disk_write>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d002      	beq.n	8009300 <sync_window+0x38>
			res = FR_DISK_ERR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	73fb      	strb	r3, [r7, #15]
 80092fe:	e022      	b.n	8009346 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	1ad2      	subs	r2, r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	429a      	cmp	r2, r3
 8009314:	d217      	bcs.n	8009346 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	789b      	ldrb	r3, [r3, #2]
 800931a:	613b      	str	r3, [r7, #16]
 800931c:	e010      	b.n	8009340 <sync_window+0x78>
					wsect += fs->fsize;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	4413      	add	r3, r2
 8009326:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	7858      	ldrb	r0, [r3, #1]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009332:	2301      	movs	r3, #1
 8009334:	697a      	ldr	r2, [r7, #20]
 8009336:	f7ff fd1d 	bl	8008d74 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	3b01      	subs	r3, #1
 800933e:	613b      	str	r3, [r7, #16]
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d8eb      	bhi.n	800931e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009346:	7bfb      	ldrb	r3, [r7, #15]
}
 8009348:	4618      	mov	r0, r3
 800934a:	3718      	adds	r7, #24
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	429a      	cmp	r2, r3
 8009366:	d01b      	beq.n	80093a0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f7ff ffad 	bl	80092c8 <sync_window>
 800936e:	4603      	mov	r3, r0
 8009370:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009372:	7bfb      	ldrb	r3, [r7, #15]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d113      	bne.n	80093a0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	7858      	ldrb	r0, [r3, #1]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009382:	2301      	movs	r3, #1
 8009384:	683a      	ldr	r2, [r7, #0]
 8009386:	f7ff fcd5 	bl	8008d34 <disk_read>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d004      	beq.n	800939a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009390:	f04f 33ff 	mov.w	r3, #4294967295
 8009394:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009396:	2301      	movs	r3, #1
 8009398:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	683a      	ldr	r2, [r7, #0]
 800939e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
	...

080093ac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7ff ff87 	bl	80092c8 <sync_window>
 80093ba:	4603      	mov	r3, r0
 80093bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80093be:	7bfb      	ldrb	r3, [r7, #15]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d158      	bne.n	8009476 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	2b03      	cmp	r3, #3
 80093ca:	d148      	bne.n	800945e <sync_fs+0xb2>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	791b      	ldrb	r3, [r3, #4]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d144      	bne.n	800945e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	3330      	adds	r3, #48	; 0x30
 80093d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093dc:	2100      	movs	r1, #0
 80093de:	4618      	mov	r0, r3
 80093e0:	f7ff fda9 	bl	8008f36 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	3330      	adds	r3, #48	; 0x30
 80093e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80093ec:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7ff fd38 	bl	8008e66 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	3330      	adds	r3, #48	; 0x30
 80093fa:	4921      	ldr	r1, [pc, #132]	; (8009480 <sync_fs+0xd4>)
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7ff fd4d 	bl	8008e9c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	3330      	adds	r3, #48	; 0x30
 8009406:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800940a:	491e      	ldr	r1, [pc, #120]	; (8009484 <sync_fs+0xd8>)
 800940c:	4618      	mov	r0, r3
 800940e:	f7ff fd45 	bl	8008e9c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	3330      	adds	r3, #48	; 0x30
 8009416:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	4619      	mov	r1, r3
 8009420:	4610      	mov	r0, r2
 8009422:	f7ff fd3b 	bl	8008e9c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	3330      	adds	r3, #48	; 0x30
 800942a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	4619      	mov	r1, r3
 8009434:	4610      	mov	r0, r2
 8009436:	f7ff fd31 	bl	8008e9c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	1c5a      	adds	r2, r3, #1
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	7858      	ldrb	r0, [r3, #1]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009452:	2301      	movs	r3, #1
 8009454:	f7ff fc8e 	bl	8008d74 <disk_write>
			fs->fsi_flag = 0;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	785b      	ldrb	r3, [r3, #1]
 8009462:	2200      	movs	r2, #0
 8009464:	2100      	movs	r1, #0
 8009466:	4618      	mov	r0, r3
 8009468:	f7ff fca4 	bl	8008db4 <disk_ioctl>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d001      	beq.n	8009476 <sync_fs+0xca>
 8009472:	2301      	movs	r3, #1
 8009474:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009476:	7bfb      	ldrb	r3, [r7, #15]
}
 8009478:	4618      	mov	r0, r3
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	41615252 	.word	0x41615252
 8009484:	61417272 	.word	0x61417272

08009488 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	3b02      	subs	r3, #2
 8009496:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	3b02      	subs	r3, #2
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d301      	bcc.n	80094a8 <clust2sect+0x20>
 80094a4:	2300      	movs	r3, #0
 80094a6:	e008      	b.n	80094ba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	895b      	ldrh	r3, [r3, #10]
 80094ac:	461a      	mov	r2, r3
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	fb03 f202 	mul.w	r2, r3, r2
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b8:	4413      	add	r3, r2
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	370c      	adds	r7, #12
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr

080094c6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b086      	sub	sp, #24
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
 80094ce:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d904      	bls.n	80094e6 <get_fat+0x20>
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	695b      	ldr	r3, [r3, #20]
 80094e0:	683a      	ldr	r2, [r7, #0]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d302      	bcc.n	80094ec <get_fat+0x26>
		val = 1;	/* Internal error */
 80094e6:	2301      	movs	r3, #1
 80094e8:	617b      	str	r3, [r7, #20]
 80094ea:	e08f      	b.n	800960c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80094ec:	f04f 33ff 	mov.w	r3, #4294967295
 80094f0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	2b03      	cmp	r3, #3
 80094f8:	d062      	beq.n	80095c0 <get_fat+0xfa>
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	dc7c      	bgt.n	80095f8 <get_fat+0x132>
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d002      	beq.n	8009508 <get_fat+0x42>
 8009502:	2b02      	cmp	r3, #2
 8009504:	d042      	beq.n	800958c <get_fat+0xc6>
 8009506:	e077      	b.n	80095f8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	60fb      	str	r3, [r7, #12]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	085b      	lsrs	r3, r3, #1
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	4413      	add	r3, r2
 8009514:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	6a1a      	ldr	r2, [r3, #32]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	0a5b      	lsrs	r3, r3, #9
 800951e:	4413      	add	r3, r2
 8009520:	4619      	mov	r1, r3
 8009522:	6938      	ldr	r0, [r7, #16]
 8009524:	f7ff ff14 	bl	8009350 <move_window>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d167      	bne.n	80095fe <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	1c5a      	adds	r2, r3, #1
 8009532:	60fa      	str	r2, [r7, #12]
 8009534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	4413      	add	r3, r2
 800953c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009540:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	6a1a      	ldr	r2, [r3, #32]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	0a5b      	lsrs	r3, r3, #9
 800954a:	4413      	add	r3, r2
 800954c:	4619      	mov	r1, r3
 800954e:	6938      	ldr	r0, [r7, #16]
 8009550:	f7ff fefe 	bl	8009350 <move_window>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d153      	bne.n	8009602 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	4413      	add	r3, r2
 8009564:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009568:	021b      	lsls	r3, r3, #8
 800956a:	461a      	mov	r2, r3
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	4313      	orrs	r3, r2
 8009570:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	f003 0301 	and.w	r3, r3, #1
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <get_fat+0xbc>
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	091b      	lsrs	r3, r3, #4
 8009580:	e002      	b.n	8009588 <get_fat+0xc2>
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009588:	617b      	str	r3, [r7, #20]
			break;
 800958a:	e03f      	b.n	800960c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	6a1a      	ldr	r2, [r3, #32]
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	0a1b      	lsrs	r3, r3, #8
 8009594:	4413      	add	r3, r2
 8009596:	4619      	mov	r1, r3
 8009598:	6938      	ldr	r0, [r7, #16]
 800959a:	f7ff fed9 	bl	8009350 <move_window>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d130      	bne.n	8009606 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	005b      	lsls	r3, r3, #1
 80095ae:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80095b2:	4413      	add	r3, r2
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7ff fc1b 	bl	8008df0 <ld_word>
 80095ba:	4603      	mov	r3, r0
 80095bc:	617b      	str	r3, [r7, #20]
			break;
 80095be:	e025      	b.n	800960c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	6a1a      	ldr	r2, [r3, #32]
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	09db      	lsrs	r3, r3, #7
 80095c8:	4413      	add	r3, r2
 80095ca:	4619      	mov	r1, r3
 80095cc:	6938      	ldr	r0, [r7, #16]
 80095ce:	f7ff febf 	bl	8009350 <move_window>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d118      	bne.n	800960a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80095e6:	4413      	add	r3, r2
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7ff fc19 	bl	8008e20 <ld_dword>
 80095ee:	4603      	mov	r3, r0
 80095f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80095f4:	617b      	str	r3, [r7, #20]
			break;
 80095f6:	e009      	b.n	800960c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80095f8:	2301      	movs	r3, #1
 80095fa:	617b      	str	r3, [r7, #20]
 80095fc:	e006      	b.n	800960c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80095fe:	bf00      	nop
 8009600:	e004      	b.n	800960c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009602:	bf00      	nop
 8009604:	e002      	b.n	800960c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009606:	bf00      	nop
 8009608:	e000      	b.n	800960c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800960a:	bf00      	nop
		}
	}

	return val;
 800960c:	697b      	ldr	r3, [r7, #20]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3718      	adds	r7, #24
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009616:	b590      	push	{r4, r7, lr}
 8009618:	b089      	sub	sp, #36	; 0x24
 800961a:	af00      	add	r7, sp, #0
 800961c:	60f8      	str	r0, [r7, #12]
 800961e:	60b9      	str	r1, [r7, #8]
 8009620:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009622:	2302      	movs	r3, #2
 8009624:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	2b01      	cmp	r3, #1
 800962a:	f240 80d2 	bls.w	80097d2 <put_fat+0x1bc>
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	695b      	ldr	r3, [r3, #20]
 8009632:	68ba      	ldr	r2, [r7, #8]
 8009634:	429a      	cmp	r2, r3
 8009636:	f080 80cc 	bcs.w	80097d2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	2b03      	cmp	r3, #3
 8009640:	f000 8096 	beq.w	8009770 <put_fat+0x15a>
 8009644:	2b03      	cmp	r3, #3
 8009646:	f300 80cd 	bgt.w	80097e4 <put_fat+0x1ce>
 800964a:	2b01      	cmp	r3, #1
 800964c:	d002      	beq.n	8009654 <put_fat+0x3e>
 800964e:	2b02      	cmp	r3, #2
 8009650:	d06e      	beq.n	8009730 <put_fat+0x11a>
 8009652:	e0c7      	b.n	80097e4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	61bb      	str	r3, [r7, #24]
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	085b      	lsrs	r3, r3, #1
 800965c:	69ba      	ldr	r2, [r7, #24]
 800965e:	4413      	add	r3, r2
 8009660:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6a1a      	ldr	r2, [r3, #32]
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	0a5b      	lsrs	r3, r3, #9
 800966a:	4413      	add	r3, r2
 800966c:	4619      	mov	r1, r3
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f7ff fe6e 	bl	8009350 <move_window>
 8009674:	4603      	mov	r3, r0
 8009676:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009678:	7ffb      	ldrb	r3, [r7, #31]
 800967a:	2b00      	cmp	r3, #0
 800967c:	f040 80ab 	bne.w	80097d6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	1c59      	adds	r1, r3, #1
 800968a:	61b9      	str	r1, [r7, #24]
 800968c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009690:	4413      	add	r3, r2
 8009692:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	f003 0301 	and.w	r3, r3, #1
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00d      	beq.n	80096ba <put_fat+0xa4>
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	b25b      	sxtb	r3, r3
 80096a4:	f003 030f 	and.w	r3, r3, #15
 80096a8:	b25a      	sxtb	r2, r3
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	011b      	lsls	r3, r3, #4
 80096b0:	b25b      	sxtb	r3, r3
 80096b2:	4313      	orrs	r3, r2
 80096b4:	b25b      	sxtb	r3, r3
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	e001      	b.n	80096be <put_fat+0xa8>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2201      	movs	r2, #1
 80096c6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6a1a      	ldr	r2, [r3, #32]
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	0a5b      	lsrs	r3, r3, #9
 80096d0:	4413      	add	r3, r2
 80096d2:	4619      	mov	r1, r3
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f7ff fe3b 	bl	8009350 <move_window>
 80096da:	4603      	mov	r3, r0
 80096dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80096de:	7ffb      	ldrb	r3, [r7, #31]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d17a      	bne.n	80097da <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096f0:	4413      	add	r3, r2
 80096f2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	f003 0301 	and.w	r3, r3, #1
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d003      	beq.n	8009706 <put_fat+0xf0>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	091b      	lsrs	r3, r3, #4
 8009702:	b2db      	uxtb	r3, r3
 8009704:	e00e      	b.n	8009724 <put_fat+0x10e>
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	b25b      	sxtb	r3, r3
 800970c:	f023 030f 	bic.w	r3, r3, #15
 8009710:	b25a      	sxtb	r2, r3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	0a1b      	lsrs	r3, r3, #8
 8009716:	b25b      	sxtb	r3, r3
 8009718:	f003 030f 	and.w	r3, r3, #15
 800971c:	b25b      	sxtb	r3, r3
 800971e:	4313      	orrs	r3, r2
 8009720:	b25b      	sxtb	r3, r3
 8009722:	b2db      	uxtb	r3, r3
 8009724:	697a      	ldr	r2, [r7, #20]
 8009726:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2201      	movs	r2, #1
 800972c:	70da      	strb	r2, [r3, #3]
			break;
 800972e:	e059      	b.n	80097e4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6a1a      	ldr	r2, [r3, #32]
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	0a1b      	lsrs	r3, r3, #8
 8009738:	4413      	add	r3, r2
 800973a:	4619      	mov	r1, r3
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f7ff fe07 	bl	8009350 <move_window>
 8009742:	4603      	mov	r3, r0
 8009744:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009746:	7ffb      	ldrb	r3, [r7, #31]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d148      	bne.n	80097de <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	005b      	lsls	r3, r3, #1
 8009756:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800975a:	4413      	add	r3, r2
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	b292      	uxth	r2, r2
 8009760:	4611      	mov	r1, r2
 8009762:	4618      	mov	r0, r3
 8009764:	f7ff fb7f 	bl	8008e66 <st_word>
			fs->wflag = 1;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2201      	movs	r2, #1
 800976c:	70da      	strb	r2, [r3, #3]
			break;
 800976e:	e039      	b.n	80097e4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6a1a      	ldr	r2, [r3, #32]
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	09db      	lsrs	r3, r3, #7
 8009778:	4413      	add	r3, r2
 800977a:	4619      	mov	r1, r3
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f7ff fde7 	bl	8009350 <move_window>
 8009782:	4603      	mov	r3, r0
 8009784:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009786:	7ffb      	ldrb	r3, [r7, #31]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d12a      	bne.n	80097e2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80097a0:	4413      	add	r3, r2
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7ff fb3c 	bl	8008e20 <ld_dword>
 80097a8:	4603      	mov	r3, r0
 80097aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80097ae:	4323      	orrs	r3, r4
 80097b0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80097c0:	4413      	add	r3, r2
 80097c2:	6879      	ldr	r1, [r7, #4]
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7ff fb69 	bl	8008e9c <st_dword>
			fs->wflag = 1;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2201      	movs	r2, #1
 80097ce:	70da      	strb	r2, [r3, #3]
			break;
 80097d0:	e008      	b.n	80097e4 <put_fat+0x1ce>
		}
	}
 80097d2:	bf00      	nop
 80097d4:	e006      	b.n	80097e4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80097d6:	bf00      	nop
 80097d8:	e004      	b.n	80097e4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80097da:	bf00      	nop
 80097dc:	e002      	b.n	80097e4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80097de:	bf00      	nop
 80097e0:	e000      	b.n	80097e4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80097e2:	bf00      	nop
	return res;
 80097e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3724      	adds	r7, #36	; 0x24
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd90      	pop	{r4, r7, pc}

080097ee <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b088      	sub	sp, #32
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	60f8      	str	r0, [r7, #12]
 80097f6:	60b9      	str	r1, [r7, #8]
 80097f8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d904      	bls.n	8009814 <remove_chain+0x26>
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	695b      	ldr	r3, [r3, #20]
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	429a      	cmp	r2, r3
 8009812:	d301      	bcc.n	8009818 <remove_chain+0x2a>
 8009814:	2302      	movs	r3, #2
 8009816:	e04b      	b.n	80098b0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00c      	beq.n	8009838 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800981e:	f04f 32ff 	mov.w	r2, #4294967295
 8009822:	6879      	ldr	r1, [r7, #4]
 8009824:	69b8      	ldr	r0, [r7, #24]
 8009826:	f7ff fef6 	bl	8009616 <put_fat>
 800982a:	4603      	mov	r3, r0
 800982c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800982e:	7ffb      	ldrb	r3, [r7, #31]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d001      	beq.n	8009838 <remove_chain+0x4a>
 8009834:	7ffb      	ldrb	r3, [r7, #31]
 8009836:	e03b      	b.n	80098b0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009838:	68b9      	ldr	r1, [r7, #8]
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f7ff fe43 	bl	80094c6 <get_fat>
 8009840:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d031      	beq.n	80098ac <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d101      	bne.n	8009852 <remove_chain+0x64>
 800984e:	2302      	movs	r3, #2
 8009850:	e02e      	b.n	80098b0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009858:	d101      	bne.n	800985e <remove_chain+0x70>
 800985a:	2301      	movs	r3, #1
 800985c:	e028      	b.n	80098b0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800985e:	2200      	movs	r2, #0
 8009860:	68b9      	ldr	r1, [r7, #8]
 8009862:	69b8      	ldr	r0, [r7, #24]
 8009864:	f7ff fed7 	bl	8009616 <put_fat>
 8009868:	4603      	mov	r3, r0
 800986a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800986c:	7ffb      	ldrb	r3, [r7, #31]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d001      	beq.n	8009876 <remove_chain+0x88>
 8009872:	7ffb      	ldrb	r3, [r7, #31]
 8009874:	e01c      	b.n	80098b0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	691a      	ldr	r2, [r3, #16]
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	695b      	ldr	r3, [r3, #20]
 800987e:	3b02      	subs	r3, #2
 8009880:	429a      	cmp	r2, r3
 8009882:	d20b      	bcs.n	800989c <remove_chain+0xae>
			fs->free_clst++;
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	1c5a      	adds	r2, r3, #1
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	791b      	ldrb	r3, [r3, #4]
 8009892:	f043 0301 	orr.w	r3, r3, #1
 8009896:	b2da      	uxtb	r2, r3
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	695b      	ldr	r3, [r3, #20]
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d3c6      	bcc.n	8009838 <remove_chain+0x4a>
 80098aa:	e000      	b.n	80098ae <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80098ac:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80098ae:	2300      	movs	r3, #0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3720      	adds	r7, #32
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b088      	sub	sp, #32
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10d      	bne.n	80098ea <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d004      	beq.n	80098e4 <create_chain+0x2c>
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	695b      	ldr	r3, [r3, #20]
 80098de:	69ba      	ldr	r2, [r7, #24]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d31b      	bcc.n	800991c <create_chain+0x64>
 80098e4:	2301      	movs	r3, #1
 80098e6:	61bb      	str	r3, [r7, #24]
 80098e8:	e018      	b.n	800991c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f7ff fdea 	bl	80094c6 <get_fat>
 80098f2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d801      	bhi.n	80098fe <create_chain+0x46>
 80098fa:	2301      	movs	r3, #1
 80098fc:	e070      	b.n	80099e0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009904:	d101      	bne.n	800990a <create_chain+0x52>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	e06a      	b.n	80099e0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	429a      	cmp	r2, r3
 8009912:	d201      	bcs.n	8009918 <create_chain+0x60>
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	e063      	b.n	80099e0 <create_chain+0x128>
		scl = clst;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	3301      	adds	r3, #1
 8009924:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	695b      	ldr	r3, [r3, #20]
 800992a:	69fa      	ldr	r2, [r7, #28]
 800992c:	429a      	cmp	r2, r3
 800992e:	d307      	bcc.n	8009940 <create_chain+0x88>
				ncl = 2;
 8009930:	2302      	movs	r3, #2
 8009932:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009934:	69fa      	ldr	r2, [r7, #28]
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	429a      	cmp	r2, r3
 800993a:	d901      	bls.n	8009940 <create_chain+0x88>
 800993c:	2300      	movs	r3, #0
 800993e:	e04f      	b.n	80099e0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009940:	69f9      	ldr	r1, [r7, #28]
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f7ff fdbf 	bl	80094c6 <get_fat>
 8009948:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00e      	beq.n	800996e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2b01      	cmp	r3, #1
 8009954:	d003      	beq.n	800995e <create_chain+0xa6>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800995c:	d101      	bne.n	8009962 <create_chain+0xaa>
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	e03e      	b.n	80099e0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009962:	69fa      	ldr	r2, [r7, #28]
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	429a      	cmp	r2, r3
 8009968:	d1da      	bne.n	8009920 <create_chain+0x68>
 800996a:	2300      	movs	r3, #0
 800996c:	e038      	b.n	80099e0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800996e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009970:	f04f 32ff 	mov.w	r2, #4294967295
 8009974:	69f9      	ldr	r1, [r7, #28]
 8009976:	6938      	ldr	r0, [r7, #16]
 8009978:	f7ff fe4d 	bl	8009616 <put_fat>
 800997c:	4603      	mov	r3, r0
 800997e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009980:	7dfb      	ldrb	r3, [r7, #23]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d109      	bne.n	800999a <create_chain+0xe2>
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d006      	beq.n	800999a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800998c:	69fa      	ldr	r2, [r7, #28]
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	6938      	ldr	r0, [r7, #16]
 8009992:	f7ff fe40 	bl	8009616 <put_fat>
 8009996:	4603      	mov	r3, r0
 8009998:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800999a:	7dfb      	ldrb	r3, [r7, #23]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d116      	bne.n	80099ce <create_chain+0x116>
		fs->last_clst = ncl;
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	69fa      	ldr	r2, [r7, #28]
 80099a4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	691a      	ldr	r2, [r3, #16]
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	3b02      	subs	r3, #2
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d804      	bhi.n	80099be <create_chain+0x106>
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	1e5a      	subs	r2, r3, #1
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	791b      	ldrb	r3, [r3, #4]
 80099c2:	f043 0301 	orr.w	r3, r3, #1
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	711a      	strb	r2, [r3, #4]
 80099cc:	e007      	b.n	80099de <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80099ce:	7dfb      	ldrb	r3, [r7, #23]
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d102      	bne.n	80099da <create_chain+0x122>
 80099d4:	f04f 33ff 	mov.w	r3, #4294967295
 80099d8:	e000      	b.n	80099dc <create_chain+0x124>
 80099da:	2301      	movs	r3, #1
 80099dc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80099de:	69fb      	ldr	r3, [r7, #28]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3720      	adds	r7, #32
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b087      	sub	sp, #28
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fc:	3304      	adds	r3, #4
 80099fe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	0a5b      	lsrs	r3, r3, #9
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	8952      	ldrh	r2, [r2, #10]
 8009a08:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a0c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	1d1a      	adds	r2, r3, #4
 8009a12:	613a      	str	r2, [r7, #16]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d101      	bne.n	8009a22 <clmt_clust+0x3a>
 8009a1e:	2300      	movs	r3, #0
 8009a20:	e010      	b.n	8009a44 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009a22:	697a      	ldr	r2, [r7, #20]
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d307      	bcc.n	8009a3a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	1ad3      	subs	r3, r2, r3
 8009a30:	617b      	str	r3, [r7, #20]
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	3304      	adds	r3, #4
 8009a36:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009a38:	e7e9      	b.n	8009a0e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009a3a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	4413      	add	r3, r2
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	371c      	adds	r7, #28
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b086      	sub	sp, #24
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a66:	d204      	bcs.n	8009a72 <dir_sdi+0x22>
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	f003 031f 	and.w	r3, r3, #31
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d001      	beq.n	8009a76 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009a72:	2302      	movs	r3, #2
 8009a74:	e063      	b.n	8009b3e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	683a      	ldr	r2, [r7, #0]
 8009a7a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d106      	bne.n	8009a96 <dir_sdi+0x46>
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	2b02      	cmp	r3, #2
 8009a8e:	d902      	bls.n	8009a96 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a94:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d10c      	bne.n	8009ab6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	095b      	lsrs	r3, r3, #5
 8009aa0:	693a      	ldr	r2, [r7, #16]
 8009aa2:	8912      	ldrh	r2, [r2, #8]
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d301      	bcc.n	8009aac <dir_sdi+0x5c>
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	e048      	b.n	8009b3e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	61da      	str	r2, [r3, #28]
 8009ab4:	e029      	b.n	8009b0a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	895b      	ldrh	r3, [r3, #10]
 8009aba:	025b      	lsls	r3, r3, #9
 8009abc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009abe:	e019      	b.n	8009af4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6979      	ldr	r1, [r7, #20]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7ff fcfe 	bl	80094c6 <get_fat>
 8009aca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad2:	d101      	bne.n	8009ad8 <dir_sdi+0x88>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e032      	b.n	8009b3e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d904      	bls.n	8009ae8 <dir_sdi+0x98>
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	695b      	ldr	r3, [r3, #20]
 8009ae2:	697a      	ldr	r2, [r7, #20]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d301      	bcc.n	8009aec <dir_sdi+0x9c>
 8009ae8:	2302      	movs	r3, #2
 8009aea:	e028      	b.n	8009b3e <dir_sdi+0xee>
			ofs -= csz;
 8009aec:	683a      	ldr	r2, [r7, #0]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009af4:	683a      	ldr	r2, [r7, #0]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d2e1      	bcs.n	8009ac0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009afc:	6979      	ldr	r1, [r7, #20]
 8009afe:	6938      	ldr	r0, [r7, #16]
 8009b00:	f7ff fcc2 	bl	8009488 <clust2sect>
 8009b04:	4602      	mov	r2, r0
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	697a      	ldr	r2, [r7, #20]
 8009b0e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	69db      	ldr	r3, [r3, #28]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d101      	bne.n	8009b1c <dir_sdi+0xcc>
 8009b18:	2302      	movs	r3, #2
 8009b1a:	e010      	b.n	8009b3e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	69da      	ldr	r2, [r3, #28]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	0a5b      	lsrs	r3, r3, #9
 8009b24:	441a      	add	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b36:	441a      	add	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3718      	adds	r7, #24
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b086      	sub	sp, #24
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
 8009b4e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	695b      	ldr	r3, [r3, #20]
 8009b5a:	3320      	adds	r3, #32
 8009b5c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	69db      	ldr	r3, [r3, #28]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d003      	beq.n	8009b6e <dir_next+0x28>
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b6c:	d301      	bcc.n	8009b72 <dir_next+0x2c>
 8009b6e:	2304      	movs	r3, #4
 8009b70:	e0aa      	b.n	8009cc8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f040 8098 	bne.w	8009cae <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	69db      	ldr	r3, [r3, #28]
 8009b82:	1c5a      	adds	r2, r3, #1
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10b      	bne.n	8009ba8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	095b      	lsrs	r3, r3, #5
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	8912      	ldrh	r2, [r2, #8]
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	f0c0 8088 	bcc.w	8009cae <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	61da      	str	r2, [r3, #28]
 8009ba4:	2304      	movs	r3, #4
 8009ba6:	e08f      	b.n	8009cc8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	0a5b      	lsrs	r3, r3, #9
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	8952      	ldrh	r2, [r2, #10]
 8009bb0:	3a01      	subs	r2, #1
 8009bb2:	4013      	ands	r3, r2
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d17a      	bne.n	8009cae <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	699b      	ldr	r3, [r3, #24]
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	4610      	mov	r0, r2
 8009bc2:	f7ff fc80 	bl	80094c6 <get_fat>
 8009bc6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d801      	bhi.n	8009bd2 <dir_next+0x8c>
 8009bce:	2302      	movs	r3, #2
 8009bd0:	e07a      	b.n	8009cc8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd8:	d101      	bne.n	8009bde <dir_next+0x98>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e074      	b.n	8009cc8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	695b      	ldr	r3, [r3, #20]
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d358      	bcc.n	8009c9a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d104      	bne.n	8009bf8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	61da      	str	r2, [r3, #28]
 8009bf4:	2304      	movs	r3, #4
 8009bf6:	e067      	b.n	8009cc8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	699b      	ldr	r3, [r3, #24]
 8009bfe:	4619      	mov	r1, r3
 8009c00:	4610      	mov	r0, r2
 8009c02:	f7ff fe59 	bl	80098b8 <create_chain>
 8009c06:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d101      	bne.n	8009c12 <dir_next+0xcc>
 8009c0e:	2307      	movs	r3, #7
 8009c10:	e05a      	b.n	8009cc8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d101      	bne.n	8009c1c <dir_next+0xd6>
 8009c18:	2302      	movs	r3, #2
 8009c1a:	e055      	b.n	8009cc8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c22:	d101      	bne.n	8009c28 <dir_next+0xe2>
 8009c24:	2301      	movs	r3, #1
 8009c26:	e04f      	b.n	8009cc8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	f7ff fb4d 	bl	80092c8 <sync_window>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d001      	beq.n	8009c38 <dir_next+0xf2>
 8009c34:	2301      	movs	r3, #1
 8009c36:	e047      	b.n	8009cc8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	3330      	adds	r3, #48	; 0x30
 8009c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c40:	2100      	movs	r1, #0
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7ff f977 	bl	8008f36 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009c48:	2300      	movs	r3, #0
 8009c4a:	613b      	str	r3, [r7, #16]
 8009c4c:	6979      	ldr	r1, [r7, #20]
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f7ff fc1a 	bl	8009488 <clust2sect>
 8009c54:	4602      	mov	r2, r0
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	62da      	str	r2, [r3, #44]	; 0x2c
 8009c5a:	e012      	b.n	8009c82 <dir_next+0x13c>
						fs->wflag = 1;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f7ff fb30 	bl	80092c8 <sync_window>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d001      	beq.n	8009c72 <dir_next+0x12c>
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e02a      	b.n	8009cc8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	3301      	adds	r3, #1
 8009c76:	613b      	str	r3, [r7, #16]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7c:	1c5a      	adds	r2, r3, #1
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	62da      	str	r2, [r3, #44]	; 0x2c
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	895b      	ldrh	r3, [r3, #10]
 8009c86:	461a      	mov	r2, r3
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d3e6      	bcc.n	8009c5c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	1ad2      	subs	r2, r2, r3
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	697a      	ldr	r2, [r7, #20]
 8009c9e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009ca0:	6979      	ldr	r1, [r7, #20]
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	f7ff fbf0 	bl	8009488 <clust2sect>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	68ba      	ldr	r2, [r7, #8]
 8009cb2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cc0:	441a      	add	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009cc6:	2300      	movs	r3, #0
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3718      	adds	r7, #24
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b086      	sub	sp, #24
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f7ff feb4 	bl	8009a50 <dir_sdi>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009cec:	7dfb      	ldrb	r3, [r7, #23]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d12b      	bne.n	8009d4a <dir_alloc+0x7a>
		n = 0;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	69db      	ldr	r3, [r3, #28]
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	68f8      	ldr	r0, [r7, #12]
 8009cfe:	f7ff fb27 	bl	8009350 <move_window>
 8009d02:	4603      	mov	r3, r0
 8009d04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009d06:	7dfb      	ldrb	r3, [r7, #23]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d11d      	bne.n	8009d48 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a1b      	ldr	r3, [r3, #32]
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	2be5      	cmp	r3, #229	; 0xe5
 8009d14:	d004      	beq.n	8009d20 <dir_alloc+0x50>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a1b      	ldr	r3, [r3, #32]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d107      	bne.n	8009d30 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	3301      	adds	r3, #1
 8009d24:	613b      	str	r3, [r7, #16]
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d102      	bne.n	8009d34 <dir_alloc+0x64>
 8009d2e:	e00c      	b.n	8009d4a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009d30:	2300      	movs	r3, #0
 8009d32:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009d34:	2101      	movs	r1, #1
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f7ff ff05 	bl	8009b46 <dir_next>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009d40:	7dfb      	ldrb	r3, [r7, #23]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d0d7      	beq.n	8009cf6 <dir_alloc+0x26>
 8009d46:	e000      	b.n	8009d4a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009d48:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009d4a:	7dfb      	ldrb	r3, [r7, #23]
 8009d4c:	2b04      	cmp	r3, #4
 8009d4e:	d101      	bne.n	8009d54 <dir_alloc+0x84>
 8009d50:	2307      	movs	r3, #7
 8009d52:	75fb      	strb	r3, [r7, #23]
	return res;
 8009d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3718      	adds	r7, #24
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b084      	sub	sp, #16
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
 8009d66:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	331a      	adds	r3, #26
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7ff f83f 	bl	8008df0 <ld_word>
 8009d72:	4603      	mov	r3, r0
 8009d74:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	2b03      	cmp	r3, #3
 8009d7c:	d109      	bne.n	8009d92 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	3314      	adds	r3, #20
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7ff f834 	bl	8008df0 <ld_word>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	041b      	lsls	r3, r3, #16
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009d92:	68fb      	ldr	r3, [r7, #12]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	331a      	adds	r3, #26
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	b292      	uxth	r2, r2
 8009db0:	4611      	mov	r1, r2
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7ff f857 	bl	8008e66 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	2b03      	cmp	r3, #3
 8009dbe:	d109      	bne.n	8009dd4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	f103 0214 	add.w	r2, r3, #20
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	0c1b      	lsrs	r3, r3, #16
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	4619      	mov	r1, r3
 8009dce:	4610      	mov	r0, r2
 8009dd0:	f7ff f849 	bl	8008e66 <st_word>
	}
}
 8009dd4:	bf00      	nop
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b086      	sub	sp, #24
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009dea:	2100      	movs	r1, #0
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7ff fe2f 	bl	8009a50 <dir_sdi>
 8009df2:	4603      	mov	r3, r0
 8009df4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009df6:	7dfb      	ldrb	r3, [r7, #23]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d001      	beq.n	8009e00 <dir_find+0x24>
 8009dfc:	7dfb      	ldrb	r3, [r7, #23]
 8009dfe:	e03e      	b.n	8009e7e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	69db      	ldr	r3, [r3, #28]
 8009e04:	4619      	mov	r1, r3
 8009e06:	6938      	ldr	r0, [r7, #16]
 8009e08:	f7ff faa2 	bl	8009350 <move_window>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009e10:	7dfb      	ldrb	r3, [r7, #23]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d12f      	bne.n	8009e76 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a1b      	ldr	r3, [r3, #32]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009e1e:	7bfb      	ldrb	r3, [r7, #15]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d102      	bne.n	8009e2a <dir_find+0x4e>
 8009e24:	2304      	movs	r3, #4
 8009e26:	75fb      	strb	r3, [r7, #23]
 8009e28:	e028      	b.n	8009e7c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a1b      	ldr	r3, [r3, #32]
 8009e2e:	330b      	adds	r3, #11
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e36:	b2da      	uxtb	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6a1b      	ldr	r3, [r3, #32]
 8009e40:	330b      	adds	r3, #11
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	f003 0308 	and.w	r3, r3, #8
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10a      	bne.n	8009e62 <dir_find+0x86>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6a18      	ldr	r0, [r3, #32]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	3324      	adds	r3, #36	; 0x24
 8009e54:	220b      	movs	r2, #11
 8009e56:	4619      	mov	r1, r3
 8009e58:	f7ff f888 	bl	8008f6c <mem_cmp>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00b      	beq.n	8009e7a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009e62:	2100      	movs	r1, #0
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f7ff fe6e 	bl	8009b46 <dir_next>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009e6e:	7dfb      	ldrb	r3, [r7, #23]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d0c5      	beq.n	8009e00 <dir_find+0x24>
 8009e74:	e002      	b.n	8009e7c <dir_find+0xa0>
		if (res != FR_OK) break;
 8009e76:	bf00      	nop
 8009e78:	e000      	b.n	8009e7c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009e7a:	bf00      	nop

	return res;
 8009e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3718      	adds	r7, #24
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009e94:	2101      	movs	r1, #1
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f7ff ff1a 	bl	8009cd0 <dir_alloc>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009ea0:	7bfb      	ldrb	r3, [r7, #15]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d11c      	bne.n	8009ee0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	69db      	ldr	r3, [r3, #28]
 8009eaa:	4619      	mov	r1, r3
 8009eac:	68b8      	ldr	r0, [r7, #8]
 8009eae:	f7ff fa4f 	bl	8009350 <move_window>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009eb6:	7bfb      	ldrb	r3, [r7, #15]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d111      	bne.n	8009ee0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6a1b      	ldr	r3, [r3, #32]
 8009ec0:	2220      	movs	r2, #32
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7ff f836 	bl	8008f36 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a18      	ldr	r0, [r3, #32]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	3324      	adds	r3, #36	; 0x24
 8009ed2:	220b      	movs	r2, #11
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	f7ff f80d 	bl	8008ef4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	2201      	movs	r2, #1
 8009ede:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
	...

08009eec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b088      	sub	sp, #32
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	60fb      	str	r3, [r7, #12]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	3324      	adds	r3, #36	; 0x24
 8009f00:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009f02:	220b      	movs	r2, #11
 8009f04:	2120      	movs	r1, #32
 8009f06:	68b8      	ldr	r0, [r7, #8]
 8009f08:	f7ff f815 	bl	8008f36 <mem_set>
	si = i = 0; ni = 8;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	613b      	str	r3, [r7, #16]
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	61fb      	str	r3, [r7, #28]
 8009f14:	2308      	movs	r3, #8
 8009f16:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	1c5a      	adds	r2, r3, #1
 8009f1c:	61fa      	str	r2, [r7, #28]
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	4413      	add	r3, r2
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009f26:	7efb      	ldrb	r3, [r7, #27]
 8009f28:	2b20      	cmp	r3, #32
 8009f2a:	d94e      	bls.n	8009fca <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009f2c:	7efb      	ldrb	r3, [r7, #27]
 8009f2e:	2b2f      	cmp	r3, #47	; 0x2f
 8009f30:	d006      	beq.n	8009f40 <create_name+0x54>
 8009f32:	7efb      	ldrb	r3, [r7, #27]
 8009f34:	2b5c      	cmp	r3, #92	; 0x5c
 8009f36:	d110      	bne.n	8009f5a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009f38:	e002      	b.n	8009f40 <create_name+0x54>
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	61fb      	str	r3, [r7, #28]
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	4413      	add	r3, r2
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	2b2f      	cmp	r3, #47	; 0x2f
 8009f4a:	d0f6      	beq.n	8009f3a <create_name+0x4e>
 8009f4c:	68fa      	ldr	r2, [r7, #12]
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	4413      	add	r3, r2
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	2b5c      	cmp	r3, #92	; 0x5c
 8009f56:	d0f0      	beq.n	8009f3a <create_name+0x4e>
			break;
 8009f58:	e038      	b.n	8009fcc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009f5a:	7efb      	ldrb	r3, [r7, #27]
 8009f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8009f5e:	d003      	beq.n	8009f68 <create_name+0x7c>
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d30c      	bcc.n	8009f82 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	2b0b      	cmp	r3, #11
 8009f6c:	d002      	beq.n	8009f74 <create_name+0x88>
 8009f6e:	7efb      	ldrb	r3, [r7, #27]
 8009f70:	2b2e      	cmp	r3, #46	; 0x2e
 8009f72:	d001      	beq.n	8009f78 <create_name+0x8c>
 8009f74:	2306      	movs	r3, #6
 8009f76:	e044      	b.n	800a002 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009f78:	2308      	movs	r3, #8
 8009f7a:	613b      	str	r3, [r7, #16]
 8009f7c:	230b      	movs	r3, #11
 8009f7e:	617b      	str	r3, [r7, #20]
			continue;
 8009f80:	e022      	b.n	8009fc8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009f82:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	da04      	bge.n	8009f94 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009f8a:	7efb      	ldrb	r3, [r7, #27]
 8009f8c:	3b80      	subs	r3, #128	; 0x80
 8009f8e:	4a1f      	ldr	r2, [pc, #124]	; (800a00c <create_name+0x120>)
 8009f90:	5cd3      	ldrb	r3, [r2, r3]
 8009f92:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009f94:	7efb      	ldrb	r3, [r7, #27]
 8009f96:	4619      	mov	r1, r3
 8009f98:	481d      	ldr	r0, [pc, #116]	; (800a010 <create_name+0x124>)
 8009f9a:	f7ff f80e 	bl	8008fba <chk_chr>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <create_name+0xbc>
 8009fa4:	2306      	movs	r3, #6
 8009fa6:	e02c      	b.n	800a002 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009fa8:	7efb      	ldrb	r3, [r7, #27]
 8009faa:	2b60      	cmp	r3, #96	; 0x60
 8009fac:	d905      	bls.n	8009fba <create_name+0xce>
 8009fae:	7efb      	ldrb	r3, [r7, #27]
 8009fb0:	2b7a      	cmp	r3, #122	; 0x7a
 8009fb2:	d802      	bhi.n	8009fba <create_name+0xce>
 8009fb4:	7efb      	ldrb	r3, [r7, #27]
 8009fb6:	3b20      	subs	r3, #32
 8009fb8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	1c5a      	adds	r2, r3, #1
 8009fbe:	613a      	str	r2, [r7, #16]
 8009fc0:	68ba      	ldr	r2, [r7, #8]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	7efa      	ldrb	r2, [r7, #27]
 8009fc6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009fc8:	e7a6      	b.n	8009f18 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009fca:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	441a      	add	r2, r3
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d101      	bne.n	8009fe0 <create_name+0xf4>
 8009fdc:	2306      	movs	r3, #6
 8009fde:	e010      	b.n	800a002 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	2be5      	cmp	r3, #229	; 0xe5
 8009fe6:	d102      	bne.n	8009fee <create_name+0x102>
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	2205      	movs	r2, #5
 8009fec:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009fee:	7efb      	ldrb	r3, [r7, #27]
 8009ff0:	2b20      	cmp	r3, #32
 8009ff2:	d801      	bhi.n	8009ff8 <create_name+0x10c>
 8009ff4:	2204      	movs	r2, #4
 8009ff6:	e000      	b.n	8009ffa <create_name+0x10e>
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	330b      	adds	r3, #11
 8009ffe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a000:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a002:	4618      	mov	r0, r3
 800a004:	3720      	adds	r7, #32
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	0800bd20 	.word	0x0800bd20
 800a010:	0800bc60 	.word	0x0800bc60

0800a014 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b086      	sub	sp, #24
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a028:	e002      	b.n	800a030 <follow_path+0x1c>
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	3301      	adds	r3, #1
 800a02e:	603b      	str	r3, [r7, #0]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	2b2f      	cmp	r3, #47	; 0x2f
 800a036:	d0f8      	beq.n	800a02a <follow_path+0x16>
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	2b5c      	cmp	r3, #92	; 0x5c
 800a03e:	d0f4      	beq.n	800a02a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	2200      	movs	r2, #0
 800a044:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	2b1f      	cmp	r3, #31
 800a04c:	d80a      	bhi.n	800a064 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2280      	movs	r2, #128	; 0x80
 800a052:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a056:	2100      	movs	r1, #0
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f7ff fcf9 	bl	8009a50 <dir_sdi>
 800a05e:	4603      	mov	r3, r0
 800a060:	75fb      	strb	r3, [r7, #23]
 800a062:	e043      	b.n	800a0ec <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a064:	463b      	mov	r3, r7
 800a066:	4619      	mov	r1, r3
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f7ff ff3f 	bl	8009eec <create_name>
 800a06e:	4603      	mov	r3, r0
 800a070:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a072:	7dfb      	ldrb	r3, [r7, #23]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d134      	bne.n	800a0e2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f7ff feaf 	bl	8009ddc <dir_find>
 800a07e:	4603      	mov	r3, r0
 800a080:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a088:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a08a:	7dfb      	ldrb	r3, [r7, #23]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00a      	beq.n	800a0a6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a090:	7dfb      	ldrb	r3, [r7, #23]
 800a092:	2b04      	cmp	r3, #4
 800a094:	d127      	bne.n	800a0e6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a096:	7afb      	ldrb	r3, [r7, #11]
 800a098:	f003 0304 	and.w	r3, r3, #4
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d122      	bne.n	800a0e6 <follow_path+0xd2>
 800a0a0:	2305      	movs	r3, #5
 800a0a2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a0a4:	e01f      	b.n	800a0e6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a0a6:	7afb      	ldrb	r3, [r7, #11]
 800a0a8:	f003 0304 	and.w	r3, r3, #4
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d11c      	bne.n	800a0ea <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	799b      	ldrb	r3, [r3, #6]
 800a0b4:	f003 0310 	and.w	r3, r3, #16
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d102      	bne.n	800a0c2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a0bc:	2305      	movs	r3, #5
 800a0be:	75fb      	strb	r3, [r7, #23]
 800a0c0:	e014      	b.n	800a0ec <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	695b      	ldr	r3, [r3, #20]
 800a0cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d0:	4413      	add	r3, r2
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f7ff fe42 	bl	8009d5e <ld_clust>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a0e0:	e7c0      	b.n	800a064 <follow_path+0x50>
			if (res != FR_OK) break;
 800a0e2:	bf00      	nop
 800a0e4:	e002      	b.n	800a0ec <follow_path+0xd8>
				break;
 800a0e6:	bf00      	nop
 800a0e8:	e000      	b.n	800a0ec <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a0ea:	bf00      	nop
			}
		}
	}

	return res;
 800a0ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3718      	adds	r7, #24
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a0f6:	b480      	push	{r7}
 800a0f8:	b087      	sub	sp, #28
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a0fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a102:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d031      	beq.n	800a170 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	617b      	str	r3, [r7, #20]
 800a112:	e002      	b.n	800a11a <get_ldnumber+0x24>
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	3301      	adds	r3, #1
 800a118:	617b      	str	r3, [r7, #20]
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	2b20      	cmp	r3, #32
 800a120:	d903      	bls.n	800a12a <get_ldnumber+0x34>
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	2b3a      	cmp	r3, #58	; 0x3a
 800a128:	d1f4      	bne.n	800a114 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	2b3a      	cmp	r3, #58	; 0x3a
 800a130:	d11c      	bne.n	800a16c <get_ldnumber+0x76>
			tp = *path;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	1c5a      	adds	r2, r3, #1
 800a13c:	60fa      	str	r2, [r7, #12]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	3b30      	subs	r3, #48	; 0x30
 800a142:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	2b09      	cmp	r3, #9
 800a148:	d80e      	bhi.n	800a168 <get_ldnumber+0x72>
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d10a      	bne.n	800a168 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d107      	bne.n	800a168 <get_ldnumber+0x72>
					vol = (int)i;
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	3301      	adds	r3, #1
 800a160:	617b      	str	r3, [r7, #20]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	697a      	ldr	r2, [r7, #20]
 800a166:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	e002      	b.n	800a172 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a16c:	2300      	movs	r3, #0
 800a16e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a170:	693b      	ldr	r3, [r7, #16]
}
 800a172:	4618      	mov	r0, r3
 800a174:	371c      	adds	r7, #28
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
	...

0800a180 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	70da      	strb	r2, [r3, #3]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f04f 32ff 	mov.w	r2, #4294967295
 800a196:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a198:	6839      	ldr	r1, [r7, #0]
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f7ff f8d8 	bl	8009350 <move_window>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d001      	beq.n	800a1aa <check_fs+0x2a>
 800a1a6:	2304      	movs	r3, #4
 800a1a8:	e038      	b.n	800a21c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	3330      	adds	r3, #48	; 0x30
 800a1ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7fe fe1c 	bl	8008df0 <ld_word>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d001      	beq.n	800a1c8 <check_fs+0x48>
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e029      	b.n	800a21c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a1ce:	2be9      	cmp	r3, #233	; 0xe9
 800a1d0:	d009      	beq.n	800a1e6 <check_fs+0x66>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a1d8:	2beb      	cmp	r3, #235	; 0xeb
 800a1da:	d11e      	bne.n	800a21a <check_fs+0x9a>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a1e2:	2b90      	cmp	r3, #144	; 0x90
 800a1e4:	d119      	bne.n	800a21a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	3330      	adds	r3, #48	; 0x30
 800a1ea:	3336      	adds	r3, #54	; 0x36
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7fe fe17 	bl	8008e20 <ld_dword>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a1f8:	4a0a      	ldr	r2, [pc, #40]	; (800a224 <check_fs+0xa4>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d101      	bne.n	800a202 <check_fs+0x82>
 800a1fe:	2300      	movs	r3, #0
 800a200:	e00c      	b.n	800a21c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	3330      	adds	r3, #48	; 0x30
 800a206:	3352      	adds	r3, #82	; 0x52
 800a208:	4618      	mov	r0, r3
 800a20a:	f7fe fe09 	bl	8008e20 <ld_dword>
 800a20e:	4603      	mov	r3, r0
 800a210:	4a05      	ldr	r2, [pc, #20]	; (800a228 <check_fs+0xa8>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d101      	bne.n	800a21a <check_fs+0x9a>
 800a216:	2300      	movs	r3, #0
 800a218:	e000      	b.n	800a21c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a21a:	2302      	movs	r3, #2
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	00544146 	.word	0x00544146
 800a228:	33544146 	.word	0x33544146

0800a22c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b096      	sub	sp, #88	; 0x58
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	4613      	mov	r3, r2
 800a238:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	2200      	movs	r2, #0
 800a23e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f7ff ff58 	bl	800a0f6 <get_ldnumber>
 800a246:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	da01      	bge.n	800a252 <find_volume+0x26>
 800a24e:	230b      	movs	r3, #11
 800a250:	e22e      	b.n	800a6b0 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a252:	4aa8      	ldr	r2, [pc, #672]	; (800a4f4 <find_volume+0x2c8>)
 800a254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a25a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d101      	bne.n	800a266 <find_volume+0x3a>
 800a262:	230c      	movs	r3, #12
 800a264:	e224      	b.n	800a6b0 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a26a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a26c:	79fb      	ldrb	r3, [r7, #7]
 800a26e:	f023 0301 	bic.w	r3, r3, #1
 800a272:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d01a      	beq.n	800a2b2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27e:	785b      	ldrb	r3, [r3, #1]
 800a280:	4618      	mov	r0, r3
 800a282:	f7fe fd17 	bl	8008cb4 <disk_status>
 800a286:	4603      	mov	r3, r0
 800a288:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a28c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a290:	f003 0301 	and.w	r3, r3, #1
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10c      	bne.n	800a2b2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a298:	79fb      	ldrb	r3, [r7, #7]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d007      	beq.n	800a2ae <find_volume+0x82>
 800a29e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2a2:	f003 0304 	and.w	r3, r3, #4
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a2aa:	230a      	movs	r3, #10
 800a2ac:	e200      	b.n	800a6b0 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	e1fe      	b.n	800a6b0 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ba:	b2da      	uxtb	r2, r3
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2be:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c2:	785b      	ldrb	r3, [r3, #1]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7fe fd0f 	bl	8008ce8 <disk_initialize>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a2d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2d4:	f003 0301 	and.w	r3, r3, #1
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d001      	beq.n	800a2e0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a2dc:	2303      	movs	r3, #3
 800a2de:	e1e7      	b.n	800a6b0 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a2e0:	79fb      	ldrb	r3, [r7, #7]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d007      	beq.n	800a2f6 <find_volume+0xca>
 800a2e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2ea:	f003 0304 	and.w	r3, r3, #4
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d001      	beq.n	800a2f6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a2f2:	230a      	movs	r3, #10
 800a2f4:	e1dc      	b.n	800a6b0 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a2fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a2fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2fe:	f7ff ff3f 	bl	800a180 <check_fs>
 800a302:	4603      	mov	r3, r0
 800a304:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a308:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	d14b      	bne.n	800a3a8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a310:	2300      	movs	r3, #0
 800a312:	643b      	str	r3, [r7, #64]	; 0x40
 800a314:	e01f      	b.n	800a356 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a318:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a31c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a31e:	011b      	lsls	r3, r3, #4
 800a320:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a324:	4413      	add	r3, r2
 800a326:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32a:	3304      	adds	r3, #4
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d006      	beq.n	800a340 <find_volume+0x114>
 800a332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a334:	3308      	adds	r3, #8
 800a336:	4618      	mov	r0, r3
 800a338:	f7fe fd72 	bl	8008e20 <ld_dword>
 800a33c:	4602      	mov	r2, r0
 800a33e:	e000      	b.n	800a342 <find_volume+0x116>
 800a340:	2200      	movs	r2, #0
 800a342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a34a:	440b      	add	r3, r1
 800a34c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a352:	3301      	adds	r3, #1
 800a354:	643b      	str	r3, [r7, #64]	; 0x40
 800a356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a358:	2b03      	cmp	r3, #3
 800a35a:	d9dc      	bls.n	800a316 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a35c:	2300      	movs	r3, #0
 800a35e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a362:	2b00      	cmp	r3, #0
 800a364:	d002      	beq.n	800a36c <find_volume+0x140>
 800a366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a368:	3b01      	subs	r3, #1
 800a36a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a36c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a374:	4413      	add	r3, r2
 800a376:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a37a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a37c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d005      	beq.n	800a38e <find_volume+0x162>
 800a382:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a384:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a386:	f7ff fefb 	bl	800a180 <check_fs>
 800a38a:	4603      	mov	r3, r0
 800a38c:	e000      	b.n	800a390 <find_volume+0x164>
 800a38e:	2303      	movs	r3, #3
 800a390:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a394:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d905      	bls.n	800a3a8 <find_volume+0x17c>
 800a39c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a39e:	3301      	adds	r3, #1
 800a3a0:	643b      	str	r3, [r7, #64]	; 0x40
 800a3a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3a4:	2b03      	cmp	r3, #3
 800a3a6:	d9e1      	bls.n	800a36c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a3a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3ac:	2b04      	cmp	r3, #4
 800a3ae:	d101      	bne.n	800a3b4 <find_volume+0x188>
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e17d      	b.n	800a6b0 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a3b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d901      	bls.n	800a3c0 <find_volume+0x194>
 800a3bc:	230d      	movs	r3, #13
 800a3be:	e177      	b.n	800a6b0 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c2:	3330      	adds	r3, #48	; 0x30
 800a3c4:	330b      	adds	r3, #11
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7fe fd12 	bl	8008df0 <ld_word>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3d2:	d001      	beq.n	800a3d8 <find_volume+0x1ac>
 800a3d4:	230d      	movs	r3, #13
 800a3d6:	e16b      	b.n	800a6b0 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3da:	3330      	adds	r3, #48	; 0x30
 800a3dc:	3316      	adds	r3, #22
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fe fd06 	bl	8008df0 <ld_word>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a3e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d106      	bne.n	800a3fc <find_volume+0x1d0>
 800a3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f0:	3330      	adds	r3, #48	; 0x30
 800a3f2:	3324      	adds	r3, #36	; 0x24
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7fe fd13 	bl	8008e20 <ld_dword>
 800a3fa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a400:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a404:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40e:	789b      	ldrb	r3, [r3, #2]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d005      	beq.n	800a420 <find_volume+0x1f4>
 800a414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a416:	789b      	ldrb	r3, [r3, #2]
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d001      	beq.n	800a420 <find_volume+0x1f4>
 800a41c:	230d      	movs	r3, #13
 800a41e:	e147      	b.n	800a6b0 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a422:	789b      	ldrb	r3, [r3, #2]
 800a424:	461a      	mov	r2, r3
 800a426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a428:	fb02 f303 	mul.w	r3, r2, r3
 800a42c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a434:	b29a      	uxth	r2, r3
 800a436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a438:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43c:	895b      	ldrh	r3, [r3, #10]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d008      	beq.n	800a454 <find_volume+0x228>
 800a442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a444:	895b      	ldrh	r3, [r3, #10]
 800a446:	461a      	mov	r2, r3
 800a448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44a:	895b      	ldrh	r3, [r3, #10]
 800a44c:	3b01      	subs	r3, #1
 800a44e:	4013      	ands	r3, r2
 800a450:	2b00      	cmp	r3, #0
 800a452:	d001      	beq.n	800a458 <find_volume+0x22c>
 800a454:	230d      	movs	r3, #13
 800a456:	e12b      	b.n	800a6b0 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45a:	3330      	adds	r3, #48	; 0x30
 800a45c:	3311      	adds	r3, #17
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fe fcc6 	bl	8008df0 <ld_word>
 800a464:	4603      	mov	r3, r0
 800a466:	461a      	mov	r2, r3
 800a468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46e:	891b      	ldrh	r3, [r3, #8]
 800a470:	f003 030f 	and.w	r3, r3, #15
 800a474:	b29b      	uxth	r3, r3
 800a476:	2b00      	cmp	r3, #0
 800a478:	d001      	beq.n	800a47e <find_volume+0x252>
 800a47a:	230d      	movs	r3, #13
 800a47c:	e118      	b.n	800a6b0 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a480:	3330      	adds	r3, #48	; 0x30
 800a482:	3313      	adds	r3, #19
 800a484:	4618      	mov	r0, r3
 800a486:	f7fe fcb3 	bl	8008df0 <ld_word>
 800a48a:	4603      	mov	r3, r0
 800a48c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a48e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a490:	2b00      	cmp	r3, #0
 800a492:	d106      	bne.n	800a4a2 <find_volume+0x276>
 800a494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a496:	3330      	adds	r3, #48	; 0x30
 800a498:	3320      	adds	r3, #32
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7fe fcc0 	bl	8008e20 <ld_dword>
 800a4a0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a4:	3330      	adds	r3, #48	; 0x30
 800a4a6:	330e      	adds	r3, #14
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7fe fca1 	bl	8008df0 <ld_word>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a4b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d101      	bne.n	800a4bc <find_volume+0x290>
 800a4b8:	230d      	movs	r3, #13
 800a4ba:	e0f9      	b.n	800a6b0 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a4bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a4be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4c0:	4413      	add	r3, r2
 800a4c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4c4:	8912      	ldrh	r2, [r2, #8]
 800a4c6:	0912      	lsrs	r2, r2, #4
 800a4c8:	b292      	uxth	r2, r2
 800a4ca:	4413      	add	r3, r2
 800a4cc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a4ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d201      	bcs.n	800a4da <find_volume+0x2ae>
 800a4d6:	230d      	movs	r3, #13
 800a4d8:	e0ea      	b.n	800a6b0 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a4da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4e2:	8952      	ldrh	r2, [r2, #10]
 800a4e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4e8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d103      	bne.n	800a4f8 <find_volume+0x2cc>
 800a4f0:	230d      	movs	r3, #13
 800a4f2:	e0dd      	b.n	800a6b0 <find_volume+0x484>
 800a4f4:	200001a8 	.word	0x200001a8
		fmt = FS_FAT32;
 800a4f8:	2303      	movs	r3, #3
 800a4fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a500:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a504:	4293      	cmp	r3, r2
 800a506:	d802      	bhi.n	800a50e <find_volume+0x2e2>
 800a508:	2302      	movs	r3, #2
 800a50a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a510:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a514:	4293      	cmp	r3, r2
 800a516:	d802      	bhi.n	800a51e <find_volume+0x2f2>
 800a518:	2301      	movs	r3, #1
 800a51a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a520:	1c9a      	adds	r2, r3, #2
 800a522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a524:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a528:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a52a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a52c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a52e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a530:	441a      	add	r2, r3
 800a532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a534:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a536:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53a:	441a      	add	r2, r3
 800a53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a540:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a544:	2b03      	cmp	r3, #3
 800a546:	d11e      	bne.n	800a586 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54a:	3330      	adds	r3, #48	; 0x30
 800a54c:	332a      	adds	r3, #42	; 0x2a
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fe fc4e 	bl	8008df0 <ld_word>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d001      	beq.n	800a55e <find_volume+0x332>
 800a55a:	230d      	movs	r3, #13
 800a55c:	e0a8      	b.n	800a6b0 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a560:	891b      	ldrh	r3, [r3, #8]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d001      	beq.n	800a56a <find_volume+0x33e>
 800a566:	230d      	movs	r3, #13
 800a568:	e0a2      	b.n	800a6b0 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56c:	3330      	adds	r3, #48	; 0x30
 800a56e:	332c      	adds	r3, #44	; 0x2c
 800a570:	4618      	mov	r0, r3
 800a572:	f7fe fc55 	bl	8008e20 <ld_dword>
 800a576:	4602      	mov	r2, r0
 800a578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57e:	695b      	ldr	r3, [r3, #20]
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	647b      	str	r3, [r7, #68]	; 0x44
 800a584:	e01f      	b.n	800a5c6 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a588:	891b      	ldrh	r3, [r3, #8]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d101      	bne.n	800a592 <find_volume+0x366>
 800a58e:	230d      	movs	r3, #13
 800a590:	e08e      	b.n	800a6b0 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a594:	6a1a      	ldr	r2, [r3, #32]
 800a596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a598:	441a      	add	r2, r3
 800a59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a59e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d103      	bne.n	800a5ae <find_volume+0x382>
 800a5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a8:	695b      	ldr	r3, [r3, #20]
 800a5aa:	005b      	lsls	r3, r3, #1
 800a5ac:	e00a      	b.n	800a5c4 <find_volume+0x398>
 800a5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b0:	695a      	ldr	r2, [r3, #20]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	005b      	lsls	r3, r3, #1
 800a5b6:	4413      	add	r3, r2
 800a5b8:	085a      	lsrs	r2, r3, #1
 800a5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5bc:	695b      	ldr	r3, [r3, #20]
 800a5be:	f003 0301 	and.w	r3, r3, #1
 800a5c2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a5c4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c8:	699a      	ldr	r2, [r3, #24]
 800a5ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5cc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a5d0:	0a5b      	lsrs	r3, r3, #9
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d201      	bcs.n	800a5da <find_volume+0x3ae>
 800a5d6:	230d      	movs	r3, #13
 800a5d8:	e06a      	b.n	800a6b0 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e0:	611a      	str	r2, [r3, #16]
 800a5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e4:	691a      	ldr	r2, [r3, #16]
 800a5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e8:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ec:	2280      	movs	r2, #128	; 0x80
 800a5ee:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a5f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5f4:	2b03      	cmp	r3, #3
 800a5f6:	d149      	bne.n	800a68c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fa:	3330      	adds	r3, #48	; 0x30
 800a5fc:	3330      	adds	r3, #48	; 0x30
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fe fbf6 	bl	8008df0 <ld_word>
 800a604:	4603      	mov	r3, r0
 800a606:	2b01      	cmp	r3, #1
 800a608:	d140      	bne.n	800a68c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a60a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a60c:	3301      	adds	r3, #1
 800a60e:	4619      	mov	r1, r3
 800a610:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a612:	f7fe fe9d 	bl	8009350 <move_window>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d137      	bne.n	800a68c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800a61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61e:	2200      	movs	r2, #0
 800a620:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a624:	3330      	adds	r3, #48	; 0x30
 800a626:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7fe fbe0 	bl	8008df0 <ld_word>
 800a630:	4603      	mov	r3, r0
 800a632:	461a      	mov	r2, r3
 800a634:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a638:	429a      	cmp	r2, r3
 800a63a:	d127      	bne.n	800a68c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63e:	3330      	adds	r3, #48	; 0x30
 800a640:	4618      	mov	r0, r3
 800a642:	f7fe fbed 	bl	8008e20 <ld_dword>
 800a646:	4603      	mov	r3, r0
 800a648:	4a1b      	ldr	r2, [pc, #108]	; (800a6b8 <find_volume+0x48c>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d11e      	bne.n	800a68c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a650:	3330      	adds	r3, #48	; 0x30
 800a652:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a656:	4618      	mov	r0, r3
 800a658:	f7fe fbe2 	bl	8008e20 <ld_dword>
 800a65c:	4603      	mov	r3, r0
 800a65e:	4a17      	ldr	r2, [pc, #92]	; (800a6bc <find_volume+0x490>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d113      	bne.n	800a68c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a666:	3330      	adds	r3, #48	; 0x30
 800a668:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7fe fbd7 	bl	8008e20 <ld_dword>
 800a672:	4602      	mov	r2, r0
 800a674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a676:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67a:	3330      	adds	r3, #48	; 0x30
 800a67c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a680:	4618      	mov	r0, r3
 800a682:	f7fe fbcd 	bl	8008e20 <ld_dword>
 800a686:	4602      	mov	r2, r0
 800a688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a692:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a694:	4b0a      	ldr	r3, [pc, #40]	; (800a6c0 <find_volume+0x494>)
 800a696:	881b      	ldrh	r3, [r3, #0]
 800a698:	3301      	adds	r3, #1
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	4b08      	ldr	r3, [pc, #32]	; (800a6c0 <find_volume+0x494>)
 800a69e:	801a      	strh	r2, [r3, #0]
 800a6a0:	4b07      	ldr	r3, [pc, #28]	; (800a6c0 <find_volume+0x494>)
 800a6a2:	881a      	ldrh	r2, [r3, #0]
 800a6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a6a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6aa:	f7fe fde9 	bl	8009280 <clear_lock>
#endif
	return FR_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3758      	adds	r7, #88	; 0x58
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	41615252 	.word	0x41615252
 800a6bc:	61417272 	.word	0x61417272
 800a6c0:	200001ac 	.word	0x200001ac

0800a6c4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a6ce:	2309      	movs	r3, #9
 800a6d0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d01c      	beq.n	800a712 <validate+0x4e>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d018      	beq.n	800a712 <validate+0x4e>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d013      	beq.n	800a712 <validate+0x4e>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	889a      	ldrh	r2, [r3, #4]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	88db      	ldrh	r3, [r3, #6]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d10c      	bne.n	800a712 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	785b      	ldrb	r3, [r3, #1]
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fe fad8 	bl	8008cb4 <disk_status>
 800a704:	4603      	mov	r3, r0
 800a706:	f003 0301 	and.w	r3, r3, #1
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d101      	bne.n	800a712 <validate+0x4e>
			res = FR_OK;
 800a70e:	2300      	movs	r3, #0
 800a710:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a712:	7bfb      	ldrb	r3, [r7, #15]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d102      	bne.n	800a71e <validate+0x5a>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	e000      	b.n	800a720 <validate+0x5c>
 800a71e:	2300      	movs	r3, #0
 800a720:	683a      	ldr	r2, [r7, #0]
 800a722:	6013      	str	r3, [r2, #0]
	return res;
 800a724:	7bfb      	ldrb	r3, [r7, #15]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
	...

0800a730 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b088      	sub	sp, #32
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	4613      	mov	r3, r2
 800a73c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a742:	f107 0310 	add.w	r3, r7, #16
 800a746:	4618      	mov	r0, r3
 800a748:	f7ff fcd5 	bl	800a0f6 <get_ldnumber>
 800a74c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	2b00      	cmp	r3, #0
 800a752:	da01      	bge.n	800a758 <f_mount+0x28>
 800a754:	230b      	movs	r3, #11
 800a756:	e02b      	b.n	800a7b0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a758:	4a17      	ldr	r2, [pc, #92]	; (800a7b8 <f_mount+0x88>)
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a760:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d005      	beq.n	800a774 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a768:	69b8      	ldr	r0, [r7, #24]
 800a76a:	f7fe fd89 	bl	8009280 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	2200      	movs	r2, #0
 800a772:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d002      	beq.n	800a780 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2200      	movs	r2, #0
 800a77e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	490d      	ldr	r1, [pc, #52]	; (800a7b8 <f_mount+0x88>)
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d002      	beq.n	800a796 <f_mount+0x66>
 800a790:	79fb      	ldrb	r3, [r7, #7]
 800a792:	2b01      	cmp	r3, #1
 800a794:	d001      	beq.n	800a79a <f_mount+0x6a>
 800a796:	2300      	movs	r3, #0
 800a798:	e00a      	b.n	800a7b0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a79a:	f107 010c 	add.w	r1, r7, #12
 800a79e:	f107 0308 	add.w	r3, r7, #8
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7ff fd41 	bl	800a22c <find_volume>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a7ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3720      	adds	r7, #32
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	200001a8 	.word	0x200001a8

0800a7bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b098      	sub	sp, #96	; 0x60
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d101      	bne.n	800a7d4 <f_open+0x18>
 800a7d0:	2309      	movs	r3, #9
 800a7d2:	e1ad      	b.n	800ab30 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a7d4:	79fb      	ldrb	r3, [r7, #7]
 800a7d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7da:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a7dc:	79fa      	ldrb	r2, [r7, #7]
 800a7de:	f107 0110 	add.w	r1, r7, #16
 800a7e2:	f107 0308 	add.w	r3, r7, #8
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7ff fd20 	bl	800a22c <find_volume>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a7f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f040 8191 	bne.w	800ab1e <f_open+0x362>
		dj.obj.fs = fs;
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	f107 0314 	add.w	r3, r7, #20
 800a806:	4611      	mov	r1, r2
 800a808:	4618      	mov	r0, r3
 800a80a:	f7ff fc03 	bl	800a014 <follow_path>
 800a80e:	4603      	mov	r3, r0
 800a810:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a814:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d11a      	bne.n	800a852 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a81c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a820:	b25b      	sxtb	r3, r3
 800a822:	2b00      	cmp	r3, #0
 800a824:	da03      	bge.n	800a82e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a826:	2306      	movs	r3, #6
 800a828:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a82c:	e011      	b.n	800a852 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a82e:	79fb      	ldrb	r3, [r7, #7]
 800a830:	f023 0301 	bic.w	r3, r3, #1
 800a834:	2b00      	cmp	r3, #0
 800a836:	bf14      	ite	ne
 800a838:	2301      	movne	r3, #1
 800a83a:	2300      	moveq	r3, #0
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	461a      	mov	r2, r3
 800a840:	f107 0314 	add.w	r3, r7, #20
 800a844:	4611      	mov	r1, r2
 800a846:	4618      	mov	r0, r3
 800a848:	f7fe fbd2 	bl	8008ff0 <chk_lock>
 800a84c:	4603      	mov	r3, r0
 800a84e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a852:	79fb      	ldrb	r3, [r7, #7]
 800a854:	f003 031c 	and.w	r3, r3, #28
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d07f      	beq.n	800a95c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a85c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a860:	2b00      	cmp	r3, #0
 800a862:	d017      	beq.n	800a894 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a864:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a868:	2b04      	cmp	r3, #4
 800a86a:	d10e      	bne.n	800a88a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a86c:	f7fe fc1c 	bl	80090a8 <enq_lock>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d006      	beq.n	800a884 <f_open+0xc8>
 800a876:	f107 0314 	add.w	r3, r7, #20
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7ff fb03 	bl	8009e86 <dir_register>
 800a880:	4603      	mov	r3, r0
 800a882:	e000      	b.n	800a886 <f_open+0xca>
 800a884:	2312      	movs	r3, #18
 800a886:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a88a:	79fb      	ldrb	r3, [r7, #7]
 800a88c:	f043 0308 	orr.w	r3, r3, #8
 800a890:	71fb      	strb	r3, [r7, #7]
 800a892:	e010      	b.n	800a8b6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a894:	7ebb      	ldrb	r3, [r7, #26]
 800a896:	f003 0311 	and.w	r3, r3, #17
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d003      	beq.n	800a8a6 <f_open+0xea>
					res = FR_DENIED;
 800a89e:	2307      	movs	r3, #7
 800a8a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a8a4:	e007      	b.n	800a8b6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	f003 0304 	and.w	r3, r3, #4
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d002      	beq.n	800a8b6 <f_open+0xfa>
 800a8b0:	2308      	movs	r3, #8
 800a8b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a8b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d168      	bne.n	800a990 <f_open+0x1d4>
 800a8be:	79fb      	ldrb	r3, [r7, #7]
 800a8c0:	f003 0308 	and.w	r3, r3, #8
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d063      	beq.n	800a990 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a8c8:	f7fc fb14 	bl	8006ef4 <get_fattime>
 800a8cc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d0:	330e      	adds	r3, #14
 800a8d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7fe fae1 	bl	8008e9c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a8da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8dc:	3316      	adds	r3, #22
 800a8de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7fe fadb 	bl	8008e9c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8e8:	330b      	adds	r3, #11
 800a8ea:	2220      	movs	r2, #32
 800a8ec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8f2:	4611      	mov	r1, r2
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7ff fa32 	bl	8009d5e <ld_clust>
 800a8fa:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a900:	2200      	movs	r2, #0
 800a902:	4618      	mov	r0, r3
 800a904:	f7ff fa4a 	bl	8009d9c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a90a:	331c      	adds	r3, #28
 800a90c:	2100      	movs	r1, #0
 800a90e:	4618      	mov	r0, r3
 800a910:	f7fe fac4 	bl	8008e9c <st_dword>
					fs->wflag = 1;
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	2201      	movs	r2, #1
 800a918:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a91a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d037      	beq.n	800a990 <f_open+0x1d4>
						dw = fs->winsect;
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a924:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a926:	f107 0314 	add.w	r3, r7, #20
 800a92a:	2200      	movs	r2, #0
 800a92c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fe ff5d 	bl	80097ee <remove_chain>
 800a934:	4603      	mov	r3, r0
 800a936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a93a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d126      	bne.n	800a990 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a946:	4618      	mov	r0, r3
 800a948:	f7fe fd02 	bl	8009350 <move_window>
 800a94c:	4603      	mov	r3, r0
 800a94e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a956:	3a01      	subs	r2, #1
 800a958:	60da      	str	r2, [r3, #12]
 800a95a:	e019      	b.n	800a990 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a95c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a960:	2b00      	cmp	r3, #0
 800a962:	d115      	bne.n	800a990 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a964:	7ebb      	ldrb	r3, [r7, #26]
 800a966:	f003 0310 	and.w	r3, r3, #16
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d003      	beq.n	800a976 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a96e:	2304      	movs	r3, #4
 800a970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a974:	e00c      	b.n	800a990 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a976:	79fb      	ldrb	r3, [r7, #7]
 800a978:	f003 0302 	and.w	r3, r3, #2
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d007      	beq.n	800a990 <f_open+0x1d4>
 800a980:	7ebb      	ldrb	r3, [r7, #26]
 800a982:	f003 0301 	and.w	r3, r3, #1
 800a986:	2b00      	cmp	r3, #0
 800a988:	d002      	beq.n	800a990 <f_open+0x1d4>
						res = FR_DENIED;
 800a98a:	2307      	movs	r3, #7
 800a98c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a990:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a994:	2b00      	cmp	r3, #0
 800a996:	d128      	bne.n	800a9ea <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a998:	79fb      	ldrb	r3, [r7, #7]
 800a99a:	f003 0308 	and.w	r3, r3, #8
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d003      	beq.n	800a9aa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a9a2:	79fb      	ldrb	r3, [r7, #7]
 800a9a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9a8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a9b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a9b8:	79fb      	ldrb	r3, [r7, #7]
 800a9ba:	f023 0301 	bic.w	r3, r3, #1
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	bf14      	ite	ne
 800a9c2:	2301      	movne	r3, #1
 800a9c4:	2300      	moveq	r3, #0
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	f107 0314 	add.w	r3, r7, #20
 800a9ce:	4611      	mov	r1, r2
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7fe fb8b 	bl	80090ec <inc_lock>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	691b      	ldr	r3, [r3, #16]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d102      	bne.n	800a9ea <f_open+0x22e>
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a9ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f040 8095 	bne.w	800ab1e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9f8:	4611      	mov	r1, r2
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7ff f9af 	bl	8009d5e <ld_clust>
 800aa00:	4602      	mov	r2, r0
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aa06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa08:	331c      	adds	r3, #28
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7fe fa08 	bl	8008e20 <ld_dword>
 800aa10:	4602      	mov	r2, r0
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800aa1c:	693a      	ldr	r2, [r7, #16]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	88da      	ldrh	r2, [r3, #6]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	79fa      	ldrb	r2, [r7, #7]
 800aa2e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2200      	movs	r2, #0
 800aa34:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	3330      	adds	r3, #48	; 0x30
 800aa46:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7fe fa72 	bl	8008f36 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800aa52:	79fb      	ldrb	r3, [r7, #7]
 800aa54:	f003 0320 	and.w	r3, r3, #32
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d060      	beq.n	800ab1e <f_open+0x362>
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d05c      	beq.n	800ab1e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	68da      	ldr	r2, [r3, #12]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	895b      	ldrh	r3, [r3, #10]
 800aa70:	025b      	lsls	r3, r3, #9
 800aa72:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	657b      	str	r3, [r7, #84]	; 0x54
 800aa80:	e016      	b.n	800aab0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7fe fd1d 	bl	80094c6 <get_fat>
 800aa8c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800aa8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d802      	bhi.n	800aa9a <f_open+0x2de>
 800aa94:	2302      	movs	r3, #2
 800aa96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800aa9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaa0:	d102      	bne.n	800aaa8 <f_open+0x2ec>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aaa8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aaaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaac:	1ad3      	subs	r3, r2, r3
 800aaae:	657b      	str	r3, [r7, #84]	; 0x54
 800aab0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d103      	bne.n	800aac0 <f_open+0x304>
 800aab8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aaba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d8e0      	bhi.n	800aa82 <f_open+0x2c6>
				}
				fp->clust = clst;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aac4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800aac6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d127      	bne.n	800ab1e <f_open+0x362>
 800aace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d022      	beq.n	800ab1e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aadc:	4618      	mov	r0, r3
 800aade:	f7fe fcd3 	bl	8009488 <clust2sect>
 800aae2:	6478      	str	r0, [r7, #68]	; 0x44
 800aae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d103      	bne.n	800aaf2 <f_open+0x336>
						res = FR_INT_ERR;
 800aaea:	2302      	movs	r3, #2
 800aaec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aaf0:	e015      	b.n	800ab1e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800aaf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaf4:	0a5a      	lsrs	r2, r3, #9
 800aaf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaf8:	441a      	add	r2, r3
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	7858      	ldrb	r0, [r3, #1]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6a1a      	ldr	r2, [r3, #32]
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	f7fe f911 	bl	8008d34 <disk_read>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d002      	beq.n	800ab1e <f_open+0x362>
 800ab18:	2301      	movs	r3, #1
 800ab1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ab1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d002      	beq.n	800ab2c <f_open+0x370>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ab2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3760      	adds	r7, #96	; 0x60
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b08c      	sub	sp, #48	; 0x30
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	607a      	str	r2, [r7, #4]
 800ab44:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f107 0210 	add.w	r2, r7, #16
 800ab56:	4611      	mov	r1, r2
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7ff fdb3 	bl	800a6c4 <validate>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ab64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d107      	bne.n	800ab7c <f_write+0x44>
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	7d5b      	ldrb	r3, [r3, #21]
 800ab70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ab74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d002      	beq.n	800ab82 <f_write+0x4a>
 800ab7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab80:	e14b      	b.n	800ae1a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	7d1b      	ldrb	r3, [r3, #20]
 800ab86:	f003 0302 	and.w	r3, r3, #2
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d101      	bne.n	800ab92 <f_write+0x5a>
 800ab8e:	2307      	movs	r3, #7
 800ab90:	e143      	b.n	800ae1a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	699a      	ldr	r2, [r3, #24]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	441a      	add	r2, r3
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	f080 812d 	bcs.w	800adfe <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	699b      	ldr	r3, [r3, #24]
 800aba8:	43db      	mvns	r3, r3
 800abaa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800abac:	e127      	b.n	800adfe <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	699b      	ldr	r3, [r3, #24]
 800abb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	f040 80e3 	bne.w	800ad82 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	699b      	ldr	r3, [r3, #24]
 800abc0:	0a5b      	lsrs	r3, r3, #9
 800abc2:	693a      	ldr	r2, [r7, #16]
 800abc4:	8952      	ldrh	r2, [r2, #10]
 800abc6:	3a01      	subs	r2, #1
 800abc8:	4013      	ands	r3, r2
 800abca:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800abcc:	69bb      	ldr	r3, [r7, #24]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d143      	bne.n	800ac5a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	699b      	ldr	r3, [r3, #24]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10c      	bne.n	800abf4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800abe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d11a      	bne.n	800ac1c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2100      	movs	r1, #0
 800abea:	4618      	mov	r0, r3
 800abec:	f7fe fe64 	bl	80098b8 <create_chain>
 800abf0:	62b8      	str	r0, [r7, #40]	; 0x28
 800abf2:	e013      	b.n	800ac1c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d007      	beq.n	800ac0c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	699b      	ldr	r3, [r3, #24]
 800ac00:	4619      	mov	r1, r3
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f7fe fef0 	bl	80099e8 <clmt_clust>
 800ac08:	62b8      	str	r0, [r7, #40]	; 0x28
 800ac0a:	e007      	b.n	800ac1c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	69db      	ldr	r3, [r3, #28]
 800ac12:	4619      	mov	r1, r3
 800ac14:	4610      	mov	r0, r2
 800ac16:	f7fe fe4f 	bl	80098b8 <create_chain>
 800ac1a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ac1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f000 80f2 	beq.w	800ae08 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ac24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d104      	bne.n	800ac34 <f_write+0xfc>
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2202      	movs	r2, #2
 800ac2e:	755a      	strb	r2, [r3, #21]
 800ac30:	2302      	movs	r3, #2
 800ac32:	e0f2      	b.n	800ae1a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ac34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac3a:	d104      	bne.n	800ac46 <f_write+0x10e>
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	755a      	strb	r2, [r3, #21]
 800ac42:	2301      	movs	r3, #1
 800ac44:	e0e9      	b.n	800ae1a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac4a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d102      	bne.n	800ac5a <f_write+0x122>
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac58:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	7d1b      	ldrb	r3, [r3, #20]
 800ac5e:	b25b      	sxtb	r3, r3
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	da18      	bge.n	800ac96 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	7858      	ldrb	r0, [r3, #1]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6a1a      	ldr	r2, [r3, #32]
 800ac72:	2301      	movs	r3, #1
 800ac74:	f7fe f87e 	bl	8008d74 <disk_write>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d004      	beq.n	800ac88 <f_write+0x150>
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2201      	movs	r2, #1
 800ac82:	755a      	strb	r2, [r3, #21]
 800ac84:	2301      	movs	r3, #1
 800ac86:	e0c8      	b.n	800ae1a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	7d1b      	ldrb	r3, [r3, #20]
 800ac8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac90:	b2da      	uxtb	r2, r3
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ac96:	693a      	ldr	r2, [r7, #16]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	69db      	ldr	r3, [r3, #28]
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	4610      	mov	r0, r2
 800aca0:	f7fe fbf2 	bl	8009488 <clust2sect>
 800aca4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d104      	bne.n	800acb6 <f_write+0x17e>
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2202      	movs	r2, #2
 800acb0:	755a      	strb	r2, [r3, #21]
 800acb2:	2302      	movs	r3, #2
 800acb4:	e0b1      	b.n	800ae1a <f_write+0x2e2>
			sect += csect;
 800acb6:	697a      	ldr	r2, [r7, #20]
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	4413      	add	r3, r2
 800acbc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	0a5b      	lsrs	r3, r3, #9
 800acc2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800acc4:	6a3b      	ldr	r3, [r7, #32]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d03c      	beq.n	800ad44 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800acca:	69ba      	ldr	r2, [r7, #24]
 800accc:	6a3b      	ldr	r3, [r7, #32]
 800acce:	4413      	add	r3, r2
 800acd0:	693a      	ldr	r2, [r7, #16]
 800acd2:	8952      	ldrh	r2, [r2, #10]
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d905      	bls.n	800ace4 <f_write+0x1ac>
					cc = fs->csize - csect;
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	895b      	ldrh	r3, [r3, #10]
 800acdc:	461a      	mov	r2, r3
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	1ad3      	subs	r3, r2, r3
 800ace2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	7858      	ldrb	r0, [r3, #1]
 800ace8:	6a3b      	ldr	r3, [r7, #32]
 800acea:	697a      	ldr	r2, [r7, #20]
 800acec:	69f9      	ldr	r1, [r7, #28]
 800acee:	f7fe f841 	bl	8008d74 <disk_write>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d004      	beq.n	800ad02 <f_write+0x1ca>
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2201      	movs	r2, #1
 800acfc:	755a      	strb	r2, [r3, #21]
 800acfe:	2301      	movs	r3, #1
 800ad00:	e08b      	b.n	800ae1a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	6a1a      	ldr	r2, [r3, #32]
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	1ad3      	subs	r3, r2, r3
 800ad0a:	6a3a      	ldr	r2, [r7, #32]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d915      	bls.n	800ad3c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6a1a      	ldr	r2, [r3, #32]
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	1ad3      	subs	r3, r2, r3
 800ad1e:	025b      	lsls	r3, r3, #9
 800ad20:	69fa      	ldr	r2, [r7, #28]
 800ad22:	4413      	add	r3, r2
 800ad24:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad28:	4619      	mov	r1, r3
 800ad2a:	f7fe f8e3 	bl	8008ef4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	7d1b      	ldrb	r3, [r3, #20]
 800ad32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad36:	b2da      	uxtb	r2, r3
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ad3c:	6a3b      	ldr	r3, [r7, #32]
 800ad3e:	025b      	lsls	r3, r3, #9
 800ad40:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ad42:	e03f      	b.n	800adc4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	6a1b      	ldr	r3, [r3, #32]
 800ad48:	697a      	ldr	r2, [r7, #20]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d016      	beq.n	800ad7c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	699a      	ldr	r2, [r3, #24]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d210      	bcs.n	800ad7c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	7858      	ldrb	r0, [r3, #1]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad64:	2301      	movs	r3, #1
 800ad66:	697a      	ldr	r2, [r7, #20]
 800ad68:	f7fd ffe4 	bl	8008d34 <disk_read>
 800ad6c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d004      	beq.n	800ad7c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2201      	movs	r2, #1
 800ad76:	755a      	strb	r2, [r3, #21]
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e04e      	b.n	800ae1a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	697a      	ldr	r2, [r7, #20]
 800ad80:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	699b      	ldr	r3, [r3, #24]
 800ad86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad8a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ad8e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ad90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d901      	bls.n	800ad9c <f_write+0x264>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	699b      	ldr	r3, [r3, #24]
 800ada6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adaa:	4413      	add	r3, r2
 800adac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adae:	69f9      	ldr	r1, [r7, #28]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7fe f89f 	bl	8008ef4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	7d1b      	ldrb	r3, [r3, #20]
 800adba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800adbe:	b2da      	uxtb	r2, r3
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800adc4:	69fa      	ldr	r2, [r7, #28]
 800adc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc8:	4413      	add	r3, r2
 800adca:	61fb      	str	r3, [r7, #28]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	699a      	ldr	r2, [r3, #24]
 800add0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add2:	441a      	add	r2, r3
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	619a      	str	r2, [r3, #24]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	68da      	ldr	r2, [r3, #12]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	699b      	ldr	r3, [r3, #24]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	bf38      	it	cc
 800ade4:	461a      	movcc	r2, r3
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	60da      	str	r2, [r3, #12]
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf0:	441a      	add	r2, r3
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	601a      	str	r2, [r3, #0]
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f47f aed4 	bne.w	800abae <f_write+0x76>
 800ae06:	e000      	b.n	800ae0a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ae08:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	7d1b      	ldrb	r3, [r3, #20]
 800ae0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae12:	b2da      	uxtb	r2, r3
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ae18:	2300      	movs	r3, #0
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3730      	adds	r7, #48	; 0x30
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}

0800ae22 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b086      	sub	sp, #24
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f107 0208 	add.w	r2, r7, #8
 800ae30:	4611      	mov	r1, r2
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7ff fc46 	bl	800a6c4 <validate>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ae3c:	7dfb      	ldrb	r3, [r7, #23]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d168      	bne.n	800af14 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	7d1b      	ldrb	r3, [r3, #20]
 800ae46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d062      	beq.n	800af14 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	7d1b      	ldrb	r3, [r3, #20]
 800ae52:	b25b      	sxtb	r3, r3
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	da15      	bge.n	800ae84 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	7858      	ldrb	r0, [r3, #1]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a1a      	ldr	r2, [r3, #32]
 800ae66:	2301      	movs	r3, #1
 800ae68:	f7fd ff84 	bl	8008d74 <disk_write>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d001      	beq.n	800ae76 <f_sync+0x54>
 800ae72:	2301      	movs	r3, #1
 800ae74:	e04f      	b.n	800af16 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	7d1b      	ldrb	r3, [r3, #20]
 800ae7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae7e:	b2da      	uxtb	r2, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ae84:	f7fc f836 	bl	8006ef4 <get_fattime>
 800ae88:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ae8a:	68ba      	ldr	r2, [r7, #8]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae90:	4619      	mov	r1, r3
 800ae92:	4610      	mov	r0, r2
 800ae94:	f7fe fa5c 	bl	8009350 <move_window>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ae9c:	7dfb      	ldrb	r3, [r7, #23]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d138      	bne.n	800af14 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	330b      	adds	r3, #11
 800aeac:	781a      	ldrb	r2, [r3, #0]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	330b      	adds	r3, #11
 800aeb2:	f042 0220 	orr.w	r2, r2, #32
 800aeb6:	b2d2      	uxtb	r2, r2
 800aeb8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6818      	ldr	r0, [r3, #0]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	461a      	mov	r2, r3
 800aec4:	68f9      	ldr	r1, [r7, #12]
 800aec6:	f7fe ff69 	bl	8009d9c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f103 021c 	add.w	r2, r3, #28
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	4619      	mov	r1, r3
 800aed6:	4610      	mov	r0, r2
 800aed8:	f7fd ffe0 	bl	8008e9c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	3316      	adds	r3, #22
 800aee0:	6939      	ldr	r1, [r7, #16]
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fd ffda 	bl	8008e9c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	3312      	adds	r3, #18
 800aeec:	2100      	movs	r1, #0
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7fd ffb9 	bl	8008e66 <st_word>
					fs->wflag = 1;
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	2201      	movs	r2, #1
 800aef8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7fe fa55 	bl	80093ac <sync_fs>
 800af02:	4603      	mov	r3, r0
 800af04:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	7d1b      	ldrb	r3, [r3, #20]
 800af0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af0e:	b2da      	uxtb	r2, r3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800af14:	7dfb      	ldrb	r3, [r7, #23]
}
 800af16:	4618      	mov	r0, r3
 800af18:	3718      	adds	r7, #24
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b084      	sub	sp, #16
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f7ff ff7b 	bl	800ae22 <f_sync>
 800af2c:	4603      	mov	r3, r0
 800af2e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800af30:	7bfb      	ldrb	r3, [r7, #15]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d118      	bne.n	800af68 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f107 0208 	add.w	r2, r7, #8
 800af3c:	4611      	mov	r1, r2
 800af3e:	4618      	mov	r0, r3
 800af40:	f7ff fbc0 	bl	800a6c4 <validate>
 800af44:	4603      	mov	r3, r0
 800af46:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800af48:	7bfb      	ldrb	r3, [r7, #15]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10c      	bne.n	800af68 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	4618      	mov	r0, r3
 800af54:	f7fe f958 	bl	8009208 <dec_lock>
 800af58:	4603      	mov	r3, r0
 800af5a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800af5c:	7bfb      	ldrb	r3, [r7, #15]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d102      	bne.n	800af68 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800af68:	7bfb      	ldrb	r3, [r7, #15]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
	...

0800af74 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800af74:	b480      	push	{r7}
 800af76:	b087      	sub	sp, #28
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	4613      	mov	r3, r2
 800af80:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800af82:	2301      	movs	r3, #1
 800af84:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800af86:	2300      	movs	r3, #0
 800af88:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800af8a:	4b1f      	ldr	r3, [pc, #124]	; (800b008 <FATFS_LinkDriverEx+0x94>)
 800af8c:	7a5b      	ldrb	r3, [r3, #9]
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	2b00      	cmp	r3, #0
 800af92:	d131      	bne.n	800aff8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800af94:	4b1c      	ldr	r3, [pc, #112]	; (800b008 <FATFS_LinkDriverEx+0x94>)
 800af96:	7a5b      	ldrb	r3, [r3, #9]
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	461a      	mov	r2, r3
 800af9c:	4b1a      	ldr	r3, [pc, #104]	; (800b008 <FATFS_LinkDriverEx+0x94>)
 800af9e:	2100      	movs	r1, #0
 800afa0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800afa2:	4b19      	ldr	r3, [pc, #100]	; (800b008 <FATFS_LinkDriverEx+0x94>)
 800afa4:	7a5b      	ldrb	r3, [r3, #9]
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	4a17      	ldr	r2, [pc, #92]	; (800b008 <FATFS_LinkDriverEx+0x94>)
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	4413      	add	r3, r2
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800afb2:	4b15      	ldr	r3, [pc, #84]	; (800b008 <FATFS_LinkDriverEx+0x94>)
 800afb4:	7a5b      	ldrb	r3, [r3, #9]
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	461a      	mov	r2, r3
 800afba:	4b13      	ldr	r3, [pc, #76]	; (800b008 <FATFS_LinkDriverEx+0x94>)
 800afbc:	4413      	add	r3, r2
 800afbe:	79fa      	ldrb	r2, [r7, #7]
 800afc0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800afc2:	4b11      	ldr	r3, [pc, #68]	; (800b008 <FATFS_LinkDriverEx+0x94>)
 800afc4:	7a5b      	ldrb	r3, [r3, #9]
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	1c5a      	adds	r2, r3, #1
 800afca:	b2d1      	uxtb	r1, r2
 800afcc:	4a0e      	ldr	r2, [pc, #56]	; (800b008 <FATFS_LinkDriverEx+0x94>)
 800afce:	7251      	strb	r1, [r2, #9]
 800afd0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800afd2:	7dbb      	ldrb	r3, [r7, #22]
 800afd4:	3330      	adds	r3, #48	; 0x30
 800afd6:	b2da      	uxtb	r2, r3
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	3301      	adds	r3, #1
 800afe0:	223a      	movs	r2, #58	; 0x3a
 800afe2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	3302      	adds	r3, #2
 800afe8:	222f      	movs	r2, #47	; 0x2f
 800afea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	3303      	adds	r3, #3
 800aff0:	2200      	movs	r2, #0
 800aff2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800aff4:	2300      	movs	r3, #0
 800aff6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800aff8:	7dfb      	ldrb	r3, [r7, #23]
}
 800affa:	4618      	mov	r0, r3
 800affc:	371c      	adds	r7, #28
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr
 800b006:	bf00      	nop
 800b008:	200001d0 	.word	0x200001d0

0800b00c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b016:	2200      	movs	r2, #0
 800b018:	6839      	ldr	r1, [r7, #0]
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f7ff ffaa 	bl	800af74 <FATFS_LinkDriverEx>
 800b020:	4603      	mov	r3, r0
}
 800b022:	4618      	mov	r0, r3
 800b024:	3708      	adds	r7, #8
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
	...

0800b02c <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b085      	sub	sp, #20
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	460b      	mov	r3, r1
 800b036:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800b038:	2300      	movs	r3, #0
 800b03a:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800b03c:	2301      	movs	r3, #1
 800b03e:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800b040:	4b15      	ldr	r3, [pc, #84]	; (800b098 <FATFS_UnLinkDriverEx+0x6c>)
 800b042:	7a5b      	ldrb	r3, [r3, #9]
 800b044:	b2db      	uxtb	r3, r3
 800b046:	2b00      	cmp	r3, #0
 800b048:	d01e      	beq.n	800b088 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	3b30      	subs	r3, #48	; 0x30
 800b050:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800b052:	7bbb      	ldrb	r3, [r7, #14]
 800b054:	4a10      	ldr	r2, [pc, #64]	; (800b098 <FATFS_UnLinkDriverEx+0x6c>)
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	4413      	add	r3, r2
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d013      	beq.n	800b088 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800b060:	7bbb      	ldrb	r3, [r7, #14]
 800b062:	4a0d      	ldr	r2, [pc, #52]	; (800b098 <FATFS_UnLinkDriverEx+0x6c>)
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	4413      	add	r3, r2
 800b068:	2200      	movs	r2, #0
 800b06a:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800b06c:	7bbb      	ldrb	r3, [r7, #14]
 800b06e:	4a0a      	ldr	r2, [pc, #40]	; (800b098 <FATFS_UnLinkDriverEx+0x6c>)
 800b070:	4413      	add	r3, r2
 800b072:	2200      	movs	r2, #0
 800b074:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800b076:	4b08      	ldr	r3, [pc, #32]	; (800b098 <FATFS_UnLinkDriverEx+0x6c>)
 800b078:	7a5b      	ldrb	r3, [r3, #9]
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	3b01      	subs	r3, #1
 800b07e:	b2da      	uxtb	r2, r3
 800b080:	4b05      	ldr	r3, [pc, #20]	; (800b098 <FATFS_UnLinkDriverEx+0x6c>)
 800b082:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800b084:	2300      	movs	r3, #0
 800b086:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b088:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3714      	adds	r7, #20
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop
 800b098:	200001d0 	.word	0x200001d0

0800b09c <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800b0a4:	2100      	movs	r1, #0
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f7ff ffc0 	bl	800b02c <FATFS_UnLinkDriverEx>
 800b0ac:	4603      	mov	r3, r0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
	...

0800b0b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b0bc:	2200      	movs	r2, #0
 800b0be:	4912      	ldr	r1, [pc, #72]	; (800b108 <MX_USB_DEVICE_Init+0x50>)
 800b0c0:	4812      	ldr	r0, [pc, #72]	; (800b10c <MX_USB_DEVICE_Init+0x54>)
 800b0c2:	f7fc fc8d 	bl	80079e0 <USBD_Init>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d001      	beq.n	800b0d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b0cc:	f7f5 fc56 	bl	800097c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b0d0:	490f      	ldr	r1, [pc, #60]	; (800b110 <MX_USB_DEVICE_Init+0x58>)
 800b0d2:	480e      	ldr	r0, [pc, #56]	; (800b10c <MX_USB_DEVICE_Init+0x54>)
 800b0d4:	f7fc fcb4 	bl	8007a40 <USBD_RegisterClass>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d001      	beq.n	800b0e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b0de:	f7f5 fc4d 	bl	800097c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b0e2:	490c      	ldr	r1, [pc, #48]	; (800b114 <MX_USB_DEVICE_Init+0x5c>)
 800b0e4:	4809      	ldr	r0, [pc, #36]	; (800b10c <MX_USB_DEVICE_Init+0x54>)
 800b0e6:	f7fc fbd5 	bl	8007894 <USBD_CDC_RegisterInterface>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d001      	beq.n	800b0f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b0f0:	f7f5 fc44 	bl	800097c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b0f4:	4805      	ldr	r0, [pc, #20]	; (800b10c <MX_USB_DEVICE_Init+0x54>)
 800b0f6:	f7fc fcca 	bl	8007a8e <USBD_Start>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d001      	beq.n	800b104 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b100:	f7f5 fc3c 	bl	800097c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b104:	bf00      	nop
 800b106:	bd80      	pop	{r7, pc}
 800b108:	20000130 	.word	0x20000130
 800b10c:	200009ac 	.word	0x200009ac
 800b110:	20000018 	.word	0x20000018
 800b114:	2000011c 	.word	0x2000011c

0800b118 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b11c:	2200      	movs	r2, #0
 800b11e:	4905      	ldr	r1, [pc, #20]	; (800b134 <CDC_Init_FS+0x1c>)
 800b120:	4805      	ldr	r0, [pc, #20]	; (800b138 <CDC_Init_FS+0x20>)
 800b122:	f7fc fbcc 	bl	80078be <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b126:	4905      	ldr	r1, [pc, #20]	; (800b13c <CDC_Init_FS+0x24>)
 800b128:	4803      	ldr	r0, [pc, #12]	; (800b138 <CDC_Init_FS+0x20>)
 800b12a:	f7fc fbe6 	bl	80078fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b12e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b130:	4618      	mov	r0, r3
 800b132:	bd80      	pop	{r7, pc}
 800b134:	2000147c 	.word	0x2000147c
 800b138:	200009ac 	.word	0x200009ac
 800b13c:	20000c7c 	.word	0x20000c7c

0800b140 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b140:	b480      	push	{r7}
 800b142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b144:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b146:	4618      	mov	r0, r3
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr

0800b150 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b150:	b480      	push	{r7}
 800b152:	b085      	sub	sp, #20
 800b154:	af00      	add	r7, sp, #0
 800b156:	4603      	mov	r3, r0
 800b158:	6039      	str	r1, [r7, #0]
 800b15a:	71fb      	strb	r3, [r7, #7]
 800b15c:	4613      	mov	r3, r2
 800b15e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800b160:	4a49      	ldr	r2, [pc, #292]	; (800b288 <CDC_Control_FS+0x138>)
 800b162:	f107 0308 	add.w	r3, r7, #8
 800b166:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b16a:	6018      	str	r0, [r3, #0]
 800b16c:	3304      	adds	r3, #4
 800b16e:	8019      	strh	r1, [r3, #0]
 800b170:	3302      	adds	r3, #2
 800b172:	0c0a      	lsrs	r2, r1, #16
 800b174:	701a      	strb	r2, [r3, #0]
  switch(cmd)
 800b176:	79fb      	ldrb	r3, [r7, #7]
 800b178:	2b23      	cmp	r3, #35	; 0x23
 800b17a:	d87d      	bhi.n	800b278 <CDC_Control_FS+0x128>
 800b17c:	a201      	add	r2, pc, #4	; (adr r2, 800b184 <CDC_Control_FS+0x34>)
 800b17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b182:	bf00      	nop
 800b184:	0800b279 	.word	0x0800b279
 800b188:	0800b279 	.word	0x0800b279
 800b18c:	0800b279 	.word	0x0800b279
 800b190:	0800b279 	.word	0x0800b279
 800b194:	0800b279 	.word	0x0800b279
 800b198:	0800b279 	.word	0x0800b279
 800b19c:	0800b279 	.word	0x0800b279
 800b1a0:	0800b279 	.word	0x0800b279
 800b1a4:	0800b279 	.word	0x0800b279
 800b1a8:	0800b279 	.word	0x0800b279
 800b1ac:	0800b279 	.word	0x0800b279
 800b1b0:	0800b279 	.word	0x0800b279
 800b1b4:	0800b279 	.word	0x0800b279
 800b1b8:	0800b279 	.word	0x0800b279
 800b1bc:	0800b279 	.word	0x0800b279
 800b1c0:	0800b279 	.word	0x0800b279
 800b1c4:	0800b279 	.word	0x0800b279
 800b1c8:	0800b279 	.word	0x0800b279
 800b1cc:	0800b279 	.word	0x0800b279
 800b1d0:	0800b279 	.word	0x0800b279
 800b1d4:	0800b279 	.word	0x0800b279
 800b1d8:	0800b279 	.word	0x0800b279
 800b1dc:	0800b279 	.word	0x0800b279
 800b1e0:	0800b279 	.word	0x0800b279
 800b1e4:	0800b279 	.word	0x0800b279
 800b1e8:	0800b279 	.word	0x0800b279
 800b1ec:	0800b279 	.word	0x0800b279
 800b1f0:	0800b279 	.word	0x0800b279
 800b1f4:	0800b279 	.word	0x0800b279
 800b1f8:	0800b279 	.word	0x0800b279
 800b1fc:	0800b279 	.word	0x0800b279
 800b200:	0800b279 	.word	0x0800b279
 800b204:	0800b215 	.word	0x0800b215
 800b208:	0800b241 	.word	0x0800b241
 800b20c:	0800b279 	.word	0x0800b279
 800b210:	0800b279 	.word	0x0800b279
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
       tempbuf[0] = pbuf[0];
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	723b      	strb	r3, [r7, #8]
       tempbuf[1] = pbuf[1];
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	785b      	ldrb	r3, [r3, #1]
 800b21e:	727b      	strb	r3, [r7, #9]
       tempbuf[2] = pbuf[2];
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	789b      	ldrb	r3, [r3, #2]
 800b224:	72bb      	strb	r3, [r7, #10]
       tempbuf[3] = pbuf[3];
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	78db      	ldrb	r3, [r3, #3]
 800b22a:	72fb      	strb	r3, [r7, #11]
       tempbuf[4] = pbuf[4];
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	791b      	ldrb	r3, [r3, #4]
 800b230:	733b      	strb	r3, [r7, #12]
       tempbuf[5] = pbuf[5];
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	795b      	ldrb	r3, [r3, #5]
 800b236:	737b      	strb	r3, [r7, #13]
       tempbuf[6] = pbuf[6];
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	799b      	ldrb	r3, [r3, #6]
 800b23c:	73bb      	strb	r3, [r7, #14]
       break;
 800b23e:	e01c      	b.n	800b27a <CDC_Control_FS+0x12a>

     case CDC_GET_LINE_CODING:
       pbuf[0] = tempbuf[0];
 800b240:	7a3a      	ldrb	r2, [r7, #8]
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	701a      	strb	r2, [r3, #0]
       pbuf[1] = tempbuf[1];
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	3301      	adds	r3, #1
 800b24a:	7a7a      	ldrb	r2, [r7, #9]
 800b24c:	701a      	strb	r2, [r3, #0]
       pbuf[2] = tempbuf[2];
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	3302      	adds	r3, #2
 800b252:	7aba      	ldrb	r2, [r7, #10]
 800b254:	701a      	strb	r2, [r3, #0]
       pbuf[3] = tempbuf[3];
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	3303      	adds	r3, #3
 800b25a:	7afa      	ldrb	r2, [r7, #11]
 800b25c:	701a      	strb	r2, [r3, #0]
       pbuf[4] = tempbuf[4];
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	3304      	adds	r3, #4
 800b262:	7b3a      	ldrb	r2, [r7, #12]
 800b264:	701a      	strb	r2, [r3, #0]
       pbuf[5] = tempbuf[5];
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	3305      	adds	r3, #5
 800b26a:	7b7a      	ldrb	r2, [r7, #13]
 800b26c:	701a      	strb	r2, [r3, #0]
       pbuf[6] = tempbuf[6];
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	3306      	adds	r3, #6
 800b272:	7bba      	ldrb	r2, [r7, #14]
 800b274:	701a      	strb	r2, [r3, #0]
       break;
 800b276:	e000      	b.n	800b27a <CDC_Control_FS+0x12a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b278:	bf00      	nop
  }

  return (USBD_OK);
 800b27a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3714      	adds	r7, #20
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr
 800b288:	0800bca4 	.word	0x0800bca4

0800b28c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b296:	6879      	ldr	r1, [r7, #4]
 800b298:	4805      	ldr	r0, [pc, #20]	; (800b2b0 <CDC_Receive_FS+0x24>)
 800b29a:	f7fc fb2e 	bl	80078fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b29e:	4804      	ldr	r0, [pc, #16]	; (800b2b0 <CDC_Receive_FS+0x24>)
 800b2a0:	f7fc fb74 	bl	800798c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b2a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3708      	adds	r7, #8
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	200009ac 	.word	0x200009ac

0800b2b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	460b      	mov	r3, r1
 800b2be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b2c4:	4b0d      	ldr	r3, [pc, #52]	; (800b2fc <CDC_Transmit_FS+0x48>)
 800b2c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d001      	beq.n	800b2da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e00b      	b.n	800b2f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b2da:	887b      	ldrh	r3, [r7, #2]
 800b2dc:	461a      	mov	r2, r3
 800b2de:	6879      	ldr	r1, [r7, #4]
 800b2e0:	4806      	ldr	r0, [pc, #24]	; (800b2fc <CDC_Transmit_FS+0x48>)
 800b2e2:	f7fc faec 	bl	80078be <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b2e6:	4805      	ldr	r0, [pc, #20]	; (800b2fc <CDC_Transmit_FS+0x48>)
 800b2e8:	f7fc fb20 	bl	800792c <USBD_CDC_TransmitPacket>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	200009ac 	.word	0x200009ac

0800b300 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b300:	b480      	push	{r7}
 800b302:	b087      	sub	sp, #28
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	4613      	mov	r3, r2
 800b30c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b30e:	2300      	movs	r3, #0
 800b310:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b312:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b316:	4618      	mov	r0, r3
 800b318:	371c      	adds	r7, #28
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr
	...

0800b324 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	4603      	mov	r3, r0
 800b32c:	6039      	str	r1, [r7, #0]
 800b32e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	2212      	movs	r2, #18
 800b334:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b336:	4b03      	ldr	r3, [pc, #12]	; (800b344 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b338:	4618      	mov	r0, r3
 800b33a:	370c      	adds	r7, #12
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr
 800b344:	2000014c 	.word	0x2000014c

0800b348 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	4603      	mov	r3, r0
 800b350:	6039      	str	r1, [r7, #0]
 800b352:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	2204      	movs	r2, #4
 800b358:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b35a:	4b03      	ldr	r3, [pc, #12]	; (800b368 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr
 800b368:	20000160 	.word	0x20000160

0800b36c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	4603      	mov	r3, r0
 800b374:	6039      	str	r1, [r7, #0]
 800b376:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b378:	79fb      	ldrb	r3, [r7, #7]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d105      	bne.n	800b38a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	4907      	ldr	r1, [pc, #28]	; (800b3a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b382:	4808      	ldr	r0, [pc, #32]	; (800b3a4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b384:	f7fd fbb5 	bl	8008af2 <USBD_GetString>
 800b388:	e004      	b.n	800b394 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b38a:	683a      	ldr	r2, [r7, #0]
 800b38c:	4904      	ldr	r1, [pc, #16]	; (800b3a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b38e:	4805      	ldr	r0, [pc, #20]	; (800b3a4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b390:	f7fd fbaf 	bl	8008af2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b394:	4b02      	ldr	r3, [pc, #8]	; (800b3a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b396:	4618      	mov	r0, r3
 800b398:	3708      	adds	r7, #8
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	20001c7c 	.word	0x20001c7c
 800b3a4:	0800bcac 	.word	0x0800bcac

0800b3a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	6039      	str	r1, [r7, #0]
 800b3b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	4904      	ldr	r1, [pc, #16]	; (800b3c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b3b8:	4804      	ldr	r0, [pc, #16]	; (800b3cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b3ba:	f7fd fb9a 	bl	8008af2 <USBD_GetString>
  return USBD_StrDesc;
 800b3be:	4b02      	ldr	r3, [pc, #8]	; (800b3c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	20001c7c 	.word	0x20001c7c
 800b3cc:	0800bcc4 	.word	0x0800bcc4

0800b3d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	6039      	str	r1, [r7, #0]
 800b3da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	221a      	movs	r2, #26
 800b3e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b3e2:	f000 f843 	bl	800b46c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b3e6:	4b02      	ldr	r3, [pc, #8]	; (800b3f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	20000164 	.word	0x20000164

0800b3f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	6039      	str	r1, [r7, #0]
 800b3fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b400:	79fb      	ldrb	r3, [r7, #7]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d105      	bne.n	800b412 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b406:	683a      	ldr	r2, [r7, #0]
 800b408:	4907      	ldr	r1, [pc, #28]	; (800b428 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b40a:	4808      	ldr	r0, [pc, #32]	; (800b42c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b40c:	f7fd fb71 	bl	8008af2 <USBD_GetString>
 800b410:	e004      	b.n	800b41c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	4904      	ldr	r1, [pc, #16]	; (800b428 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b416:	4805      	ldr	r0, [pc, #20]	; (800b42c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b418:	f7fd fb6b 	bl	8008af2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b41c:	4b02      	ldr	r3, [pc, #8]	; (800b428 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3708      	adds	r7, #8
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	20001c7c 	.word	0x20001c7c
 800b42c:	0800bcd8 	.word	0x0800bcd8

0800b430 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
 800b436:	4603      	mov	r3, r0
 800b438:	6039      	str	r1, [r7, #0]
 800b43a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b43c:	79fb      	ldrb	r3, [r7, #7]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d105      	bne.n	800b44e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b442:	683a      	ldr	r2, [r7, #0]
 800b444:	4907      	ldr	r1, [pc, #28]	; (800b464 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b446:	4808      	ldr	r0, [pc, #32]	; (800b468 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b448:	f7fd fb53 	bl	8008af2 <USBD_GetString>
 800b44c:	e004      	b.n	800b458 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b44e:	683a      	ldr	r2, [r7, #0]
 800b450:	4904      	ldr	r1, [pc, #16]	; (800b464 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b452:	4805      	ldr	r0, [pc, #20]	; (800b468 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b454:	f7fd fb4d 	bl	8008af2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b458:	4b02      	ldr	r3, [pc, #8]	; (800b464 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3708      	adds	r7, #8
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	20001c7c 	.word	0x20001c7c
 800b468:	0800bce4 	.word	0x0800bce4

0800b46c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b472:	4b0f      	ldr	r3, [pc, #60]	; (800b4b0 <Get_SerialNum+0x44>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b478:	4b0e      	ldr	r3, [pc, #56]	; (800b4b4 <Get_SerialNum+0x48>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b47e:	4b0e      	ldr	r3, [pc, #56]	; (800b4b8 <Get_SerialNum+0x4c>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b484:	68fa      	ldr	r2, [r7, #12]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4413      	add	r3, r2
 800b48a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d009      	beq.n	800b4a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b492:	2208      	movs	r2, #8
 800b494:	4909      	ldr	r1, [pc, #36]	; (800b4bc <Get_SerialNum+0x50>)
 800b496:	68f8      	ldr	r0, [r7, #12]
 800b498:	f000 f814 	bl	800b4c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b49c:	2204      	movs	r2, #4
 800b49e:	4908      	ldr	r1, [pc, #32]	; (800b4c0 <Get_SerialNum+0x54>)
 800b4a0:	68b8      	ldr	r0, [r7, #8]
 800b4a2:	f000 f80f 	bl	800b4c4 <IntToUnicode>
  }
}
 800b4a6:	bf00      	nop
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	1fff7a10 	.word	0x1fff7a10
 800b4b4:	1fff7a14 	.word	0x1fff7a14
 800b4b8:	1fff7a18 	.word	0x1fff7a18
 800b4bc:	20000166 	.word	0x20000166
 800b4c0:	20000176 	.word	0x20000176

0800b4c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b087      	sub	sp, #28
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	75fb      	strb	r3, [r7, #23]
 800b4da:	e027      	b.n	800b52c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	0f1b      	lsrs	r3, r3, #28
 800b4e0:	2b09      	cmp	r3, #9
 800b4e2:	d80b      	bhi.n	800b4fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	0f1b      	lsrs	r3, r3, #28
 800b4e8:	b2da      	uxtb	r2, r3
 800b4ea:	7dfb      	ldrb	r3, [r7, #23]
 800b4ec:	005b      	lsls	r3, r3, #1
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	440b      	add	r3, r1
 800b4f4:	3230      	adds	r2, #48	; 0x30
 800b4f6:	b2d2      	uxtb	r2, r2
 800b4f8:	701a      	strb	r2, [r3, #0]
 800b4fa:	e00a      	b.n	800b512 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	0f1b      	lsrs	r3, r3, #28
 800b500:	b2da      	uxtb	r2, r3
 800b502:	7dfb      	ldrb	r3, [r7, #23]
 800b504:	005b      	lsls	r3, r3, #1
 800b506:	4619      	mov	r1, r3
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	440b      	add	r3, r1
 800b50c:	3237      	adds	r2, #55	; 0x37
 800b50e:	b2d2      	uxtb	r2, r2
 800b510:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	011b      	lsls	r3, r3, #4
 800b516:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b518:	7dfb      	ldrb	r3, [r7, #23]
 800b51a:	005b      	lsls	r3, r3, #1
 800b51c:	3301      	adds	r3, #1
 800b51e:	68ba      	ldr	r2, [r7, #8]
 800b520:	4413      	add	r3, r2
 800b522:	2200      	movs	r2, #0
 800b524:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b526:	7dfb      	ldrb	r3, [r7, #23]
 800b528:	3301      	adds	r3, #1
 800b52a:	75fb      	strb	r3, [r7, #23]
 800b52c:	7dfa      	ldrb	r2, [r7, #23]
 800b52e:	79fb      	ldrb	r3, [r7, #7]
 800b530:	429a      	cmp	r2, r3
 800b532:	d3d3      	bcc.n	800b4dc <IntToUnicode+0x18>
  }
}
 800b534:	bf00      	nop
 800b536:	bf00      	nop
 800b538:	371c      	adds	r7, #28
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr
	...

0800b544 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b08a      	sub	sp, #40	; 0x28
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b54c:	f107 0314 	add.w	r3, r7, #20
 800b550:	2200      	movs	r2, #0
 800b552:	601a      	str	r2, [r3, #0]
 800b554:	605a      	str	r2, [r3, #4]
 800b556:	609a      	str	r2, [r3, #8]
 800b558:	60da      	str	r2, [r3, #12]
 800b55a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b564:	d13a      	bne.n	800b5dc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b566:	2300      	movs	r3, #0
 800b568:	613b      	str	r3, [r7, #16]
 800b56a:	4b1e      	ldr	r3, [pc, #120]	; (800b5e4 <HAL_PCD_MspInit+0xa0>)
 800b56c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b56e:	4a1d      	ldr	r2, [pc, #116]	; (800b5e4 <HAL_PCD_MspInit+0xa0>)
 800b570:	f043 0301 	orr.w	r3, r3, #1
 800b574:	6313      	str	r3, [r2, #48]	; 0x30
 800b576:	4b1b      	ldr	r3, [pc, #108]	; (800b5e4 <HAL_PCD_MspInit+0xa0>)
 800b578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b57a:	f003 0301 	and.w	r3, r3, #1
 800b57e:	613b      	str	r3, [r7, #16]
 800b580:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b582:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b588:	2302      	movs	r3, #2
 800b58a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b58c:	2300      	movs	r3, #0
 800b58e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b590:	2303      	movs	r3, #3
 800b592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b594:	230a      	movs	r3, #10
 800b596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b598:	f107 0314 	add.w	r3, r7, #20
 800b59c:	4619      	mov	r1, r3
 800b59e:	4812      	ldr	r0, [pc, #72]	; (800b5e8 <HAL_PCD_MspInit+0xa4>)
 800b5a0:	f7f6 f8ee 	bl	8001780 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b5a4:	4b0f      	ldr	r3, [pc, #60]	; (800b5e4 <HAL_PCD_MspInit+0xa0>)
 800b5a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5a8:	4a0e      	ldr	r2, [pc, #56]	; (800b5e4 <HAL_PCD_MspInit+0xa0>)
 800b5aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5ae:	6353      	str	r3, [r2, #52]	; 0x34
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	60fb      	str	r3, [r7, #12]
 800b5b4:	4b0b      	ldr	r3, [pc, #44]	; (800b5e4 <HAL_PCD_MspInit+0xa0>)
 800b5b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5b8:	4a0a      	ldr	r2, [pc, #40]	; (800b5e4 <HAL_PCD_MspInit+0xa0>)
 800b5ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b5be:	6453      	str	r3, [r2, #68]	; 0x44
 800b5c0:	4b08      	ldr	r3, [pc, #32]	; (800b5e4 <HAL_PCD_MspInit+0xa0>)
 800b5c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b5c8:	60fb      	str	r3, [r7, #12]
 800b5ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	2043      	movs	r0, #67	; 0x43
 800b5d2:	f7f5 fd00 	bl	8000fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b5d6:	2043      	movs	r0, #67	; 0x43
 800b5d8:	f7f5 fd19 	bl	800100e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b5dc:	bf00      	nop
 800b5de:	3728      	adds	r7, #40	; 0x28
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	40023800 	.word	0x40023800
 800b5e8:	40020000 	.word	0x40020000

0800b5ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b600:	4619      	mov	r1, r3
 800b602:	4610      	mov	r0, r2
 800b604:	f7fc fa8e 	bl	8007b24 <USBD_LL_SetupStage>
}
 800b608:	bf00      	nop
 800b60a:	3708      	adds	r7, #8
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	460b      	mov	r3, r1
 800b61a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b622:	78fa      	ldrb	r2, [r7, #3]
 800b624:	6879      	ldr	r1, [r7, #4]
 800b626:	4613      	mov	r3, r2
 800b628:	00db      	lsls	r3, r3, #3
 800b62a:	1a9b      	subs	r3, r3, r2
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	440b      	add	r3, r1
 800b630:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	78fb      	ldrb	r3, [r7, #3]
 800b638:	4619      	mov	r1, r3
 800b63a:	f7fc fac8 	bl	8007bce <USBD_LL_DataOutStage>
}
 800b63e:	bf00      	nop
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b082      	sub	sp, #8
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
 800b64e:	460b      	mov	r3, r1
 800b650:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b658:	78fa      	ldrb	r2, [r7, #3]
 800b65a:	6879      	ldr	r1, [r7, #4]
 800b65c:	4613      	mov	r3, r2
 800b65e:	00db      	lsls	r3, r3, #3
 800b660:	1a9b      	subs	r3, r3, r2
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	440b      	add	r3, r1
 800b666:	3348      	adds	r3, #72	; 0x48
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	78fb      	ldrb	r3, [r7, #3]
 800b66c:	4619      	mov	r1, r3
 800b66e:	f7fc fb11 	bl	8007c94 <USBD_LL_DataInStage>
}
 800b672:	bf00      	nop
 800b674:	3708      	adds	r7, #8
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}

0800b67a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b082      	sub	sp, #8
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b688:	4618      	mov	r0, r3
 800b68a:	f7fc fc25 	bl	8007ed8 <USBD_LL_SOF>
}
 800b68e:	bf00      	nop
 800b690:	3708      	adds	r7, #8
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b696:	b580      	push	{r7, lr}
 800b698:	b084      	sub	sp, #16
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	68db      	ldr	r3, [r3, #12]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d102      	bne.n	800b6b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	73fb      	strb	r3, [r7, #15]
 800b6ae:	e008      	b.n	800b6c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	2b02      	cmp	r3, #2
 800b6b6:	d102      	bne.n	800b6be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	73fb      	strb	r3, [r7, #15]
 800b6bc:	e001      	b.n	800b6c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b6be:	f7f5 f95d 	bl	800097c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b6c8:	7bfa      	ldrb	r2, [r7, #15]
 800b6ca:	4611      	mov	r1, r2
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7fc fbc5 	bl	8007e5c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7fc fb71 	bl	8007dc0 <USBD_LL_Reset>
}
 800b6de:	bf00      	nop
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
	...

0800b6e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7fc fbc0 	bl	8007e7c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	6812      	ldr	r2, [r2, #0]
 800b70a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b70e:	f043 0301 	orr.w	r3, r3, #1
 800b712:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6a1b      	ldr	r3, [r3, #32]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d005      	beq.n	800b728 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b71c:	4b04      	ldr	r3, [pc, #16]	; (800b730 <HAL_PCD_SuspendCallback+0x48>)
 800b71e:	691b      	ldr	r3, [r3, #16]
 800b720:	4a03      	ldr	r2, [pc, #12]	; (800b730 <HAL_PCD_SuspendCallback+0x48>)
 800b722:	f043 0306 	orr.w	r3, r3, #6
 800b726:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b728:	bf00      	nop
 800b72a:	3708      	adds	r7, #8
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	e000ed00 	.word	0xe000ed00

0800b734 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b742:	4618      	mov	r0, r3
 800b744:	f7fc fbb0 	bl	8007ea8 <USBD_LL_Resume>
}
 800b748:	bf00      	nop
 800b74a:	3708      	adds	r7, #8
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	460b      	mov	r3, r1
 800b75a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b762:	78fa      	ldrb	r2, [r7, #3]
 800b764:	4611      	mov	r1, r2
 800b766:	4618      	mov	r0, r3
 800b768:	f7fc fbfe 	bl	8007f68 <USBD_LL_IsoOUTIncomplete>
}
 800b76c:	bf00      	nop
 800b76e:	3708      	adds	r7, #8
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	460b      	mov	r3, r1
 800b77e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b786:	78fa      	ldrb	r2, [r7, #3]
 800b788:	4611      	mov	r1, r2
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7fc fbc6 	bl	8007f1c <USBD_LL_IsoINIncomplete>
}
 800b790:	bf00      	nop
 800b792:	3708      	adds	r7, #8
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7fc fc04 	bl	8007fb4 <USBD_LL_DevConnected>
}
 800b7ac:	bf00      	nop
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7fc fc01 	bl	8007fca <USBD_LL_DevDisconnected>
}
 800b7c8:	bf00      	nop
 800b7ca:	3708      	adds	r7, #8
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d13c      	bne.n	800b85a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b7e0:	4a20      	ldr	r2, [pc, #128]	; (800b864 <USBD_LL_Init+0x94>)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	4a1e      	ldr	r2, [pc, #120]	; (800b864 <USBD_LL_Init+0x94>)
 800b7ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b7f0:	4b1c      	ldr	r3, [pc, #112]	; (800b864 <USBD_LL_Init+0x94>)
 800b7f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b7f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b7f8:	4b1a      	ldr	r3, [pc, #104]	; (800b864 <USBD_LL_Init+0x94>)
 800b7fa:	2204      	movs	r2, #4
 800b7fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b7fe:	4b19      	ldr	r3, [pc, #100]	; (800b864 <USBD_LL_Init+0x94>)
 800b800:	2202      	movs	r2, #2
 800b802:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b804:	4b17      	ldr	r3, [pc, #92]	; (800b864 <USBD_LL_Init+0x94>)
 800b806:	2200      	movs	r2, #0
 800b808:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b80a:	4b16      	ldr	r3, [pc, #88]	; (800b864 <USBD_LL_Init+0x94>)
 800b80c:	2202      	movs	r2, #2
 800b80e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b810:	4b14      	ldr	r3, [pc, #80]	; (800b864 <USBD_LL_Init+0x94>)
 800b812:	2200      	movs	r2, #0
 800b814:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b816:	4b13      	ldr	r3, [pc, #76]	; (800b864 <USBD_LL_Init+0x94>)
 800b818:	2200      	movs	r2, #0
 800b81a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b81c:	4b11      	ldr	r3, [pc, #68]	; (800b864 <USBD_LL_Init+0x94>)
 800b81e:	2200      	movs	r2, #0
 800b820:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b822:	4b10      	ldr	r3, [pc, #64]	; (800b864 <USBD_LL_Init+0x94>)
 800b824:	2200      	movs	r2, #0
 800b826:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b828:	4b0e      	ldr	r3, [pc, #56]	; (800b864 <USBD_LL_Init+0x94>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b82e:	480d      	ldr	r0, [pc, #52]	; (800b864 <USBD_LL_Init+0x94>)
 800b830:	f7f6 f98d 	bl	8001b4e <HAL_PCD_Init>
 800b834:	4603      	mov	r3, r0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d001      	beq.n	800b83e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b83a:	f7f5 f89f 	bl	800097c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b83e:	2180      	movs	r1, #128	; 0x80
 800b840:	4808      	ldr	r0, [pc, #32]	; (800b864 <USBD_LL_Init+0x94>)
 800b842:	f7f7 faea 	bl	8002e1a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b846:	2240      	movs	r2, #64	; 0x40
 800b848:	2100      	movs	r1, #0
 800b84a:	4806      	ldr	r0, [pc, #24]	; (800b864 <USBD_LL_Init+0x94>)
 800b84c:	f7f7 fa9e 	bl	8002d8c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b850:	2280      	movs	r2, #128	; 0x80
 800b852:	2101      	movs	r1, #1
 800b854:	4803      	ldr	r0, [pc, #12]	; (800b864 <USBD_LL_Init+0x94>)
 800b856:	f7f7 fa99 	bl	8002d8c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b85a:	2300      	movs	r3, #0
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3708      	adds	r7, #8
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}
 800b864:	20001e7c 	.word	0x20001e7c

0800b868 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b084      	sub	sp, #16
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b870:	2300      	movs	r3, #0
 800b872:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b874:	2300      	movs	r3, #0
 800b876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b87e:	4618      	mov	r0, r3
 800b880:	f7f6 fa82 	bl	8001d88 <HAL_PCD_Start>
 800b884:	4603      	mov	r3, r0
 800b886:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b888:	7bfb      	ldrb	r3, [r7, #15]
 800b88a:	4618      	mov	r0, r3
 800b88c:	f000 f942 	bl	800bb14 <USBD_Get_USB_Status>
 800b890:	4603      	mov	r3, r0
 800b892:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b894:	7bbb      	ldrb	r3, [r7, #14]
}
 800b896:	4618      	mov	r0, r3
 800b898:	3710      	adds	r7, #16
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b084      	sub	sp, #16
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	4608      	mov	r0, r1
 800b8a8:	4611      	mov	r1, r2
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	70fb      	strb	r3, [r7, #3]
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	70bb      	strb	r3, [r7, #2]
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b8c6:	78bb      	ldrb	r3, [r7, #2]
 800b8c8:	883a      	ldrh	r2, [r7, #0]
 800b8ca:	78f9      	ldrb	r1, [r7, #3]
 800b8cc:	f7f6 fe66 	bl	800259c <HAL_PCD_EP_Open>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8d4:	7bfb      	ldrb	r3, [r7, #15]
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f000 f91c 	bl	800bb14 <USBD_Get_USB_Status>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b084      	sub	sp, #16
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b904:	78fa      	ldrb	r2, [r7, #3]
 800b906:	4611      	mov	r1, r2
 800b908:	4618      	mov	r0, r3
 800b90a:	f7f6 feaf 	bl	800266c <HAL_PCD_EP_Close>
 800b90e:	4603      	mov	r3, r0
 800b910:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b912:	7bfb      	ldrb	r3, [r7, #15]
 800b914:	4618      	mov	r0, r3
 800b916:	f000 f8fd 	bl	800bb14 <USBD_Get_USB_Status>
 800b91a:	4603      	mov	r3, r0
 800b91c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b91e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	460b      	mov	r3, r1
 800b932:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b934:	2300      	movs	r3, #0
 800b936:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b938:	2300      	movs	r3, #0
 800b93a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b942:	78fa      	ldrb	r2, [r7, #3]
 800b944:	4611      	mov	r1, r2
 800b946:	4618      	mov	r0, r3
 800b948:	f7f6 ff87 	bl	800285a <HAL_PCD_EP_SetStall>
 800b94c:	4603      	mov	r3, r0
 800b94e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b950:	7bfb      	ldrb	r3, [r7, #15]
 800b952:	4618      	mov	r0, r3
 800b954:	f000 f8de 	bl	800bb14 <USBD_Get_USB_Status>
 800b958:	4603      	mov	r3, r0
 800b95a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b95c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b084      	sub	sp, #16
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
 800b96e:	460b      	mov	r3, r1
 800b970:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b972:	2300      	movs	r3, #0
 800b974:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b976:	2300      	movs	r3, #0
 800b978:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b980:	78fa      	ldrb	r2, [r7, #3]
 800b982:	4611      	mov	r1, r2
 800b984:	4618      	mov	r0, r3
 800b986:	f7f6 ffcc 	bl	8002922 <HAL_PCD_EP_ClrStall>
 800b98a:	4603      	mov	r3, r0
 800b98c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b98e:	7bfb      	ldrb	r3, [r7, #15]
 800b990:	4618      	mov	r0, r3
 800b992:	f000 f8bf 	bl	800bb14 <USBD_Get_USB_Status>
 800b996:	4603      	mov	r3, r0
 800b998:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b99a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3710      	adds	r7, #16
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b085      	sub	sp, #20
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b9b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b9b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	da0b      	bge.n	800b9d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b9c0:	78fb      	ldrb	r3, [r7, #3]
 800b9c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9c6:	68f9      	ldr	r1, [r7, #12]
 800b9c8:	4613      	mov	r3, r2
 800b9ca:	00db      	lsls	r3, r3, #3
 800b9cc:	1a9b      	subs	r3, r3, r2
 800b9ce:	009b      	lsls	r3, r3, #2
 800b9d0:	440b      	add	r3, r1
 800b9d2:	333e      	adds	r3, #62	; 0x3e
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	e00b      	b.n	800b9f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b9d8:	78fb      	ldrb	r3, [r7, #3]
 800b9da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9de:	68f9      	ldr	r1, [r7, #12]
 800b9e0:	4613      	mov	r3, r2
 800b9e2:	00db      	lsls	r3, r3, #3
 800b9e4:	1a9b      	subs	r3, r3, r2
 800b9e6:	009b      	lsls	r3, r3, #2
 800b9e8:	440b      	add	r3, r1
 800b9ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b9ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3714      	adds	r7, #20
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	460b      	mov	r3, r1
 800ba06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba16:	78fa      	ldrb	r2, [r7, #3]
 800ba18:	4611      	mov	r1, r2
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7f6 fd99 	bl	8002552 <HAL_PCD_SetAddress>
 800ba20:	4603      	mov	r3, r0
 800ba22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba24:	7bfb      	ldrb	r3, [r7, #15]
 800ba26:	4618      	mov	r0, r3
 800ba28:	f000 f874 	bl	800bb14 <USBD_Get_USB_Status>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba30:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b086      	sub	sp, #24
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	60f8      	str	r0, [r7, #12]
 800ba42:	607a      	str	r2, [r7, #4]
 800ba44:	603b      	str	r3, [r7, #0]
 800ba46:	460b      	mov	r3, r1
 800ba48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ba58:	7af9      	ldrb	r1, [r7, #11]
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	f7f6 feb2 	bl	80027c6 <HAL_PCD_EP_Transmit>
 800ba62:	4603      	mov	r3, r0
 800ba64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba66:	7dfb      	ldrb	r3, [r7, #23]
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f000 f853 	bl	800bb14 <USBD_Get_USB_Status>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ba72:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3718      	adds	r7, #24
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b086      	sub	sp, #24
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	607a      	str	r2, [r7, #4]
 800ba86:	603b      	str	r3, [r7, #0]
 800ba88:	460b      	mov	r3, r1
 800ba8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba90:	2300      	movs	r3, #0
 800ba92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ba9a:	7af9      	ldrb	r1, [r7, #11]
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	f7f6 fe2e 	bl	8002700 <HAL_PCD_EP_Receive>
 800baa4:	4603      	mov	r3, r0
 800baa6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baa8:	7dfb      	ldrb	r3, [r7, #23]
 800baaa:	4618      	mov	r0, r3
 800baac:	f000 f832 	bl	800bb14 <USBD_Get_USB_Status>
 800bab0:	4603      	mov	r3, r0
 800bab2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bab4:	7dbb      	ldrb	r3, [r7, #22]
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3718      	adds	r7, #24
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b082      	sub	sp, #8
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
 800bac6:	460b      	mov	r3, r1
 800bac8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bad0:	78fa      	ldrb	r2, [r7, #3]
 800bad2:	4611      	mov	r1, r2
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7f6 fe5e 	bl	8002796 <HAL_PCD_EP_GetRxCount>
 800bada:	4603      	mov	r3, r0
}
 800badc:	4618      	mov	r0, r3
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800baec:	4b03      	ldr	r3, [pc, #12]	; (800bafc <USBD_static_malloc+0x18>)
}
 800baee:	4618      	mov	r0, r3
 800baf0:	370c      	adds	r7, #12
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr
 800bafa:	bf00      	nop
 800bafc:	200001dc 	.word	0x200001dc

0800bb00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b083      	sub	sp, #12
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]

}
 800bb08:	bf00      	nop
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b085      	sub	sp, #20
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bb22:	79fb      	ldrb	r3, [r7, #7]
 800bb24:	2b03      	cmp	r3, #3
 800bb26:	d817      	bhi.n	800bb58 <USBD_Get_USB_Status+0x44>
 800bb28:	a201      	add	r2, pc, #4	; (adr r2, 800bb30 <USBD_Get_USB_Status+0x1c>)
 800bb2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2e:	bf00      	nop
 800bb30:	0800bb41 	.word	0x0800bb41
 800bb34:	0800bb47 	.word	0x0800bb47
 800bb38:	0800bb4d 	.word	0x0800bb4d
 800bb3c:	0800bb53 	.word	0x0800bb53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bb40:	2300      	movs	r3, #0
 800bb42:	73fb      	strb	r3, [r7, #15]
    break;
 800bb44:	e00b      	b.n	800bb5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb46:	2303      	movs	r3, #3
 800bb48:	73fb      	strb	r3, [r7, #15]
    break;
 800bb4a:	e008      	b.n	800bb5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	73fb      	strb	r3, [r7, #15]
    break;
 800bb50:	e005      	b.n	800bb5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb52:	2303      	movs	r3, #3
 800bb54:	73fb      	strb	r3, [r7, #15]
    break;
 800bb56:	e002      	b.n	800bb5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bb58:	2303      	movs	r3, #3
 800bb5a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb5c:	bf00      	nop
  }
  return usb_status;
 800bb5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3714      	adds	r7, #20
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr

0800bb6c <__libc_init_array>:
 800bb6c:	b570      	push	{r4, r5, r6, lr}
 800bb6e:	4d0d      	ldr	r5, [pc, #52]	; (800bba4 <__libc_init_array+0x38>)
 800bb70:	4c0d      	ldr	r4, [pc, #52]	; (800bba8 <__libc_init_array+0x3c>)
 800bb72:	1b64      	subs	r4, r4, r5
 800bb74:	10a4      	asrs	r4, r4, #2
 800bb76:	2600      	movs	r6, #0
 800bb78:	42a6      	cmp	r6, r4
 800bb7a:	d109      	bne.n	800bb90 <__libc_init_array+0x24>
 800bb7c:	4d0b      	ldr	r5, [pc, #44]	; (800bbac <__libc_init_array+0x40>)
 800bb7e:	4c0c      	ldr	r4, [pc, #48]	; (800bbb0 <__libc_init_array+0x44>)
 800bb80:	f000 f830 	bl	800bbe4 <_init>
 800bb84:	1b64      	subs	r4, r4, r5
 800bb86:	10a4      	asrs	r4, r4, #2
 800bb88:	2600      	movs	r6, #0
 800bb8a:	42a6      	cmp	r6, r4
 800bb8c:	d105      	bne.n	800bb9a <__libc_init_array+0x2e>
 800bb8e:	bd70      	pop	{r4, r5, r6, pc}
 800bb90:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb94:	4798      	blx	r3
 800bb96:	3601      	adds	r6, #1
 800bb98:	e7ee      	b.n	800bb78 <__libc_init_array+0xc>
 800bb9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb9e:	4798      	blx	r3
 800bba0:	3601      	adds	r6, #1
 800bba2:	e7f2      	b.n	800bb8a <__libc_init_array+0x1e>
 800bba4:	0800bda8 	.word	0x0800bda8
 800bba8:	0800bda8 	.word	0x0800bda8
 800bbac:	0800bda8 	.word	0x0800bda8
 800bbb0:	0800bdac 	.word	0x0800bdac

0800bbb4 <memset>:
 800bbb4:	4402      	add	r2, r0
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d100      	bne.n	800bbbe <memset+0xa>
 800bbbc:	4770      	bx	lr
 800bbbe:	f803 1b01 	strb.w	r1, [r3], #1
 800bbc2:	e7f9      	b.n	800bbb8 <memset+0x4>

0800bbc4 <strcat>:
 800bbc4:	b510      	push	{r4, lr}
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	7814      	ldrb	r4, [r2, #0]
 800bbca:	4613      	mov	r3, r2
 800bbcc:	3201      	adds	r2, #1
 800bbce:	2c00      	cmp	r4, #0
 800bbd0:	d1fa      	bne.n	800bbc8 <strcat+0x4>
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbd8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbdc:	2a00      	cmp	r2, #0
 800bbde:	d1f9      	bne.n	800bbd4 <strcat+0x10>
 800bbe0:	bd10      	pop	{r4, pc}
	...

0800bbe4 <_init>:
 800bbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe6:	bf00      	nop
 800bbe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbea:	bc08      	pop	{r3}
 800bbec:	469e      	mov	lr, r3
 800bbee:	4770      	bx	lr

0800bbf0 <_fini>:
 800bbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbf2:	bf00      	nop
 800bbf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbf6:	bc08      	pop	{r3}
 800bbf8:	469e      	mov	lr, r3
 800bbfa:	4770      	bx	lr
