
adafruit-stm32F405-E-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08006540  08006540  00016540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a8  080065a8  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  080065a8  080065a8  000165a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065b0  080065b0  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065b0  080065b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065b4  080065b4  000165b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080065b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b1c  20000180  08006738  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c9c  08006738  00021c9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012934  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d38  00000000  00000000  00032ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  00035820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  00036320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f14  00000000  00000000  00036ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7b7  00000000  00000000  00057bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b91cb  00000000  00000000  000663b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011f57e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b5c  00000000  00000000  0011f5d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006528 	.word	0x08006528

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	08006528 	.word	0x08006528

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 f97d 	bl	80007d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f823 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f88b 	bl	80005f8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004e2:	f005 fa9b 	bl	8005a1c <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char buf[] = "hello";
 80004e6:	4a0d      	ldr	r2, [pc, #52]	; (800051c <main+0x4c>)
 80004e8:	463b      	mov	r3, r7
 80004ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004ee:	6018      	str	r0, [r3, #0]
 80004f0:	3304      	adds	r3, #4
 80004f2:	8019      	strh	r1, [r3, #0]
	  CDC_Transmit_FS((uint8_t*)buf, strlen(buf));
 80004f4:	463b      	mov	r3, r7
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff fe66 	bl	80001c8 <strlen>
 80004fc:	4603      	mov	r3, r0
 80004fe:	b29a      	uxth	r2, r3
 8000500:	463b      	mov	r3, r7
 8000502:	4611      	mov	r1, r2
 8000504:	4618      	mov	r0, r3
 8000506:	f005 fb87 	bl	8005c18 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 800050a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800050e:	f000 f9d3 	bl	80008b8 <HAL_Delay>

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8000512:	2102      	movs	r1, #2
 8000514:	4802      	ldr	r0, [pc, #8]	; (8000520 <main+0x50>)
 8000516:	f000 fcba 	bl	8000e8e <HAL_GPIO_TogglePin>
  {
 800051a:	e7e4      	b.n	80004e6 <main+0x16>
 800051c:	08006540 	.word	0x08006540
 8000520:	40020800 	.word	0x40020800

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f005 fff0 	bl	8006518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a27      	ldr	r2, [pc, #156]	; (80005f0 <SystemClock_Config+0xcc>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b25      	ldr	r3, [pc, #148]	; (80005f0 <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a21      	ldr	r2, [pc, #132]	; (80005f4 <SystemClock_Config+0xd0>)
 800056e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000594:	2306      	movs	r3, #6
 8000596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000598:	23a8      	movs	r3, #168	; 0xa8
 800059a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a0:	2307      	movs	r3, #7
 80005a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0320 	add.w	r3, r7, #32
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 fe0d 	bl	80021c8 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b4:	f000 f870 	bl	8000698 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2302      	movs	r3, #2
 80005be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2105      	movs	r1, #5
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 f86e 	bl	80026b8 <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005e2:	f000 f859 	bl	8000698 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <MX_GPIO_Init+0x98>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a1e      	ldr	r2, [pc, #120]	; (8000690 <MX_GPIO_Init+0x98>)
 8000618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <MX_GPIO_Init+0x98>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b18      	ldr	r3, [pc, #96]	; (8000690 <MX_GPIO_Init+0x98>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a17      	ldr	r2, [pc, #92]	; (8000690 <MX_GPIO_Init+0x98>)
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <MX_GPIO_Init+0x98>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_GPIO_Init+0x98>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a10      	ldr	r2, [pc, #64]	; (8000690 <MX_GPIO_Init+0x98>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_GPIO_Init+0x98>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2102      	movs	r1, #2
 8000666:	480b      	ldr	r0, [pc, #44]	; (8000694 <MX_GPIO_Init+0x9c>)
 8000668:	f000 fbf8 	bl	8000e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800066c:	2302      	movs	r3, #2
 800066e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	4619      	mov	r1, r3
 8000682:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_GPIO_Init+0x9c>)
 8000684:	f000 fa4e 	bl	8000b24 <HAL_GPIO_Init>

}
 8000688:	bf00      	nop
 800068a:	3720      	adds	r7, #32
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40020800 	.word	0x40020800

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <Error_Handler+0x8>
	...

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <HAL_MspInit+0x4c>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <HAL_MspInit+0x4c>)
 80006b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <HAL_MspInit+0x4c>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <HAL_MspInit+0x4c>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <HAL_MspInit+0x4c>)
 80006d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d4:	6413      	str	r3, [r2, #64]	; 0x40
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_MspInit+0x4c>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <NMI_Handler+0x4>

080006fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <HardFault_Handler+0x4>

08000700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <MemManage_Handler+0x4>

08000706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <BusFault_Handler+0x4>

0800070c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <UsageFault_Handler+0x4>

08000712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000740:	f000 f89a 	bl	8000878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <OTG_FS_IRQHandler+0x10>)
 800074e:	f000 fd08 	bl	8001162 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20001894 	.word	0x20001894

0800075c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <SystemInit+0x20>)
 8000762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000766:	4a05      	ldr	r2, [pc, #20]	; (800077c <SystemInit+0x20>)
 8000768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800076c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000784:	480d      	ldr	r0, [pc, #52]	; (80007bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000786:	490e      	ldr	r1, [pc, #56]	; (80007c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000788:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800078c:	e002      	b.n	8000794 <LoopCopyDataInit>

0800078e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000792:	3304      	adds	r3, #4

08000794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000798:	d3f9      	bcc.n	800078e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079a:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800079c:	4c0b      	ldr	r4, [pc, #44]	; (80007cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a0:	e001      	b.n	80007a6 <LoopFillZerobss>

080007a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a4:	3204      	adds	r2, #4

080007a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a8:	d3fb      	bcc.n	80007a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80007aa:	f7ff ffd7 	bl	800075c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ae:	f005 fe8f 	bl	80064d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007b2:	f7ff fe8d 	bl	80004d0 <main>
  bx  lr    
 80007b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c0:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80007c4:	080065b8 	.word	0x080065b8
  ldr r2, =_sbss
 80007c8:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80007cc:	20001c9c 	.word	0x20001c9c

080007d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007d0:	e7fe      	b.n	80007d0 <ADC_IRQHandler>
	...

080007d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <HAL_Init+0x40>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0d      	ldr	r2, [pc, #52]	; (8000814 <HAL_Init+0x40>)
 80007de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <HAL_Init+0x40>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <HAL_Init+0x40>)
 80007ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_Init+0x40>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a07      	ldr	r2, [pc, #28]	; (8000814 <HAL_Init+0x40>)
 80007f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007fc:	2003      	movs	r0, #3
 80007fe:	f000 f94f 	bl	8000aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000802:	2000      	movs	r0, #0
 8000804:	f000 f808 	bl	8000818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000808:	f7ff ff4c 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023c00 	.word	0x40023c00

08000818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_InitTick+0x54>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_InitTick+0x58>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4619      	mov	r1, r3
 800082a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000832:	fbb2 f3f3 	udiv	r3, r2, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f967 	bl	8000b0a <HAL_SYSTICK_Config>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e00e      	b.n	8000864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d80a      	bhi.n	8000862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084c:	2200      	movs	r2, #0
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	f000 f92f 	bl	8000ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000858:	4a06      	ldr	r2, [pc, #24]	; (8000874 <HAL_InitTick+0x5c>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800085e:	2300      	movs	r3, #0
 8000860:	e000      	b.n	8000864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000000 	.word	0x20000000
 8000870:	20000008 	.word	0x20000008
 8000874:	20000004 	.word	0x20000004

08000878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_IncTick+0x20>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_IncTick+0x24>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4413      	add	r3, r2
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <HAL_IncTick+0x24>)
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000008 	.word	0x20000008
 800089c:	200003c0 	.word	0x200003c0

080008a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return uwTick;
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <HAL_GetTick+0x14>)
 80008a6:	681b      	ldr	r3, [r3, #0]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	200003c0 	.word	0x200003c0

080008b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c0:	f7ff ffee 	bl	80008a0 <HAL_GetTick>
 80008c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d0:	d005      	beq.n	80008de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008d2:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <HAL_Delay+0x44>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4413      	add	r3, r2
 80008dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008de:	bf00      	nop
 80008e0:	f7ff ffde 	bl	80008a0 <HAL_GetTick>
 80008e4:	4602      	mov	r2, r0
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d8f7      	bhi.n	80008e0 <HAL_Delay+0x28>
  {
  }
}
 80008f0:	bf00      	nop
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000008 	.word	0x20000008

08000900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800091c:	4013      	ands	r3, r2
 800091e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800092c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000932:	4a04      	ldr	r2, [pc, #16]	; (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	60d3      	str	r3, [r2, #12]
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <__NVIC_GetPriorityGrouping+0x18>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	0a1b      	lsrs	r3, r3, #8
 8000952:	f003 0307 	and.w	r3, r3, #7
}
 8000956:	4618      	mov	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	2b00      	cmp	r3, #0
 8000974:	db0b      	blt.n	800098e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	f003 021f 	and.w	r2, r3, #31
 800097c:	4907      	ldr	r1, [pc, #28]	; (800099c <__NVIC_EnableIRQ+0x38>)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	095b      	lsrs	r3, r3, #5
 8000984:	2001      	movs	r0, #1
 8000986:	fa00 f202 	lsl.w	r2, r0, r2
 800098a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000e100 	.word	0xe000e100

080009a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	db0a      	blt.n	80009ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	490c      	ldr	r1, [pc, #48]	; (80009ec <__NVIC_SetPriority+0x4c>)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	0112      	lsls	r2, r2, #4
 80009c0:	b2d2      	uxtb	r2, r2
 80009c2:	440b      	add	r3, r1
 80009c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c8:	e00a      	b.n	80009e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4908      	ldr	r1, [pc, #32]	; (80009f0 <__NVIC_SetPriority+0x50>)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	f003 030f 	and.w	r3, r3, #15
 80009d6:	3b04      	subs	r3, #4
 80009d8:	0112      	lsls	r2, r2, #4
 80009da:	b2d2      	uxtb	r2, r2
 80009dc:	440b      	add	r3, r1
 80009de:	761a      	strb	r2, [r3, #24]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000e100 	.word	0xe000e100
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b089      	sub	sp, #36	; 0x24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	f1c3 0307 	rsb	r3, r3, #7
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	bf28      	it	cs
 8000a12:	2304      	movcs	r3, #4
 8000a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	2b06      	cmp	r3, #6
 8000a1c:	d902      	bls.n	8000a24 <NVIC_EncodePriority+0x30>
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3b03      	subs	r3, #3
 8000a22:	e000      	b.n	8000a26 <NVIC_EncodePriority+0x32>
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a28:	f04f 32ff 	mov.w	r2, #4294967295
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43da      	mvns	r2, r3
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	401a      	ands	r2, r3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	43d9      	mvns	r1, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	4313      	orrs	r3, r2
         );
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3724      	adds	r7, #36	; 0x24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a6c:	d301      	bcc.n	8000a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00f      	b.n	8000a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <SysTick_Config+0x40>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7a:	210f      	movs	r1, #15
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	f7ff ff8e 	bl	80009a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <SysTick_Config+0x40>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8a:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <SysTick_Config+0x40>)
 8000a8c:	2207      	movs	r2, #7
 8000a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	e000e010 	.word	0xe000e010

08000aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff29 	bl	8000900 <__NVIC_SetPriorityGrouping>
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	4603      	mov	r3, r0
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac8:	f7ff ff3e 	bl	8000948 <__NVIC_GetPriorityGrouping>
 8000acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	6978      	ldr	r0, [r7, #20]
 8000ad4:	f7ff ff8e 	bl	80009f4 <NVIC_EncodePriority>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff5d 	bl	80009a0 <__NVIC_SetPriority>
}
 8000ae6:	bf00      	nop
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff31 	bl	8000964 <__NVIC_EnableIRQ>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff ffa2 	bl	8000a5c <SysTick_Config>
 8000b18:	4603      	mov	r3, r0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b089      	sub	sp, #36	; 0x24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
 8000b3e:	e16b      	b.n	8000e18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b40:	2201      	movs	r2, #1
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	f040 815a 	bne.w	8000e12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 0303 	and.w	r3, r3, #3
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d005      	beq.n	8000b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d130      	bne.n	8000bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	2203      	movs	r2, #3
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	68da      	ldr	r2, [r3, #12]
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bac:	2201      	movs	r2, #1
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	091b      	lsrs	r3, r3, #4
 8000bc2:	f003 0201 	and.w	r2, r3, #1
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	d017      	beq.n	8000c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	2203      	movs	r2, #3
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	689a      	ldr	r2, [r3, #8]
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 0303 	and.w	r3, r3, #3
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d123      	bne.n	8000c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	08da      	lsrs	r2, r3, #3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3208      	adds	r2, #8
 8000c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	220f      	movs	r2, #15
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	691a      	ldr	r2, [r3, #16]
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	08da      	lsrs	r2, r3, #3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3208      	adds	r2, #8
 8000c62:	69b9      	ldr	r1, [r7, #24]
 8000c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2203      	movs	r2, #3
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0203 	and.w	r2, r3, #3
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 80b4 	beq.w	8000e12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b60      	ldr	r3, [pc, #384]	; (8000e30 <HAL_GPIO_Init+0x30c>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	4a5f      	ldr	r2, [pc, #380]	; (8000e30 <HAL_GPIO_Init+0x30c>)
 8000cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cba:	4b5d      	ldr	r3, [pc, #372]	; (8000e30 <HAL_GPIO_Init+0x30c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cc6:	4a5b      	ldr	r2, [pc, #364]	; (8000e34 <HAL_GPIO_Init+0x310>)
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	089b      	lsrs	r3, r3, #2
 8000ccc:	3302      	adds	r3, #2
 8000cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	220f      	movs	r2, #15
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a52      	ldr	r2, [pc, #328]	; (8000e38 <HAL_GPIO_Init+0x314>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d02b      	beq.n	8000d4a <HAL_GPIO_Init+0x226>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a51      	ldr	r2, [pc, #324]	; (8000e3c <HAL_GPIO_Init+0x318>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d025      	beq.n	8000d46 <HAL_GPIO_Init+0x222>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a50      	ldr	r2, [pc, #320]	; (8000e40 <HAL_GPIO_Init+0x31c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d01f      	beq.n	8000d42 <HAL_GPIO_Init+0x21e>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a4f      	ldr	r2, [pc, #316]	; (8000e44 <HAL_GPIO_Init+0x320>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d019      	beq.n	8000d3e <HAL_GPIO_Init+0x21a>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a4e      	ldr	r2, [pc, #312]	; (8000e48 <HAL_GPIO_Init+0x324>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d013      	beq.n	8000d3a <HAL_GPIO_Init+0x216>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a4d      	ldr	r2, [pc, #308]	; (8000e4c <HAL_GPIO_Init+0x328>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d00d      	beq.n	8000d36 <HAL_GPIO_Init+0x212>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a4c      	ldr	r2, [pc, #304]	; (8000e50 <HAL_GPIO_Init+0x32c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d007      	beq.n	8000d32 <HAL_GPIO_Init+0x20e>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a4b      	ldr	r2, [pc, #300]	; (8000e54 <HAL_GPIO_Init+0x330>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d101      	bne.n	8000d2e <HAL_GPIO_Init+0x20a>
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	e00e      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d2e:	2308      	movs	r3, #8
 8000d30:	e00c      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d32:	2306      	movs	r3, #6
 8000d34:	e00a      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d36:	2305      	movs	r3, #5
 8000d38:	e008      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	e006      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e004      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d42:	2302      	movs	r3, #2
 8000d44:	e002      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d46:	2301      	movs	r3, #1
 8000d48:	e000      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	69fa      	ldr	r2, [r7, #28]
 8000d4e:	f002 0203 	and.w	r2, r2, #3
 8000d52:	0092      	lsls	r2, r2, #2
 8000d54:	4093      	lsls	r3, r2
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d5c:	4935      	ldr	r1, [pc, #212]	; (8000e34 <HAL_GPIO_Init+0x310>)
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	089b      	lsrs	r3, r3, #2
 8000d62:	3302      	adds	r3, #2
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d6a:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d8e:	4a32      	ldr	r2, [pc, #200]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d94:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000db8:	4a27      	ldr	r2, [pc, #156]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000de2:	4a1d      	ldr	r2, [pc, #116]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e0c:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3301      	adds	r3, #1
 8000e16:	61fb      	str	r3, [r7, #28]
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	2b0f      	cmp	r3, #15
 8000e1c:	f67f ae90 	bls.w	8000b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3724      	adds	r7, #36	; 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40013800 	.word	0x40013800
 8000e38:	40020000 	.word	0x40020000
 8000e3c:	40020400 	.word	0x40020400
 8000e40:	40020800 	.word	0x40020800
 8000e44:	40020c00 	.word	0x40020c00
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40021400 	.word	0x40021400
 8000e50:	40021800 	.word	0x40021800
 8000e54:	40021c00 	.word	0x40021c00
 8000e58:	40013c00 	.word	0x40013c00

08000e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e6c:	787b      	ldrb	r3, [r7, #1]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e72:	887a      	ldrh	r2, [r7, #2]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e78:	e003      	b.n	8000e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	041a      	lsls	r2, r3, #16
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	619a      	str	r2, [r3, #24]
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b085      	sub	sp, #20
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	460b      	mov	r3, r1
 8000e98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ea0:	887a      	ldrh	r2, [r7, #2]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	041a      	lsls	r2, r3, #16
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	887b      	ldrh	r3, [r7, #2]
 8000eae:	400b      	ands	r3, r1
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	619a      	str	r2, [r3, #24]
}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ec2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ec4:	b08f      	sub	sp, #60	; 0x3c
 8000ec6:	af0a      	add	r7, sp, #40	; 0x28
 8000ec8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d101      	bne.n	8000ed4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e10f      	b.n	80010f4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d106      	bne.n	8000ef4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f004 ffda 	bl	8005ea8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d102      	bne.n	8000f0e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 fe8d 	bl	8002c32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	687e      	ldr	r6, [r7, #4]
 8000f20:	466d      	mov	r5, sp
 8000f22:	f106 0410 	add.w	r4, r6, #16
 8000f26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f32:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f36:	1d33      	adds	r3, r6, #4
 8000f38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f3a:	6838      	ldr	r0, [r7, #0]
 8000f3c:	f001 fd64 	bl	8002a08 <USB_CoreInit>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d005      	beq.n	8000f52 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2202      	movs	r2, #2
 8000f4a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e0d0      	b.n	80010f4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f001 fe7b 	bl	8002c54 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
 8000f62:	e04a      	b.n	8000ffa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f64:	7bfa      	ldrb	r2, [r7, #15]
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	1a9b      	subs	r3, r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	333d      	adds	r3, #61	; 0x3d
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f78:	7bfa      	ldrb	r2, [r7, #15]
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	1a9b      	subs	r3, r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	440b      	add	r3, r1
 8000f86:	333c      	adds	r3, #60	; 0x3c
 8000f88:	7bfa      	ldrb	r2, [r7, #15]
 8000f8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f8c:	7bfa      	ldrb	r2, [r7, #15]
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	b298      	uxth	r0, r3
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	4613      	mov	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	1a9b      	subs	r3, r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	3342      	adds	r3, #66	; 0x42
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fa4:	7bfa      	ldrb	r2, [r7, #15]
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	1a9b      	subs	r3, r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	333f      	adds	r3, #63	; 0x3f
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fb8:	7bfa      	ldrb	r2, [r7, #15]
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	1a9b      	subs	r3, r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	3344      	adds	r3, #68	; 0x44
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fcc:	7bfa      	ldrb	r2, [r7, #15]
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	1a9b      	subs	r3, r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	3348      	adds	r3, #72	; 0x48
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	1a9b      	subs	r3, r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	3350      	adds	r3, #80	; 0x50
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	73fb      	strb	r3, [r7, #15]
 8000ffa:	7bfa      	ldrb	r2, [r7, #15]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	429a      	cmp	r2, r3
 8001002:	d3af      	bcc.n	8000f64 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	e044      	b.n	8001094 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800100a:	7bfa      	ldrb	r2, [r7, #15]
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	4613      	mov	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	1a9b      	subs	r3, r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	440b      	add	r3, r1
 8001018:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	1a9b      	subs	r3, r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	1a9b      	subs	r3, r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	440b      	add	r3, r1
 8001044:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	1a9b      	subs	r3, r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	440b      	add	r3, r1
 800105a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001062:	7bfa      	ldrb	r2, [r7, #15]
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	1a9b      	subs	r3, r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	1a9b      	subs	r3, r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	3301      	adds	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	7bfa      	ldrb	r2, [r7, #15]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	429a      	cmp	r2, r3
 800109c:	d3b5      	bcc.n	800100a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	687e      	ldr	r6, [r7, #4]
 80010a6:	466d      	mov	r5, sp
 80010a8:	f106 0410 	add.w	r4, r6, #16
 80010ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80010bc:	1d33      	adds	r3, r6, #4
 80010be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010c0:	6838      	ldr	r0, [r7, #0]
 80010c2:	f001 fe13 	bl	8002cec <USB_DevInit>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2202      	movs	r2, #2
 80010d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e00d      	b.n	80010f4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 fe8f 	bl	8003e10 <USB_DevDisconnect>

  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010fc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001110:	2b01      	cmp	r3, #1
 8001112:	d101      	bne.n	8001118 <HAL_PCD_Start+0x1c>
 8001114:	2302      	movs	r3, #2
 8001116:	e020      	b.n	800115a <HAL_PCD_Start+0x5e>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001124:	2b01      	cmp	r3, #1
 8001126:	d109      	bne.n	800113c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800112c:	2b01      	cmp	r3, #1
 800112e:	d005      	beq.n	800113c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001134:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f001 fd65 	bl	8002c10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f002 fe3f 	bl	8003dce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001162:	b590      	push	{r4, r7, lr}
 8001164:	b08d      	sub	sp, #52	; 0x34
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f002 fefd 	bl	8003f78 <USB_GetMode>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	f040 839d 	bne.w	80018c0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f002 fe61 	bl	8003e52 <USB_ReadInterrupts>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 8393 	beq.w	80018be <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f002 fe58 	bl	8003e52 <USB_ReadInterrupts>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d107      	bne.n	80011bc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	695a      	ldr	r2, [r3, #20]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f002 0202 	and.w	r2, r2, #2
 80011ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f002 fe46 	bl	8003e52 <USB_ReadInterrupts>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f003 0310 	and.w	r3, r3, #16
 80011cc:	2b10      	cmp	r3, #16
 80011ce:	d161      	bne.n	8001294 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	699a      	ldr	r2, [r3, #24]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0210 	bic.w	r2, r2, #16
 80011de:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	f003 020f 	and.w	r2, r3, #15
 80011ec:	4613      	mov	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	1a9b      	subs	r3, r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	4413      	add	r3, r2
 80011fc:	3304      	adds	r3, #4
 80011fe:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	0c5b      	lsrs	r3, r3, #17
 8001204:	f003 030f 	and.w	r3, r3, #15
 8001208:	2b02      	cmp	r3, #2
 800120a:	d124      	bne.n	8001256 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001212:	4013      	ands	r3, r2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d035      	beq.n	8001284 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	091b      	lsrs	r3, r3, #4
 8001220:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001222:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001226:	b29b      	uxth	r3, r3
 8001228:	461a      	mov	r2, r3
 800122a:	6a38      	ldr	r0, [r7, #32]
 800122c:	f002 fc7d 	bl	8003b2a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	091b      	lsrs	r3, r3, #4
 8001238:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800123c:	441a      	add	r2, r3
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	699a      	ldr	r2, [r3, #24]
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	091b      	lsrs	r3, r3, #4
 800124a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800124e:	441a      	add	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	619a      	str	r2, [r3, #24]
 8001254:	e016      	b.n	8001284 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	0c5b      	lsrs	r3, r3, #17
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	2b06      	cmp	r3, #6
 8001260:	d110      	bne.n	8001284 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001268:	2208      	movs	r2, #8
 800126a:	4619      	mov	r1, r3
 800126c:	6a38      	ldr	r0, [r7, #32]
 800126e:	f002 fc5c 	bl	8003b2a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	699a      	ldr	r2, [r3, #24]
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800127e:	441a      	add	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	699a      	ldr	r2, [r3, #24]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0210 	orr.w	r2, r2, #16
 8001292:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f002 fdda 	bl	8003e52 <USB_ReadInterrupts>
 800129e:	4603      	mov	r3, r0
 80012a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80012a8:	d16e      	bne.n	8001388 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 fde0 	bl	8003e78 <USB_ReadDevAllOutEpInterrupt>
 80012b8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80012ba:	e062      	b.n	8001382 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80012bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d057      	beq.n	8001376 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 fe05 	bl	8003ee0 <USB_ReadDevOutEPInterrupt>
 80012d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00c      	beq.n	80012fc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	015a      	lsls	r2, r3, #5
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	4413      	add	r3, r2
 80012ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012ee:	461a      	mov	r2, r3
 80012f0:	2301      	movs	r3, #1
 80012f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 fdb0 	bl	8001e5c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00c      	beq.n	8001320 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	015a      	lsls	r2, r3, #5
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	4413      	add	r3, r2
 800130e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001312:	461a      	mov	r2, r3
 8001314:	2308      	movs	r3, #8
 8001316:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001318:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 feaa 	bl	8002074 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	f003 0310 	and.w	r3, r3, #16
 8001326:	2b00      	cmp	r3, #0
 8001328:	d008      	beq.n	800133c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	015a      	lsls	r2, r3, #5
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	4413      	add	r3, r2
 8001332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001336:	461a      	mov	r2, r3
 8001338:	2310      	movs	r3, #16
 800133a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	f003 0320 	and.w	r3, r3, #32
 8001342:	2b00      	cmp	r3, #0
 8001344:	d008      	beq.n	8001358 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	015a      	lsls	r2, r3, #5
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	4413      	add	r3, r2
 800134e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001352:	461a      	mov	r2, r3
 8001354:	2320      	movs	r3, #32
 8001356:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d009      	beq.n	8001376 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	015a      	lsls	r2, r3, #5
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	4413      	add	r3, r2
 800136a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800136e:	461a      	mov	r2, r3
 8001370:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001374:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	3301      	adds	r3, #1
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800137c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001384:	2b00      	cmp	r3, #0
 8001386:	d199      	bne.n	80012bc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f002 fd60 	bl	8003e52 <USB_ReadInterrupts>
 8001392:	4603      	mov	r3, r0
 8001394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001398:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800139c:	f040 80c0 	bne.w	8001520 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 fd81 	bl	8003eac <USB_ReadDevAllInEpInterrupt>
 80013aa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80013b0:	e0b2      	b.n	8001518 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80a7 	beq.w	800150c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	4611      	mov	r1, r2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 fda7 	bl	8003f1c <USB_ReadDevInEPInterrupt>
 80013ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d057      	beq.n	800148a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	f003 030f 	and.w	r3, r3, #15
 80013e0:	2201      	movs	r2, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69f9      	ldr	r1, [r7, #28]
 80013f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80013fa:	4013      	ands	r3, r2
 80013fc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	015a      	lsls	r2, r3, #5
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	4413      	add	r3, r2
 8001406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800140a:	461a      	mov	r2, r3
 800140c:	2301      	movs	r3, #1
 800140e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d132      	bne.n	800147e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141c:	4613      	mov	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	1a9b      	subs	r3, r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	3348      	adds	r3, #72	; 0x48
 8001428:	6819      	ldr	r1, [r3, #0]
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800142e:	4613      	mov	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	1a9b      	subs	r3, r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4403      	add	r3, r0
 8001438:	3344      	adds	r3, #68	; 0x44
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4419      	add	r1, r3
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001442:	4613      	mov	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	1a9b      	subs	r3, r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4403      	add	r3, r0
 800144c:	3348      	adds	r3, #72	; 0x48
 800144e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	2b00      	cmp	r3, #0
 8001454:	d113      	bne.n	800147e <HAL_PCD_IRQHandler+0x31c>
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145a:	4613      	mov	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	1a9b      	subs	r3, r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	3350      	adds	r3, #80	; 0x50
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d108      	bne.n	800147e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001476:	461a      	mov	r2, r3
 8001478:	2101      	movs	r1, #1
 800147a:	f002 fdaf 	bl	8003fdc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	b2db      	uxtb	r3, r3
 8001482:	4619      	mov	r1, r3
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f004 fd90 	bl	8005faa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	015a      	lsls	r2, r3, #5
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	4413      	add	r3, r2
 800149c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014a0:	461a      	mov	r2, r3
 80014a2:	2308      	movs	r3, #8
 80014a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	f003 0310 	and.w	r3, r3, #16
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d008      	beq.n	80014c2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	015a      	lsls	r2, r3, #5
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	4413      	add	r3, r2
 80014b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014bc:	461a      	mov	r2, r3
 80014be:	2310      	movs	r3, #16
 80014c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d008      	beq.n	80014de <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	015a      	lsls	r2, r3, #5
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	4413      	add	r3, r2
 80014d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014d8:	461a      	mov	r2, r3
 80014da:	2340      	movs	r3, #64	; 0x40
 80014dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d008      	beq.n	80014fa <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	015a      	lsls	r2, r3, #5
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	4413      	add	r3, r2
 80014f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014f4:	461a      	mov	r2, r3
 80014f6:	2302      	movs	r3, #2
 80014f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001504:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 fc1b 	bl	8001d42 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	3301      	adds	r3, #1
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001514:	085b      	lsrs	r3, r3, #1
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151a:	2b00      	cmp	r3, #0
 800151c:	f47f af49 	bne.w	80013b2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f002 fc94 	bl	8003e52 <USB_ReadInterrupts>
 800152a:	4603      	mov	r3, r0
 800152c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001530:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001534:	d122      	bne.n	800157c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	69fa      	ldr	r2, [r7, #28]
 8001540:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001544:	f023 0301 	bic.w	r3, r3, #1
 8001548:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001550:	2b01      	cmp	r3, #1
 8001552:	d108      	bne.n	8001566 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800155c:	2100      	movs	r1, #0
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 fe26 	bl	80021b0 <HAL_PCDEx_LPM_Callback>
 8001564:	e002      	b.n	800156c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f004 fd96 	bl	8006098 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	695a      	ldr	r2, [r3, #20]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800157a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f002 fc66 	bl	8003e52 <USB_ReadInterrupts>
 8001586:	4603      	mov	r3, r0
 8001588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800158c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001590:	d112      	bne.n	80015b8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d102      	bne.n	80015a8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f004 fd52 	bl	800604c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	695a      	ldr	r2, [r3, #20]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80015b6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f002 fc48 	bl	8003e52 <USB_ReadInterrupts>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015cc:	f040 80c7 	bne.w	800175e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	69fa      	ldr	r2, [r7, #28]
 80015da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015de:	f023 0301 	bic.w	r3, r3, #1
 80015e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2110      	movs	r1, #16
 80015ea:	4618      	mov	r0, r3
 80015ec:	f001 fce2 	bl	8002fb4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015f4:	e056      	b.n	80016a4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80015f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f8:	015a      	lsls	r2, r3, #5
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	4413      	add	r3, r2
 80015fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001602:	461a      	mov	r2, r3
 8001604:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001608:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800160a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160c:	015a      	lsls	r2, r3, #5
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	4413      	add	r3, r2
 8001612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800161a:	0151      	lsls	r1, r2, #5
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	440a      	add	r2, r1
 8001620:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001624:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001628:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800162a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162c:	015a      	lsls	r2, r3, #5
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	4413      	add	r3, r2
 8001632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800163a:	0151      	lsls	r1, r2, #5
 800163c:	69fa      	ldr	r2, [r7, #28]
 800163e:	440a      	add	r2, r1
 8001640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001644:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001648:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800164a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164c:	015a      	lsls	r2, r3, #5
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	4413      	add	r3, r2
 8001652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001656:	461a      	mov	r2, r3
 8001658:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800165c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800165e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001660:	015a      	lsls	r2, r3, #5
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	4413      	add	r3, r2
 8001666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800166e:	0151      	lsls	r1, r2, #5
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	440a      	add	r2, r1
 8001674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001678:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800167c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800167e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001680:	015a      	lsls	r2, r3, #5
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	4413      	add	r3, r2
 8001686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800168e:	0151      	lsls	r1, r2, #5
 8001690:	69fa      	ldr	r2, [r7, #28]
 8001692:	440a      	add	r2, r1
 8001694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001698:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800169c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800169e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a0:	3301      	adds	r3, #1
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d3a3      	bcc.n	80015f6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	69fa      	ldr	r2, [r7, #28]
 80016b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016bc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80016c0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d016      	beq.n	80016f8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016da:	f043 030b 	orr.w	r3, r3, #11
 80016de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016f0:	f043 030b 	orr.w	r3, r3, #11
 80016f4:	6453      	str	r3, [r2, #68]	; 0x44
 80016f6:	e015      	b.n	8001724 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	69fa      	ldr	r2, [r7, #28]
 8001702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001706:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800170a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800170e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	69fa      	ldr	r2, [r7, #28]
 800171a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800171e:	f043 030b 	orr.w	r3, r3, #11
 8001722:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001732:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001736:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001748:	461a      	mov	r2, r3
 800174a:	f002 fc47 	bl	8003fdc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	695a      	ldr	r2, [r3, #20]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800175c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f002 fb75 	bl	8003e52 <USB_ReadInterrupts>
 8001768:	4603      	mov	r3, r0
 800176a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800176e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001772:	d124      	bne.n	80017be <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f002 fc0b 	bl	8003f94 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f001 fc73 	bl	800306e <USB_GetDevSpeed>
 8001788:	4603      	mov	r3, r0
 800178a:	461a      	mov	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681c      	ldr	r4, [r3, #0]
 8001794:	f001 f92c 	bl	80029f0 <HAL_RCC_GetHCLKFreq>
 8001798:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	4620      	mov	r0, r4
 80017a4:	f001 f992 	bl	8002acc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f004 fc26 	bl	8005ffa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	695a      	ldr	r2, [r3, #20]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80017bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f002 fb45 	bl	8003e52 <USB_ReadInterrupts>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d10a      	bne.n	80017e8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f004 fc03 	bl	8005fde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	695a      	ldr	r2, [r3, #20]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f002 0208 	and.w	r2, r2, #8
 80017e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f002 fb30 	bl	8003e52 <USB_ReadInterrupts>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017fc:	d10f      	bne.n	800181e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	b2db      	uxtb	r3, r3
 8001806:	4619      	mov	r1, r3
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f004 fc65 	bl	80060d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	695a      	ldr	r2, [r3, #20]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800181c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f002 fb15 	bl	8003e52 <USB_ReadInterrupts>
 8001828:	4603      	mov	r3, r0
 800182a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001832:	d10f      	bne.n	8001854 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	b2db      	uxtb	r3, r3
 800183c:	4619      	mov	r1, r3
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f004 fc38 	bl	80060b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	695a      	ldr	r2, [r3, #20]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001852:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f002 fafa 	bl	8003e52 <USB_ReadInterrupts>
 800185e:	4603      	mov	r3, r0
 8001860:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001868:	d10a      	bne.n	8001880 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f004 fc46 	bl	80060fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	695a      	ldr	r2, [r3, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800187e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f002 fae4 	bl	8003e52 <USB_ReadInterrupts>
 800188a:	4603      	mov	r3, r0
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b04      	cmp	r3, #4
 8001892:	d115      	bne.n	80018c0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f004 fc36 	bl	8006118 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6859      	ldr	r1, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	e000      	b.n	80018c0 <HAL_PCD_IRQHandler+0x75e>
      return;
 80018be:	bf00      	nop
    }
  }
}
 80018c0:	3734      	adds	r7, #52	; 0x34
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd90      	pop	{r4, r7, pc}

080018c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	460b      	mov	r3, r1
 80018d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_PCD_SetAddress+0x1a>
 80018dc:	2302      	movs	r3, #2
 80018de:	e013      	b.n	8001908 <HAL_PCD_SetAddress+0x42>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	78fa      	ldrb	r2, [r7, #3]
 80018ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f002 fa42 	bl	8003d82 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	4608      	mov	r0, r1
 800191a:	4611      	mov	r1, r2
 800191c:	461a      	mov	r2, r3
 800191e:	4603      	mov	r3, r0
 8001920:	70fb      	strb	r3, [r7, #3]
 8001922:	460b      	mov	r3, r1
 8001924:	803b      	strh	r3, [r7, #0]
 8001926:	4613      	mov	r3, r2
 8001928:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800192e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001932:	2b00      	cmp	r3, #0
 8001934:	da0f      	bge.n	8001956 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	f003 020f 	and.w	r2, r3, #15
 800193c:	4613      	mov	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	1a9b      	subs	r3, r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	3338      	adds	r3, #56	; 0x38
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	3304      	adds	r3, #4
 800194c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2201      	movs	r2, #1
 8001952:	705a      	strb	r2, [r3, #1]
 8001954:	e00f      	b.n	8001976 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	f003 020f 	and.w	r2, r3, #15
 800195c:	4613      	mov	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	1a9b      	subs	r3, r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	4413      	add	r3, r2
 800196c:	3304      	adds	r3, #4
 800196e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	f003 030f 	and.w	r3, r3, #15
 800197c:	b2da      	uxtb	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001982:	883a      	ldrh	r2, [r7, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	78ba      	ldrb	r2, [r7, #2]
 800198c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	785b      	ldrb	r3, [r3, #1]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d004      	beq.n	80019a0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b29a      	uxth	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019a0:	78bb      	ldrb	r3, [r7, #2]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d102      	bne.n	80019ac <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d101      	bne.n	80019ba <HAL_PCD_EP_Open+0xaa>
 80019b6:	2302      	movs	r3, #2
 80019b8:	e00e      	b.n	80019d8 <HAL_PCD_EP_Open+0xc8>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68f9      	ldr	r1, [r7, #12]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f001 fb75 	bl	80030b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80019d6:	7afb      	ldrb	r3, [r7, #11]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	da0f      	bge.n	8001a14 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	f003 020f 	and.w	r2, r3, #15
 80019fa:	4613      	mov	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	1a9b      	subs	r3, r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	3338      	adds	r3, #56	; 0x38
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	4413      	add	r3, r2
 8001a08:	3304      	adds	r3, #4
 8001a0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	705a      	strb	r2, [r3, #1]
 8001a12:	e00f      	b.n	8001a34 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	f003 020f 	and.w	r2, r3, #15
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_PCD_EP_Close+0x6e>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e00e      	b.n	8001a6c <HAL_PCD_EP_Close+0x8c>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68f9      	ldr	r1, [r7, #12]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f001 fbb3 	bl	80031c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	460b      	mov	r3, r1
 8001a82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a84:	7afb      	ldrb	r3, [r7, #11]
 8001a86:	f003 020f 	and.w	r2, r3, #15
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	1a9b      	subs	r3, r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4413      	add	r3, r2
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ab6:	7afb      	ldrb	r3, [r7, #11]
 8001ab8:	f003 030f 	and.w	r3, r3, #15
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d102      	bne.n	8001ad0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ad0:	7afb      	ldrb	r3, [r7, #11]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d109      	bne.n	8001aee <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6818      	ldr	r0, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	6979      	ldr	r1, [r7, #20]
 8001ae8:	f001 fe8e 	bl	8003808 <USB_EP0StartXfer>
 8001aec:	e008      	b.n	8001b00 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	6979      	ldr	r1, [r7, #20]
 8001afc:	f001 fc40 	bl	8003380 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	460b      	mov	r3, r1
 8001b14:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	f003 020f 	and.w	r2, r3, #15
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	1a9b      	subs	r3, r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001b2c:	681b      	ldr	r3, [r3, #0]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	460b      	mov	r3, r1
 8001b48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b4a:	7afb      	ldrb	r3, [r7, #11]
 8001b4c:	f003 020f 	and.w	r2, r3, #15
 8001b50:	4613      	mov	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	1a9b      	subs	r3, r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	3338      	adds	r3, #56	; 0x38
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3304      	adds	r3, #4
 8001b60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	2201      	movs	r2, #1
 8001b78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b7a:	7afb      	ldrb	r3, [r7, #11]
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d102      	bne.n	8001b94 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b94:	7afb      	ldrb	r3, [r7, #11]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d109      	bne.n	8001bb2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	461a      	mov	r2, r3
 8001baa:	6979      	ldr	r1, [r7, #20]
 8001bac:	f001 fe2c 	bl	8003808 <USB_EP0StartXfer>
 8001bb0:	e008      	b.n	8001bc4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	6979      	ldr	r1, [r7, #20]
 8001bc0:	f001 fbde 	bl	8003380 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	f003 020f 	and.w	r2, r3, #15
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d901      	bls.n	8001bec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e050      	b.n	8001c8e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	da0f      	bge.n	8001c14 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	f003 020f 	and.w	r2, r3, #15
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	1a9b      	subs	r3, r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	3338      	adds	r3, #56	; 0x38
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	4413      	add	r3, r2
 8001c08:	3304      	adds	r3, #4
 8001c0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	705a      	strb	r2, [r3, #1]
 8001c12:	e00d      	b.n	8001c30 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c14:	78fa      	ldrb	r2, [r7, #3]
 8001c16:	4613      	mov	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	1a9b      	subs	r3, r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	3304      	adds	r3, #4
 8001c28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2201      	movs	r2, #1
 8001c34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_PCD_EP_SetStall+0x82>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e01e      	b.n	8001c8e <HAL_PCD_EP_SetStall+0xc0>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68f9      	ldr	r1, [r7, #12]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f001 ffbb 	bl	8003bda <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10a      	bne.n	8001c84 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	b2d9      	uxtb	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f002 f9ac 	bl	8003fdc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b084      	sub	sp, #16
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	f003 020f 	and.w	r2, r3, #15
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d901      	bls.n	8001cb4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e042      	b.n	8001d3a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	da0f      	bge.n	8001cdc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	f003 020f 	and.w	r2, r3, #15
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	1a9b      	subs	r3, r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	3338      	adds	r3, #56	; 0x38
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	705a      	strb	r2, [r3, #1]
 8001cda:	e00f      	b.n	8001cfc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	f003 020f 	and.w	r2, r3, #15
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	1a9b      	subs	r3, r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	f003 030f 	and.w	r3, r3, #15
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_PCD_EP_ClrStall+0x86>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e00e      	b.n	8001d3a <HAL_PCD_EP_ClrStall+0xa4>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68f9      	ldr	r1, [r7, #12]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f001 ffc3 	bl	8003cb6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b08a      	sub	sp, #40	; 0x28
 8001d46:	af02      	add	r7, sp, #8
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	1a9b      	subs	r3, r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	3338      	adds	r3, #56	; 0x38
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	3304      	adds	r3, #4
 8001d68:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	699a      	ldr	r2, [r3, #24]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d901      	bls.n	8001d7a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e06c      	b.n	8001e54 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	695a      	ldr	r2, [r3, #20]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d902      	bls.n	8001d96 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3303      	adds	r3, #3
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d9e:	e02b      	b.n	8001df8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	69fa      	ldr	r2, [r7, #28]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d902      	bls.n	8001dbc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	3303      	adds	r3, #3
 8001dc0:	089b      	lsrs	r3, r3, #2
 8001dc2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	68d9      	ldr	r1, [r3, #12]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	4603      	mov	r3, r0
 8001dda:	6978      	ldr	r0, [r7, #20]
 8001ddc:	f001 fe67 	bl	8003aae <USB_WritePacket>

    ep->xfer_buff  += len;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	441a      	add	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	699a      	ldr	r2, [r3, #24]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	441a      	add	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	015a      	lsls	r2, r3, #5
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4413      	add	r3, r2
 8001e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d809      	bhi.n	8001e22 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	699a      	ldr	r2, [r3, #24]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d203      	bcs.n	8001e22 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1be      	bne.n	8001da0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	695a      	ldr	r2, [r3, #20]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d811      	bhi.n	8001e52 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	f003 030f 	and.w	r3, r3, #15
 8001e34:	2201      	movs	r2, #1
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	6939      	ldr	r1, [r7, #16]
 8001e4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e4e:	4013      	ands	r3, r2
 8001e50:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3720      	adds	r7, #32
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	333c      	adds	r3, #60	; 0x3c
 8001e74:	3304      	adds	r3, #4
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	f040 80a0 	bne.w	8001fd4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d015      	beq.n	8001eca <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4a72      	ldr	r2, [pc, #456]	; (800206c <PCD_EP_OutXfrComplete_int+0x210>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	f240 80dd 	bls.w	8002062 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 80d7 	beq.w	8002062 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	015a      	lsls	r2, r3, #5
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4413      	add	r3, r2
 8001ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ec6:	6093      	str	r3, [r2, #8]
 8001ec8:	e0cb      	b.n	8002062 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	f003 0320 	and.w	r3, r3, #32
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d009      	beq.n	8001ee8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	6093      	str	r3, [r2, #8]
 8001ee6:	e0bc      	b.n	8002062 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f040 80b7 	bne.w	8002062 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4a5d      	ldr	r2, [pc, #372]	; (800206c <PCD_EP_OutXfrComplete_int+0x210>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d90f      	bls.n	8001f1c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00a      	beq.n	8001f1c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	015a      	lsls	r2, r3, #5
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f12:	461a      	mov	r2, r3
 8001f14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f18:	6093      	str	r3, [r2, #8]
 8001f1a:	e0a2      	b.n	8002062 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	1a9b      	subs	r3, r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f2e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	0159      	lsls	r1, r3, #5
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	440b      	add	r3, r1
 8001f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001f42:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4403      	add	r3, r0
 8001f52:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f56:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f6a:	6819      	ldr	r1, [r3, #0]
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4403      	add	r3, r0
 8001f7a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4419      	add	r1, r3
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	4613      	mov	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4403      	add	r3, r0
 8001f90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f94:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d114      	bne.n	8001fc6 <PCD_EP_OutXfrComplete_int+0x16a>
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	1a9b      	subs	r3, r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d108      	bne.n	8001fc6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	f002 f80b 	bl	8003fdc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	4619      	mov	r1, r3
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f003 ffd1 	bl	8005f74 <HAL_PCD_DataOutStageCallback>
 8001fd2:	e046      	b.n	8002062 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4a26      	ldr	r2, [pc, #152]	; (8002070 <PCD_EP_OutXfrComplete_int+0x214>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d124      	bne.n	8002026 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00a      	beq.n	8001ffc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ff8:	6093      	str	r3, [r2, #8]
 8001ffa:	e032      	b.n	8002062 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	2b00      	cmp	r3, #0
 8002004:	d008      	beq.n	8002018 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	015a      	lsls	r2, r3, #5
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4413      	add	r3, r2
 800200e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002012:	461a      	mov	r2, r3
 8002014:	2320      	movs	r3, #32
 8002016:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	4619      	mov	r1, r3
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f003 ffa8 	bl	8005f74 <HAL_PCD_DataOutStageCallback>
 8002024:	e01d      	b.n	8002062 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d114      	bne.n	8002056 <PCD_EP_OutXfrComplete_int+0x1fa>
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d108      	bne.n	8002056 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800204e:	461a      	mov	r2, r3
 8002050:	2100      	movs	r1, #0
 8002052:	f001 ffc3 	bl	8003fdc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	4619      	mov	r1, r3
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f003 ff89 	bl	8005f74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	4f54300a 	.word	0x4f54300a
 8002070:	4f54310a 	.word	0x4f54310a

08002074 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	333c      	adds	r3, #60	; 0x3c
 800208c:	3304      	adds	r3, #4
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4413      	add	r3, r2
 800209a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4a15      	ldr	r2, [pc, #84]	; (80020fc <PCD_EP_OutSetupPacket_int+0x88>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d90e      	bls.n	80020c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d009      	beq.n	80020c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	015a      	lsls	r2, r3, #5
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4413      	add	r3, r2
 80020bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c0:	461a      	mov	r2, r3
 80020c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f003 ff41 	bl	8005f50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <PCD_EP_OutSetupPacket_int+0x88>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d90c      	bls.n	80020f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d108      	bne.n	80020f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020e8:	461a      	mov	r2, r3
 80020ea:	2101      	movs	r1, #1
 80020ec:	f001 ff76 	bl	8003fdc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	4f54300a 	.word	0x4f54300a

08002100 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	70fb      	strb	r3, [r7, #3]
 800210c:	4613      	mov	r3, r2
 800210e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d107      	bne.n	800212e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800211e:	883b      	ldrh	r3, [r7, #0]
 8002120:	0419      	lsls	r1, r3, #16
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	430a      	orrs	r2, r1
 800212a:	629a      	str	r2, [r3, #40]	; 0x28
 800212c:	e028      	b.n	8002180 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	0c1b      	lsrs	r3, r3, #16
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	4413      	add	r3, r2
 800213a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800213c:	2300      	movs	r3, #0
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	e00d      	b.n	800215e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	3340      	adds	r3, #64	; 0x40
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	0c1b      	lsrs	r3, r3, #16
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	4413      	add	r3, r2
 8002156:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	3301      	adds	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	3b01      	subs	r3, #1
 8002164:	429a      	cmp	r2, r3
 8002166:	d3ec      	bcc.n	8002142 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002168:	883b      	ldrh	r3, [r7, #0]
 800216a:	0418      	lsls	r0, r3, #16
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6819      	ldr	r1, [r3, #0]
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	3b01      	subs	r3, #1
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	4302      	orrs	r2, r0
 8002178:	3340      	adds	r3, #64	; 0x40
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e264      	b.n	80026a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d075      	beq.n	80022d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021e6:	4ba3      	ldr	r3, [pc, #652]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d00c      	beq.n	800220c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021f2:	4ba0      	ldr	r3, [pc, #640]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d112      	bne.n	8002224 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021fe:	4b9d      	ldr	r3, [pc, #628]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800220a:	d10b      	bne.n	8002224 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220c:	4b99      	ldr	r3, [pc, #612]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d05b      	beq.n	80022d0 <HAL_RCC_OscConfig+0x108>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d157      	bne.n	80022d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e23f      	b.n	80026a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222c:	d106      	bne.n	800223c <HAL_RCC_OscConfig+0x74>
 800222e:	4b91      	ldr	r3, [pc, #580]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a90      	ldr	r2, [pc, #576]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 8002234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e01d      	b.n	8002278 <HAL_RCC_OscConfig+0xb0>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0x98>
 8002246:	4b8b      	ldr	r3, [pc, #556]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a8a      	ldr	r2, [pc, #552]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 800224c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	4b88      	ldr	r3, [pc, #544]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a87      	ldr	r2, [pc, #540]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 8002258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	e00b      	b.n	8002278 <HAL_RCC_OscConfig+0xb0>
 8002260:	4b84      	ldr	r3, [pc, #528]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a83      	ldr	r2, [pc, #524]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 8002266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	4b81      	ldr	r3, [pc, #516]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a80      	ldr	r2, [pc, #512]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 8002272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d013      	beq.n	80022a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7fe fb0e 	bl	80008a0 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002288:	f7fe fb0a 	bl	80008a0 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	; 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e204      	b.n	80026a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	4b76      	ldr	r3, [pc, #472]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0xc0>
 80022a6:	e014      	b.n	80022d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7fe fafa 	bl	80008a0 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b0:	f7fe faf6 	bl	80008a0 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	; 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e1f0      	b.n	80026a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c2:	4b6c      	ldr	r3, [pc, #432]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0xe8>
 80022ce:	e000      	b.n	80022d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d063      	beq.n	80023a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022de:	4b65      	ldr	r3, [pc, #404]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00b      	beq.n	8002302 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ea:	4b62      	ldr	r3, [pc, #392]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d11c      	bne.n	8002330 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022f6:	4b5f      	ldr	r3, [pc, #380]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d116      	bne.n	8002330 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002302:	4b5c      	ldr	r3, [pc, #368]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <HAL_RCC_OscConfig+0x152>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d001      	beq.n	800231a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e1c4      	b.n	80026a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231a:	4b56      	ldr	r3, [pc, #344]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4952      	ldr	r1, [pc, #328]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232e:	e03a      	b.n	80023a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d020      	beq.n	800237a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002338:	4b4f      	ldr	r3, [pc, #316]	; (8002478 <HAL_RCC_OscConfig+0x2b0>)
 800233a:	2201      	movs	r2, #1
 800233c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233e:	f7fe faaf 	bl	80008a0 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002346:	f7fe faab 	bl	80008a0 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e1a5      	b.n	80026a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002358:	4b46      	ldr	r3, [pc, #280]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002364:	4b43      	ldr	r3, [pc, #268]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4940      	ldr	r1, [pc, #256]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 8002374:	4313      	orrs	r3, r2
 8002376:	600b      	str	r3, [r1, #0]
 8002378:	e015      	b.n	80023a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800237a:	4b3f      	ldr	r3, [pc, #252]	; (8002478 <HAL_RCC_OscConfig+0x2b0>)
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002380:	f7fe fa8e 	bl	80008a0 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002388:	f7fe fa8a 	bl	80008a0 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e184      	b.n	80026a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239a:	4b36      	ldr	r3, [pc, #216]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f0      	bne.n	8002388 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d030      	beq.n	8002414 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d016      	beq.n	80023e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ba:	4b30      	ldr	r3, [pc, #192]	; (800247c <HAL_RCC_OscConfig+0x2b4>)
 80023bc:	2201      	movs	r2, #1
 80023be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c0:	f7fe fa6e 	bl	80008a0 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c8:	f7fe fa6a 	bl	80008a0 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e164      	b.n	80026a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023da:	4b26      	ldr	r3, [pc, #152]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x200>
 80023e6:	e015      	b.n	8002414 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e8:	4b24      	ldr	r3, [pc, #144]	; (800247c <HAL_RCC_OscConfig+0x2b4>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ee:	f7fe fa57 	bl	80008a0 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023f6:	f7fe fa53 	bl	80008a0 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e14d      	b.n	80026a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002408:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 800240a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f0      	bne.n	80023f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80a0 	beq.w	8002562 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002422:	2300      	movs	r3, #0
 8002424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002426:	4b13      	ldr	r3, [pc, #76]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10f      	bne.n	8002452 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	4a0e      	ldr	r2, [pc, #56]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002440:	6413      	str	r3, [r2, #64]	; 0x40
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <HAL_RCC_OscConfig+0x2ac>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244e:	2301      	movs	r3, #1
 8002450:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_RCC_OscConfig+0x2b8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245a:	2b00      	cmp	r3, #0
 800245c:	d121      	bne.n	80024a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <HAL_RCC_OscConfig+0x2b8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a07      	ldr	r2, [pc, #28]	; (8002480 <HAL_RCC_OscConfig+0x2b8>)
 8002464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246a:	f7fe fa19 	bl	80008a0 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002470:	e011      	b.n	8002496 <HAL_RCC_OscConfig+0x2ce>
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800
 8002478:	42470000 	.word	0x42470000
 800247c:	42470e80 	.word	0x42470e80
 8002480:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002484:	f7fe fa0c 	bl	80008a0 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e106      	b.n	80026a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002496:	4b85      	ldr	r3, [pc, #532]	; (80026ac <HAL_RCC_OscConfig+0x4e4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d106      	bne.n	80024b8 <HAL_RCC_OscConfig+0x2f0>
 80024aa:	4b81      	ldr	r3, [pc, #516]	; (80026b0 <HAL_RCC_OscConfig+0x4e8>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ae:	4a80      	ldr	r2, [pc, #512]	; (80026b0 <HAL_RCC_OscConfig+0x4e8>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	6713      	str	r3, [r2, #112]	; 0x70
 80024b6:	e01c      	b.n	80024f2 <HAL_RCC_OscConfig+0x32a>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d10c      	bne.n	80024da <HAL_RCC_OscConfig+0x312>
 80024c0:	4b7b      	ldr	r3, [pc, #492]	; (80026b0 <HAL_RCC_OscConfig+0x4e8>)
 80024c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c4:	4a7a      	ldr	r2, [pc, #488]	; (80026b0 <HAL_RCC_OscConfig+0x4e8>)
 80024c6:	f043 0304 	orr.w	r3, r3, #4
 80024ca:	6713      	str	r3, [r2, #112]	; 0x70
 80024cc:	4b78      	ldr	r3, [pc, #480]	; (80026b0 <HAL_RCC_OscConfig+0x4e8>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	4a77      	ldr	r2, [pc, #476]	; (80026b0 <HAL_RCC_OscConfig+0x4e8>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6713      	str	r3, [r2, #112]	; 0x70
 80024d8:	e00b      	b.n	80024f2 <HAL_RCC_OscConfig+0x32a>
 80024da:	4b75      	ldr	r3, [pc, #468]	; (80026b0 <HAL_RCC_OscConfig+0x4e8>)
 80024dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024de:	4a74      	ldr	r2, [pc, #464]	; (80026b0 <HAL_RCC_OscConfig+0x4e8>)
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	6713      	str	r3, [r2, #112]	; 0x70
 80024e6:	4b72      	ldr	r3, [pc, #456]	; (80026b0 <HAL_RCC_OscConfig+0x4e8>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ea:	4a71      	ldr	r2, [pc, #452]	; (80026b0 <HAL_RCC_OscConfig+0x4e8>)
 80024ec:	f023 0304 	bic.w	r3, r3, #4
 80024f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d015      	beq.n	8002526 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fa:	f7fe f9d1 	bl	80008a0 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002500:	e00a      	b.n	8002518 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002502:	f7fe f9cd 	bl	80008a0 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002510:	4293      	cmp	r3, r2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e0c5      	b.n	80026a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	4b65      	ldr	r3, [pc, #404]	; (80026b0 <HAL_RCC_OscConfig+0x4e8>)
 800251a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0ee      	beq.n	8002502 <HAL_RCC_OscConfig+0x33a>
 8002524:	e014      	b.n	8002550 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002526:	f7fe f9bb 	bl	80008a0 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800252c:	e00a      	b.n	8002544 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7fe f9b7 	bl	80008a0 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f241 3288 	movw	r2, #5000	; 0x1388
 800253c:	4293      	cmp	r3, r2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e0af      	b.n	80026a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002544:	4b5a      	ldr	r3, [pc, #360]	; (80026b0 <HAL_RCC_OscConfig+0x4e8>)
 8002546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1ee      	bne.n	800252e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002550:	7dfb      	ldrb	r3, [r7, #23]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d105      	bne.n	8002562 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002556:	4b56      	ldr	r3, [pc, #344]	; (80026b0 <HAL_RCC_OscConfig+0x4e8>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	4a55      	ldr	r2, [pc, #340]	; (80026b0 <HAL_RCC_OscConfig+0x4e8>)
 800255c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002560:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 809b 	beq.w	80026a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800256c:	4b50      	ldr	r3, [pc, #320]	; (80026b0 <HAL_RCC_OscConfig+0x4e8>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b08      	cmp	r3, #8
 8002576:	d05c      	beq.n	8002632 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d141      	bne.n	8002604 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002580:	4b4c      	ldr	r3, [pc, #304]	; (80026b4 <HAL_RCC_OscConfig+0x4ec>)
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002586:	f7fe f98b 	bl	80008a0 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800258e:	f7fe f987 	bl	80008a0 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e081      	b.n	80026a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a0:	4b43      	ldr	r3, [pc, #268]	; (80026b0 <HAL_RCC_OscConfig+0x4e8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f0      	bne.n	800258e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69da      	ldr	r2, [r3, #28]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	019b      	lsls	r3, r3, #6
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	085b      	lsrs	r3, r3, #1
 80025c4:	3b01      	subs	r3, #1
 80025c6:	041b      	lsls	r3, r3, #16
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	061b      	lsls	r3, r3, #24
 80025d0:	4937      	ldr	r1, [pc, #220]	; (80026b0 <HAL_RCC_OscConfig+0x4e8>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d6:	4b37      	ldr	r3, [pc, #220]	; (80026b4 <HAL_RCC_OscConfig+0x4ec>)
 80025d8:	2201      	movs	r2, #1
 80025da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7fe f960 	bl	80008a0 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e4:	f7fe f95c 	bl	80008a0 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e056      	b.n	80026a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f6:	4b2e      	ldr	r3, [pc, #184]	; (80026b0 <HAL_RCC_OscConfig+0x4e8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x41c>
 8002602:	e04e      	b.n	80026a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002604:	4b2b      	ldr	r3, [pc, #172]	; (80026b4 <HAL_RCC_OscConfig+0x4ec>)
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260a:	f7fe f949 	bl	80008a0 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002612:	f7fe f945 	bl	80008a0 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e03f      	b.n	80026a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002624:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <HAL_RCC_OscConfig+0x4e8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f0      	bne.n	8002612 <HAL_RCC_OscConfig+0x44a>
 8002630:	e037      	b.n	80026a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e032      	b.n	80026a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800263e:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <HAL_RCC_OscConfig+0x4e8>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d028      	beq.n	800269e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002656:	429a      	cmp	r2, r3
 8002658:	d121      	bne.n	800269e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002664:	429a      	cmp	r2, r3
 8002666:	d11a      	bne.n	800269e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800266e:	4013      	ands	r3, r2
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002674:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002676:	4293      	cmp	r3, r2
 8002678:	d111      	bne.n	800269e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	3b01      	subs	r3, #1
 8002688:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d107      	bne.n	800269e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800269a:	429a      	cmp	r2, r3
 800269c:	d001      	beq.n	80026a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40007000 	.word	0x40007000
 80026b0:	40023800 	.word	0x40023800
 80026b4:	42470060 	.word	0x42470060

080026b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0cc      	b.n	8002866 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026cc:	4b68      	ldr	r3, [pc, #416]	; (8002870 <HAL_RCC_ClockConfig+0x1b8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d90c      	bls.n	80026f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026da:	4b65      	ldr	r3, [pc, #404]	; (8002870 <HAL_RCC_ClockConfig+0x1b8>)
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e2:	4b63      	ldr	r3, [pc, #396]	; (8002870 <HAL_RCC_ClockConfig+0x1b8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0b8      	b.n	8002866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d020      	beq.n	8002742 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800270c:	4b59      	ldr	r3, [pc, #356]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4a58      	ldr	r2, [pc, #352]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002716:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002724:	4b53      	ldr	r3, [pc, #332]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	4a52      	ldr	r2, [pc, #328]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800272e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002730:	4b50      	ldr	r3, [pc, #320]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	494d      	ldr	r1, [pc, #308]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	4313      	orrs	r3, r2
 8002740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d044      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d107      	bne.n	8002766 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002756:	4b47      	ldr	r3, [pc, #284]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d119      	bne.n	8002796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e07f      	b.n	8002866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d003      	beq.n	8002776 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002772:	2b03      	cmp	r3, #3
 8002774:	d107      	bne.n	8002786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002776:	4b3f      	ldr	r3, [pc, #252]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d109      	bne.n	8002796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e06f      	b.n	8002866 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002786:	4b3b      	ldr	r3, [pc, #236]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e067      	b.n	8002866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002796:	4b37      	ldr	r3, [pc, #220]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f023 0203 	bic.w	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4934      	ldr	r1, [pc, #208]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a8:	f7fe f87a 	bl	80008a0 <HAL_GetTick>
 80027ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ae:	e00a      	b.n	80027c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b0:	f7fe f876 	bl	80008a0 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e04f      	b.n	8002866 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c6:	4b2b      	ldr	r3, [pc, #172]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 020c 	and.w	r2, r3, #12
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d1eb      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027d8:	4b25      	ldr	r3, [pc, #148]	; (8002870 <HAL_RCC_ClockConfig+0x1b8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d20c      	bcs.n	8002800 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e6:	4b22      	ldr	r3, [pc, #136]	; (8002870 <HAL_RCC_ClockConfig+0x1b8>)
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	4b20      	ldr	r3, [pc, #128]	; (8002870 <HAL_RCC_ClockConfig+0x1b8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e032      	b.n	8002866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800280c:	4b19      	ldr	r3, [pc, #100]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4916      	ldr	r1, [pc, #88]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	4313      	orrs	r3, r2
 800281c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d009      	beq.n	800283e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800282a:	4b12      	ldr	r3, [pc, #72]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	490e      	ldr	r1, [pc, #56]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	4313      	orrs	r3, r2
 800283c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800283e:	f000 f821 	bl	8002884 <HAL_RCC_GetSysClockFreq>
 8002842:	4602      	mov	r2, r0
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	490a      	ldr	r1, [pc, #40]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 8002850:	5ccb      	ldrb	r3, [r1, r3]
 8002852:	fa22 f303 	lsr.w	r3, r2, r3
 8002856:	4a09      	ldr	r2, [pc, #36]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800285a:	4b09      	ldr	r3, [pc, #36]	; (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7fd ffda 	bl	8000818 <HAL_InitTick>

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40023c00 	.word	0x40023c00
 8002874:	40023800 	.word	0x40023800
 8002878:	08006598 	.word	0x08006598
 800287c:	20000000 	.word	0x20000000
 8002880:	20000004 	.word	0x20000004

08002884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002884:	b5b0      	push	{r4, r5, r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800288a:	2100      	movs	r1, #0
 800288c:	6079      	str	r1, [r7, #4]
 800288e:	2100      	movs	r1, #0
 8002890:	60f9      	str	r1, [r7, #12]
 8002892:	2100      	movs	r1, #0
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002896:	2100      	movs	r1, #0
 8002898:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800289a:	4952      	ldr	r1, [pc, #328]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x160>)
 800289c:	6889      	ldr	r1, [r1, #8]
 800289e:	f001 010c 	and.w	r1, r1, #12
 80028a2:	2908      	cmp	r1, #8
 80028a4:	d00d      	beq.n	80028c2 <HAL_RCC_GetSysClockFreq+0x3e>
 80028a6:	2908      	cmp	r1, #8
 80028a8:	f200 8094 	bhi.w	80029d4 <HAL_RCC_GetSysClockFreq+0x150>
 80028ac:	2900      	cmp	r1, #0
 80028ae:	d002      	beq.n	80028b6 <HAL_RCC_GetSysClockFreq+0x32>
 80028b0:	2904      	cmp	r1, #4
 80028b2:	d003      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0x38>
 80028b4:	e08e      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028b6:	4b4c      	ldr	r3, [pc, #304]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x164>)
 80028b8:	60bb      	str	r3, [r7, #8]
       break;
 80028ba:	e08e      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028bc:	4b4b      	ldr	r3, [pc, #300]	; (80029ec <HAL_RCC_GetSysClockFreq+0x168>)
 80028be:	60bb      	str	r3, [r7, #8]
      break;
 80028c0:	e08b      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028c2:	4948      	ldr	r1, [pc, #288]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80028c4:	6849      	ldr	r1, [r1, #4]
 80028c6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80028ca:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028cc:	4945      	ldr	r1, [pc, #276]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80028ce:	6849      	ldr	r1, [r1, #4]
 80028d0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80028d4:	2900      	cmp	r1, #0
 80028d6:	d024      	beq.n	8002922 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d8:	4942      	ldr	r1, [pc, #264]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80028da:	6849      	ldr	r1, [r1, #4]
 80028dc:	0989      	lsrs	r1, r1, #6
 80028de:	4608      	mov	r0, r1
 80028e0:	f04f 0100 	mov.w	r1, #0
 80028e4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80028e8:	f04f 0500 	mov.w	r5, #0
 80028ec:	ea00 0204 	and.w	r2, r0, r4
 80028f0:	ea01 0305 	and.w	r3, r1, r5
 80028f4:	493d      	ldr	r1, [pc, #244]	; (80029ec <HAL_RCC_GetSysClockFreq+0x168>)
 80028f6:	fb01 f003 	mul.w	r0, r1, r3
 80028fa:	2100      	movs	r1, #0
 80028fc:	fb01 f102 	mul.w	r1, r1, r2
 8002900:	1844      	adds	r4, r0, r1
 8002902:	493a      	ldr	r1, [pc, #232]	; (80029ec <HAL_RCC_GetSysClockFreq+0x168>)
 8002904:	fba2 0101 	umull	r0, r1, r2, r1
 8002908:	1863      	adds	r3, r4, r1
 800290a:	4619      	mov	r1, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	461a      	mov	r2, r3
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	f7fd fc60 	bl	80001d8 <__aeabi_uldivmod>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4613      	mov	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	e04a      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002922:	4b30      	ldr	r3, [pc, #192]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	099b      	lsrs	r3, r3, #6
 8002928:	461a      	mov	r2, r3
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002932:	f04f 0100 	mov.w	r1, #0
 8002936:	ea02 0400 	and.w	r4, r2, r0
 800293a:	ea03 0501 	and.w	r5, r3, r1
 800293e:	4620      	mov	r0, r4
 8002940:	4629      	mov	r1, r5
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	014b      	lsls	r3, r1, #5
 800294c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002950:	0142      	lsls	r2, r0, #5
 8002952:	4610      	mov	r0, r2
 8002954:	4619      	mov	r1, r3
 8002956:	1b00      	subs	r0, r0, r4
 8002958:	eb61 0105 	sbc.w	r1, r1, r5
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	018b      	lsls	r3, r1, #6
 8002966:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800296a:	0182      	lsls	r2, r0, #6
 800296c:	1a12      	subs	r2, r2, r0
 800296e:	eb63 0301 	sbc.w	r3, r3, r1
 8002972:	f04f 0000 	mov.w	r0, #0
 8002976:	f04f 0100 	mov.w	r1, #0
 800297a:	00d9      	lsls	r1, r3, #3
 800297c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002980:	00d0      	lsls	r0, r2, #3
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	1912      	adds	r2, r2, r4
 8002988:	eb45 0303 	adc.w	r3, r5, r3
 800298c:	f04f 0000 	mov.w	r0, #0
 8002990:	f04f 0100 	mov.w	r1, #0
 8002994:	0299      	lsls	r1, r3, #10
 8002996:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800299a:	0290      	lsls	r0, r2, #10
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4610      	mov	r0, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	461a      	mov	r2, r3
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	f7fd fc14 	bl	80001d8 <__aeabi_uldivmod>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4613      	mov	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029b8:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	0c1b      	lsrs	r3, r3, #16
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	3301      	adds	r3, #1
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d0:	60bb      	str	r3, [r7, #8]
      break;
 80029d2:	e002      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x164>)
 80029d6:	60bb      	str	r3, [r7, #8]
      break;
 80029d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029da:	68bb      	ldr	r3, [r7, #8]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bdb0      	pop	{r4, r5, r7, pc}
 80029e4:	40023800 	.word	0x40023800
 80029e8:	00f42400 	.word	0x00f42400
 80029ec:	00b71b00 	.word	0x00b71b00

080029f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000000 	.word	0x20000000

08002a08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002a08:	b084      	sub	sp, #16
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	f107 001c 	add.w	r0, r7, #28
 8002a16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d122      	bne.n	8002a66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d105      	bne.n	8002a5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f001 fb1c 	bl	8004098 <USB_CoreReset>
 8002a60:	4603      	mov	r3, r0
 8002a62:	73fb      	strb	r3, [r7, #15]
 8002a64:	e01a      	b.n	8002a9c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f001 fb10 	bl	8004098 <USB_CoreReset>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	639a      	str	r2, [r3, #56]	; 0x38
 8002a8e:	e005      	b.n	8002a9c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d10b      	bne.n	8002aba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f043 0206 	orr.w	r2, r3, #6
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f043 0220 	orr.w	r2, r3, #32
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ac6:	b004      	add	sp, #16
 8002ac8:	4770      	bx	lr
	...

08002acc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d165      	bne.n	8002bac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4a41      	ldr	r2, [pc, #260]	; (8002be8 <USB_SetTurnaroundTime+0x11c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d906      	bls.n	8002af6 <USB_SetTurnaroundTime+0x2a>
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4a40      	ldr	r2, [pc, #256]	; (8002bec <USB_SetTurnaroundTime+0x120>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d202      	bcs.n	8002af6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002af0:	230f      	movs	r3, #15
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	e062      	b.n	8002bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4a3c      	ldr	r2, [pc, #240]	; (8002bec <USB_SetTurnaroundTime+0x120>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d306      	bcc.n	8002b0c <USB_SetTurnaroundTime+0x40>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	4a3b      	ldr	r2, [pc, #236]	; (8002bf0 <USB_SetTurnaroundTime+0x124>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d202      	bcs.n	8002b0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002b06:	230e      	movs	r3, #14
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	e057      	b.n	8002bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4a38      	ldr	r2, [pc, #224]	; (8002bf0 <USB_SetTurnaroundTime+0x124>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d306      	bcc.n	8002b22 <USB_SetTurnaroundTime+0x56>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4a37      	ldr	r2, [pc, #220]	; (8002bf4 <USB_SetTurnaroundTime+0x128>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d202      	bcs.n	8002b22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002b1c:	230d      	movs	r3, #13
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	e04c      	b.n	8002bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	4a33      	ldr	r2, [pc, #204]	; (8002bf4 <USB_SetTurnaroundTime+0x128>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d306      	bcc.n	8002b38 <USB_SetTurnaroundTime+0x6c>
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	4a32      	ldr	r2, [pc, #200]	; (8002bf8 <USB_SetTurnaroundTime+0x12c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d802      	bhi.n	8002b38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002b32:	230c      	movs	r3, #12
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	e041      	b.n	8002bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4a2f      	ldr	r2, [pc, #188]	; (8002bf8 <USB_SetTurnaroundTime+0x12c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d906      	bls.n	8002b4e <USB_SetTurnaroundTime+0x82>
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4a2e      	ldr	r2, [pc, #184]	; (8002bfc <USB_SetTurnaroundTime+0x130>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d802      	bhi.n	8002b4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002b48:	230b      	movs	r3, #11
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	e036      	b.n	8002bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	4a2a      	ldr	r2, [pc, #168]	; (8002bfc <USB_SetTurnaroundTime+0x130>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d906      	bls.n	8002b64 <USB_SetTurnaroundTime+0x98>
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	4a29      	ldr	r2, [pc, #164]	; (8002c00 <USB_SetTurnaroundTime+0x134>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d802      	bhi.n	8002b64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002b5e:	230a      	movs	r3, #10
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	e02b      	b.n	8002bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	4a26      	ldr	r2, [pc, #152]	; (8002c00 <USB_SetTurnaroundTime+0x134>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d906      	bls.n	8002b7a <USB_SetTurnaroundTime+0xae>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4a25      	ldr	r2, [pc, #148]	; (8002c04 <USB_SetTurnaroundTime+0x138>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d202      	bcs.n	8002b7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002b74:	2309      	movs	r3, #9
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	e020      	b.n	8002bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	4a21      	ldr	r2, [pc, #132]	; (8002c04 <USB_SetTurnaroundTime+0x138>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d306      	bcc.n	8002b90 <USB_SetTurnaroundTime+0xc4>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	4a20      	ldr	r2, [pc, #128]	; (8002c08 <USB_SetTurnaroundTime+0x13c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d802      	bhi.n	8002b90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002b8a:	2308      	movs	r3, #8
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	e015      	b.n	8002bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4a1d      	ldr	r2, [pc, #116]	; (8002c08 <USB_SetTurnaroundTime+0x13c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d906      	bls.n	8002ba6 <USB_SetTurnaroundTime+0xda>
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	4a1c      	ldr	r2, [pc, #112]	; (8002c0c <USB_SetTurnaroundTime+0x140>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d202      	bcs.n	8002ba6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002ba0:	2307      	movs	r3, #7
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	e00a      	b.n	8002bbc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002ba6:	2306      	movs	r3, #6
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	e007      	b.n	8002bbc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d102      	bne.n	8002bb8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002bb2:	2309      	movs	r3, #9
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	e001      	b.n	8002bbc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002bb8:	2309      	movs	r3, #9
 8002bba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	029b      	lsls	r3, r3, #10
 8002bd0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	371c      	adds	r7, #28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	00d8acbf 	.word	0x00d8acbf
 8002bec:	00e4e1c0 	.word	0x00e4e1c0
 8002bf0:	00f42400 	.word	0x00f42400
 8002bf4:	01067380 	.word	0x01067380
 8002bf8:	011a499f 	.word	0x011a499f
 8002bfc:	01312cff 	.word	0x01312cff
 8002c00:	014ca43f 	.word	0x014ca43f
 8002c04:	016e3600 	.word	0x016e3600
 8002c08:	01a6ab1f 	.word	0x01a6ab1f
 8002c0c:	01e84800 	.word	0x01e84800

08002c10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f043 0201 	orr.w	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f023 0201 	bic.w	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d115      	bne.n	8002ca2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002c82:	2001      	movs	r0, #1
 8002c84:	f7fd fe18 	bl	80008b8 <HAL_Delay>
      ms++;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f001 f972 	bl	8003f78 <USB_GetMode>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d01e      	beq.n	8002cd8 <USB_SetCurrentMode+0x84>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b31      	cmp	r3, #49	; 0x31
 8002c9e:	d9f0      	bls.n	8002c82 <USB_SetCurrentMode+0x2e>
 8002ca0:	e01a      	b.n	8002cd8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d115      	bne.n	8002cd4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	f7fd fdff 	bl	80008b8 <HAL_Delay>
      ms++;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f001 f959 	bl	8003f78 <USB_GetMode>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <USB_SetCurrentMode+0x84>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b31      	cmp	r3, #49	; 0x31
 8002cd0:	d9f0      	bls.n	8002cb4 <USB_SetCurrentMode+0x60>
 8002cd2:	e001      	b.n	8002cd8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e005      	b.n	8002ce4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b32      	cmp	r3, #50	; 0x32
 8002cdc:	d101      	bne.n	8002ce2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002cec:	b084      	sub	sp, #16
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b086      	sub	sp, #24
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002cfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	e009      	b.n	8002d20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	3340      	adds	r3, #64	; 0x40
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	2200      	movs	r2, #0
 8002d18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	2b0e      	cmp	r3, #14
 8002d24:	d9f2      	bls.n	8002d0c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d11c      	bne.n	8002d66 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d3a:	f043 0302 	orr.w	r3, r3, #2
 8002d3e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d50:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	639a      	str	r2, [r3, #56]	; 0x38
 8002d64:	e00b      	b.n	8002d7e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d76:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002d84:	461a      	mov	r2, r3
 8002d86:	2300      	movs	r3, #0
 8002d88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d90:	4619      	mov	r1, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d98:	461a      	mov	r2, r3
 8002d9a:	680b      	ldr	r3, [r1, #0]
 8002d9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d10c      	bne.n	8002dbe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d104      	bne.n	8002db4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002daa:	2100      	movs	r1, #0
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f945 	bl	800303c <USB_SetDevSpeed>
 8002db2:	e008      	b.n	8002dc6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002db4:	2101      	movs	r1, #1
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f940 	bl	800303c <USB_SetDevSpeed>
 8002dbc:	e003      	b.n	8002dc6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002dbe:	2103      	movs	r1, #3
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f93b 	bl	800303c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002dc6:	2110      	movs	r1, #16
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f8f3 	bl	8002fb4 <USB_FlushTxFifo>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f90f 	bl	8002ffc <USB_FlushRxFifo>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dee:	461a      	mov	r2, r3
 8002df0:	2300      	movs	r3, #0
 8002df2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e06:	461a      	mov	r2, r3
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	e043      	b.n	8002e9a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e28:	d118      	bne.n	8002e5c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10a      	bne.n	8002e46 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	e013      	b.n	8002e6e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e52:	461a      	mov	r2, r3
 8002e54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	e008      	b.n	8002e6e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e68:	461a      	mov	r2, r3
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	3301      	adds	r3, #1
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d3b7      	bcc.n	8002e12 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	e043      	b.n	8002f30 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002eba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ebe:	d118      	bne.n	8002ef2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10a      	bne.n	8002edc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	e013      	b.n	8002f04 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	e008      	b.n	8002f04 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002efe:	461a      	mov	r2, r3
 8002f00:	2300      	movs	r3, #0
 8002f02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f10:	461a      	mov	r2, r3
 8002f12:	2300      	movs	r3, #0
 8002f14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f22:	461a      	mov	r2, r3
 8002f24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d3b7      	bcc.n	8002ea8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002f58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d105      	bne.n	8002f6c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f043 0210 	orr.w	r2, r3, #16
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699a      	ldr	r2, [r3, #24]
 8002f70:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <USB_DevInit+0x2c4>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d005      	beq.n	8002f8a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	f043 0208 	orr.w	r2, r3, #8
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d107      	bne.n	8002fa0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f98:	f043 0304 	orr.w	r3, r3, #4
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fac:	b004      	add	sp, #16
 8002fae:	4770      	bx	lr
 8002fb0:	803c3800 	.word	0x803c3800

08002fb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	019b      	lsls	r3, r3, #6
 8002fc6:	f043 0220 	orr.w	r2, r3, #32
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	4a08      	ldr	r2, [pc, #32]	; (8002ff8 <USB_FlushTxFifo+0x44>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e006      	b.n	8002fec <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d0f1      	beq.n	8002fce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	00030d40 	.word	0x00030d40

08002ffc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2210      	movs	r2, #16
 800300c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	3301      	adds	r3, #1
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	4a08      	ldr	r2, [pc, #32]	; (8003038 <USB_FlushRxFifo+0x3c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e006      	b.n	800302c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b10      	cmp	r3, #16
 8003028:	d0f1      	beq.n	800300e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	00030d40 	.word	0x00030d40

0800303c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	68f9      	ldr	r1, [r7, #12]
 8003058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800305c:	4313      	orrs	r3, r2
 800305e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800306e:	b480      	push	{r7}
 8003070:	b087      	sub	sp, #28
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 0306 	and.w	r3, r3, #6
 8003086:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d102      	bne.n	8003094 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800308e:	2300      	movs	r3, #0
 8003090:	75fb      	strb	r3, [r7, #23]
 8003092:	e00a      	b.n	80030aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d002      	beq.n	80030a0 <USB_GetDevSpeed+0x32>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b06      	cmp	r3, #6
 800309e:	d102      	bne.n	80030a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80030a0:	2302      	movs	r3, #2
 80030a2:	75fb      	strb	r3, [r7, #23]
 80030a4:	e001      	b.n	80030aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80030a6:	230f      	movs	r3, #15
 80030a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	371c      	adds	r7, #28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	785b      	ldrb	r3, [r3, #1]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d13a      	bne.n	800314a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030da:	69da      	ldr	r2, [r3, #28]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	2101      	movs	r1, #1
 80030e6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	68f9      	ldr	r1, [r7, #12]
 80030ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d155      	bne.n	80031b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4413      	add	r3, r2
 8003114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	78db      	ldrb	r3, [r3, #3]
 8003126:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003128:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	059b      	lsls	r3, r3, #22
 800312e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003130:	4313      	orrs	r3, r2
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	0151      	lsls	r1, r2, #5
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	440a      	add	r2, r1
 800313a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800313e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	e036      	b.n	80031b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003150:	69da      	ldr	r2, [r3, #28]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	2101      	movs	r1, #1
 800315c:	fa01 f303 	lsl.w	r3, r1, r3
 8003160:	041b      	lsls	r3, r3, #16
 8003162:	68f9      	ldr	r1, [r7, #12]
 8003164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003168:	4313      	orrs	r3, r2
 800316a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d11a      	bne.n	80031b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4413      	add	r3, r2
 800318a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	78db      	ldrb	r3, [r3, #3]
 800319c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800319e:	430b      	orrs	r3, r1
 80031a0:	4313      	orrs	r3, r2
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	0151      	lsls	r1, r2, #5
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	440a      	add	r2, r1
 80031aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	785b      	ldrb	r3, [r3, #1]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d161      	bne.n	80032a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031fa:	d11f      	bne.n	800323c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4413      	add	r3, r2
 8003204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	0151      	lsls	r1, r2, #5
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	440a      	add	r2, r1
 8003212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003216:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800321a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4413      	add	r3, r2
 8003224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	0151      	lsls	r1, r2, #5
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	440a      	add	r2, r1
 8003232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003236:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800323a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	2101      	movs	r1, #1
 800324e:	fa01 f303 	lsl.w	r3, r1, r3
 8003252:	b29b      	uxth	r3, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	68f9      	ldr	r1, [r7, #12]
 8003258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800325c:	4013      	ands	r3, r2
 800325e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003266:	69da      	ldr	r2, [r3, #28]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	2101      	movs	r1, #1
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	b29b      	uxth	r3, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	68f9      	ldr	r1, [r7, #12]
 800327c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003280:	4013      	ands	r3, r2
 8003282:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4413      	add	r3, r2
 800328c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	0159      	lsls	r1, r3, #5
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	440b      	add	r3, r1
 800329a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800329e:	4619      	mov	r1, r3
 80032a0:	4b35      	ldr	r3, [pc, #212]	; (8003378 <USB_DeactivateEndpoint+0x1b0>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]
 80032a6:	e060      	b.n	800336a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032be:	d11f      	bne.n	8003300 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	0151      	lsls	r1, r2, #5
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	440a      	add	r2, r1
 80032d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	0151      	lsls	r1, r2, #5
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	440a      	add	r2, r1
 80032f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	2101      	movs	r1, #1
 8003312:	fa01 f303 	lsl.w	r3, r1, r3
 8003316:	041b      	lsls	r3, r3, #16
 8003318:	43db      	mvns	r3, r3
 800331a:	68f9      	ldr	r1, [r7, #12]
 800331c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003320:	4013      	ands	r3, r2
 8003322:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800332a:	69da      	ldr	r2, [r3, #28]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	f003 030f 	and.w	r3, r3, #15
 8003334:	2101      	movs	r1, #1
 8003336:	fa01 f303 	lsl.w	r3, r1, r3
 800333a:	041b      	lsls	r3, r3, #16
 800333c:	43db      	mvns	r3, r3
 800333e:	68f9      	ldr	r1, [r7, #12]
 8003340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003344:	4013      	ands	r3, r2
 8003346:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4413      	add	r3, r2
 8003350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	0159      	lsls	r1, r3, #5
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	440b      	add	r3, r1
 800335e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003362:	4619      	mov	r1, r3
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <USB_DeactivateEndpoint+0x1b4>)
 8003366:	4013      	ands	r3, r2
 8003368:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	ec337800 	.word	0xec337800
 800337c:	eff37800 	.word	0xeff37800

08003380 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08a      	sub	sp, #40	; 0x28
 8003384:	af02      	add	r7, sp, #8
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	4613      	mov	r3, r2
 800338c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	785b      	ldrb	r3, [r3, #1]
 800339c:	2b01      	cmp	r3, #1
 800339e:	f040 815c 	bne.w	800365a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d132      	bne.n	8003410 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	0151      	lsls	r1, r2, #5
 80033bc:	69fa      	ldr	r2, [r7, #28]
 80033be:	440a      	add	r2, r1
 80033c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80033c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80033cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	0151      	lsls	r1, r2, #5
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	440a      	add	r2, r1
 80033e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80033ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	0151      	lsls	r1, r2, #5
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	440a      	add	r2, r1
 8003404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003408:	0cdb      	lsrs	r3, r3, #19
 800340a:	04db      	lsls	r3, r3, #19
 800340c:	6113      	str	r3, [r2, #16]
 800340e:	e074      	b.n	80034fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	4413      	add	r3, r2
 8003418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	0151      	lsls	r1, r2, #5
 8003422:	69fa      	ldr	r2, [r7, #28]
 8003424:	440a      	add	r2, r1
 8003426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800342a:	0cdb      	lsrs	r3, r3, #19
 800342c:	04db      	lsls	r3, r3, #19
 800342e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	0151      	lsls	r1, r2, #5
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	440a      	add	r2, r1
 8003446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800344a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800344e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003452:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	4413      	add	r3, r2
 800345c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003460:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	6959      	ldr	r1, [r3, #20]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	440b      	add	r3, r1
 800346c:	1e59      	subs	r1, r3, #1
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	fbb1 f3f3 	udiv	r3, r1, r3
 8003476:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003478:	4b9d      	ldr	r3, [pc, #628]	; (80036f0 <USB_EPStartXfer+0x370>)
 800347a:	400b      	ands	r3, r1
 800347c:	69b9      	ldr	r1, [r7, #24]
 800347e:	0148      	lsls	r0, r1, #5
 8003480:	69f9      	ldr	r1, [r7, #28]
 8003482:	4401      	add	r1, r0
 8003484:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003488:	4313      	orrs	r3, r2
 800348a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	4413      	add	r3, r2
 8003494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a2:	69b9      	ldr	r1, [r7, #24]
 80034a4:	0148      	lsls	r0, r1, #5
 80034a6:	69f9      	ldr	r1, [r7, #28]
 80034a8:	4401      	add	r1, r0
 80034aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80034ae:	4313      	orrs	r3, r2
 80034b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	78db      	ldrb	r3, [r3, #3]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d11f      	bne.n	80034fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	0151      	lsls	r1, r2, #5
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	440a      	add	r2, r1
 80034d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80034d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	0151      	lsls	r1, r2, #5
 80034ec:	69fa      	ldr	r2, [r7, #28]
 80034ee:	440a      	add	r2, r1
 80034f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d14b      	bne.n	8003598 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d009      	beq.n	800351c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	4413      	add	r3, r2
 8003510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003514:	461a      	mov	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	78db      	ldrb	r3, [r3, #3]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d128      	bne.n	8003576 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003530:	2b00      	cmp	r3, #0
 8003532:	d110      	bne.n	8003556 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	0151      	lsls	r1, r2, #5
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	440a      	add	r2, r1
 800354a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800354e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	e00f      	b.n	8003576 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	0151      	lsls	r1, r2, #5
 8003568:	69fa      	ldr	r2, [r7, #28]
 800356a:	440a      	add	r2, r1
 800356c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003574:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	0151      	lsls	r1, r2, #5
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	440a      	add	r2, r1
 800358c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003590:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	e12f      	b.n	80037f8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	0151      	lsls	r1, r2, #5
 80035aa:	69fa      	ldr	r2, [r7, #28]
 80035ac:	440a      	add	r2, r1
 80035ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80035b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	78db      	ldrb	r3, [r3, #3]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d015      	beq.n	80035ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8117 	beq.w	80037f8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	2101      	movs	r1, #1
 80035dc:	fa01 f303 	lsl.w	r3, r1, r3
 80035e0:	69f9      	ldr	r1, [r7, #28]
 80035e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035e6:	4313      	orrs	r3, r2
 80035e8:	634b      	str	r3, [r1, #52]	; 0x34
 80035ea:	e105      	b.n	80037f8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d110      	bne.n	800361e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	0151      	lsls	r1, r2, #5
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	440a      	add	r2, r1
 8003612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003616:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	e00f      	b.n	800363e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	4413      	add	r3, r2
 8003626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	0151      	lsls	r1, r2, #5
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	440a      	add	r2, r1
 8003634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	68d9      	ldr	r1, [r3, #12]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	781a      	ldrb	r2, [r3, #0]
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	b298      	uxth	r0, r3
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	4603      	mov	r3, r0
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fa2b 	bl	8003aae <USB_WritePacket>
 8003658:	e0ce      	b.n	80037f8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	0151      	lsls	r1, r2, #5
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	440a      	add	r2, r1
 8003670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003674:	0cdb      	lsrs	r3, r3, #19
 8003676:	04db      	lsls	r3, r3, #19
 8003678:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	0151      	lsls	r1, r2, #5
 800368c:	69fa      	ldr	r2, [r7, #28]
 800368e:	440a      	add	r2, r1
 8003690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003694:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003698:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800369c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d126      	bne.n	80036f4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036bc:	69b9      	ldr	r1, [r7, #24]
 80036be:	0148      	lsls	r0, r1, #5
 80036c0:	69f9      	ldr	r1, [r7, #28]
 80036c2:	4401      	add	r1, r0
 80036c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80036c8:	4313      	orrs	r3, r2
 80036ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	0151      	lsls	r1, r2, #5
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	440a      	add	r2, r1
 80036e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036ea:	6113      	str	r3, [r2, #16]
 80036ec:	e036      	b.n	800375c <USB_EPStartXfer+0x3dc>
 80036ee:	bf00      	nop
 80036f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	695a      	ldr	r2, [r3, #20]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4413      	add	r3, r2
 80036fe:	1e5a      	subs	r2, r3, #1
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	fbb2 f3f3 	udiv	r3, r2, r3
 8003708:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	8afb      	ldrh	r3, [r7, #22]
 800371a:	04d9      	lsls	r1, r3, #19
 800371c:	4b39      	ldr	r3, [pc, #228]	; (8003804 <USB_EPStartXfer+0x484>)
 800371e:	400b      	ands	r3, r1
 8003720:	69b9      	ldr	r1, [r7, #24]
 8003722:	0148      	lsls	r0, r1, #5
 8003724:	69f9      	ldr	r1, [r7, #28]
 8003726:	4401      	add	r1, r0
 8003728:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800372c:	4313      	orrs	r3, r2
 800372e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	4413      	add	r3, r2
 8003738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800373c:	691a      	ldr	r2, [r3, #16]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	8af9      	ldrh	r1, [r7, #22]
 8003744:	fb01 f303 	mul.w	r3, r1, r3
 8003748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800374c:	69b9      	ldr	r1, [r7, #24]
 800374e:	0148      	lsls	r0, r1, #5
 8003750:	69f9      	ldr	r1, [r7, #28]
 8003752:	4401      	add	r1, r0
 8003754:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003758:	4313      	orrs	r3, r2
 800375a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d10d      	bne.n	800377e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d009      	beq.n	800377e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	68d9      	ldr	r1, [r3, #12]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800377a:	460a      	mov	r2, r1
 800377c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	78db      	ldrb	r3, [r3, #3]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d128      	bne.n	80037d8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d110      	bne.n	80037b8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	0151      	lsls	r1, r2, #5
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	440a      	add	r2, r1
 80037ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	e00f      	b.n	80037d8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	0151      	lsls	r1, r2, #5
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	440a      	add	r2, r1
 80037ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	0151      	lsls	r1, r2, #5
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	440a      	add	r2, r1
 80037ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	1ff80000 	.word	0x1ff80000

08003808 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	4613      	mov	r3, r2
 8003814:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	785b      	ldrb	r3, [r3, #1]
 8003824:	2b01      	cmp	r3, #1
 8003826:	f040 80cd 	bne.w	80039c4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d132      	bne.n	8003898 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	0151      	lsls	r1, r2, #5
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	440a      	add	r2, r1
 8003848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800384c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003850:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003854:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	4413      	add	r3, r2
 800385e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	0151      	lsls	r1, r2, #5
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	440a      	add	r2, r1
 800386c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003870:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003874:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	0151      	lsls	r1, r2, #5
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	440a      	add	r2, r1
 800388c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003890:	0cdb      	lsrs	r3, r3, #19
 8003892:	04db      	lsls	r3, r3, #19
 8003894:	6113      	str	r3, [r2, #16]
 8003896:	e04e      	b.n	8003936 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	0151      	lsls	r1, r2, #5
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	440a      	add	r2, r1
 80038ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038b2:	0cdb      	lsrs	r3, r3, #19
 80038b4:	04db      	lsls	r3, r3, #19
 80038b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	0151      	lsls	r1, r2, #5
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	440a      	add	r2, r1
 80038ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038da:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	695a      	ldr	r2, [r3, #20]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d903      	bls.n	80038f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	0151      	lsls	r1, r2, #5
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	440a      	add	r2, r1
 8003906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800390a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800390e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003926:	6939      	ldr	r1, [r7, #16]
 8003928:	0148      	lsls	r0, r1, #5
 800392a:	6979      	ldr	r1, [r7, #20]
 800392c:	4401      	add	r1, r0
 800392e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003932:	4313      	orrs	r3, r2
 8003934:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d11e      	bne.n	800397a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d009      	beq.n	8003958 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	4413      	add	r3, r2
 800394c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003950:	461a      	mov	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	4413      	add	r3, r2
 8003960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	0151      	lsls	r1, r2, #5
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	440a      	add	r2, r1
 800396e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003972:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	e092      	b.n	8003aa0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	4413      	add	r3, r2
 8003982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	0151      	lsls	r1, r2, #5
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	440a      	add	r2, r1
 8003990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003994:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003998:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d07e      	beq.n	8003aa0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	2101      	movs	r1, #1
 80039b4:	fa01 f303 	lsl.w	r3, r1, r3
 80039b8:	6979      	ldr	r1, [r7, #20]
 80039ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039be:	4313      	orrs	r3, r2
 80039c0:	634b      	str	r3, [r1, #52]	; 0x34
 80039c2:	e06d      	b.n	8003aa0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	0151      	lsls	r1, r2, #5
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	440a      	add	r2, r1
 80039da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039de:	0cdb      	lsrs	r3, r3, #19
 80039e0:	04db      	lsls	r3, r3, #19
 80039e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	0151      	lsls	r1, r2, #5
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	440a      	add	r2, r1
 80039fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a06:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	0151      	lsls	r1, r2, #5
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	440a      	add	r2, r1
 8003a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a44:	691a      	ldr	r2, [r3, #16]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a4e:	6939      	ldr	r1, [r7, #16]
 8003a50:	0148      	lsls	r0, r1, #5
 8003a52:	6979      	ldr	r1, [r7, #20]
 8003a54:	4401      	add	r1, r0
 8003a56:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d10d      	bne.n	8003a80 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d009      	beq.n	8003a80 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	68d9      	ldr	r1, [r3, #12]
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7c:	460a      	mov	r2, r1
 8003a7e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	0151      	lsls	r1, r2, #5
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	440a      	add	r2, r1
 8003a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b089      	sub	sp, #36	; 0x24
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	4611      	mov	r1, r2
 8003aba:	461a      	mov	r2, r3
 8003abc:	460b      	mov	r3, r1
 8003abe:	71fb      	strb	r3, [r7, #7]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003acc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d123      	bne.n	8003b1c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ad4:	88bb      	ldrh	r3, [r7, #4]
 8003ad6:	3303      	adds	r3, #3
 8003ad8:	089b      	lsrs	r3, r3, #2
 8003ada:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003adc:	2300      	movs	r3, #0
 8003ade:	61bb      	str	r3, [r7, #24]
 8003ae0:	e018      	b.n	8003b14 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	031a      	lsls	r2, r3, #12
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aee:	461a      	mov	r2, r3
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3301      	adds	r3, #1
 8003afa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	3301      	adds	r3, #1
 8003b00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	3301      	adds	r3, #1
 8003b06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	3301      	adds	r3, #1
 8003b12:	61bb      	str	r3, [r7, #24]
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d3e2      	bcc.n	8003ae2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3724      	adds	r7, #36	; 0x24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b08b      	sub	sp, #44	; 0x2c
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	4613      	mov	r3, r2
 8003b36:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	089b      	lsrs	r3, r3, #2
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003b48:	88fb      	ldrh	r3, [r7, #6]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003b50:	2300      	movs	r3, #0
 8003b52:	623b      	str	r3, [r7, #32]
 8003b54:	e014      	b.n	8003b80 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	601a      	str	r2, [r3, #0]
    pDest++;
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	3301      	adds	r3, #1
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	3301      	adds	r3, #1
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	3301      	adds	r3, #1
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	623b      	str	r3, [r7, #32]
 8003b80:	6a3a      	ldr	r2, [r7, #32]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d3e6      	bcc.n	8003b56 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003b88:	8bfb      	ldrh	r3, [r7, #30]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01e      	beq.n	8003bcc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f107 0310 	add.w	r3, r7, #16
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	fa22 f303 	lsr.w	r3, r2, r3
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	701a      	strb	r2, [r3, #0]
      i++;
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	623b      	str	r3, [r7, #32]
      pDest++;
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003bc0:	8bfb      	ldrh	r3, [r7, #30]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003bc6:	8bfb      	ldrh	r3, [r7, #30]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1ea      	bne.n	8003ba2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	372c      	adds	r7, #44	; 0x2c
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b085      	sub	sp, #20
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	785b      	ldrb	r3, [r3, #1]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d12c      	bne.n	8003c50 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	db12      	blt.n	8003c2e <USB_EPSetStall+0x54>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00f      	beq.n	8003c2e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	0151      	lsls	r1, r2, #5
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	440a      	add	r2, r1
 8003c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c2c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	0151      	lsls	r1, r2, #5
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	440a      	add	r2, r1
 8003c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	e02b      	b.n	8003ca8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	db12      	blt.n	8003c88 <USB_EPSetStall+0xae>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00f      	beq.n	8003c88 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	0151      	lsls	r1, r2, #5
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	440a      	add	r2, r1
 8003c7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c86:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	0151      	lsls	r1, r2, #5
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	440a      	add	r2, r1
 8003c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ca2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ca6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b085      	sub	sp, #20
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	785b      	ldrb	r3, [r3, #1]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d128      	bne.n	8003d24 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	0151      	lsls	r1, r2, #5
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	440a      	add	r2, r1
 8003ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cf0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	78db      	ldrb	r3, [r3, #3]
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d003      	beq.n	8003d02 <USB_EPClearStall+0x4c>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	78db      	ldrb	r3, [r3, #3]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d138      	bne.n	8003d74 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	0151      	lsls	r1, r2, #5
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	440a      	add	r2, r1
 8003d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	e027      	b.n	8003d74 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	0151      	lsls	r1, r2, #5
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	440a      	add	r2, r1
 8003d3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	78db      	ldrb	r3, [r3, #3]
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d003      	beq.n	8003d54 <USB_EPClearStall+0x9e>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	78db      	ldrb	r3, [r3, #3]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d10f      	bne.n	8003d74 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	0151      	lsls	r1, r2, #5
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	440a      	add	r2, r1
 8003d6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d72:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b085      	sub	sp, #20
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003da0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003da4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	78fb      	ldrb	r3, [r7, #3]
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003db6:	68f9      	ldr	r1, [r7, #12]
 8003db8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b085      	sub	sp, #20
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003de8:	f023 0303 	bic.w	r3, r3, #3
 8003dec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dfc:	f023 0302 	bic.w	r3, r3, #2
 8003e00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003e2a:	f023 0303 	bic.w	r3, r3, #3
 8003e2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e3e:	f043 0302 	orr.w	r3, r3, #2
 8003e42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b085      	sub	sp, #20
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4013      	ands	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	0c1b      	lsrs	r3, r3, #16
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	b29b      	uxth	r3, r3
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003f0e:	68bb      	ldr	r3, [r7, #8]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4c:	01db      	lsls	r3, r3, #7
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003f56:	78fb      	ldrb	r3, [r7, #3]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4013      	ands	r3, r2
 8003f68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	371c      	adds	r7, #28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	f003 0301 	and.w	r3, r3, #1
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003fb2:	f023 0307 	bic.w	r3, r3, #7
 8003fb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	333c      	adds	r3, #60	; 0x3c
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	4a26      	ldr	r2, [pc, #152]	; (8004094 <USB_EP0_OutStart+0xb8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d90a      	bls.n	8004016 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800400c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004010:	d101      	bne.n	8004016 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e037      	b.n	8004086 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401c:	461a      	mov	r2, r3
 800401e:	2300      	movs	r3, #0
 8004020:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004030:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004034:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004044:	f043 0318 	orr.w	r3, r3, #24
 8004048:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004058:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800405c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800405e:	7afb      	ldrb	r3, [r7, #11]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d10f      	bne.n	8004084 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406a:	461a      	mov	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800407e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004082:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	4f54300a 	.word	0x4f54300a

08004098 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3301      	adds	r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	4a13      	ldr	r2, [pc, #76]	; (80040f8 <USB_CoreReset+0x60>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d901      	bls.n	80040b4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e01a      	b.n	80040ea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	daf3      	bge.n	80040a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f043 0201 	orr.w	r2, r3, #1
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3301      	adds	r3, #1
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	4a09      	ldr	r2, [pc, #36]	; (80040f8 <USB_CoreReset+0x60>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d901      	bls.n	80040dc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e006      	b.n	80040ea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d0f1      	beq.n	80040cc <USB_CoreReset+0x34>

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	00030d40 	.word	0x00030d40

080040fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004108:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800410c:	f002 f99c 	bl	8006448 <USBD_static_malloc>
 8004110:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d105      	bne.n	8004124 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004120:	2302      	movs	r3, #2
 8004122:	e066      	b.n	80041f2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	7c1b      	ldrb	r3, [r3, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d119      	bne.n	8004168 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004138:	2202      	movs	r2, #2
 800413a:	2181      	movs	r1, #129	; 0x81
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f002 f860 	bl	8006202 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800414c:	2202      	movs	r2, #2
 800414e:	2101      	movs	r1, #1
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f002 f856 	bl	8006202 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2210      	movs	r2, #16
 8004162:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004166:	e016      	b.n	8004196 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004168:	2340      	movs	r3, #64	; 0x40
 800416a:	2202      	movs	r2, #2
 800416c:	2181      	movs	r1, #129	; 0x81
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f002 f847 	bl	8006202 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800417a:	2340      	movs	r3, #64	; 0x40
 800417c:	2202      	movs	r2, #2
 800417e:	2101      	movs	r1, #1
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f002 f83e 	bl	8006202 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2210      	movs	r2, #16
 8004192:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004196:	2308      	movs	r3, #8
 8004198:	2203      	movs	r2, #3
 800419a:	2182      	movs	r1, #130	; 0x82
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f002 f830 	bl	8006202 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	7c1b      	ldrb	r3, [r3, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d109      	bne.n	80041e0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041d6:	2101      	movs	r1, #1
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f002 f901 	bl	80063e0 <USBD_LL_PrepareReceive>
 80041de:	e007      	b.n	80041f0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041e6:	2340      	movs	r3, #64	; 0x40
 80041e8:	2101      	movs	r1, #1
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f002 f8f8 	bl	80063e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b082      	sub	sp, #8
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	460b      	mov	r3, r1
 8004204:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004206:	2181      	movs	r1, #129	; 0x81
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f002 f820 	bl	800624e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004214:	2101      	movs	r1, #1
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f002 f819 	bl	800624e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004224:	2182      	movs	r1, #130	; 0x82
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f002 f811 	bl	800624e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00e      	beq.n	8004264 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004256:	4618      	mov	r0, r3
 8004258:	f002 f904 	bl	8006464 <USBD_static_free>
    pdev->pClassData = NULL;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004280:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004286:	2300      	movs	r3, #0
 8004288:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004294:	2303      	movs	r3, #3
 8004296:	e0af      	b.n	80043f8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d03f      	beq.n	8004324 <USBD_CDC_Setup+0xb4>
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	f040 809f 	bne.w	80043e8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	88db      	ldrh	r3, [r3, #6]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d02e      	beq.n	8004310 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	b25b      	sxtb	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	da16      	bge.n	80042ea <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80042c8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	88d2      	ldrh	r2, [r2, #6]
 80042ce:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	88db      	ldrh	r3, [r3, #6]
 80042d4:	2b07      	cmp	r3, #7
 80042d6:	bf28      	it	cs
 80042d8:	2307      	movcs	r3, #7
 80042da:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	89fa      	ldrh	r2, [r7, #14]
 80042e0:	4619      	mov	r1, r3
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f001 fb19 	bl	800591a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80042e8:	e085      	b.n	80043f6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	785a      	ldrb	r2, [r3, #1]
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	88db      	ldrh	r3, [r3, #6]
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004300:	6939      	ldr	r1, [r7, #16]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	88db      	ldrh	r3, [r3, #6]
 8004306:	461a      	mov	r2, r3
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f001 fb32 	bl	8005972 <USBD_CtlPrepareRx>
      break;
 800430e:	e072      	b.n	80043f6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	7850      	ldrb	r0, [r2, #1]
 800431c:	2200      	movs	r2, #0
 800431e:	6839      	ldr	r1, [r7, #0]
 8004320:	4798      	blx	r3
      break;
 8004322:	e068      	b.n	80043f6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	785b      	ldrb	r3, [r3, #1]
 8004328:	2b0b      	cmp	r3, #11
 800432a:	d852      	bhi.n	80043d2 <USBD_CDC_Setup+0x162>
 800432c:	a201      	add	r2, pc, #4	; (adr r2, 8004334 <USBD_CDC_Setup+0xc4>)
 800432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004332:	bf00      	nop
 8004334:	08004365 	.word	0x08004365
 8004338:	080043e1 	.word	0x080043e1
 800433c:	080043d3 	.word	0x080043d3
 8004340:	080043d3 	.word	0x080043d3
 8004344:	080043d3 	.word	0x080043d3
 8004348:	080043d3 	.word	0x080043d3
 800434c:	080043d3 	.word	0x080043d3
 8004350:	080043d3 	.word	0x080043d3
 8004354:	080043d3 	.word	0x080043d3
 8004358:	080043d3 	.word	0x080043d3
 800435c:	0800438f 	.word	0x0800438f
 8004360:	080043b9 	.word	0x080043b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b03      	cmp	r3, #3
 800436e:	d107      	bne.n	8004380 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004370:	f107 030a 	add.w	r3, r7, #10
 8004374:	2202      	movs	r2, #2
 8004376:	4619      	mov	r1, r3
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f001 face 	bl	800591a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800437e:	e032      	b.n	80043e6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004380:	6839      	ldr	r1, [r7, #0]
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f001 fa58 	bl	8005838 <USBD_CtlError>
            ret = USBD_FAIL;
 8004388:	2303      	movs	r3, #3
 800438a:	75fb      	strb	r3, [r7, #23]
          break;
 800438c:	e02b      	b.n	80043e6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b03      	cmp	r3, #3
 8004398:	d107      	bne.n	80043aa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800439a:	f107 030d 	add.w	r3, r7, #13
 800439e:	2201      	movs	r2, #1
 80043a0:	4619      	mov	r1, r3
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f001 fab9 	bl	800591a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80043a8:	e01d      	b.n	80043e6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80043aa:	6839      	ldr	r1, [r7, #0]
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f001 fa43 	bl	8005838 <USBD_CtlError>
            ret = USBD_FAIL;
 80043b2:	2303      	movs	r3, #3
 80043b4:	75fb      	strb	r3, [r7, #23]
          break;
 80043b6:	e016      	b.n	80043e6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d00f      	beq.n	80043e4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80043c4:	6839      	ldr	r1, [r7, #0]
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f001 fa36 	bl	8005838 <USBD_CtlError>
            ret = USBD_FAIL;
 80043cc:	2303      	movs	r3, #3
 80043ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80043d0:	e008      	b.n	80043e4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80043d2:	6839      	ldr	r1, [r7, #0]
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f001 fa2f 	bl	8005838 <USBD_CtlError>
          ret = USBD_FAIL;
 80043da:	2303      	movs	r3, #3
 80043dc:	75fb      	strb	r3, [r7, #23]
          break;
 80043de:	e002      	b.n	80043e6 <USBD_CDC_Setup+0x176>
          break;
 80043e0:	bf00      	nop
 80043e2:	e008      	b.n	80043f6 <USBD_CDC_Setup+0x186>
          break;
 80043e4:	bf00      	nop
      }
      break;
 80043e6:	e006      	b.n	80043f6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80043e8:	6839      	ldr	r1, [r7, #0]
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f001 fa24 	bl	8005838 <USBD_CtlError>
      ret = USBD_FAIL;
 80043f0:	2303      	movs	r3, #3
 80043f2:	75fb      	strb	r3, [r7, #23]
      break;
 80043f4:	bf00      	nop
  }

  return (uint8_t)ret;
 80043f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004412:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800441e:	2303      	movs	r3, #3
 8004420:	e04f      	b.n	80044c2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004428:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800442a:	78fa      	ldrb	r2, [r7, #3]
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	3318      	adds	r3, #24
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d029      	beq.n	8004494 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004440:	78fa      	ldrb	r2, [r7, #3]
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	3318      	adds	r3, #24
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	78f9      	ldrb	r1, [r7, #3]
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	460b      	mov	r3, r1
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	1a5b      	subs	r3, r3, r1
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4403      	add	r3, r0
 8004460:	3344      	adds	r3, #68	; 0x44
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	fbb2 f1f3 	udiv	r1, r2, r3
 8004468:	fb03 f301 	mul.w	r3, r3, r1
 800446c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800446e:	2b00      	cmp	r3, #0
 8004470:	d110      	bne.n	8004494 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004472:	78fa      	ldrb	r2, [r7, #3]
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	3318      	adds	r3, #24
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004486:	78f9      	ldrb	r1, [r7, #3]
 8004488:	2300      	movs	r3, #0
 800448a:	2200      	movs	r2, #0
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f001 ff86 	bl	800639e <USBD_LL_Transmit>
 8004492:	e015      	b.n	80044c0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2200      	movs	r2, #0
 8004498:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00b      	beq.n	80044c0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80044bc:	78fa      	ldrb	r2, [r7, #3]
 80044be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	460b      	mov	r3, r1
 80044d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e015      	b.n	8004518 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	4619      	mov	r1, r3
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f001 ff96 	bl	8006422 <USBD_LL_GetRxDataSize>
 80044f6:	4602      	mov	r2, r0
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004512:	4611      	mov	r1, r2
 8004514:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800452e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004536:	2303      	movs	r3, #3
 8004538:	e01b      	b.n	8004572 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d015      	beq.n	8004570 <USBD_CDC_EP0_RxReady+0x50>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800454a:	2bff      	cmp	r3, #255	; 0xff
 800454c:	d010      	beq.n	8004570 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800455c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004564:	b292      	uxth	r2, r2
 8004566:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	22ff      	movs	r2, #255	; 0xff
 800456c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2243      	movs	r2, #67	; 0x43
 8004588:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800458a:	4b03      	ldr	r3, [pc, #12]	; (8004598 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800458c:	4618      	mov	r0, r3
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	20000094 	.word	0x20000094

0800459c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2243      	movs	r2, #67	; 0x43
 80045a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80045aa:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	20000050 	.word	0x20000050

080045bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2243      	movs	r2, #67	; 0x43
 80045c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80045ca:	4b03      	ldr	r3, [pc, #12]	; (80045d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	200000d8 	.word	0x200000d8

080045dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	220a      	movs	r2, #10
 80045e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80045ea:	4b03      	ldr	r3, [pc, #12]	; (80045f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	2000000c 	.word	0x2000000c

080045fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800460c:	2303      	movs	r3, #3
 800460e:	e004      	b.n	800461a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004626:	b480      	push	{r7}
 8004628:	b087      	sub	sp, #28
 800462a:	af00      	add	r7, sp, #0
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004638:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004640:	2303      	movs	r3, #3
 8004642:	e008      	b.n	8004656 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004662:	b480      	push	{r7}
 8004664:	b085      	sub	sp, #20
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
 800466a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004672:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800467a:	2303      	movs	r3, #3
 800467c:	e004      	b.n	8004688 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046a2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e01a      	b.n	80046ec <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d114      	bne.n	80046ea <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80046de:	2181      	movs	r1, #129	; 0x81
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f001 fe5c 	bl	800639e <USBD_LL_Transmit>

    ret = USBD_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004702:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800470e:	2303      	movs	r3, #3
 8004710:	e016      	b.n	8004740 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	7c1b      	ldrb	r3, [r3, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d109      	bne.n	800472e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004724:	2101      	movs	r1, #1
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f001 fe5a 	bl	80063e0 <USBD_LL_PrepareReceive>
 800472c:	e007      	b.n	800473e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004734:	2340      	movs	r3, #64	; 0x40
 8004736:	2101      	movs	r1, #1
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f001 fe51 	bl	80063e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	4613      	mov	r3, r2
 8004754:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800475c:	2303      	movs	r3, #3
 800475e:	e01f      	b.n	80047a0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	79fa      	ldrb	r2, [r7, #7]
 8004792:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f001 fccd 	bl	8006134 <USBD_LL_Init>
 800479a:	4603      	mov	r3, r0
 800479c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800479e:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80047bc:	2303      	movs	r3, #3
 80047be:	e016      	b.n	80047ee <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00b      	beq.n	80047ec <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	f107 020e 	add.w	r2, r7, #14
 80047e0:	4610      	mov	r0, r2
 80047e2:	4798      	blx	r3
 80047e4:	4602      	mov	r2, r0
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b082      	sub	sp, #8
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f001 fce4 	bl	80061cc <USBD_LL_Start>
 8004804:	4603      	mov	r3, r0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004830:	2303      	movs	r3, #3
 8004832:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800483a:	2b00      	cmp	r3, #0
 800483c:	d009      	beq.n	8004852 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	78fa      	ldrb	r2, [r7, #3]
 8004848:	4611      	mov	r1, r2
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	4798      	blx	r3
 800484e:	4603      	mov	r3, r0
 8004850:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004852:	7bfb      	ldrb	r3, [r7, #15]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d007      	beq.n	8004882 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	78fa      	ldrb	r2, [r7, #3]
 800487c:	4611      	mov	r1, r2
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	4798      	blx	r3
  }

  return USBD_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800489c:	6839      	ldr	r1, [r7, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 ff90 	bl	80057c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80048b2:	461a      	mov	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80048c0:	f003 031f 	and.w	r3, r3, #31
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d01a      	beq.n	80048fe <USBD_LL_SetupStage+0x72>
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d822      	bhi.n	8004912 <USBD_LL_SetupStage+0x86>
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <USBD_LL_SetupStage+0x4a>
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d00a      	beq.n	80048ea <USBD_LL_SetupStage+0x5e>
 80048d4:	e01d      	b.n	8004912 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80048dc:	4619      	mov	r1, r3
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fa62 	bl	8004da8 <USBD_StdDevReq>
 80048e4:	4603      	mov	r3, r0
 80048e6:	73fb      	strb	r3, [r7, #15]
      break;
 80048e8:	e020      	b.n	800492c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80048f0:	4619      	mov	r1, r3
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fac6 	bl	8004e84 <USBD_StdItfReq>
 80048f8:	4603      	mov	r3, r0
 80048fa:	73fb      	strb	r3, [r7, #15]
      break;
 80048fc:	e016      	b.n	800492c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004904:	4619      	mov	r1, r3
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fb05 	bl	8004f16 <USBD_StdEPReq>
 800490c:	4603      	mov	r3, r0
 800490e:	73fb      	strb	r3, [r7, #15]
      break;
 8004910:	e00c      	b.n	800492c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004918:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800491c:	b2db      	uxtb	r3, r3
 800491e:	4619      	mov	r1, r3
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f001 fcb3 	bl	800628c <USBD_LL_StallEP>
 8004926:	4603      	mov	r3, r0
 8004928:	73fb      	strb	r3, [r7, #15]
      break;
 800492a:	bf00      	nop
  }

  return ret;
 800492c:	7bfb      	ldrb	r3, [r7, #15]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b086      	sub	sp, #24
 800493a:	af00      	add	r7, sp, #0
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	460b      	mov	r3, r1
 8004940:	607a      	str	r2, [r7, #4]
 8004942:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004944:	7afb      	ldrb	r3, [r7, #11]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d138      	bne.n	80049bc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004950:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004958:	2b03      	cmp	r3, #3
 800495a:	d14a      	bne.n	80049f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	429a      	cmp	r2, r3
 8004966:	d913      	bls.n	8004990 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	1ad2      	subs	r2, r2, r3
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	4293      	cmp	r3, r2
 8004980:	bf28      	it	cs
 8004982:	4613      	movcs	r3, r2
 8004984:	461a      	mov	r2, r3
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f001 f80f 	bl	80059ac <USBD_CtlContinueRx>
 800498e:	e030      	b.n	80049f2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b03      	cmp	r3, #3
 800499a:	d10b      	bne.n	80049b4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f001 f80a 	bl	80059ce <USBD_CtlSendStatus>
 80049ba:	e01a      	b.n	80049f2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b03      	cmp	r3, #3
 80049c6:	d114      	bne.n	80049f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00e      	beq.n	80049f2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	7afa      	ldrb	r2, [r7, #11]
 80049de:	4611      	mov	r1, r2
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	4798      	blx	r3
 80049e4:	4603      	mov	r3, r0
 80049e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80049e8:	7dfb      	ldrb	r3, [r7, #23]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80049ee:	7dfb      	ldrb	r3, [r7, #23]
 80049f0:	e000      	b.n	80049f4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	460b      	mov	r3, r1
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004a0a:	7afb      	ldrb	r3, [r7, #11]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d16b      	bne.n	8004ae8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3314      	adds	r3, #20
 8004a14:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d156      	bne.n	8004ace <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d914      	bls.n	8004a56 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	1ad2      	subs	r2, r2, r3
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 ff84 	bl	8005950 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a48:	2300      	movs	r3, #0
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f001 fcc6 	bl	80063e0 <USBD_LL_PrepareReceive>
 8004a54:	e03b      	b.n	8004ace <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d11c      	bne.n	8004a9c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d316      	bcc.n	8004a9c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d20f      	bcs.n	8004a9c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2100      	movs	r1, #0
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 ff65 	bl	8005950 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a8e:	2300      	movs	r3, #0
 8004a90:	2200      	movs	r2, #0
 8004a92:	2100      	movs	r1, #0
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f001 fca3 	bl	80063e0 <USBD_LL_PrepareReceive>
 8004a9a:	e018      	b.n	8004ace <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d10b      	bne.n	8004ac0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004ac0:	2180      	movs	r1, #128	; 0x80
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f001 fbe2 	bl	800628c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 ff93 	bl	80059f4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d122      	bne.n	8004b1e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f7ff fe98 	bl	800480e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004ae6:	e01a      	b.n	8004b1e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b03      	cmp	r3, #3
 8004af2:	d114      	bne.n	8004b1e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00e      	beq.n	8004b1e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	7afa      	ldrb	r2, [r7, #11]
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	4798      	blx	r3
 8004b10:	4603      	mov	r3, r0
 8004b12:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004b14:	7dfb      	ldrb	r3, [r7, #23]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004b1a:	7dfb      	ldrb	r3, [r7, #23]
 8004b1c:	e000      	b.n	8004b20 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e02f      	b.n	8004bbc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00f      	beq.n	8004b86 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d009      	beq.n	8004b86 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6852      	ldr	r2, [r2, #4]
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	4611      	mov	r1, r2
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004b86:	2340      	movs	r3, #64	; 0x40
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f001 fb38 	bl	8006202 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2240      	movs	r2, #64	; 0x40
 8004b9e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ba2:	2340      	movs	r3, #64	; 0x40
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2180      	movs	r1, #128	; 0x80
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f001 fb2a 	bl	8006202 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2240      	movs	r2, #64	; 0x40
 8004bb8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	78fa      	ldrb	r2, [r7, #3]
 8004bd4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2204      	movs	r2, #4
 8004bfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d106      	bne.n	8004c32 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e012      	b.n	8004c7c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b03      	cmp	r3, #3
 8004c60:	d10b      	bne.n	8004c7a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d005      	beq.n	8004c7a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e014      	b.n	8004cc8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d10d      	bne.n	8004cc6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d007      	beq.n	8004cc6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	78fa      	ldrb	r2, [r7, #3]
 8004cc0:	4611      	mov	r1, r2
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e014      	b.n	8004d14 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b03      	cmp	r3, #3
 8004cf4:	d10d      	bne.n	8004d12 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d007      	beq.n	8004d12 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	78fa      	ldrb	r2, [r7, #3]
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b082      	sub	sp, #8
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d009      	beq.n	8004d60 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6852      	ldr	r2, [r2, #4]
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	4798      	blx	r3
  }

  return USBD_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b087      	sub	sp, #28
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004d88:	8a3b      	ldrh	r3, [r7, #16]
 8004d8a:	021b      	lsls	r3, r3, #8
 8004d8c:	b21a      	sxth	r2, r3
 8004d8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	b21b      	sxth	r3, r3
 8004d96:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004d98:	89fb      	ldrh	r3, [r7, #14]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
	...

08004da8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004dbe:	2b40      	cmp	r3, #64	; 0x40
 8004dc0:	d005      	beq.n	8004dce <USBD_StdDevReq+0x26>
 8004dc2:	2b40      	cmp	r3, #64	; 0x40
 8004dc4:	d853      	bhi.n	8004e6e <USBD_StdDevReq+0xc6>
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00b      	beq.n	8004de2 <USBD_StdDevReq+0x3a>
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	d14f      	bne.n	8004e6e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	6839      	ldr	r1, [r7, #0]
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	4798      	blx	r3
 8004ddc:	4603      	mov	r3, r0
 8004dde:	73fb      	strb	r3, [r7, #15]
      break;
 8004de0:	e04a      	b.n	8004e78 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	785b      	ldrb	r3, [r3, #1]
 8004de6:	2b09      	cmp	r3, #9
 8004de8:	d83b      	bhi.n	8004e62 <USBD_StdDevReq+0xba>
 8004dea:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <USBD_StdDevReq+0x48>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e45 	.word	0x08004e45
 8004df4:	08004e59 	.word	0x08004e59
 8004df8:	08004e63 	.word	0x08004e63
 8004dfc:	08004e4f 	.word	0x08004e4f
 8004e00:	08004e63 	.word	0x08004e63
 8004e04:	08004e23 	.word	0x08004e23
 8004e08:	08004e19 	.word	0x08004e19
 8004e0c:	08004e63 	.word	0x08004e63
 8004e10:	08004e3b 	.word	0x08004e3b
 8004e14:	08004e2d 	.word	0x08004e2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004e18:	6839      	ldr	r1, [r7, #0]
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f9de 	bl	80051dc <USBD_GetDescriptor>
          break;
 8004e20:	e024      	b.n	8004e6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004e22:	6839      	ldr	r1, [r7, #0]
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fb43 	bl	80054b0 <USBD_SetAddress>
          break;
 8004e2a:	e01f      	b.n	8004e6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004e2c:	6839      	ldr	r1, [r7, #0]
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fb82 	bl	8005538 <USBD_SetConfig>
 8004e34:	4603      	mov	r3, r0
 8004e36:	73fb      	strb	r3, [r7, #15]
          break;
 8004e38:	e018      	b.n	8004e6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004e3a:	6839      	ldr	r1, [r7, #0]
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fc21 	bl	8005684 <USBD_GetConfig>
          break;
 8004e42:	e013      	b.n	8004e6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004e44:	6839      	ldr	r1, [r7, #0]
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fc52 	bl	80056f0 <USBD_GetStatus>
          break;
 8004e4c:	e00e      	b.n	8004e6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004e4e:	6839      	ldr	r1, [r7, #0]
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 fc81 	bl	8005758 <USBD_SetFeature>
          break;
 8004e56:	e009      	b.n	8004e6c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004e58:	6839      	ldr	r1, [r7, #0]
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fc90 	bl	8005780 <USBD_ClrFeature>
          break;
 8004e60:	e004      	b.n	8004e6c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004e62:	6839      	ldr	r1, [r7, #0]
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fce7 	bl	8005838 <USBD_CtlError>
          break;
 8004e6a:	bf00      	nop
      }
      break;
 8004e6c:	e004      	b.n	8004e78 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8004e6e:	6839      	ldr	r1, [r7, #0]
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 fce1 	bl	8005838 <USBD_CtlError>
      break;
 8004e76:	bf00      	nop
  }

  return ret;
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop

08004e84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e9a:	2b40      	cmp	r3, #64	; 0x40
 8004e9c:	d005      	beq.n	8004eaa <USBD_StdItfReq+0x26>
 8004e9e:	2b40      	cmp	r3, #64	; 0x40
 8004ea0:	d82f      	bhi.n	8004f02 <USBD_StdItfReq+0x7e>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <USBD_StdItfReq+0x26>
 8004ea6:	2b20      	cmp	r3, #32
 8004ea8:	d12b      	bne.n	8004f02 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d81d      	bhi.n	8004ef4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	889b      	ldrh	r3, [r3, #4]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d813      	bhi.n	8004eea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	6839      	ldr	r1, [r7, #0]
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	4798      	blx	r3
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	88db      	ldrh	r3, [r3, #6]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d110      	bne.n	8004efe <USBD_StdItfReq+0x7a>
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10d      	bne.n	8004efe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fd73 	bl	80059ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004ee8:	e009      	b.n	8004efe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8004eea:	6839      	ldr	r1, [r7, #0]
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fca3 	bl	8005838 <USBD_CtlError>
          break;
 8004ef2:	e004      	b.n	8004efe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8004ef4:	6839      	ldr	r1, [r7, #0]
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fc9e 	bl	8005838 <USBD_CtlError>
          break;
 8004efc:	e000      	b.n	8004f00 <USBD_StdItfReq+0x7c>
          break;
 8004efe:	bf00      	nop
      }
      break;
 8004f00:	e004      	b.n	8004f0c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8004f02:	6839      	ldr	r1, [r7, #0]
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fc97 	bl	8005838 <USBD_CtlError>
      break;
 8004f0a:	bf00      	nop
  }

  return ret;
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b084      	sub	sp, #16
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
 8004f1e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	889b      	ldrh	r3, [r3, #4]
 8004f28:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f32:	2b40      	cmp	r3, #64	; 0x40
 8004f34:	d007      	beq.n	8004f46 <USBD_StdEPReq+0x30>
 8004f36:	2b40      	cmp	r3, #64	; 0x40
 8004f38:	f200 8145 	bhi.w	80051c6 <USBD_StdEPReq+0x2b0>
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00c      	beq.n	8004f5a <USBD_StdEPReq+0x44>
 8004f40:	2b20      	cmp	r3, #32
 8004f42:	f040 8140 	bne.w	80051c6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	6839      	ldr	r1, [r7, #0]
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	4798      	blx	r3
 8004f54:	4603      	mov	r3, r0
 8004f56:	73fb      	strb	r3, [r7, #15]
      break;
 8004f58:	e13a      	b.n	80051d0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	785b      	ldrb	r3, [r3, #1]
 8004f5e:	2b03      	cmp	r3, #3
 8004f60:	d007      	beq.n	8004f72 <USBD_StdEPReq+0x5c>
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	f300 8129 	bgt.w	80051ba <USBD_StdEPReq+0x2a4>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d07f      	beq.n	800506c <USBD_StdEPReq+0x156>
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d03c      	beq.n	8004fea <USBD_StdEPReq+0xd4>
 8004f70:	e123      	b.n	80051ba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d002      	beq.n	8004f84 <USBD_StdEPReq+0x6e>
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d016      	beq.n	8004fb0 <USBD_StdEPReq+0x9a>
 8004f82:	e02c      	b.n	8004fde <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f84:	7bbb      	ldrb	r3, [r7, #14]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00d      	beq.n	8004fa6 <USBD_StdEPReq+0x90>
 8004f8a:	7bbb      	ldrb	r3, [r7, #14]
 8004f8c:	2b80      	cmp	r3, #128	; 0x80
 8004f8e:	d00a      	beq.n	8004fa6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004f90:	7bbb      	ldrb	r3, [r7, #14]
 8004f92:	4619      	mov	r1, r3
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f001 f979 	bl	800628c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004f9a:	2180      	movs	r1, #128	; 0x80
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f001 f975 	bl	800628c <USBD_LL_StallEP>
 8004fa2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004fa4:	e020      	b.n	8004fe8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8004fa6:	6839      	ldr	r1, [r7, #0]
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 fc45 	bl	8005838 <USBD_CtlError>
              break;
 8004fae:	e01b      	b.n	8004fe8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	885b      	ldrh	r3, [r3, #2]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10e      	bne.n	8004fd6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004fb8:	7bbb      	ldrb	r3, [r7, #14]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00b      	beq.n	8004fd6 <USBD_StdEPReq+0xc0>
 8004fbe:	7bbb      	ldrb	r3, [r7, #14]
 8004fc0:	2b80      	cmp	r3, #128	; 0x80
 8004fc2:	d008      	beq.n	8004fd6 <USBD_StdEPReq+0xc0>
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	88db      	ldrh	r3, [r3, #6]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d104      	bne.n	8004fd6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004fcc:	7bbb      	ldrb	r3, [r7, #14]
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f001 f95b 	bl	800628c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fcf9 	bl	80059ce <USBD_CtlSendStatus>

              break;
 8004fdc:	e004      	b.n	8004fe8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8004fde:	6839      	ldr	r1, [r7, #0]
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fc29 	bl	8005838 <USBD_CtlError>
              break;
 8004fe6:	bf00      	nop
          }
          break;
 8004fe8:	e0ec      	b.n	80051c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d002      	beq.n	8004ffc <USBD_StdEPReq+0xe6>
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d016      	beq.n	8005028 <USBD_StdEPReq+0x112>
 8004ffa:	e030      	b.n	800505e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004ffc:	7bbb      	ldrb	r3, [r7, #14]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00d      	beq.n	800501e <USBD_StdEPReq+0x108>
 8005002:	7bbb      	ldrb	r3, [r7, #14]
 8005004:	2b80      	cmp	r3, #128	; 0x80
 8005006:	d00a      	beq.n	800501e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005008:	7bbb      	ldrb	r3, [r7, #14]
 800500a:	4619      	mov	r1, r3
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f001 f93d 	bl	800628c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005012:	2180      	movs	r1, #128	; 0x80
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f001 f939 	bl	800628c <USBD_LL_StallEP>
 800501a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800501c:	e025      	b.n	800506a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800501e:	6839      	ldr	r1, [r7, #0]
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fc09 	bl	8005838 <USBD_CtlError>
              break;
 8005026:	e020      	b.n	800506a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	885b      	ldrh	r3, [r3, #2]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d11b      	bne.n	8005068 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005030:	7bbb      	ldrb	r3, [r7, #14]
 8005032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005036:	2b00      	cmp	r3, #0
 8005038:	d004      	beq.n	8005044 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800503a:	7bbb      	ldrb	r3, [r7, #14]
 800503c:	4619      	mov	r1, r3
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f001 f943 	bl	80062ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 fcc2 	bl	80059ce <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	6839      	ldr	r1, [r7, #0]
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	4798      	blx	r3
 8005058:	4603      	mov	r3, r0
 800505a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800505c:	e004      	b.n	8005068 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800505e:	6839      	ldr	r1, [r7, #0]
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fbe9 	bl	8005838 <USBD_CtlError>
              break;
 8005066:	e000      	b.n	800506a <USBD_StdEPReq+0x154>
              break;
 8005068:	bf00      	nop
          }
          break;
 800506a:	e0ab      	b.n	80051c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d002      	beq.n	800507e <USBD_StdEPReq+0x168>
 8005078:	2b03      	cmp	r3, #3
 800507a:	d032      	beq.n	80050e2 <USBD_StdEPReq+0x1cc>
 800507c:	e097      	b.n	80051ae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800507e:	7bbb      	ldrb	r3, [r7, #14]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d007      	beq.n	8005094 <USBD_StdEPReq+0x17e>
 8005084:	7bbb      	ldrb	r3, [r7, #14]
 8005086:	2b80      	cmp	r3, #128	; 0x80
 8005088:	d004      	beq.n	8005094 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800508a:	6839      	ldr	r1, [r7, #0]
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fbd3 	bl	8005838 <USBD_CtlError>
                break;
 8005092:	e091      	b.n	80051b8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005094:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005098:	2b00      	cmp	r3, #0
 800509a:	da0b      	bge.n	80050b4 <USBD_StdEPReq+0x19e>
 800509c:	7bbb      	ldrb	r3, [r7, #14]
 800509e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	3310      	adds	r3, #16
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	4413      	add	r3, r2
 80050b0:	3304      	adds	r3, #4
 80050b2:	e00b      	b.n	80050cc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80050b4:	7bbb      	ldrb	r3, [r7, #14]
 80050b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	4413      	add	r3, r2
 80050ca:	3304      	adds	r3, #4
 80050cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2202      	movs	r2, #2
 80050d8:	4619      	mov	r1, r3
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fc1d 	bl	800591a <USBD_CtlSendData>
              break;
 80050e0:	e06a      	b.n	80051b8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80050e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	da11      	bge.n	800510e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80050ea:	7bbb      	ldrb	r3, [r7, #14]
 80050ec:	f003 020f 	and.w	r2, r3, #15
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	440b      	add	r3, r1
 80050fc:	3324      	adds	r3, #36	; 0x24
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d117      	bne.n	8005134 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005104:	6839      	ldr	r1, [r7, #0]
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fb96 	bl	8005838 <USBD_CtlError>
                  break;
 800510c:	e054      	b.n	80051b8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800510e:	7bbb      	ldrb	r3, [r7, #14]
 8005110:	f003 020f 	and.w	r2, r3, #15
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	4613      	mov	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	440b      	add	r3, r1
 8005120:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d104      	bne.n	8005134 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800512a:	6839      	ldr	r1, [r7, #0]
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 fb83 	bl	8005838 <USBD_CtlError>
                  break;
 8005132:	e041      	b.n	80051b8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005134:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005138:	2b00      	cmp	r3, #0
 800513a:	da0b      	bge.n	8005154 <USBD_StdEPReq+0x23e>
 800513c:	7bbb      	ldrb	r3, [r7, #14]
 800513e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	3310      	adds	r3, #16
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	4413      	add	r3, r2
 8005150:	3304      	adds	r3, #4
 8005152:	e00b      	b.n	800516c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005154:	7bbb      	ldrb	r3, [r7, #14]
 8005156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800515a:	4613      	mov	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	4413      	add	r3, r2
 800516a:	3304      	adds	r3, #4
 800516c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800516e:	7bbb      	ldrb	r3, [r7, #14]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <USBD_StdEPReq+0x264>
 8005174:	7bbb      	ldrb	r3, [r7, #14]
 8005176:	2b80      	cmp	r3, #128	; 0x80
 8005178:	d103      	bne.n	8005182 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	e00e      	b.n	80051a0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005182:	7bbb      	ldrb	r3, [r7, #14]
 8005184:	4619      	mov	r1, r3
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f001 f8be 	bl	8006308 <USBD_LL_IsStallEP>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2201      	movs	r2, #1
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	e002      	b.n	80051a0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2202      	movs	r2, #2
 80051a4:	4619      	mov	r1, r3
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fbb7 	bl	800591a <USBD_CtlSendData>
              break;
 80051ac:	e004      	b.n	80051b8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80051ae:	6839      	ldr	r1, [r7, #0]
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fb41 	bl	8005838 <USBD_CtlError>
              break;
 80051b6:	bf00      	nop
          }
          break;
 80051b8:	e004      	b.n	80051c4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80051ba:	6839      	ldr	r1, [r7, #0]
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 fb3b 	bl	8005838 <USBD_CtlError>
          break;
 80051c2:	bf00      	nop
      }
      break;
 80051c4:	e004      	b.n	80051d0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80051c6:	6839      	ldr	r1, [r7, #0]
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fb35 	bl	8005838 <USBD_CtlError>
      break;
 80051ce:	bf00      	nop
  }

  return ret;
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
	...

080051dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	885b      	ldrh	r3, [r3, #2]
 80051f6:	0a1b      	lsrs	r3, r3, #8
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	2b06      	cmp	r3, #6
 80051fe:	f200 8128 	bhi.w	8005452 <USBD_GetDescriptor+0x276>
 8005202:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <USBD_GetDescriptor+0x2c>)
 8005204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005208:	08005225 	.word	0x08005225
 800520c:	0800523d 	.word	0x0800523d
 8005210:	0800527d 	.word	0x0800527d
 8005214:	08005453 	.word	0x08005453
 8005218:	08005453 	.word	0x08005453
 800521c:	080053f3 	.word	0x080053f3
 8005220:	0800541f 	.word	0x0800541f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	7c12      	ldrb	r2, [r2, #16]
 8005230:	f107 0108 	add.w	r1, r7, #8
 8005234:	4610      	mov	r0, r2
 8005236:	4798      	blx	r3
 8005238:	60f8      	str	r0, [r7, #12]
      break;
 800523a:	e112      	b.n	8005462 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	7c1b      	ldrb	r3, [r3, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10d      	bne.n	8005260 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800524a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524c:	f107 0208 	add.w	r2, r7, #8
 8005250:	4610      	mov	r0, r2
 8005252:	4798      	blx	r3
 8005254:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3301      	adds	r3, #1
 800525a:	2202      	movs	r2, #2
 800525c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800525e:	e100      	b.n	8005462 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	f107 0208 	add.w	r2, r7, #8
 800526c:	4610      	mov	r0, r2
 800526e:	4798      	blx	r3
 8005270:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3301      	adds	r3, #1
 8005276:	2202      	movs	r2, #2
 8005278:	701a      	strb	r2, [r3, #0]
      break;
 800527a:	e0f2      	b.n	8005462 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	885b      	ldrh	r3, [r3, #2]
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b05      	cmp	r3, #5
 8005284:	f200 80ac 	bhi.w	80053e0 <USBD_GetDescriptor+0x204>
 8005288:	a201      	add	r2, pc, #4	; (adr r2, 8005290 <USBD_GetDescriptor+0xb4>)
 800528a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528e:	bf00      	nop
 8005290:	080052a9 	.word	0x080052a9
 8005294:	080052dd 	.word	0x080052dd
 8005298:	08005311 	.word	0x08005311
 800529c:	08005345 	.word	0x08005345
 80052a0:	08005379 	.word	0x08005379
 80052a4:	080053ad 	.word	0x080053ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00b      	beq.n	80052cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	7c12      	ldrb	r2, [r2, #16]
 80052c0:	f107 0108 	add.w	r1, r7, #8
 80052c4:	4610      	mov	r0, r2
 80052c6:	4798      	blx	r3
 80052c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80052ca:	e091      	b.n	80053f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80052cc:	6839      	ldr	r1, [r7, #0]
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fab2 	bl	8005838 <USBD_CtlError>
            err++;
 80052d4:	7afb      	ldrb	r3, [r7, #11]
 80052d6:	3301      	adds	r3, #1
 80052d8:	72fb      	strb	r3, [r7, #11]
          break;
 80052da:	e089      	b.n	80053f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00b      	beq.n	8005300 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	7c12      	ldrb	r2, [r2, #16]
 80052f4:	f107 0108 	add.w	r1, r7, #8
 80052f8:	4610      	mov	r0, r2
 80052fa:	4798      	blx	r3
 80052fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80052fe:	e077      	b.n	80053f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005300:	6839      	ldr	r1, [r7, #0]
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fa98 	bl	8005838 <USBD_CtlError>
            err++;
 8005308:	7afb      	ldrb	r3, [r7, #11]
 800530a:	3301      	adds	r3, #1
 800530c:	72fb      	strb	r3, [r7, #11]
          break;
 800530e:	e06f      	b.n	80053f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00b      	beq.n	8005334 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	7c12      	ldrb	r2, [r2, #16]
 8005328:	f107 0108 	add.w	r1, r7, #8
 800532c:	4610      	mov	r0, r2
 800532e:	4798      	blx	r3
 8005330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005332:	e05d      	b.n	80053f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005334:	6839      	ldr	r1, [r7, #0]
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fa7e 	bl	8005838 <USBD_CtlError>
            err++;
 800533c:	7afb      	ldrb	r3, [r7, #11]
 800533e:	3301      	adds	r3, #1
 8005340:	72fb      	strb	r3, [r7, #11]
          break;
 8005342:	e055      	b.n	80053f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00b      	beq.n	8005368 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	7c12      	ldrb	r2, [r2, #16]
 800535c:	f107 0108 	add.w	r1, r7, #8
 8005360:	4610      	mov	r0, r2
 8005362:	4798      	blx	r3
 8005364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005366:	e043      	b.n	80053f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005368:	6839      	ldr	r1, [r7, #0]
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fa64 	bl	8005838 <USBD_CtlError>
            err++;
 8005370:	7afb      	ldrb	r3, [r7, #11]
 8005372:	3301      	adds	r3, #1
 8005374:	72fb      	strb	r3, [r7, #11]
          break;
 8005376:	e03b      	b.n	80053f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00b      	beq.n	800539c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	7c12      	ldrb	r2, [r2, #16]
 8005390:	f107 0108 	add.w	r1, r7, #8
 8005394:	4610      	mov	r0, r2
 8005396:	4798      	blx	r3
 8005398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800539a:	e029      	b.n	80053f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800539c:	6839      	ldr	r1, [r7, #0]
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fa4a 	bl	8005838 <USBD_CtlError>
            err++;
 80053a4:	7afb      	ldrb	r3, [r7, #11]
 80053a6:	3301      	adds	r3, #1
 80053a8:	72fb      	strb	r3, [r7, #11]
          break;
 80053aa:	e021      	b.n	80053f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00b      	beq.n	80053d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	7c12      	ldrb	r2, [r2, #16]
 80053c4:	f107 0108 	add.w	r1, r7, #8
 80053c8:	4610      	mov	r0, r2
 80053ca:	4798      	blx	r3
 80053cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80053ce:	e00f      	b.n	80053f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80053d0:	6839      	ldr	r1, [r7, #0]
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fa30 	bl	8005838 <USBD_CtlError>
            err++;
 80053d8:	7afb      	ldrb	r3, [r7, #11]
 80053da:	3301      	adds	r3, #1
 80053dc:	72fb      	strb	r3, [r7, #11]
          break;
 80053de:	e007      	b.n	80053f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80053e0:	6839      	ldr	r1, [r7, #0]
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fa28 	bl	8005838 <USBD_CtlError>
          err++;
 80053e8:	7afb      	ldrb	r3, [r7, #11]
 80053ea:	3301      	adds	r3, #1
 80053ec:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80053ee:	bf00      	nop
      }
      break;
 80053f0:	e037      	b.n	8005462 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	7c1b      	ldrb	r3, [r3, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d109      	bne.n	800540e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005402:	f107 0208 	add.w	r2, r7, #8
 8005406:	4610      	mov	r0, r2
 8005408:	4798      	blx	r3
 800540a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800540c:	e029      	b.n	8005462 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fa11 	bl	8005838 <USBD_CtlError>
        err++;
 8005416:	7afb      	ldrb	r3, [r7, #11]
 8005418:	3301      	adds	r3, #1
 800541a:	72fb      	strb	r3, [r7, #11]
      break;
 800541c:	e021      	b.n	8005462 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	7c1b      	ldrb	r3, [r3, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10d      	bne.n	8005442 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	f107 0208 	add.w	r2, r7, #8
 8005432:	4610      	mov	r0, r2
 8005434:	4798      	blx	r3
 8005436:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3301      	adds	r3, #1
 800543c:	2207      	movs	r2, #7
 800543e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005440:	e00f      	b.n	8005462 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005442:	6839      	ldr	r1, [r7, #0]
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f9f7 	bl	8005838 <USBD_CtlError>
        err++;
 800544a:	7afb      	ldrb	r3, [r7, #11]
 800544c:	3301      	adds	r3, #1
 800544e:	72fb      	strb	r3, [r7, #11]
      break;
 8005450:	e007      	b.n	8005462 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005452:	6839      	ldr	r1, [r7, #0]
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f9ef 	bl	8005838 <USBD_CtlError>
      err++;
 800545a:	7afb      	ldrb	r3, [r7, #11]
 800545c:	3301      	adds	r3, #1
 800545e:	72fb      	strb	r3, [r7, #11]
      break;
 8005460:	bf00      	nop
  }

  if (err != 0U)
 8005462:	7afb      	ldrb	r3, [r7, #11]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d11e      	bne.n	80054a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	88db      	ldrh	r3, [r3, #6]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d016      	beq.n	800549e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005470:	893b      	ldrh	r3, [r7, #8]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00e      	beq.n	8005494 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	88da      	ldrh	r2, [r3, #6]
 800547a:	893b      	ldrh	r3, [r7, #8]
 800547c:	4293      	cmp	r3, r2
 800547e:	bf28      	it	cs
 8005480:	4613      	movcs	r3, r2
 8005482:	b29b      	uxth	r3, r3
 8005484:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005486:	893b      	ldrh	r3, [r7, #8]
 8005488:	461a      	mov	r2, r3
 800548a:	68f9      	ldr	r1, [r7, #12]
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fa44 	bl	800591a <USBD_CtlSendData>
 8005492:	e009      	b.n	80054a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005494:	6839      	ldr	r1, [r7, #0]
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f9ce 	bl	8005838 <USBD_CtlError>
 800549c:	e004      	b.n	80054a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fa95 	bl	80059ce <USBD_CtlSendStatus>
 80054a4:	e000      	b.n	80054a8 <USBD_GetDescriptor+0x2cc>
    return;
 80054a6:	bf00      	nop
  }
}
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop

080054b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	889b      	ldrh	r3, [r3, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d131      	bne.n	8005526 <USBD_SetAddress+0x76>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	88db      	ldrh	r3, [r3, #6]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d12d      	bne.n	8005526 <USBD_SetAddress+0x76>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	885b      	ldrh	r3, [r3, #2]
 80054ce:	2b7f      	cmp	r3, #127	; 0x7f
 80054d0:	d829      	bhi.n	8005526 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	885b      	ldrh	r3, [r3, #2]
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d104      	bne.n	80054f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80054ea:	6839      	ldr	r1, [r7, #0]
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f9a3 	bl	8005838 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054f2:	e01d      	b.n	8005530 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	7bfa      	ldrb	r2, [r7, #15]
 80054f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	4619      	mov	r1, r3
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 ff2d 	bl	8006360 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fa61 	bl	80059ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d004      	beq.n	800551c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2202      	movs	r2, #2
 8005516:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800551a:	e009      	b.n	8005530 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005524:	e004      	b.n	8005530 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005526:	6839      	ldr	r1, [r7, #0]
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f985 	bl	8005838 <USBD_CtlError>
  }
}
 800552e:	bf00      	nop
 8005530:	bf00      	nop
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	885b      	ldrh	r3, [r3, #2]
 800554a:	b2da      	uxtb	r2, r3
 800554c:	4b4c      	ldr	r3, [pc, #304]	; (8005680 <USBD_SetConfig+0x148>)
 800554e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005550:	4b4b      	ldr	r3, [pc, #300]	; (8005680 <USBD_SetConfig+0x148>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d905      	bls.n	8005564 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005558:	6839      	ldr	r1, [r7, #0]
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f96c 	bl	8005838 <USBD_CtlError>
    return USBD_FAIL;
 8005560:	2303      	movs	r3, #3
 8005562:	e088      	b.n	8005676 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d002      	beq.n	8005576 <USBD_SetConfig+0x3e>
 8005570:	2b03      	cmp	r3, #3
 8005572:	d025      	beq.n	80055c0 <USBD_SetConfig+0x88>
 8005574:	e071      	b.n	800565a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005576:	4b42      	ldr	r3, [pc, #264]	; (8005680 <USBD_SetConfig+0x148>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d01c      	beq.n	80055b8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800557e:	4b40      	ldr	r3, [pc, #256]	; (8005680 <USBD_SetConfig+0x148>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005588:	4b3d      	ldr	r3, [pc, #244]	; (8005680 <USBD_SetConfig+0x148>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	4619      	mov	r1, r3
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7ff f948 	bl	8004824 <USBD_SetClassConfig>
 8005594:	4603      	mov	r3, r0
 8005596:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d004      	beq.n	80055a8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800559e:	6839      	ldr	r1, [r7, #0]
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f949 	bl	8005838 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80055a6:	e065      	b.n	8005674 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 fa10 	bl	80059ce <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2203      	movs	r2, #3
 80055b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80055b6:	e05d      	b.n	8005674 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fa08 	bl	80059ce <USBD_CtlSendStatus>
      break;
 80055be:	e059      	b.n	8005674 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80055c0:	4b2f      	ldr	r3, [pc, #188]	; (8005680 <USBD_SetConfig+0x148>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d112      	bne.n	80055ee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80055d0:	4b2b      	ldr	r3, [pc, #172]	; (8005680 <USBD_SetConfig+0x148>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80055da:	4b29      	ldr	r3, [pc, #164]	; (8005680 <USBD_SetConfig+0x148>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	4619      	mov	r1, r3
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7ff f93b 	bl	800485c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f9f1 	bl	80059ce <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80055ec:	e042      	b.n	8005674 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80055ee:	4b24      	ldr	r3, [pc, #144]	; (8005680 <USBD_SetConfig+0x148>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	461a      	mov	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d02a      	beq.n	8005652 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	4619      	mov	r1, r3
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff f929 	bl	800485c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800560a:	4b1d      	ldr	r3, [pc, #116]	; (8005680 <USBD_SetConfig+0x148>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005614:	4b1a      	ldr	r3, [pc, #104]	; (8005680 <USBD_SetConfig+0x148>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	4619      	mov	r1, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7ff f902 	bl	8004824 <USBD_SetClassConfig>
 8005620:	4603      	mov	r3, r0
 8005622:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005624:	7bfb      	ldrb	r3, [r7, #15]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00f      	beq.n	800564a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800562a:	6839      	ldr	r1, [r7, #0]
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f903 	bl	8005838 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	b2db      	uxtb	r3, r3
 8005638:	4619      	mov	r1, r3
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7ff f90e 	bl	800485c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005648:	e014      	b.n	8005674 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f9bf 	bl	80059ce <USBD_CtlSendStatus>
      break;
 8005650:	e010      	b.n	8005674 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f9bb 	bl	80059ce <USBD_CtlSendStatus>
      break;
 8005658:	e00c      	b.n	8005674 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800565a:	6839      	ldr	r1, [r7, #0]
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f8eb 	bl	8005838 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005662:	4b07      	ldr	r3, [pc, #28]	; (8005680 <USBD_SetConfig+0x148>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	4619      	mov	r1, r3
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff f8f7 	bl	800485c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800566e:	2303      	movs	r3, #3
 8005670:	73fb      	strb	r3, [r7, #15]
      break;
 8005672:	bf00      	nop
  }

  return ret;
 8005674:	7bfb      	ldrb	r3, [r7, #15]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	2000019c 	.word	0x2000019c

08005684 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	88db      	ldrh	r3, [r3, #6]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d004      	beq.n	80056a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f8cd 	bl	8005838 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800569e:	e023      	b.n	80056e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	dc02      	bgt.n	80056b2 <USBD_GetConfig+0x2e>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	dc03      	bgt.n	80056b8 <USBD_GetConfig+0x34>
 80056b0:	e015      	b.n	80056de <USBD_GetConfig+0x5a>
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d00b      	beq.n	80056ce <USBD_GetConfig+0x4a>
 80056b6:	e012      	b.n	80056de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	3308      	adds	r3, #8
 80056c2:	2201      	movs	r2, #1
 80056c4:	4619      	mov	r1, r3
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f927 	bl	800591a <USBD_CtlSendData>
        break;
 80056cc:	e00c      	b.n	80056e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3304      	adds	r3, #4
 80056d2:	2201      	movs	r2, #1
 80056d4:	4619      	mov	r1, r3
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f91f 	bl	800591a <USBD_CtlSendData>
        break;
 80056dc:	e004      	b.n	80056e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80056de:	6839      	ldr	r1, [r7, #0]
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f8a9 	bl	8005838 <USBD_CtlError>
        break;
 80056e6:	bf00      	nop
}
 80056e8:	bf00      	nop
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005700:	b2db      	uxtb	r3, r3
 8005702:	3b01      	subs	r3, #1
 8005704:	2b02      	cmp	r3, #2
 8005706:	d81e      	bhi.n	8005746 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	88db      	ldrh	r3, [r3, #6]
 800570c:	2b02      	cmp	r3, #2
 800570e:	d004      	beq.n	800571a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005710:	6839      	ldr	r1, [r7, #0]
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f890 	bl	8005838 <USBD_CtlError>
        break;
 8005718:	e01a      	b.n	8005750 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005726:	2b00      	cmp	r3, #0
 8005728:	d005      	beq.n	8005736 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f043 0202 	orr.w	r2, r3, #2
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	330c      	adds	r3, #12
 800573a:	2202      	movs	r2, #2
 800573c:	4619      	mov	r1, r3
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f8eb 	bl	800591a <USBD_CtlSendData>
      break;
 8005744:	e004      	b.n	8005750 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005746:	6839      	ldr	r1, [r7, #0]
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f875 	bl	8005838 <USBD_CtlError>
      break;
 800574e:	bf00      	nop
  }
}
 8005750:	bf00      	nop
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	885b      	ldrh	r3, [r3, #2]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d106      	bne.n	8005778 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f92b 	bl	80059ce <USBD_CtlSendStatus>
  }
}
 8005778:	bf00      	nop
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005790:	b2db      	uxtb	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	2b02      	cmp	r3, #2
 8005796:	d80b      	bhi.n	80057b0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	885b      	ldrh	r3, [r3, #2]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d10c      	bne.n	80057ba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f910 	bl	80059ce <USBD_CtlSendStatus>
      }
      break;
 80057ae:	e004      	b.n	80057ba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80057b0:	6839      	ldr	r1, [r7, #0]
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f840 	bl	8005838 <USBD_CtlError>
      break;
 80057b8:	e000      	b.n	80057bc <USBD_ClrFeature+0x3c>
      break;
 80057ba:	bf00      	nop
  }
}
 80057bc:	bf00      	nop
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	781a      	ldrb	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	3301      	adds	r3, #1
 80057de:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	781a      	ldrb	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3301      	adds	r3, #1
 80057ec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f7ff fabb 	bl	8004d6a <SWAPBYTE>
 80057f4:	4603      	mov	r3, r0
 80057f6:	461a      	mov	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3301      	adds	r3, #1
 8005800:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3301      	adds	r3, #1
 8005806:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f7ff faae 	bl	8004d6a <SWAPBYTE>
 800580e:	4603      	mov	r3, r0
 8005810:	461a      	mov	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3301      	adds	r3, #1
 800581a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3301      	adds	r3, #1
 8005820:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f7ff faa1 	bl	8004d6a <SWAPBYTE>
 8005828:	4603      	mov	r3, r0
 800582a:	461a      	mov	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	80da      	strh	r2, [r3, #6]
}
 8005830:	bf00      	nop
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005842:	2180      	movs	r1, #128	; 0x80
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fd21 	bl	800628c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800584a:	2100      	movs	r1, #0
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fd1d 	bl	800628c <USBD_LL_StallEP>
}
 8005852:	bf00      	nop
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b086      	sub	sp, #24
 800585e:	af00      	add	r7, sp, #0
 8005860:	60f8      	str	r0, [r7, #12]
 8005862:	60b9      	str	r1, [r7, #8]
 8005864:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005866:	2300      	movs	r3, #0
 8005868:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d036      	beq.n	80058de <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005874:	6938      	ldr	r0, [r7, #16]
 8005876:	f000 f836 	bl	80058e6 <USBD_GetLen>
 800587a:	4603      	mov	r3, r0
 800587c:	3301      	adds	r3, #1
 800587e:	b29b      	uxth	r3, r3
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005888:	7dfb      	ldrb	r3, [r7, #23]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	4413      	add	r3, r2
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	7812      	ldrb	r2, [r2, #0]
 8005892:	701a      	strb	r2, [r3, #0]
  idx++;
 8005894:	7dfb      	ldrb	r3, [r7, #23]
 8005896:	3301      	adds	r3, #1
 8005898:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800589a:	7dfb      	ldrb	r3, [r7, #23]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	4413      	add	r3, r2
 80058a0:	2203      	movs	r2, #3
 80058a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
 80058a6:	3301      	adds	r3, #1
 80058a8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80058aa:	e013      	b.n	80058d4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80058ac:	7dfb      	ldrb	r3, [r7, #23]
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	4413      	add	r3, r2
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	7812      	ldrb	r2, [r2, #0]
 80058b6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	3301      	adds	r3, #1
 80058bc:	613b      	str	r3, [r7, #16]
    idx++;
 80058be:	7dfb      	ldrb	r3, [r7, #23]
 80058c0:	3301      	adds	r3, #1
 80058c2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80058c4:	7dfb      	ldrb	r3, [r7, #23]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	4413      	add	r3, r2
 80058ca:	2200      	movs	r2, #0
 80058cc:	701a      	strb	r2, [r3, #0]
    idx++;
 80058ce:	7dfb      	ldrb	r3, [r7, #23]
 80058d0:	3301      	adds	r3, #1
 80058d2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e7      	bne.n	80058ac <USBD_GetString+0x52>
 80058dc:	e000      	b.n	80058e0 <USBD_GetString+0x86>
    return;
 80058de:	bf00      	nop
  }
}
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b085      	sub	sp, #20
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80058f6:	e005      	b.n	8005904 <USBD_GetLen+0x1e>
  {
    len++;
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
 80058fa:	3301      	adds	r3, #1
 80058fc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	3301      	adds	r3, #1
 8005902:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1f5      	bne.n	80058f8 <USBD_GetLen+0x12>
  }

  return len;
 800590c:	7bfb      	ldrb	r3, [r7, #15]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b084      	sub	sp, #16
 800591e:	af00      	add	r7, sp, #0
 8005920:	60f8      	str	r0, [r7, #12]
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2202      	movs	r2, #2
 800592a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	2100      	movs	r1, #0
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 fd2c 	bl	800639e <USBD_LL_Transmit>

  return USBD_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	2100      	movs	r1, #0
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 fd1b 	bl	800639e <USBD_LL_Transmit>

  return USBD_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b084      	sub	sp, #16
 8005976:	af00      	add	r7, sp, #0
 8005978:	60f8      	str	r0, [r7, #12]
 800597a:	60b9      	str	r1, [r7, #8]
 800597c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2203      	movs	r2, #3
 8005982:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	2100      	movs	r1, #0
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 fd1f 	bl	80063e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	2100      	movs	r1, #0
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 fd0e 	bl	80063e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b082      	sub	sp, #8
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2204      	movs	r2, #4
 80059da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80059de:	2300      	movs	r3, #0
 80059e0:	2200      	movs	r2, #0
 80059e2:	2100      	movs	r1, #0
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fcda 	bl	800639e <USBD_LL_Transmit>

  return USBD_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2205      	movs	r2, #5
 8005a00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a04:	2300      	movs	r3, #0
 8005a06:	2200      	movs	r2, #0
 8005a08:	2100      	movs	r1, #0
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fce8 	bl	80063e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
	...

08005a1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005a20:	2200      	movs	r2, #0
 8005a22:	4912      	ldr	r1, [pc, #72]	; (8005a6c <MX_USB_DEVICE_Init+0x50>)
 8005a24:	4812      	ldr	r0, [pc, #72]	; (8005a70 <MX_USB_DEVICE_Init+0x54>)
 8005a26:	f7fe fe8f 	bl	8004748 <USBD_Init>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d001      	beq.n	8005a34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005a30:	f7fa fe32 	bl	8000698 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005a34:	490f      	ldr	r1, [pc, #60]	; (8005a74 <MX_USB_DEVICE_Init+0x58>)
 8005a36:	480e      	ldr	r0, [pc, #56]	; (8005a70 <MX_USB_DEVICE_Init+0x54>)
 8005a38:	f7fe feb6 	bl	80047a8 <USBD_RegisterClass>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005a42:	f7fa fe29 	bl	8000698 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005a46:	490c      	ldr	r1, [pc, #48]	; (8005a78 <MX_USB_DEVICE_Init+0x5c>)
 8005a48:	4809      	ldr	r0, [pc, #36]	; (8005a70 <MX_USB_DEVICE_Init+0x54>)
 8005a4a:	f7fe fdd7 	bl	80045fc <USBD_CDC_RegisterInterface>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005a54:	f7fa fe20 	bl	8000698 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005a58:	4805      	ldr	r0, [pc, #20]	; (8005a70 <MX_USB_DEVICE_Init+0x54>)
 8005a5a:	f7fe fecc 	bl	80047f6 <USBD_Start>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005a64:	f7fa fe18 	bl	8000698 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005a68:	bf00      	nop
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	20000130 	.word	0x20000130
 8005a70:	200003c4 	.word	0x200003c4
 8005a74:	20000018 	.word	0x20000018
 8005a78:	2000011c 	.word	0x2000011c

08005a7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005a80:	2200      	movs	r2, #0
 8005a82:	4905      	ldr	r1, [pc, #20]	; (8005a98 <CDC_Init_FS+0x1c>)
 8005a84:	4805      	ldr	r0, [pc, #20]	; (8005a9c <CDC_Init_FS+0x20>)
 8005a86:	f7fe fdce 	bl	8004626 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005a8a:	4905      	ldr	r1, [pc, #20]	; (8005aa0 <CDC_Init_FS+0x24>)
 8005a8c:	4803      	ldr	r0, [pc, #12]	; (8005a9c <CDC_Init_FS+0x20>)
 8005a8e:	f7fe fde8 	bl	8004662 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005a92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20000e94 	.word	0x20000e94
 8005a9c:	200003c4 	.word	0x200003c4
 8005aa0:	20000694 	.word	0x20000694

08005aa4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005aa8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	4603      	mov	r3, r0
 8005abc:	6039      	str	r1, [r7, #0]
 8005abe:	71fb      	strb	r3, [r7, #7]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 8005ac4:	4a49      	ldr	r2, [pc, #292]	; (8005bec <CDC_Control_FS+0x138>)
 8005ac6:	f107 0308 	add.w	r3, r7, #8
 8005aca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ace:	6018      	str	r0, [r3, #0]
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	8019      	strh	r1, [r3, #0]
 8005ad4:	3302      	adds	r3, #2
 8005ad6:	0c0a      	lsrs	r2, r1, #16
 8005ad8:	701a      	strb	r2, [r3, #0]
  switch(cmd)
 8005ada:	79fb      	ldrb	r3, [r7, #7]
 8005adc:	2b23      	cmp	r3, #35	; 0x23
 8005ade:	d87d      	bhi.n	8005bdc <CDC_Control_FS+0x128>
 8005ae0:	a201      	add	r2, pc, #4	; (adr r2, 8005ae8 <CDC_Control_FS+0x34>)
 8005ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae6:	bf00      	nop
 8005ae8:	08005bdd 	.word	0x08005bdd
 8005aec:	08005bdd 	.word	0x08005bdd
 8005af0:	08005bdd 	.word	0x08005bdd
 8005af4:	08005bdd 	.word	0x08005bdd
 8005af8:	08005bdd 	.word	0x08005bdd
 8005afc:	08005bdd 	.word	0x08005bdd
 8005b00:	08005bdd 	.word	0x08005bdd
 8005b04:	08005bdd 	.word	0x08005bdd
 8005b08:	08005bdd 	.word	0x08005bdd
 8005b0c:	08005bdd 	.word	0x08005bdd
 8005b10:	08005bdd 	.word	0x08005bdd
 8005b14:	08005bdd 	.word	0x08005bdd
 8005b18:	08005bdd 	.word	0x08005bdd
 8005b1c:	08005bdd 	.word	0x08005bdd
 8005b20:	08005bdd 	.word	0x08005bdd
 8005b24:	08005bdd 	.word	0x08005bdd
 8005b28:	08005bdd 	.word	0x08005bdd
 8005b2c:	08005bdd 	.word	0x08005bdd
 8005b30:	08005bdd 	.word	0x08005bdd
 8005b34:	08005bdd 	.word	0x08005bdd
 8005b38:	08005bdd 	.word	0x08005bdd
 8005b3c:	08005bdd 	.word	0x08005bdd
 8005b40:	08005bdd 	.word	0x08005bdd
 8005b44:	08005bdd 	.word	0x08005bdd
 8005b48:	08005bdd 	.word	0x08005bdd
 8005b4c:	08005bdd 	.word	0x08005bdd
 8005b50:	08005bdd 	.word	0x08005bdd
 8005b54:	08005bdd 	.word	0x08005bdd
 8005b58:	08005bdd 	.word	0x08005bdd
 8005b5c:	08005bdd 	.word	0x08005bdd
 8005b60:	08005bdd 	.word	0x08005bdd
 8005b64:	08005bdd 	.word	0x08005bdd
 8005b68:	08005b79 	.word	0x08005b79
 8005b6c:	08005ba5 	.word	0x08005ba5
 8005b70:	08005bdd 	.word	0x08005bdd
 8005b74:	08005bdd 	.word	0x08005bdd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
       tempbuf[0] = pbuf[0];
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	723b      	strb	r3, [r7, #8]
       tempbuf[1] = pbuf[1];
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	785b      	ldrb	r3, [r3, #1]
 8005b82:	727b      	strb	r3, [r7, #9]
       tempbuf[2] = pbuf[2];
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	789b      	ldrb	r3, [r3, #2]
 8005b88:	72bb      	strb	r3, [r7, #10]
       tempbuf[3] = pbuf[3];
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	78db      	ldrb	r3, [r3, #3]
 8005b8e:	72fb      	strb	r3, [r7, #11]
       tempbuf[4] = pbuf[4];
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	791b      	ldrb	r3, [r3, #4]
 8005b94:	733b      	strb	r3, [r7, #12]
       tempbuf[5] = pbuf[5];
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	795b      	ldrb	r3, [r3, #5]
 8005b9a:	737b      	strb	r3, [r7, #13]
       tempbuf[6] = pbuf[6];
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	799b      	ldrb	r3, [r3, #6]
 8005ba0:	73bb      	strb	r3, [r7, #14]
       break;
 8005ba2:	e01c      	b.n	8005bde <CDC_Control_FS+0x12a>

     case CDC_GET_LINE_CODING:
       pbuf[0] = tempbuf[0];
 8005ba4:	7a3a      	ldrb	r2, [r7, #8]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	701a      	strb	r2, [r3, #0]
       pbuf[1] = tempbuf[1];
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	3301      	adds	r3, #1
 8005bae:	7a7a      	ldrb	r2, [r7, #9]
 8005bb0:	701a      	strb	r2, [r3, #0]
       pbuf[2] = tempbuf[2];
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	3302      	adds	r3, #2
 8005bb6:	7aba      	ldrb	r2, [r7, #10]
 8005bb8:	701a      	strb	r2, [r3, #0]
       pbuf[3] = tempbuf[3];
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	3303      	adds	r3, #3
 8005bbe:	7afa      	ldrb	r2, [r7, #11]
 8005bc0:	701a      	strb	r2, [r3, #0]
       pbuf[4] = tempbuf[4];
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	7b3a      	ldrb	r2, [r7, #12]
 8005bc8:	701a      	strb	r2, [r3, #0]
       pbuf[5] = tempbuf[5];
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	3305      	adds	r3, #5
 8005bce:	7b7a      	ldrb	r2, [r7, #13]
 8005bd0:	701a      	strb	r2, [r3, #0]
       pbuf[6] = tempbuf[6];
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	3306      	adds	r3, #6
 8005bd6:	7bba      	ldrb	r2, [r7, #14]
 8005bd8:	701a      	strb	r2, [r3, #0]
       break;
 8005bda:	e000      	b.n	8005bde <CDC_Control_FS+0x12a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005bdc:	bf00      	nop
  }

  return (USBD_OK);
 8005bde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	08006548 	.word	0x08006548

08005bf0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	4805      	ldr	r0, [pc, #20]	; (8005c14 <CDC_Receive_FS+0x24>)
 8005bfe:	f7fe fd30 	bl	8004662 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005c02:	4804      	ldr	r0, [pc, #16]	; (8005c14 <CDC_Receive_FS+0x24>)
 8005c04:	f7fe fd76 	bl	80046f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005c08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	200003c4 	.word	0x200003c4

08005c18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	460b      	mov	r3, r1
 8005c22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005c28:	4b0d      	ldr	r3, [pc, #52]	; (8005c60 <CDC_Transmit_FS+0x48>)
 8005c2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c2e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e00b      	b.n	8005c56 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005c3e:	887b      	ldrh	r3, [r7, #2]
 8005c40:	461a      	mov	r2, r3
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	4806      	ldr	r0, [pc, #24]	; (8005c60 <CDC_Transmit_FS+0x48>)
 8005c46:	f7fe fcee 	bl	8004626 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005c4a:	4805      	ldr	r0, [pc, #20]	; (8005c60 <CDC_Transmit_FS+0x48>)
 8005c4c:	f7fe fd22 	bl	8004694 <USBD_CDC_TransmitPacket>
 8005c50:	4603      	mov	r3, r0
 8005c52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	200003c4 	.word	0x200003c4

08005c64 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005c76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
	...

08005c88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	4603      	mov	r3, r0
 8005c90:	6039      	str	r1, [r7, #0]
 8005c92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2212      	movs	r2, #18
 8005c98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005c9a:	4b03      	ldr	r3, [pc, #12]	; (8005ca8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	2000014c 	.word	0x2000014c

08005cac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	6039      	str	r1, [r7, #0]
 8005cb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2204      	movs	r2, #4
 8005cbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005cbe:	4b03      	ldr	r3, [pc, #12]	; (8005ccc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	20000160 	.word	0x20000160

08005cd0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	6039      	str	r1, [r7, #0]
 8005cda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005cdc:	79fb      	ldrb	r3, [r7, #7]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d105      	bne.n	8005cee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	4907      	ldr	r1, [pc, #28]	; (8005d04 <USBD_FS_ProductStrDescriptor+0x34>)
 8005ce6:	4808      	ldr	r0, [pc, #32]	; (8005d08 <USBD_FS_ProductStrDescriptor+0x38>)
 8005ce8:	f7ff fdb7 	bl	800585a <USBD_GetString>
 8005cec:	e004      	b.n	8005cf8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	4904      	ldr	r1, [pc, #16]	; (8005d04 <USBD_FS_ProductStrDescriptor+0x34>)
 8005cf2:	4805      	ldr	r0, [pc, #20]	; (8005d08 <USBD_FS_ProductStrDescriptor+0x38>)
 8005cf4:	f7ff fdb1 	bl	800585a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005cf8:	4b02      	ldr	r3, [pc, #8]	; (8005d04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	20001694 	.word	0x20001694
 8005d08:	08006550 	.word	0x08006550

08005d0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	4603      	mov	r3, r0
 8005d14:	6039      	str	r1, [r7, #0]
 8005d16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	4904      	ldr	r1, [pc, #16]	; (8005d2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005d1c:	4804      	ldr	r0, [pc, #16]	; (8005d30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005d1e:	f7ff fd9c 	bl	800585a <USBD_GetString>
  return USBD_StrDesc;
 8005d22:	4b02      	ldr	r3, [pc, #8]	; (8005d2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	20001694 	.word	0x20001694
 8005d30:	08006568 	.word	0x08006568

08005d34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	6039      	str	r1, [r7, #0]
 8005d3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	221a      	movs	r2, #26
 8005d44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005d46:	f000 f843 	bl	8005dd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005d4a:	4b02      	ldr	r3, [pc, #8]	; (8005d54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	20000164 	.word	0x20000164

08005d58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	6039      	str	r1, [r7, #0]
 8005d62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005d64:	79fb      	ldrb	r3, [r7, #7]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d105      	bne.n	8005d76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	4907      	ldr	r1, [pc, #28]	; (8005d8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8005d6e:	4808      	ldr	r0, [pc, #32]	; (8005d90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005d70:	f7ff fd73 	bl	800585a <USBD_GetString>
 8005d74:	e004      	b.n	8005d80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	4904      	ldr	r1, [pc, #16]	; (8005d8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8005d7a:	4805      	ldr	r0, [pc, #20]	; (8005d90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005d7c:	f7ff fd6d 	bl	800585a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005d80:	4b02      	ldr	r3, [pc, #8]	; (8005d8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20001694 	.word	0x20001694
 8005d90:	0800657c 	.word	0x0800657c

08005d94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	6039      	str	r1, [r7, #0]
 8005d9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005da0:	79fb      	ldrb	r3, [r7, #7]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d105      	bne.n	8005db2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	4907      	ldr	r1, [pc, #28]	; (8005dc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005daa:	4808      	ldr	r0, [pc, #32]	; (8005dcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005dac:	f7ff fd55 	bl	800585a <USBD_GetString>
 8005db0:	e004      	b.n	8005dbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	4904      	ldr	r1, [pc, #16]	; (8005dc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005db6:	4805      	ldr	r0, [pc, #20]	; (8005dcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005db8:	f7ff fd4f 	bl	800585a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005dbc:	4b02      	ldr	r3, [pc, #8]	; (8005dc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20001694 	.word	0x20001694
 8005dcc:	08006588 	.word	0x08006588

08005dd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005dd6:	4b0f      	ldr	r3, [pc, #60]	; (8005e14 <Get_SerialNum+0x44>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005ddc:	4b0e      	ldr	r3, [pc, #56]	; (8005e18 <Get_SerialNum+0x48>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005de2:	4b0e      	ldr	r3, [pc, #56]	; (8005e1c <Get_SerialNum+0x4c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4413      	add	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d009      	beq.n	8005e0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005df6:	2208      	movs	r2, #8
 8005df8:	4909      	ldr	r1, [pc, #36]	; (8005e20 <Get_SerialNum+0x50>)
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 f814 	bl	8005e28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005e00:	2204      	movs	r2, #4
 8005e02:	4908      	ldr	r1, [pc, #32]	; (8005e24 <Get_SerialNum+0x54>)
 8005e04:	68b8      	ldr	r0, [r7, #8]
 8005e06:	f000 f80f 	bl	8005e28 <IntToUnicode>
  }
}
 8005e0a:	bf00      	nop
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	1fff7a10 	.word	0x1fff7a10
 8005e18:	1fff7a14 	.word	0x1fff7a14
 8005e1c:	1fff7a18 	.word	0x1fff7a18
 8005e20:	20000166 	.word	0x20000166
 8005e24:	20000176 	.word	0x20000176

08005e28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	4613      	mov	r3, r2
 8005e34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	75fb      	strb	r3, [r7, #23]
 8005e3e:	e027      	b.n	8005e90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	0f1b      	lsrs	r3, r3, #28
 8005e44:	2b09      	cmp	r3, #9
 8005e46:	d80b      	bhi.n	8005e60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	0f1b      	lsrs	r3, r3, #28
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	7dfb      	ldrb	r3, [r7, #23]
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	4619      	mov	r1, r3
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	440b      	add	r3, r1
 8005e58:	3230      	adds	r2, #48	; 0x30
 8005e5a:	b2d2      	uxtb	r2, r2
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	e00a      	b.n	8005e76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	0f1b      	lsrs	r3, r3, #28
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	7dfb      	ldrb	r3, [r7, #23]
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	440b      	add	r3, r1
 8005e70:	3237      	adds	r2, #55	; 0x37
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	011b      	lsls	r3, r3, #4
 8005e7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005e7c:	7dfb      	ldrb	r3, [r7, #23]
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	3301      	adds	r3, #1
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	4413      	add	r3, r2
 8005e86:	2200      	movs	r2, #0
 8005e88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	75fb      	strb	r3, [r7, #23]
 8005e90:	7dfa      	ldrb	r2, [r7, #23]
 8005e92:	79fb      	ldrb	r3, [r7, #7]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d3d3      	bcc.n	8005e40 <IntToUnicode+0x18>
  }
}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	371c      	adds	r7, #28
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
	...

08005ea8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08a      	sub	sp, #40	; 0x28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005eb0:	f107 0314 	add.w	r3, r7, #20
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	605a      	str	r2, [r3, #4]
 8005eba:	609a      	str	r2, [r3, #8]
 8005ebc:	60da      	str	r2, [r3, #12]
 8005ebe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ec8:	d13a      	bne.n	8005f40 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005eca:	2300      	movs	r3, #0
 8005ecc:	613b      	str	r3, [r7, #16]
 8005ece:	4b1e      	ldr	r3, [pc, #120]	; (8005f48 <HAL_PCD_MspInit+0xa0>)
 8005ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed2:	4a1d      	ldr	r2, [pc, #116]	; (8005f48 <HAL_PCD_MspInit+0xa0>)
 8005ed4:	f043 0301 	orr.w	r3, r3, #1
 8005ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8005eda:	4b1b      	ldr	r3, [pc, #108]	; (8005f48 <HAL_PCD_MspInit+0xa0>)
 8005edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	613b      	str	r3, [r7, #16]
 8005ee4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005ee6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eec:	2302      	movs	r3, #2
 8005eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005ef8:	230a      	movs	r3, #10
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005efc:	f107 0314 	add.w	r3, r7, #20
 8005f00:	4619      	mov	r1, r3
 8005f02:	4812      	ldr	r0, [pc, #72]	; (8005f4c <HAL_PCD_MspInit+0xa4>)
 8005f04:	f7fa fe0e 	bl	8000b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005f08:	4b0f      	ldr	r3, [pc, #60]	; (8005f48 <HAL_PCD_MspInit+0xa0>)
 8005f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0c:	4a0e      	ldr	r2, [pc, #56]	; (8005f48 <HAL_PCD_MspInit+0xa0>)
 8005f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f12:	6353      	str	r3, [r2, #52]	; 0x34
 8005f14:	2300      	movs	r3, #0
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <HAL_PCD_MspInit+0xa0>)
 8005f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1c:	4a0a      	ldr	r2, [pc, #40]	; (8005f48 <HAL_PCD_MspInit+0xa0>)
 8005f1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f22:	6453      	str	r3, [r2, #68]	; 0x44
 8005f24:	4b08      	ldr	r3, [pc, #32]	; (8005f48 <HAL_PCD_MspInit+0xa0>)
 8005f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005f30:	2200      	movs	r2, #0
 8005f32:	2100      	movs	r1, #0
 8005f34:	2043      	movs	r0, #67	; 0x43
 8005f36:	f7fa fdbe 	bl	8000ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005f3a:	2043      	movs	r0, #67	; 0x43
 8005f3c:	f7fa fdd7 	bl	8000aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005f40:	bf00      	nop
 8005f42:	3728      	adds	r7, #40	; 0x28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	40023800 	.word	0x40023800
 8005f4c:	40020000 	.word	0x40020000

08005f50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005f64:	4619      	mov	r1, r3
 8005f66:	4610      	mov	r0, r2
 8005f68:	f7fe fc90 	bl	800488c <USBD_LL_SetupStage>
}
 8005f6c:	bf00      	nop
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005f86:	78fa      	ldrb	r2, [r7, #3]
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	00db      	lsls	r3, r3, #3
 8005f8e:	1a9b      	subs	r3, r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	440b      	add	r3, r1
 8005f94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	78fb      	ldrb	r3, [r7, #3]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	f7fe fcca 	bl	8004936 <USBD_LL_DataOutStage>
}
 8005fa2:	bf00      	nop
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b082      	sub	sp, #8
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005fbc:	78fa      	ldrb	r2, [r7, #3]
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	1a9b      	subs	r3, r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	440b      	add	r3, r1
 8005fca:	3348      	adds	r3, #72	; 0x48
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	78fb      	ldrb	r3, [r7, #3]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	f7fe fd13 	bl	80049fc <USBD_LL_DataInStage>
}
 8005fd6:	bf00      	nop
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b082      	sub	sp, #8
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7fe fe27 	bl	8004c40 <USBD_LL_SOF>
}
 8005ff2:	bf00      	nop
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006002:	2301      	movs	r3, #1
 8006004:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d102      	bne.n	8006014 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800600e:	2300      	movs	r3, #0
 8006010:	73fb      	strb	r3, [r7, #15]
 8006012:	e008      	b.n	8006026 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	2b02      	cmp	r3, #2
 800601a:	d102      	bne.n	8006022 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800601c:	2301      	movs	r3, #1
 800601e:	73fb      	strb	r3, [r7, #15]
 8006020:	e001      	b.n	8006026 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006022:	f7fa fb39 	bl	8000698 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800602c:	7bfa      	ldrb	r2, [r7, #15]
 800602e:	4611      	mov	r1, r2
 8006030:	4618      	mov	r0, r3
 8006032:	f7fe fdc7 	bl	8004bc4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800603c:	4618      	mov	r0, r3
 800603e:	f7fe fd73 	bl	8004b28 <USBD_LL_Reset>
}
 8006042:	bf00      	nop
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe fdc2 	bl	8004be4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	6812      	ldr	r2, [r2, #0]
 800606e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006072:	f043 0301 	orr.w	r3, r3, #1
 8006076:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d005      	beq.n	800608c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006080:	4b04      	ldr	r3, [pc, #16]	; (8006094 <HAL_PCD_SuspendCallback+0x48>)
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	4a03      	ldr	r2, [pc, #12]	; (8006094 <HAL_PCD_SuspendCallback+0x48>)
 8006086:	f043 0306 	orr.w	r3, r3, #6
 800608a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800608c:	bf00      	nop
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	e000ed00 	.word	0xe000ed00

08006098 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fe fdb2 	bl	8004c10 <USBD_LL_Resume>
}
 80060ac:	bf00      	nop
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	460b      	mov	r3, r1
 80060be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060c6:	78fa      	ldrb	r2, [r7, #3]
 80060c8:	4611      	mov	r1, r2
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fe fe00 	bl	8004cd0 <USBD_LL_IsoOUTIncomplete>
}
 80060d0:	bf00      	nop
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	460b      	mov	r3, r1
 80060e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060ea:	78fa      	ldrb	r2, [r7, #3]
 80060ec:	4611      	mov	r1, r2
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fe fdc8 	bl	8004c84 <USBD_LL_IsoINIncomplete>
}
 80060f4:	bf00      	nop
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe fe06 	bl	8004d1c <USBD_LL_DevConnected>
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006126:	4618      	mov	r0, r3
 8006128:	f7fe fe03 	bl	8004d32 <USBD_LL_DevDisconnected>
}
 800612c:	bf00      	nop
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d13c      	bne.n	80061be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006144:	4a20      	ldr	r2, [pc, #128]	; (80061c8 <USBD_LL_Init+0x94>)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a1e      	ldr	r2, [pc, #120]	; (80061c8 <USBD_LL_Init+0x94>)
 8006150:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006154:	4b1c      	ldr	r3, [pc, #112]	; (80061c8 <USBD_LL_Init+0x94>)
 8006156:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800615a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800615c:	4b1a      	ldr	r3, [pc, #104]	; (80061c8 <USBD_LL_Init+0x94>)
 800615e:	2204      	movs	r2, #4
 8006160:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006162:	4b19      	ldr	r3, [pc, #100]	; (80061c8 <USBD_LL_Init+0x94>)
 8006164:	2202      	movs	r2, #2
 8006166:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006168:	4b17      	ldr	r3, [pc, #92]	; (80061c8 <USBD_LL_Init+0x94>)
 800616a:	2200      	movs	r2, #0
 800616c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800616e:	4b16      	ldr	r3, [pc, #88]	; (80061c8 <USBD_LL_Init+0x94>)
 8006170:	2202      	movs	r2, #2
 8006172:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006174:	4b14      	ldr	r3, [pc, #80]	; (80061c8 <USBD_LL_Init+0x94>)
 8006176:	2200      	movs	r2, #0
 8006178:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800617a:	4b13      	ldr	r3, [pc, #76]	; (80061c8 <USBD_LL_Init+0x94>)
 800617c:	2200      	movs	r2, #0
 800617e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006180:	4b11      	ldr	r3, [pc, #68]	; (80061c8 <USBD_LL_Init+0x94>)
 8006182:	2200      	movs	r2, #0
 8006184:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006186:	4b10      	ldr	r3, [pc, #64]	; (80061c8 <USBD_LL_Init+0x94>)
 8006188:	2200      	movs	r2, #0
 800618a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800618c:	4b0e      	ldr	r3, [pc, #56]	; (80061c8 <USBD_LL_Init+0x94>)
 800618e:	2200      	movs	r2, #0
 8006190:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006192:	480d      	ldr	r0, [pc, #52]	; (80061c8 <USBD_LL_Init+0x94>)
 8006194:	f7fa fe95 	bl	8000ec2 <HAL_PCD_Init>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800619e:	f7fa fa7b 	bl	8000698 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80061a2:	2180      	movs	r1, #128	; 0x80
 80061a4:	4808      	ldr	r0, [pc, #32]	; (80061c8 <USBD_LL_Init+0x94>)
 80061a6:	f7fb fff2 	bl	800218e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80061aa:	2240      	movs	r2, #64	; 0x40
 80061ac:	2100      	movs	r1, #0
 80061ae:	4806      	ldr	r0, [pc, #24]	; (80061c8 <USBD_LL_Init+0x94>)
 80061b0:	f7fb ffa6 	bl	8002100 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80061b4:	2280      	movs	r2, #128	; 0x80
 80061b6:	2101      	movs	r1, #1
 80061b8:	4803      	ldr	r0, [pc, #12]	; (80061c8 <USBD_LL_Init+0x94>)
 80061ba:	f7fb ffa1 	bl	8002100 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	20001894 	.word	0x20001894

080061cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061d4:	2300      	movs	r3, #0
 80061d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fa ff8a 	bl	80010fc <HAL_PCD_Start>
 80061e8:	4603      	mov	r3, r0
 80061ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 f942 	bl	8006478 <USBD_Get_USB_Status>
 80061f4:	4603      	mov	r3, r0
 80061f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	4608      	mov	r0, r1
 800620c:	4611      	mov	r1, r2
 800620e:	461a      	mov	r2, r3
 8006210:	4603      	mov	r3, r0
 8006212:	70fb      	strb	r3, [r7, #3]
 8006214:	460b      	mov	r3, r1
 8006216:	70bb      	strb	r3, [r7, #2]
 8006218:	4613      	mov	r3, r2
 800621a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800621c:	2300      	movs	r3, #0
 800621e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800622a:	78bb      	ldrb	r3, [r7, #2]
 800622c:	883a      	ldrh	r2, [r7, #0]
 800622e:	78f9      	ldrb	r1, [r7, #3]
 8006230:	f7fb fb6e 	bl	8001910 <HAL_PCD_EP_Open>
 8006234:	4603      	mov	r3, r0
 8006236:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	4618      	mov	r0, r3
 800623c:	f000 f91c 	bl	8006478 <USBD_Get_USB_Status>
 8006240:	4603      	mov	r3, r0
 8006242:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006244:	7bbb      	ldrb	r3, [r7, #14]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	460b      	mov	r3, r1
 8006258:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006268:	78fa      	ldrb	r2, [r7, #3]
 800626a:	4611      	mov	r1, r2
 800626c:	4618      	mov	r0, r3
 800626e:	f7fb fbb7 	bl	80019e0 <HAL_PCD_EP_Close>
 8006272:	4603      	mov	r3, r0
 8006274:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006276:	7bfb      	ldrb	r3, [r7, #15]
 8006278:	4618      	mov	r0, r3
 800627a:	f000 f8fd 	bl	8006478 <USBD_Get_USB_Status>
 800627e:	4603      	mov	r3, r0
 8006280:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006282:	7bbb      	ldrb	r3, [r7, #14]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	460b      	mov	r3, r1
 8006296:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062a6:	78fa      	ldrb	r2, [r7, #3]
 80062a8:	4611      	mov	r1, r2
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fb fc8f 	bl	8001bce <HAL_PCD_EP_SetStall>
 80062b0:	4603      	mov	r3, r0
 80062b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 f8de 	bl	8006478 <USBD_Get_USB_Status>
 80062bc:	4603      	mov	r3, r0
 80062be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80062c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	460b      	mov	r3, r1
 80062d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062e4:	78fa      	ldrb	r2, [r7, #3]
 80062e6:	4611      	mov	r1, r2
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7fb fcd4 	bl	8001c96 <HAL_PCD_EP_ClrStall>
 80062ee:	4603      	mov	r3, r0
 80062f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f000 f8bf 	bl	8006478 <USBD_Get_USB_Status>
 80062fa:	4603      	mov	r3, r0
 80062fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80062fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800631a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800631c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006320:	2b00      	cmp	r3, #0
 8006322:	da0b      	bge.n	800633c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800632a:	68f9      	ldr	r1, [r7, #12]
 800632c:	4613      	mov	r3, r2
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	1a9b      	subs	r3, r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	440b      	add	r3, r1
 8006336:	333e      	adds	r3, #62	; 0x3e
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	e00b      	b.n	8006354 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006342:	68f9      	ldr	r1, [r7, #12]
 8006344:	4613      	mov	r3, r2
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	1a9b      	subs	r3, r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	440b      	add	r3, r1
 800634e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006352:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006354:	4618      	mov	r0, r3
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800636c:	2300      	movs	r3, #0
 800636e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006370:	2300      	movs	r3, #0
 8006372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800637a:	78fa      	ldrb	r2, [r7, #3]
 800637c:	4611      	mov	r1, r2
 800637e:	4618      	mov	r0, r3
 8006380:	f7fb faa1 	bl	80018c6 <HAL_PCD_SetAddress>
 8006384:	4603      	mov	r3, r0
 8006386:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006388:	7bfb      	ldrb	r3, [r7, #15]
 800638a:	4618      	mov	r0, r3
 800638c:	f000 f874 	bl	8006478 <USBD_Get_USB_Status>
 8006390:	4603      	mov	r3, r0
 8006392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006394:	7bbb      	ldrb	r3, [r7, #14]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b086      	sub	sp, #24
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	603b      	str	r3, [r7, #0]
 80063aa:	460b      	mov	r3, r1
 80063ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80063bc:	7af9      	ldrb	r1, [r7, #11]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	f7fb fbba 	bl	8001b3a <HAL_PCD_EP_Transmit>
 80063c6:	4603      	mov	r3, r0
 80063c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063ca:	7dfb      	ldrb	r3, [r7, #23]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 f853 	bl	8006478 <USBD_Get_USB_Status>
 80063d2:	4603      	mov	r3, r0
 80063d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80063d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	607a      	str	r2, [r7, #4]
 80063ea:	603b      	str	r3, [r7, #0]
 80063ec:	460b      	mov	r3, r1
 80063ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80063fe:	7af9      	ldrb	r1, [r7, #11]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	f7fb fb36 	bl	8001a74 <HAL_PCD_EP_Receive>
 8006408:	4603      	mov	r3, r0
 800640a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800640c:	7dfb      	ldrb	r3, [r7, #23]
 800640e:	4618      	mov	r0, r3
 8006410:	f000 f832 	bl	8006478 <USBD_Get_USB_Status>
 8006414:	4603      	mov	r3, r0
 8006416:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006418:	7dbb      	ldrb	r3, [r7, #22]
}
 800641a:	4618      	mov	r0, r3
 800641c:	3718      	adds	r7, #24
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b082      	sub	sp, #8
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	460b      	mov	r3, r1
 800642c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006434:	78fa      	ldrb	r2, [r7, #3]
 8006436:	4611      	mov	r1, r2
 8006438:	4618      	mov	r0, r3
 800643a:	f7fb fb66 	bl	8001b0a <HAL_PCD_EP_GetRxCount>
 800643e:	4603      	mov	r3, r0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3708      	adds	r7, #8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006450:	4b03      	ldr	r3, [pc, #12]	; (8006460 <USBD_static_malloc+0x18>)
}
 8006452:	4618      	mov	r0, r3
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	200001a0 	.word	0x200001a0

08006464 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]

}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	4603      	mov	r3, r0
 8006480:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006486:	79fb      	ldrb	r3, [r7, #7]
 8006488:	2b03      	cmp	r3, #3
 800648a:	d817      	bhi.n	80064bc <USBD_Get_USB_Status+0x44>
 800648c:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <USBD_Get_USB_Status+0x1c>)
 800648e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006492:	bf00      	nop
 8006494:	080064a5 	.word	0x080064a5
 8006498:	080064ab 	.word	0x080064ab
 800649c:	080064b1 	.word	0x080064b1
 80064a0:	080064b7 	.word	0x080064b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	73fb      	strb	r3, [r7, #15]
    break;
 80064a8:	e00b      	b.n	80064c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80064aa:	2303      	movs	r3, #3
 80064ac:	73fb      	strb	r3, [r7, #15]
    break;
 80064ae:	e008      	b.n	80064c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80064b0:	2301      	movs	r3, #1
 80064b2:	73fb      	strb	r3, [r7, #15]
    break;
 80064b4:	e005      	b.n	80064c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80064b6:	2303      	movs	r3, #3
 80064b8:	73fb      	strb	r3, [r7, #15]
    break;
 80064ba:	e002      	b.n	80064c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80064bc:	2303      	movs	r3, #3
 80064be:	73fb      	strb	r3, [r7, #15]
    break;
 80064c0:	bf00      	nop
  }
  return usb_status;
 80064c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <__libc_init_array>:
 80064d0:	b570      	push	{r4, r5, r6, lr}
 80064d2:	4d0d      	ldr	r5, [pc, #52]	; (8006508 <__libc_init_array+0x38>)
 80064d4:	4c0d      	ldr	r4, [pc, #52]	; (800650c <__libc_init_array+0x3c>)
 80064d6:	1b64      	subs	r4, r4, r5
 80064d8:	10a4      	asrs	r4, r4, #2
 80064da:	2600      	movs	r6, #0
 80064dc:	42a6      	cmp	r6, r4
 80064de:	d109      	bne.n	80064f4 <__libc_init_array+0x24>
 80064e0:	4d0b      	ldr	r5, [pc, #44]	; (8006510 <__libc_init_array+0x40>)
 80064e2:	4c0c      	ldr	r4, [pc, #48]	; (8006514 <__libc_init_array+0x44>)
 80064e4:	f000 f820 	bl	8006528 <_init>
 80064e8:	1b64      	subs	r4, r4, r5
 80064ea:	10a4      	asrs	r4, r4, #2
 80064ec:	2600      	movs	r6, #0
 80064ee:	42a6      	cmp	r6, r4
 80064f0:	d105      	bne.n	80064fe <__libc_init_array+0x2e>
 80064f2:	bd70      	pop	{r4, r5, r6, pc}
 80064f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f8:	4798      	blx	r3
 80064fa:	3601      	adds	r6, #1
 80064fc:	e7ee      	b.n	80064dc <__libc_init_array+0xc>
 80064fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006502:	4798      	blx	r3
 8006504:	3601      	adds	r6, #1
 8006506:	e7f2      	b.n	80064ee <__libc_init_array+0x1e>
 8006508:	080065b0 	.word	0x080065b0
 800650c:	080065b0 	.word	0x080065b0
 8006510:	080065b0 	.word	0x080065b0
 8006514:	080065b4 	.word	0x080065b4

08006518 <memset>:
 8006518:	4402      	add	r2, r0
 800651a:	4603      	mov	r3, r0
 800651c:	4293      	cmp	r3, r2
 800651e:	d100      	bne.n	8006522 <memset+0xa>
 8006520:	4770      	bx	lr
 8006522:	f803 1b01 	strb.w	r1, [r3], #1
 8006526:	e7f9      	b.n	800651c <memset+0x4>

08006528 <_init>:
 8006528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800652a:	bf00      	nop
 800652c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800652e:	bc08      	pop	{r3}
 8006530:	469e      	mov	lr, r3
 8006532:	4770      	bx	lr

08006534 <_fini>:
 8006534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006536:	bf00      	nop
 8006538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653a:	bc08      	pop	{r3}
 800653c:	469e      	mov	lr, r3
 800653e:	4770      	bx	lr
