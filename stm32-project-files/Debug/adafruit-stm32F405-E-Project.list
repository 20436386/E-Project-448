
adafruit-stm32F405-E-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a520  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800a6a8  0800a6a8  0001a6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a738  0800a738  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800a738  0800a738  0001a738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a740  0800a740  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a740  0800a740  0001a740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a744  0800a744  0001a744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800a748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002220  20000180  0800a8c8  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023a0  0800a8c8  000223a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef73  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043ec  00000000  00000000  0003f123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00043510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  00044788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000238ad  00000000  00000000  00045868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018608  00000000  00000000  00069115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1fc7  00000000  00000000  0008171d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001436e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad8  00000000  00000000  00143738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a690 	.word	0x0800a690

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	0800a690 	.word	0x0800a690

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*)GPSdata, 256);
 80004d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004dc:	4806      	ldr	r0, [pc, #24]	; (80004f8 <HAL_UART_RxCpltCallback+0x28>)
 80004de:	f009 fc3f 	bl	8009d60 <CDC_Transmit_FS>
	HAL_UART_Receive_IT(&huart3, (uint8_t*)GPSdata, 256);
 80004e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004e6:	4904      	ldr	r1, [pc, #16]	; (80004f8 <HAL_UART_RxCpltCallback+0x28>)
 80004e8:	4804      	ldr	r0, [pc, #16]	; (80004fc <HAL_UART_RxCpltCallback+0x2c>)
 80004ea:	f004 fc8d 	bl	8004e08 <HAL_UART_Receive_IT>
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000478 	.word	0x20000478
 80004fc:	20000434 	.word	0x20000434

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
//	uint32_t currentTick = HAL_GetTick();
//	uint8_t* magData;
//	HAL_StatusTypeDef ret;
//	char msg[20] = "empty";

	uint32_t currentTick = HAL_GetTick();
 8000506:	f000 fc1b 	bl	8000d40 <HAL_GetTick>
 800050a:	6078      	str	r0, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fbb2 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f828 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f902 	bl	800071c <MX_GPIO_Init>
  MX_DMA_Init();
 8000518:	f000 f8d8 	bl	80006cc <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800051c:	f009 fb22 	bl	8009b64 <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 8000520:	f000 f88a 	bl	8000638 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000524:	f007 fbd8 	bl	8007cd8 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 8000528:	f000 f8a6 	bl	8000678 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, (uint8_t*)GPSdata, 256);
 800052c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000530:	4909      	ldr	r1, [pc, #36]	; (8000558 <main+0x58>)
 8000532:	480a      	ldr	r0, [pc, #40]	; (800055c <main+0x5c>)
 8000534:	f004 fc68 	bl	8004e08 <HAL_UART_Receive_IT>
//	  	  }
//	  uint32_t hold = ((magData[0] << 4) | (magData[1]));
//	  sprintf((char*)msg, "%d\n\r", (int)hold);
//	  printVCP((char*)msg);

	  if((HAL_GetTick() - currentTick) >= 1000)
 8000538:	f000 fc02 	bl	8000d40 <HAL_GetTick>
 800053c:	4602      	mov	r2, r0
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000546:	d3f7      	bcc.n	8000538 <main+0x38>
	  {
		  printVCP((char*)"ok\n\r");
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <main+0x60>)
 800054a:	f000 f963 	bl	8000814 <printVCP>
		  currentTick = HAL_GetTick();
 800054e:	f000 fbf7 	bl	8000d40 <HAL_GetTick>
 8000552:	6078      	str	r0, [r7, #4]
	  if((HAL_GetTick() - currentTick) >= 1000)
 8000554:	e7f0      	b.n	8000538 <main+0x38>
 8000556:	bf00      	nop
 8000558:	20000478 	.word	0x20000478
 800055c:	20000434 	.word	0x20000434
 8000560:	0800a6a8 	.word	0x0800a6a8

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f00a f874 	bl	800a660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	4a27      	ldr	r2, [pc, #156]	; (8000630 <SystemClock_Config+0xcc>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	; 0x40
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <SystemClock_Config+0xcc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b22      	ldr	r3, [pc, #136]	; (8000634 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a21      	ldr	r2, [pc, #132]	; (8000634 <SystemClock_Config+0xd0>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80005d4:	2306      	movs	r3, #6
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005d8:	23a8      	movs	r3, #168	; 0xa8
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e0:	2307      	movs	r3, #7
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 fc49 	bl	8002e80 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f4:	f000 f928 	bl	8000848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000604:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2105      	movs	r1, #5
 8000616:	4618      	mov	r0, r3
 8000618:	f002 feaa 	bl	8003370 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000622:	f000 f911 	bl	8000848 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_SDIO_SD_Init+0x38>)
 800063e:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <MX_SDIO_SD_Init+0x3c>)
 8000640:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_SDIO_SD_Init+0x38>)
 8000644:	2200      	movs	r2, #0
 8000646:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_SDIO_SD_Init+0x38>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_SDIO_SD_Init+0x38>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_SDIO_SD_Init+0x38>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <MX_SDIO_SD_Init+0x38>)
 800065c:	2200      	movs	r2, #0
 800065e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <MX_SDIO_SD_Init+0x38>)
 8000662:	2200      	movs	r2, #0
 8000664:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	200005d8 	.word	0x200005d8
 8000674:	40012c00 	.word	0x40012c00

08000678 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <MX_USART3_UART_Init+0x50>)
 8000680:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 8000684:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000688:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 80006b0:	f004 fb5d 	bl	8004d6e <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006ba:	f000 f8c5 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000434 	.word	0x20000434
 80006c8:	40004800 	.word	0x40004800

080006cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_DMA_Init+0x4c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <MX_DMA_Init+0x4c>)
 80006dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <MX_DMA_Init+0x4c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2100      	movs	r1, #0
 80006f2:	203b      	movs	r0, #59	; 0x3b
 80006f4:	f000 fc2f 	bl	8000f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80006f8:	203b      	movs	r0, #59	; 0x3b
 80006fa:	f000 fc48 	bl	8000f8e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	2045      	movs	r0, #69	; 0x45
 8000704:	f000 fc27 	bl	8000f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000708:	2045      	movs	r0, #69	; 0x45
 800070a:	f000 fc40 	bl	8000f8e <HAL_NVIC_EnableIRQ>

}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b34      	ldr	r3, [pc, #208]	; (8000808 <MX_GPIO_Init+0xec>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a33      	ldr	r2, [pc, #204]	; (8000808 <MX_GPIO_Init+0xec>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b31      	ldr	r3, [pc, #196]	; (8000808 <MX_GPIO_Init+0xec>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <MX_GPIO_Init+0xec>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a2c      	ldr	r2, [pc, #176]	; (8000808 <MX_GPIO_Init+0xec>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <MX_GPIO_Init+0xec>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b26      	ldr	r3, [pc, #152]	; (8000808 <MX_GPIO_Init+0xec>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a25      	ldr	r2, [pc, #148]	; (8000808 <MX_GPIO_Init+0xec>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b23      	ldr	r3, [pc, #140]	; (8000808 <MX_GPIO_Init+0xec>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <MX_GPIO_Init+0xec>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a1e      	ldr	r2, [pc, #120]	; (8000808 <MX_GPIO_Init+0xec>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <MX_GPIO_Init+0xec>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_GPIO_Init+0xec>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a17      	ldr	r2, [pc, #92]	; (8000808 <MX_GPIO_Init+0xec>)
 80007ac:	f043 0308 	orr.w	r3, r3, #8
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_GPIO_Init+0xec>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0308 	and.w	r3, r3, #8
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2102      	movs	r1, #2
 80007c2:	4812      	ldr	r0, [pc, #72]	; (800080c <MX_GPIO_Init+0xf0>)
 80007c4:	f001 f9c0 	bl	8001b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 80007c8:	2302      	movs	r3, #2
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	480b      	ldr	r0, [pc, #44]	; (800080c <MX_GPIO_Init+0xf0>)
 80007e0:	f000 fffe 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_GPIO_Init+0xf4>)
 80007fa:	f000 fff1 	bl	80017e0 <HAL_GPIO_Init>

}
 80007fe:	bf00      	nop
 8000800:	3728      	adds	r7, #40	; 0x28
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40020800 	.word	0x40020800
 8000810:	40020400 	.word	0x40020400

08000814 <printVCP>:

/* USER CODE BEGIN 4 */
void printVCP(char* buf)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	char* eol = "\r\n";
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <printVCP+0x30>)
 800081e:	60fb      	str	r3, [r7, #12]
	strcat(buf, eol);
 8000820:	68f9      	ldr	r1, [r7, #12]
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f009 ff24 	bl	800a670 <strcat>
	CDC_Transmit_FS((uint8_t*)buf, strlen(buf)); //use sizeof() as it returns size of array of anytype, strlen() expects char pointer in its argument
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff fccd 	bl	80001c8 <strlen>
 800082e:	4603      	mov	r3, r0
 8000830:	b29b      	uxth	r3, r3
 8000832:	4619      	mov	r1, r3
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f009 fa93 	bl	8009d60 <CDC_Transmit_FS>
}
 800083a:	bf00      	nop
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	0800a6b0 	.word	0x0800a6b0

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	e7fe      	b.n	8000850 <Error_Handler+0x8>
	...

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	4a0f      	ldr	r2, [pc, #60]	; (80008a0 <HAL_MspInit+0x4c>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000868:	6453      	str	r3, [r2, #68]	; 0x44
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <HAL_MspInit+0x4c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <HAL_MspInit+0x4c>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	; 0x40
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800

080008a4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a70      	ldr	r2, [pc, #448]	; (8000a84 <HAL_SD_MspInit+0x1e0>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	f040 80da 	bne.w	8000a7c <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	4b6e      	ldr	r3, [pc, #440]	; (8000a88 <HAL_SD_MspInit+0x1e4>)
 80008ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d0:	4a6d      	ldr	r2, [pc, #436]	; (8000a88 <HAL_SD_MspInit+0x1e4>)
 80008d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008d6:	6453      	str	r3, [r2, #68]	; 0x44
 80008d8:	4b6b      	ldr	r3, [pc, #428]	; (8000a88 <HAL_SD_MspInit+0x1e4>)
 80008da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	4b67      	ldr	r3, [pc, #412]	; (8000a88 <HAL_SD_MspInit+0x1e4>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	4a66      	ldr	r2, [pc, #408]	; (8000a88 <HAL_SD_MspInit+0x1e4>)
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	6313      	str	r3, [r2, #48]	; 0x30
 80008f4:	4b64      	ldr	r3, [pc, #400]	; (8000a88 <HAL_SD_MspInit+0x1e4>)
 80008f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f8:	f003 0304 	and.w	r3, r3, #4
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	4b60      	ldr	r3, [pc, #384]	; (8000a88 <HAL_SD_MspInit+0x1e4>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	4a5f      	ldr	r2, [pc, #380]	; (8000a88 <HAL_SD_MspInit+0x1e4>)
 800090a:	f043 0308 	orr.w	r3, r3, #8
 800090e:	6313      	str	r3, [r2, #48]	; 0x30
 8000910:	4b5d      	ldr	r3, [pc, #372]	; (8000a88 <HAL_SD_MspInit+0x1e4>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	f003 0308 	and.w	r3, r3, #8
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800091c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000926:	2301      	movs	r3, #1
 8000928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800092e:	230c      	movs	r3, #12
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	4854      	ldr	r0, [pc, #336]	; (8000a8c <HAL_SD_MspInit+0x1e8>)
 800093a:	f000 ff51 	bl	80017e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800093e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000950:	230c      	movs	r3, #12
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	484c      	ldr	r0, [pc, #304]	; (8000a8c <HAL_SD_MspInit+0x1e8>)
 800095c:	f000 ff40 	bl	80017e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000960:	2304      	movs	r3, #4
 8000962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000968:	2301      	movs	r3, #1
 800096a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000970:	230c      	movs	r3, #12
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	4845      	ldr	r0, [pc, #276]	; (8000a90 <HAL_SD_MspInit+0x1ec>)
 800097c:	f000 ff30 	bl	80017e0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000980:	4b44      	ldr	r3, [pc, #272]	; (8000a94 <HAL_SD_MspInit+0x1f0>)
 8000982:	4a45      	ldr	r2, [pc, #276]	; (8000a98 <HAL_SD_MspInit+0x1f4>)
 8000984:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000986:	4b43      	ldr	r3, [pc, #268]	; (8000a94 <HAL_SD_MspInit+0x1f0>)
 8000988:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800098c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800098e:	4b41      	ldr	r3, [pc, #260]	; (8000a94 <HAL_SD_MspInit+0x1f0>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000994:	4b3f      	ldr	r3, [pc, #252]	; (8000a94 <HAL_SD_MspInit+0x1f0>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800099a:	4b3e      	ldr	r3, [pc, #248]	; (8000a94 <HAL_SD_MspInit+0x1f0>)
 800099c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009a0:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009a2:	4b3c      	ldr	r3, [pc, #240]	; (8000a94 <HAL_SD_MspInit+0x1f0>)
 80009a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009a8:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009aa:	4b3a      	ldr	r3, [pc, #232]	; (8000a94 <HAL_SD_MspInit+0x1f0>)
 80009ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009b0:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80009b2:	4b38      	ldr	r3, [pc, #224]	; (8000a94 <HAL_SD_MspInit+0x1f0>)
 80009b4:	2220      	movs	r2, #32
 80009b6:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009b8:	4b36      	ldr	r3, [pc, #216]	; (8000a94 <HAL_SD_MspInit+0x1f0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009be:	4b35      	ldr	r3, [pc, #212]	; (8000a94 <HAL_SD_MspInit+0x1f0>)
 80009c0:	2204      	movs	r2, #4
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80009c4:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <HAL_SD_MspInit+0x1f0>)
 80009c6:	2203      	movs	r2, #3
 80009c8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80009ca:	4b32      	ldr	r3, [pc, #200]	; (8000a94 <HAL_SD_MspInit+0x1f0>)
 80009cc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80009d2:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <HAL_SD_MspInit+0x1f0>)
 80009d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80009d8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80009da:	482e      	ldr	r0, [pc, #184]	; (8000a94 <HAL_SD_MspInit+0x1f0>)
 80009dc:	f000 faf2 	bl	8000fc4 <HAL_DMA_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 80009e6:	f7ff ff2f 	bl	8000848 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a29      	ldr	r2, [pc, #164]	; (8000a94 <HAL_SD_MspInit+0x1f0>)
 80009ee:	641a      	str	r2, [r3, #64]	; 0x40
 80009f0:	4a28      	ldr	r2, [pc, #160]	; (8000a94 <HAL_SD_MspInit+0x1f0>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80009f6:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <HAL_SD_MspInit+0x1f8>)
 80009f8:	4a29      	ldr	r2, [pc, #164]	; (8000aa0 <HAL_SD_MspInit+0x1fc>)
 80009fa:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80009fc:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <HAL_SD_MspInit+0x1f8>)
 80009fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a02:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a04:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <HAL_SD_MspInit+0x1f8>)
 8000a06:	2240      	movs	r2, #64	; 0x40
 8000a08:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a0a:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <HAL_SD_MspInit+0x1f8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <HAL_SD_MspInit+0x1f8>)
 8000a12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a16:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a18:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <HAL_SD_MspInit+0x1f8>)
 8000a1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a1e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a20:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <HAL_SD_MspInit+0x1f8>)
 8000a22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a26:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000a28:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <HAL_SD_MspInit+0x1f8>)
 8000a2a:	2220      	movs	r2, #32
 8000a2c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a2e:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <HAL_SD_MspInit+0x1f8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a34:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <HAL_SD_MspInit+0x1f8>)
 8000a36:	2204      	movs	r2, #4
 8000a38:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <HAL_SD_MspInit+0x1f8>)
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000a40:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <HAL_SD_MspInit+0x1f8>)
 8000a42:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <HAL_SD_MspInit+0x1f8>)
 8000a4a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a4e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000a50:	4812      	ldr	r0, [pc, #72]	; (8000a9c <HAL_SD_MspInit+0x1f8>)
 8000a52:	f000 fab7 	bl	8000fc4 <HAL_DMA_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8000a5c:	f7ff fef4 	bl	8000848 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <HAL_SD_MspInit+0x1f8>)
 8000a64:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a66:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <HAL_SD_MspInit+0x1f8>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2031      	movs	r0, #49	; 0x31
 8000a72:	f000 fa70 	bl	8000f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000a76:	2031      	movs	r0, #49	; 0x31
 8000a78:	f000 fa89 	bl	8000f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000a7c:	bf00      	nop
 8000a7e:	3728      	adds	r7, #40	; 0x28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40012c00 	.word	0x40012c00
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020800 	.word	0x40020800
 8000a90:	40020c00 	.word	0x40020c00
 8000a94:	200003d4 	.word	0x200003d4
 8000a98:	40026458 	.word	0x40026458
 8000a9c:	20000578 	.word	0x20000578
 8000aa0:	400264a0 	.word	0x400264a0

08000aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a1d      	ldr	r2, [pc, #116]	; (8000b38 <HAL_UART_MspInit+0x94>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d134      	bne.n	8000b30 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <HAL_UART_MspInit+0x98>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a1b      	ldr	r2, [pc, #108]	; (8000b3c <HAL_UART_MspInit+0x98>)
 8000ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <HAL_UART_MspInit+0x98>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_UART_MspInit+0x98>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <HAL_UART_MspInit+0x98>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_UART_MspInit+0x98>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000afe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b10:	2307      	movs	r3, #7
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4809      	ldr	r0, [pc, #36]	; (8000b40 <HAL_UART_MspInit+0x9c>)
 8000b1c:	f000 fe60 	bl	80017e0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	2027      	movs	r0, #39	; 0x27
 8000b26:	f000 fa16 	bl	8000f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b2a:	2027      	movs	r0, #39	; 0x27
 8000b2c:	f000 fa2f 	bl	8000f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b30:	bf00      	nop
 8000b32:	3728      	adds	r7, #40	; 0x28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40004800 	.word	0x40004800
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020400 	.word	0x40020400

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f000 f8c2 	bl	8000d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <USART3_IRQHandler+0x10>)
 8000b9e:	f004 f963 	bl	8004e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000434 	.word	0x20000434

08000bac <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <SDIO_IRQHandler+0x10>)
 8000bb2:	f003 f823 	bl	8003bfc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200005d8 	.word	0x200005d8

08000bc0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <DMA2_Stream3_IRQHandler+0x10>)
 8000bc6:	f000 fb95 	bl	80012f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200003d4 	.word	0x200003d4

08000bd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <OTG_FS_IRQHandler+0x10>)
 8000bda:	f001 f91e 	bl	8001e1a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20001f98 	.word	0x20001f98

08000be8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <DMA2_Stream6_IRQHandler+0x10>)
 8000bee:	f000 fb81 	bl	80012f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000578 	.word	0x20000578

08000bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c26:	490e      	ldr	r1, [pc, #56]	; (8000c60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c28:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c3c:	4c0b      	ldr	r4, [pc, #44]	; (8000c6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c4a:	f7ff ffd7 	bl	8000bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f009 fce3 	bl	800a618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c52:	f7ff fc55 	bl	8000500 <main>
  bx  lr    
 8000c56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000c64:	0800a748 	.word	0x0800a748
  ldr r2, =_sbss
 8000c68:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000c6c:	200023a0 	.word	0x200023a0

08000c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <HAL_Init+0x40>)
 8000c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <HAL_Init+0x40>)
 8000c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_Init+0x40>)
 8000c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 f94f 	bl	8000f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 f808 	bl	8000cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff fdd4 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023c00 	.word	0x40023c00

08000cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x54>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0x58>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f967 	bl	8000faa <HAL_SYSTICK_Config>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00e      	b.n	8000d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d80a      	bhi.n	8000d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f000 f92f 	bl	8000f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf8:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <HAL_InitTick+0x5c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000004 	.word	0x20000004

08000d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	2000065c 	.word	0x2000065c

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	2000065c 	.word	0x2000065c

08000d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff ffee 	bl	8000d40 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_Delay+0x44>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7e:	bf00      	nop
 8000d80:	f7ff ffde 	bl	8000d40 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4907      	ldr	r1, [pc, #28]	; (8000e3c <__NVIC_EnableIRQ+0x38>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	; (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	; (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	; 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f0c:	d301      	bcc.n	8000f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00f      	b.n	8000f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <SysTick_Config+0x40>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f7ff ff8e 	bl	8000e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <SysTick_Config+0x40>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2a:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <SysTick_Config+0x40>)
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	e000e010 	.word	0xe000e010

08000f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff29 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f68:	f7ff ff3e 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	6978      	ldr	r0, [r7, #20]
 8000f74:	f7ff ff8e 	bl	8000e94 <NVIC_EncodePriority>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff5d 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f86:	bf00      	nop
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff31 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ffa2 	bl	8000efc <SysTick_Config>
 8000fb8:	4603      	mov	r3, r0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff feb6 	bl	8000d40 <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d101      	bne.n	8000fe0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e099      	b.n	8001114 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0201 	bic.w	r2, r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001000:	e00f      	b.n	8001022 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001002:	f7ff fe9d 	bl	8000d40 <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b05      	cmp	r3, #5
 800100e:	d908      	bls.n	8001022 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2220      	movs	r2, #32
 8001014:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2203      	movs	r2, #3
 800101a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e078      	b.n	8001114 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1e8      	bne.n	8001002 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <HAL_DMA_Init+0x158>)
 800103c:	4013      	ands	r3, r2
 800103e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800104e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800105a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001066:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4313      	orrs	r3, r2
 8001072:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001078:	2b04      	cmp	r3, #4
 800107a:	d107      	bne.n	800108c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	4313      	orrs	r3, r2
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	4313      	orrs	r3, r2
 800108a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	f023 0307 	bic.w	r3, r3, #7
 80010a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d117      	bne.n	80010e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	4313      	orrs	r3, r2
 80010be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00e      	beq.n	80010e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 fb0d 	bl	80016e8 <DMA_CheckFifoParam>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d008      	beq.n	80010e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2240      	movs	r2, #64	; 0x40
 80010d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80010e2:	2301      	movs	r3, #1
 80010e4:	e016      	b.n	8001114 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 fac4 	bl	800167c <DMA_CalcBaseAndBitshift>
 80010f4:	4603      	mov	r3, r0
 80010f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fc:	223f      	movs	r2, #63	; 0x3f
 80010fe:	409a      	lsls	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	f010803f 	.word	0xf010803f

08001120 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001136:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800113e:	2b01      	cmp	r3, #1
 8001140:	d101      	bne.n	8001146 <HAL_DMA_Start_IT+0x26>
 8001142:	2302      	movs	r3, #2
 8001144:	e040      	b.n	80011c8 <HAL_DMA_Start_IT+0xa8>
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b01      	cmp	r3, #1
 8001158:	d12f      	bne.n	80011ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2202      	movs	r2, #2
 800115e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2200      	movs	r2, #0
 8001166:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f000 fa56 	bl	8001620 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001178:	223f      	movs	r2, #63	; 0x3f
 800117a:	409a      	lsls	r2, r3
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0216 	orr.w	r2, r2, #22
 800118e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	2b00      	cmp	r3, #0
 8001196:	d007      	beq.n	80011a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 0208 	orr.w	r2, r2, #8
 80011a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f042 0201 	orr.w	r2, r2, #1
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	e005      	b.n	80011c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80011c2:	2302      	movs	r3, #2
 80011c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80011c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011de:	f7ff fdaf 	bl	8000d40 <HAL_GetTick>
 80011e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d008      	beq.n	8001202 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e052      	b.n	80012a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0216 	bic.w	r2, r2, #22
 8001210:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	695a      	ldr	r2, [r3, #20]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001220:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	2b00      	cmp	r3, #0
 8001228:	d103      	bne.n	8001232 <HAL_DMA_Abort+0x62>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800122e:	2b00      	cmp	r3, #0
 8001230:	d007      	beq.n	8001242 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 0208 	bic.w	r2, r2, #8
 8001240:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0201 	bic.w	r2, r2, #1
 8001250:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001252:	e013      	b.n	800127c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001254:	f7ff fd74 	bl	8000d40 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b05      	cmp	r3, #5
 8001260:	d90c      	bls.n	800127c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2220      	movs	r2, #32
 8001266:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2203      	movs	r2, #3
 800126c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e015      	b.n	80012a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1e4      	bne.n	8001254 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800128e:	223f      	movs	r2, #63	; 0x3f
 8001290:	409a      	lsls	r2, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d004      	beq.n	80012ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2280      	movs	r2, #128	; 0x80
 80012c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00c      	b.n	80012e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2205      	movs	r2, #5
 80012d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0201 	bic.w	r2, r2, #1
 80012e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001300:	4b92      	ldr	r3, [pc, #584]	; (800154c <HAL_DMA_IRQHandler+0x258>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a92      	ldr	r2, [pc, #584]	; (8001550 <HAL_DMA_IRQHandler+0x25c>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	0a9b      	lsrs	r3, r3, #10
 800130c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001312:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800131e:	2208      	movs	r2, #8
 8001320:	409a      	lsls	r2, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4013      	ands	r3, r2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d01a      	beq.n	8001360 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	d013      	beq.n	8001360 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 0204 	bic.w	r2, r2, #4
 8001346:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134c:	2208      	movs	r2, #8
 800134e:	409a      	lsls	r2, r3
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001358:	f043 0201 	orr.w	r2, r3, #1
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001364:	2201      	movs	r2, #1
 8001366:	409a      	lsls	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4013      	ands	r3, r2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d012      	beq.n	8001396 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00b      	beq.n	8001396 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001382:	2201      	movs	r2, #1
 8001384:	409a      	lsls	r2, r3
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138e:	f043 0202 	orr.w	r2, r3, #2
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139a:	2204      	movs	r2, #4
 800139c:	409a      	lsls	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4013      	ands	r3, r2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d012      	beq.n	80013cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00b      	beq.n	80013cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b8:	2204      	movs	r2, #4
 80013ba:	409a      	lsls	r2, r3
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c4:	f043 0204 	orr.w	r2, r3, #4
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d0:	2210      	movs	r2, #16
 80013d2:	409a      	lsls	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d043      	beq.n	8001464 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d03c      	beq.n	8001464 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ee:	2210      	movs	r2, #16
 80013f0:	409a      	lsls	r2, r3
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d018      	beq.n	8001436 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d108      	bne.n	8001424 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	2b00      	cmp	r3, #0
 8001418:	d024      	beq.n	8001464 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	4798      	blx	r3
 8001422:	e01f      	b.n	8001464 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001428:	2b00      	cmp	r3, #0
 800142a:	d01b      	beq.n	8001464 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	4798      	blx	r3
 8001434:	e016      	b.n	8001464 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001440:	2b00      	cmp	r3, #0
 8001442:	d107      	bne.n	8001454 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0208 	bic.w	r2, r2, #8
 8001452:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001468:	2220      	movs	r2, #32
 800146a:	409a      	lsls	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4013      	ands	r3, r2
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 808e 	beq.w	8001592 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0310 	and.w	r3, r3, #16
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 8086 	beq.w	8001592 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148a:	2220      	movs	r2, #32
 800148c:	409a      	lsls	r2, r3
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b05      	cmp	r3, #5
 800149c:	d136      	bne.n	800150c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0216 	bic.w	r2, r2, #22
 80014ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	695a      	ldr	r2, [r3, #20]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d103      	bne.n	80014ce <HAL_DMA_IRQHandler+0x1da>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d007      	beq.n	80014de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 0208 	bic.w	r2, r2, #8
 80014dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e2:	223f      	movs	r2, #63	; 0x3f
 80014e4:	409a      	lsls	r2, r3
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d07d      	beq.n	80015fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	4798      	blx	r3
        }
        return;
 800150a:	e078      	b.n	80015fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d01c      	beq.n	8001554 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d108      	bne.n	800153a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152c:	2b00      	cmp	r3, #0
 800152e:	d030      	beq.n	8001592 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	4798      	blx	r3
 8001538:	e02b      	b.n	8001592 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800153e:	2b00      	cmp	r3, #0
 8001540:	d027      	beq.n	8001592 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	4798      	blx	r3
 800154a:	e022      	b.n	8001592 <HAL_DMA_IRQHandler+0x29e>
 800154c:	20000000 	.word	0x20000000
 8001550:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10f      	bne.n	8001582 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 0210 	bic.w	r2, r2, #16
 8001570:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001596:	2b00      	cmp	r3, #0
 8001598:	d032      	beq.n	8001600 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d022      	beq.n	80015ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2205      	movs	r2, #5
 80015aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0201 	bic.w	r2, r2, #1
 80015bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	3301      	adds	r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d307      	bcc.n	80015da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f2      	bne.n	80015be <HAL_DMA_IRQHandler+0x2ca>
 80015d8:	e000      	b.n	80015dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80015da:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	4798      	blx	r3
 80015fc:	e000      	b.n	8001600 <HAL_DMA_IRQHandler+0x30c>
        return;
 80015fe:	bf00      	nop
    }
  }
}
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop

08001608 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800163c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b40      	cmp	r3, #64	; 0x40
 800164c:	d108      	bne.n	8001660 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800165e:	e007      	b.n	8001670 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	60da      	str	r2, [r3, #12]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	3b10      	subs	r3, #16
 800168c:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <DMA_CalcBaseAndBitshift+0x64>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	091b      	lsrs	r3, r3, #4
 8001694:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001696:	4a13      	ldr	r2, [pc, #76]	; (80016e4 <DMA_CalcBaseAndBitshift+0x68>)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d909      	bls.n	80016be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016b2:	f023 0303 	bic.w	r3, r3, #3
 80016b6:	1d1a      	adds	r2, r3, #4
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	659a      	str	r2, [r3, #88]	; 0x58
 80016bc:	e007      	b.n	80016ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016c6:	f023 0303 	bic.w	r3, r3, #3
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	aaaaaaab 	.word	0xaaaaaaab
 80016e4:	0800a71c 	.word	0x0800a71c

080016e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d11f      	bne.n	8001742 <DMA_CheckFifoParam+0x5a>
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	2b03      	cmp	r3, #3
 8001706:	d856      	bhi.n	80017b6 <DMA_CheckFifoParam+0xce>
 8001708:	a201      	add	r2, pc, #4	; (adr r2, 8001710 <DMA_CheckFifoParam+0x28>)
 800170a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170e:	bf00      	nop
 8001710:	08001721 	.word	0x08001721
 8001714:	08001733 	.word	0x08001733
 8001718:	08001721 	.word	0x08001721
 800171c:	080017b7 	.word	0x080017b7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d046      	beq.n	80017ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001730:	e043      	b.n	80017ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001736:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800173a:	d140      	bne.n	80017be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001740:	e03d      	b.n	80017be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800174a:	d121      	bne.n	8001790 <DMA_CheckFifoParam+0xa8>
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d837      	bhi.n	80017c2 <DMA_CheckFifoParam+0xda>
 8001752:	a201      	add	r2, pc, #4	; (adr r2, 8001758 <DMA_CheckFifoParam+0x70>)
 8001754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001758:	08001769 	.word	0x08001769
 800175c:	0800176f 	.word	0x0800176f
 8001760:	08001769 	.word	0x08001769
 8001764:	08001781 	.word	0x08001781
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
      break;
 800176c:	e030      	b.n	80017d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d025      	beq.n	80017c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800177e:	e022      	b.n	80017c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001784:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001788:	d11f      	bne.n	80017ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800178e:	e01c      	b.n	80017ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d903      	bls.n	800179e <DMA_CheckFifoParam+0xb6>
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b03      	cmp	r3, #3
 800179a:	d003      	beq.n	80017a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800179c:	e018      	b.n	80017d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]
      break;
 80017a2:	e015      	b.n	80017d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00e      	beq.n	80017ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
      break;
 80017b4:	e00b      	b.n	80017ce <DMA_CheckFifoParam+0xe6>
      break;
 80017b6:	bf00      	nop
 80017b8:	e00a      	b.n	80017d0 <DMA_CheckFifoParam+0xe8>
      break;
 80017ba:	bf00      	nop
 80017bc:	e008      	b.n	80017d0 <DMA_CheckFifoParam+0xe8>
      break;
 80017be:	bf00      	nop
 80017c0:	e006      	b.n	80017d0 <DMA_CheckFifoParam+0xe8>
      break;
 80017c2:	bf00      	nop
 80017c4:	e004      	b.n	80017d0 <DMA_CheckFifoParam+0xe8>
      break;
 80017c6:	bf00      	nop
 80017c8:	e002      	b.n	80017d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80017ca:	bf00      	nop
 80017cc:	e000      	b.n	80017d0 <DMA_CheckFifoParam+0xe8>
      break;
 80017ce:	bf00      	nop
    }
  } 
  
  return status; 
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop

080017e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	e16b      	b.n	8001ad4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017fc:	2201      	movs	r2, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	429a      	cmp	r2, r3
 8001816:	f040 815a 	bne.w	8001ace <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b01      	cmp	r3, #1
 8001824:	d005      	beq.n	8001832 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800182e:	2b02      	cmp	r3, #2
 8001830:	d130      	bne.n	8001894 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	2203      	movs	r2, #3
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001868:	2201      	movs	r2, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 0201 	and.w	r2, r3, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	2b03      	cmp	r3, #3
 800189e:	d017      	beq.n	80018d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	2203      	movs	r2, #3
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d123      	bne.n	8001924 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	08da      	lsrs	r2, r3, #3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3208      	adds	r2, #8
 80018e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	220f      	movs	r2, #15
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	08da      	lsrs	r2, r3, #3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3208      	adds	r2, #8
 800191e:	69b9      	ldr	r1, [r7, #24]
 8001920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0203 	and.w	r2, r3, #3
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80b4 	beq.w	8001ace <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b60      	ldr	r3, [pc, #384]	; (8001aec <HAL_GPIO_Init+0x30c>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	4a5f      	ldr	r2, [pc, #380]	; (8001aec <HAL_GPIO_Init+0x30c>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001974:	6453      	str	r3, [r2, #68]	; 0x44
 8001976:	4b5d      	ldr	r3, [pc, #372]	; (8001aec <HAL_GPIO_Init+0x30c>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001982:	4a5b      	ldr	r2, [pc, #364]	; (8001af0 <HAL_GPIO_Init+0x310>)
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	3302      	adds	r3, #2
 800198a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	220f      	movs	r2, #15
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a52      	ldr	r2, [pc, #328]	; (8001af4 <HAL_GPIO_Init+0x314>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d02b      	beq.n	8001a06 <HAL_GPIO_Init+0x226>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a51      	ldr	r2, [pc, #324]	; (8001af8 <HAL_GPIO_Init+0x318>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d025      	beq.n	8001a02 <HAL_GPIO_Init+0x222>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a50      	ldr	r2, [pc, #320]	; (8001afc <HAL_GPIO_Init+0x31c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d01f      	beq.n	80019fe <HAL_GPIO_Init+0x21e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a4f      	ldr	r2, [pc, #316]	; (8001b00 <HAL_GPIO_Init+0x320>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d019      	beq.n	80019fa <HAL_GPIO_Init+0x21a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a4e      	ldr	r2, [pc, #312]	; (8001b04 <HAL_GPIO_Init+0x324>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d013      	beq.n	80019f6 <HAL_GPIO_Init+0x216>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a4d      	ldr	r2, [pc, #308]	; (8001b08 <HAL_GPIO_Init+0x328>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d00d      	beq.n	80019f2 <HAL_GPIO_Init+0x212>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a4c      	ldr	r2, [pc, #304]	; (8001b0c <HAL_GPIO_Init+0x32c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d007      	beq.n	80019ee <HAL_GPIO_Init+0x20e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a4b      	ldr	r2, [pc, #300]	; (8001b10 <HAL_GPIO_Init+0x330>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d101      	bne.n	80019ea <HAL_GPIO_Init+0x20a>
 80019e6:	2307      	movs	r3, #7
 80019e8:	e00e      	b.n	8001a08 <HAL_GPIO_Init+0x228>
 80019ea:	2308      	movs	r3, #8
 80019ec:	e00c      	b.n	8001a08 <HAL_GPIO_Init+0x228>
 80019ee:	2306      	movs	r3, #6
 80019f0:	e00a      	b.n	8001a08 <HAL_GPIO_Init+0x228>
 80019f2:	2305      	movs	r3, #5
 80019f4:	e008      	b.n	8001a08 <HAL_GPIO_Init+0x228>
 80019f6:	2304      	movs	r3, #4
 80019f8:	e006      	b.n	8001a08 <HAL_GPIO_Init+0x228>
 80019fa:	2303      	movs	r3, #3
 80019fc:	e004      	b.n	8001a08 <HAL_GPIO_Init+0x228>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e002      	b.n	8001a08 <HAL_GPIO_Init+0x228>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <HAL_GPIO_Init+0x228>
 8001a06:	2300      	movs	r3, #0
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	f002 0203 	and.w	r2, r2, #3
 8001a0e:	0092      	lsls	r2, r2, #2
 8001a10:	4093      	lsls	r3, r2
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a18:	4935      	ldr	r1, [pc, #212]	; (8001af0 <HAL_GPIO_Init+0x310>)
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	3302      	adds	r3, #2
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a26:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <HAL_GPIO_Init+0x334>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a4a:	4a32      	ldr	r2, [pc, #200]	; (8001b14 <HAL_GPIO_Init+0x334>)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a50:	4b30      	ldr	r3, [pc, #192]	; (8001b14 <HAL_GPIO_Init+0x334>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a74:	4a27      	ldr	r2, [pc, #156]	; (8001b14 <HAL_GPIO_Init+0x334>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a7a:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <HAL_GPIO_Init+0x334>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a9e:	4a1d      	ldr	r2, [pc, #116]	; (8001b14 <HAL_GPIO_Init+0x334>)
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_GPIO_Init+0x334>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ac8:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <HAL_GPIO_Init+0x334>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	2b0f      	cmp	r3, #15
 8001ad8:	f67f ae90 	bls.w	80017fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3724      	adds	r7, #36	; 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40013800 	.word	0x40013800
 8001af4:	40020000 	.word	0x40020000
 8001af8:	40020400 	.word	0x40020400
 8001afc:	40020800 	.word	0x40020800
 8001b00:	40020c00 	.word	0x40020c00
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40021400 	.word	0x40021400
 8001b0c:	40021800 	.word	0x40021800
 8001b10:	40021c00 	.word	0x40021c00
 8001b14:	40013c00 	.word	0x40013c00

08001b18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691a      	ldr	r2, [r3, #16]
 8001b28:	887b      	ldrh	r3, [r7, #2]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
 8001b34:	e001      	b.n	8001b3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b36:	2300      	movs	r3, #0
 8001b38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	807b      	strh	r3, [r7, #2]
 8001b54:	4613      	mov	r3, r2
 8001b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b58:	787b      	ldrb	r3, [r7, #1]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b5e:	887a      	ldrh	r2, [r7, #2]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b64:	e003      	b.n	8001b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b66:	887b      	ldrh	r3, [r7, #2]
 8001b68:	041a      	lsls	r2, r3, #16
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	619a      	str	r2, [r3, #24]
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7c:	b08f      	sub	sp, #60	; 0x3c
 8001b7e:	af0a      	add	r7, sp, #40	; 0x28
 8001b80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e10f      	b.n	8001dac <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d106      	bne.n	8001bac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f008 fa22 	bl	8009ff0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2203      	movs	r2, #3
 8001bb0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d102      	bne.n	8001bc6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f004 fe1f 	bl	800680e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	603b      	str	r3, [r7, #0]
 8001bd6:	687e      	ldr	r6, [r7, #4]
 8001bd8:	466d      	mov	r5, sp
 8001bda:	f106 0410 	add.w	r4, r6, #16
 8001bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001be6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bea:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bee:	1d33      	adds	r3, r6, #4
 8001bf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bf2:	6838      	ldr	r0, [r7, #0]
 8001bf4:	f004 fcf6 	bl	80065e4 <USB_CoreInit>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2202      	movs	r2, #2
 8001c02:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e0d0      	b.n	8001dac <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f004 fe0d 	bl	8006830 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	73fb      	strb	r3, [r7, #15]
 8001c1a:	e04a      	b.n	8001cb2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c1c:	7bfa      	ldrb	r2, [r7, #15]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	333d      	adds	r3, #61	; 0x3d
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c30:	7bfa      	ldrb	r2, [r7, #15]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	1a9b      	subs	r3, r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	333c      	adds	r3, #60	; 0x3c
 8001c40:	7bfa      	ldrb	r2, [r7, #15]
 8001c42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	b298      	uxth	r0, r3
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	1a9b      	subs	r3, r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	3342      	adds	r3, #66	; 0x42
 8001c58:	4602      	mov	r2, r0
 8001c5a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	333f      	adds	r3, #63	; 0x3f
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	1a9b      	subs	r3, r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	3344      	adds	r3, #68	; 0x44
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c84:	7bfa      	ldrb	r2, [r7, #15]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	1a9b      	subs	r3, r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	3348      	adds	r3, #72	; 0x48
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c98:	7bfa      	ldrb	r2, [r7, #15]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	3350      	adds	r3, #80	; 0x50
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d3af      	bcc.n	8001c1c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	73fb      	strb	r3, [r7, #15]
 8001cc0:	e044      	b.n	8001d4c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cc2:	7bfa      	ldrb	r2, [r7, #15]
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	1a9b      	subs	r3, r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cd8:	7bfa      	ldrb	r2, [r7, #15]
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001cea:	7bfa      	ldrb	r2, [r7, #15]
 8001cec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	1a9b      	subs	r3, r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d1a:	7bfa      	ldrb	r2, [r7, #15]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	1a9b      	subs	r3, r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d30:	7bfa      	ldrb	r2, [r7, #15]
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	1a9b      	subs	r3, r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
 8001d4c:	7bfa      	ldrb	r2, [r7, #15]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d3b5      	bcc.n	8001cc2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	687e      	ldr	r6, [r7, #4]
 8001d5e:	466d      	mov	r5, sp
 8001d60:	f106 0410 	add.w	r4, r6, #16
 8001d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d70:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d74:	1d33      	adds	r3, r6, #4
 8001d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d78:	6838      	ldr	r0, [r7, #0]
 8001d7a:	f004 fda5 	bl	80068c8 <USB_DevInit>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e00d      	b.n	8001dac <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f005 fe21 	bl	80079ec <USB_DevDisconnect>

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001db4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_PCD_Start+0x1c>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e020      	b.n	8001e12 <HAL_PCD_Start+0x5e>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d109      	bne.n	8001df4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d005      	beq.n	8001df4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f004 fcf7 	bl	80067ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f005 fdd1 	bl	80079aa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e1a:	b590      	push	{r4, r7, lr}
 8001e1c:	b08d      	sub	sp, #52	; 0x34
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e28:	6a3b      	ldr	r3, [r7, #32]
 8001e2a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f005 fe8f 	bl	8007b54 <USB_GetMode>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f040 839d 	bne.w	8002578 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f005 fdf3 	bl	8007a2e <USB_ReadInterrupts>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8393 	beq.w	8002576 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f005 fdea 	bl	8007a2e <USB_ReadInterrupts>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d107      	bne.n	8001e74 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f002 0202 	and.w	r2, r2, #2
 8001e72:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f005 fdd8 	bl	8007a2e <USB_ReadInterrupts>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	2b10      	cmp	r3, #16
 8001e86:	d161      	bne.n	8001f4c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0210 	bic.w	r2, r2, #16
 8001e96:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	f003 020f 	and.w	r2, r3, #15
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	0c5b      	lsrs	r3, r3, #17
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d124      	bne.n	8001f0e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d035      	beq.n	8001f3c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	091b      	lsrs	r3, r3, #4
 8001ed8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001eda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	6a38      	ldr	r0, [r7, #32]
 8001ee4:	f005 fc0f 	bl	8007706 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ef4:	441a      	add	r2, r3
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	699a      	ldr	r2, [r3, #24]
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f06:	441a      	add	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	619a      	str	r2, [r3, #24]
 8001f0c:	e016      	b.n	8001f3c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	0c5b      	lsrs	r3, r3, #17
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	2b06      	cmp	r3, #6
 8001f18:	d110      	bne.n	8001f3c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f20:	2208      	movs	r2, #8
 8001f22:	4619      	mov	r1, r3
 8001f24:	6a38      	ldr	r0, [r7, #32]
 8001f26:	f005 fbee 	bl	8007706 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f36:	441a      	add	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699a      	ldr	r2, [r3, #24]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0210 	orr.w	r2, r2, #16
 8001f4a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f005 fd6c 	bl	8007a2e <USB_ReadInterrupts>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f60:	d16e      	bne.n	8002040 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f005 fd72 	bl	8007a54 <USB_ReadDevAllOutEpInterrupt>
 8001f70:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f72:	e062      	b.n	800203a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d057      	beq.n	800202e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f005 fd97 	bl	8007abc <USB_ReadDevOutEPInterrupt>
 8001f8e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00c      	beq.n	8001fb4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2301      	movs	r3, #1
 8001faa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001fac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 fdb0 	bl	8002b14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00c      	beq.n	8001fd8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fca:	461a      	mov	r2, r3
 8001fcc:	2308      	movs	r3, #8
 8001fce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001fd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 feaa 	bl	8002d2c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d008      	beq.n	8001ff4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2310      	movs	r3, #16
 8001ff2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	f003 0320 	and.w	r3, r3, #32
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d008      	beq.n	8002010 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	4413      	add	r3, r2
 8002006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800200a:	461a      	mov	r2, r3
 800200c:	2320      	movs	r3, #32
 800200e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d009      	beq.n	800202e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	015a      	lsls	r2, r3, #5
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	4413      	add	r3, r2
 8002022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002026:	461a      	mov	r2, r3
 8002028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800202c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	3301      	adds	r3, #1
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002036:	085b      	lsrs	r3, r3, #1
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800203a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203c:	2b00      	cmp	r3, #0
 800203e:	d199      	bne.n	8001f74 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f005 fcf2 	bl	8007a2e <USB_ReadInterrupts>
 800204a:	4603      	mov	r3, r0
 800204c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002050:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002054:	f040 80c0 	bne.w	80021d8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f005 fd13 	bl	8007a88 <USB_ReadDevAllInEpInterrupt>
 8002062:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002068:	e0b2      	b.n	80021d0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800206a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80a7 	beq.w	80021c4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f005 fd39 	bl	8007af8 <USB_ReadDevInEPInterrupt>
 8002086:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d057      	beq.n	8002142 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	2201      	movs	r2, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69f9      	ldr	r1, [r7, #28]
 80020ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020b2:	4013      	ands	r3, r2
 80020b4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020c2:	461a      	mov	r2, r3
 80020c4:	2301      	movs	r3, #1
 80020c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d132      	bne.n	8002136 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	3348      	adds	r3, #72	; 0x48
 80020e0:	6819      	ldr	r1, [r3, #0]
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4403      	add	r3, r0
 80020f0:	3344      	adds	r3, #68	; 0x44
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4419      	add	r1, r3
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fa:	4613      	mov	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	1a9b      	subs	r3, r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4403      	add	r3, r0
 8002104:	3348      	adds	r3, #72	; 0x48
 8002106:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	2b00      	cmp	r3, #0
 800210c:	d113      	bne.n	8002136 <HAL_PCD_IRQHandler+0x31c>
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	3350      	adds	r3, #80	; 0x50
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d108      	bne.n	8002136 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800212e:	461a      	mov	r2, r3
 8002130:	2101      	movs	r1, #1
 8002132:	f005 fd41 	bl	8007bb8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	b2db      	uxtb	r3, r3
 800213a:	4619      	mov	r1, r3
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f007 ffd8 	bl	800a0f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	4413      	add	r3, r2
 8002154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002158:	461a      	mov	r2, r3
 800215a:	2308      	movs	r3, #8
 800215c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	4413      	add	r3, r2
 8002170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002174:	461a      	mov	r2, r3
 8002176:	2310      	movs	r3, #16
 8002178:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	4413      	add	r3, r2
 800218c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002190:	461a      	mov	r2, r3
 8002192:	2340      	movs	r3, #64	; 0x40
 8002194:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	015a      	lsls	r2, r3, #5
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021ac:	461a      	mov	r2, r3
 80021ae:	2302      	movs	r3, #2
 80021b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80021bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fc1b 	bl	80029fa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	3301      	adds	r3, #1
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021cc:	085b      	lsrs	r3, r3, #1
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f47f af49 	bne.w	800206a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f005 fc26 	bl	8007a2e <USB_ReadInterrupts>
 80021e2:	4603      	mov	r3, r0
 80021e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021ec:	d122      	bne.n	8002234 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002208:	2b01      	cmp	r3, #1
 800220a:	d108      	bne.n	800221e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002214:	2100      	movs	r1, #0
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fe26 	bl	8002e68 <HAL_PCDEx_LPM_Callback>
 800221c:	e002      	b.n	8002224 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f007 ffde 	bl	800a1e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002232:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f005 fbf8 	bl	8007a2e <USB_ReadInterrupts>
 800223e:	4603      	mov	r3, r0
 8002240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002248:	d112      	bne.n	8002270 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b01      	cmp	r3, #1
 8002258:	d102      	bne.n	8002260 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f007 ff9a 	bl	800a194 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800226e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f005 fbda 	bl	8007a2e <USB_ReadInterrupts>
 800227a:	4603      	mov	r3, r0
 800227c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002284:	f040 80c7 	bne.w	8002416 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	69fa      	ldr	r2, [r7, #28]
 8002292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002296:	f023 0301 	bic.w	r3, r3, #1
 800229a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2110      	movs	r1, #16
 80022a2:	4618      	mov	r0, r3
 80022a4:	f004 fc74 	bl	8006b90 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a8:	2300      	movs	r3, #0
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ac:	e056      	b.n	800235c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ba:	461a      	mov	r2, r3
 80022bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80022c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022d2:	0151      	lsls	r1, r2, #5
 80022d4:	69fa      	ldr	r2, [r7, #28]
 80022d6:	440a      	add	r2, r1
 80022d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022e0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022f2:	0151      	lsls	r1, r2, #5
 80022f4:	69fa      	ldr	r2, [r7, #28]
 80022f6:	440a      	add	r2, r1
 80022f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002300:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	4413      	add	r3, r2
 800230a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800230e:	461a      	mov	r2, r3
 8002310:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002314:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	4413      	add	r3, r2
 800231e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002326:	0151      	lsls	r1, r2, #5
 8002328:	69fa      	ldr	r2, [r7, #28]
 800232a:	440a      	add	r2, r1
 800232c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002330:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002334:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	4413      	add	r3, r2
 800233e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002346:	0151      	lsls	r1, r2, #5
 8002348:	69fa      	ldr	r2, [r7, #28]
 800234a:	440a      	add	r2, r1
 800234c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002350:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002354:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002358:	3301      	adds	r3, #1
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002362:	429a      	cmp	r2, r3
 8002364:	d3a3      	bcc.n	80022ae <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002374:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002378:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	2b00      	cmp	r3, #0
 8002380:	d016      	beq.n	80023b0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002392:	f043 030b 	orr.w	r3, r3, #11
 8002396:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023a8:	f043 030b 	orr.w	r3, r3, #11
 80023ac:	6453      	str	r3, [r2, #68]	; 0x44
 80023ae:	e015      	b.n	80023dc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023c2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80023c6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023d6:	f043 030b 	orr.w	r3, r3, #11
 80023da:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80023ee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002400:	461a      	mov	r2, r3
 8002402:	f005 fbd9 	bl	8007bb8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695a      	ldr	r2, [r3, #20]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002414:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f005 fb07 	bl	8007a2e <USB_ReadInterrupts>
 8002420:	4603      	mov	r3, r0
 8002422:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800242a:	d124      	bne.n	8002476 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f005 fb9d 	bl	8007b70 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f004 fc05 	bl	8006c4a <USB_GetDevSpeed>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681c      	ldr	r4, [r3, #0]
 800244c:	f001 f92c 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 8002450:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002456:	b2db      	uxtb	r3, r3
 8002458:	461a      	mov	r2, r3
 800245a:	4620      	mov	r0, r4
 800245c:	f004 f924 	bl	80066a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f007 fe6e 	bl	800a142 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695a      	ldr	r2, [r3, #20]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002474:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f005 fad7 	bl	8007a2e <USB_ReadInterrupts>
 8002480:	4603      	mov	r3, r0
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b08      	cmp	r3, #8
 8002488:	d10a      	bne.n	80024a0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f007 fe4b 	bl	800a126 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f002 0208 	and.w	r2, r2, #8
 800249e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f005 fac2 	bl	8007a2e <USB_ReadInterrupts>
 80024aa:	4603      	mov	r3, r0
 80024ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024b4:	d10f      	bne.n	80024d6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	4619      	mov	r1, r3
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f007 fead 	bl	800a220 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80024d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f005 faa7 	bl	8007a2e <USB_ReadInterrupts>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024ea:	d10f      	bne.n	800250c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	4619      	mov	r1, r3
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f007 fe80 	bl	800a1fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800250a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f005 fa8c 	bl	8007a2e <USB_ReadInterrupts>
 8002516:	4603      	mov	r3, r0
 8002518:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800251c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002520:	d10a      	bne.n	8002538 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f007 fe8e 	bl	800a244 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002536:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f005 fa76 	bl	8007a2e <USB_ReadInterrupts>
 8002542:	4603      	mov	r3, r0
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b04      	cmp	r3, #4
 800254a:	d115      	bne.n	8002578 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f007 fe7e 	bl	800a260 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6859      	ldr	r1, [r3, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	430a      	orrs	r2, r1
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	e000      	b.n	8002578 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002576:	bf00      	nop
    }
  }
}
 8002578:	3734      	adds	r7, #52	; 0x34
 800257a:	46bd      	mov	sp, r7
 800257c:	bd90      	pop	{r4, r7, pc}

0800257e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	460b      	mov	r3, r1
 8002588:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_PCD_SetAddress+0x1a>
 8002594:	2302      	movs	r3, #2
 8002596:	e013      	b.n	80025c0 <HAL_PCD_SetAddress+0x42>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	78fa      	ldrb	r2, [r7, #3]
 80025a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f005 f9d4 	bl	800795e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	4608      	mov	r0, r1
 80025d2:	4611      	mov	r1, r2
 80025d4:	461a      	mov	r2, r3
 80025d6:	4603      	mov	r3, r0
 80025d8:	70fb      	strb	r3, [r7, #3]
 80025da:	460b      	mov	r3, r1
 80025dc:	803b      	strh	r3, [r7, #0]
 80025de:	4613      	mov	r3, r2
 80025e0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	da0f      	bge.n	800260e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025ee:	78fb      	ldrb	r3, [r7, #3]
 80025f0:	f003 020f 	and.w	r2, r3, #15
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	3338      	adds	r3, #56	; 0x38
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	3304      	adds	r3, #4
 8002604:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2201      	movs	r2, #1
 800260a:	705a      	strb	r2, [r3, #1]
 800260c:	e00f      	b.n	800262e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	f003 020f 	and.w	r2, r3, #15
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	4413      	add	r3, r2
 8002624:	3304      	adds	r3, #4
 8002626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800262e:	78fb      	ldrb	r3, [r7, #3]
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	b2da      	uxtb	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800263a:	883a      	ldrh	r2, [r7, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	78ba      	ldrb	r2, [r7, #2]
 8002644:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	785b      	ldrb	r3, [r3, #1]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d004      	beq.n	8002658 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002658:	78bb      	ldrb	r3, [r7, #2]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d102      	bne.n	8002664 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_PCD_EP_Open+0xaa>
 800266e:	2302      	movs	r3, #2
 8002670:	e00e      	b.n	8002690 <HAL_PCD_EP_Open+0xc8>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68f9      	ldr	r1, [r7, #12]
 8002680:	4618      	mov	r0, r3
 8002682:	f004 fb07 	bl	8006c94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800268e:	7afb      	ldrb	r3, [r7, #11]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	da0f      	bge.n	80026cc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	f003 020f 	and.w	r2, r3, #15
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	1a9b      	subs	r3, r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	3338      	adds	r3, #56	; 0x38
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4413      	add	r3, r2
 80026c0:	3304      	adds	r3, #4
 80026c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2201      	movs	r2, #1
 80026c8:	705a      	strb	r2, [r3, #1]
 80026ca:	e00f      	b.n	80026ec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	f003 020f 	and.w	r2, r3, #15
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	3304      	adds	r3, #4
 80026e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_PCD_EP_Close+0x6e>
 8002702:	2302      	movs	r3, #2
 8002704:	e00e      	b.n	8002724 <HAL_PCD_EP_Close+0x8c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68f9      	ldr	r1, [r7, #12]
 8002714:	4618      	mov	r0, r3
 8002716:	f004 fb45 	bl	8006da4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	460b      	mov	r3, r1
 800273a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800273c:	7afb      	ldrb	r3, [r7, #11]
 800273e:	f003 020f 	and.w	r2, r3, #15
 8002742:	4613      	mov	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	1a9b      	subs	r3, r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4413      	add	r3, r2
 8002752:	3304      	adds	r3, #4
 8002754:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2200      	movs	r2, #0
 800276c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800276e:	7afb      	ldrb	r3, [r7, #11]
 8002770:	f003 030f 	and.w	r3, r3, #15
 8002774:	b2da      	uxtb	r2, r3
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d102      	bne.n	8002788 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002788:	7afb      	ldrb	r3, [r7, #11]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	461a      	mov	r2, r3
 800279e:	6979      	ldr	r1, [r7, #20]
 80027a0:	f004 fe20 	bl	80073e4 <USB_EP0StartXfer>
 80027a4:	e008      	b.n	80027b8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	6979      	ldr	r1, [r7, #20]
 80027b4:	f004 fbd2 	bl	8006f5c <USB_EPStartXfer>
  }

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	460b      	mov	r3, r1
 80027cc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027ce:	78fb      	ldrb	r3, [r7, #3]
 80027d0:	f003 020f 	and.w	r2, r3, #15
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	1a9b      	subs	r3, r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80027e4:	681b      	ldr	r3, [r3, #0]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	460b      	mov	r3, r1
 8002800:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002802:	7afb      	ldrb	r3, [r7, #11]
 8002804:	f003 020f 	and.w	r2, r3, #15
 8002808:	4613      	mov	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	3338      	adds	r3, #56	; 0x38
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4413      	add	r3, r2
 8002816:	3304      	adds	r3, #4
 8002818:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2200      	movs	r2, #0
 800282a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2201      	movs	r2, #1
 8002830:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002832:	7afb      	ldrb	r3, [r7, #11]
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	b2da      	uxtb	r2, r3
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d102      	bne.n	800284c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800284c:	7afb      	ldrb	r3, [r7, #11]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	2b00      	cmp	r3, #0
 8002854:	d109      	bne.n	800286a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	6979      	ldr	r1, [r7, #20]
 8002864:	f004 fdbe 	bl	80073e4 <USB_EP0StartXfer>
 8002868:	e008      	b.n	800287c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	461a      	mov	r2, r3
 8002876:	6979      	ldr	r1, [r7, #20]
 8002878:	f004 fb70 	bl	8006f5c <USB_EPStartXfer>
  }

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b084      	sub	sp, #16
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	460b      	mov	r3, r1
 8002890:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002892:	78fb      	ldrb	r3, [r7, #3]
 8002894:	f003 020f 	and.w	r2, r3, #15
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	429a      	cmp	r2, r3
 800289e:	d901      	bls.n	80028a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e050      	b.n	8002946 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	da0f      	bge.n	80028cc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	f003 020f 	and.w	r2, r3, #15
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	3338      	adds	r3, #56	; 0x38
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	4413      	add	r3, r2
 80028c0:	3304      	adds	r3, #4
 80028c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	705a      	strb	r2, [r3, #1]
 80028ca:	e00d      	b.n	80028e8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028cc:	78fa      	ldrb	r2, [r7, #3]
 80028ce:	4613      	mov	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	1a9b      	subs	r3, r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	4413      	add	r3, r2
 80028de:	3304      	adds	r3, #4
 80028e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2201      	movs	r2, #1
 80028ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028ee:	78fb      	ldrb	r3, [r7, #3]
 80028f0:	f003 030f 	and.w	r3, r3, #15
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_PCD_EP_SetStall+0x82>
 8002904:	2302      	movs	r3, #2
 8002906:	e01e      	b.n	8002946 <HAL_PCD_EP_SetStall+0xc0>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68f9      	ldr	r1, [r7, #12]
 8002916:	4618      	mov	r0, r3
 8002918:	f004 ff4d 	bl	80077b6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10a      	bne.n	800293c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	b2d9      	uxtb	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002936:	461a      	mov	r2, r3
 8002938:	f005 f93e 	bl	8007bb8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	460b      	mov	r3, r1
 8002958:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	f003 020f 	and.w	r2, r3, #15
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	429a      	cmp	r2, r3
 8002966:	d901      	bls.n	800296c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e042      	b.n	80029f2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800296c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002970:	2b00      	cmp	r3, #0
 8002972:	da0f      	bge.n	8002994 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	f003 020f 	and.w	r2, r3, #15
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	3338      	adds	r3, #56	; 0x38
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	4413      	add	r3, r2
 8002988:	3304      	adds	r3, #4
 800298a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	705a      	strb	r2, [r3, #1]
 8002992:	e00f      	b.n	80029b4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	f003 020f 	and.w	r2, r3, #15
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	3304      	adds	r3, #4
 80029ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_PCD_EP_ClrStall+0x86>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e00e      	b.n	80029f2 <HAL_PCD_EP_ClrStall+0xa4>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68f9      	ldr	r1, [r7, #12]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f004 ff55 	bl	8007892 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b08a      	sub	sp, #40	; 0x28
 80029fe:	af02      	add	r7, sp, #8
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	4613      	mov	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	3338      	adds	r3, #56	; 0x38
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3304      	adds	r3, #4
 8002a20:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d901      	bls.n	8002a32 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e06c      	b.n	8002b0c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	695a      	ldr	r2, [r3, #20]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	69fa      	ldr	r2, [r7, #28]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d902      	bls.n	8002a4e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3303      	adds	r3, #3
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a56:	e02b      	b.n	8002ab0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	69fa      	ldr	r2, [r7, #28]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d902      	bls.n	8002a74 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	3303      	adds	r3, #3
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	68d9      	ldr	r1, [r3, #12]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	4603      	mov	r3, r0
 8002a92:	6978      	ldr	r0, [r7, #20]
 8002a94:	f004 fdf9 	bl	800768a <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	441a      	add	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	699a      	ldr	r2, [r3, #24]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	441a      	add	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d809      	bhi.n	8002ada <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	699a      	ldr	r2, [r3, #24]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d203      	bcs.n	8002ada <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1be      	bne.n	8002a58 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d811      	bhi.n	8002b0a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	2201      	movs	r2, #1
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	43db      	mvns	r3, r3
 8002b00:	6939      	ldr	r1, [r7, #16]
 8002b02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b06:	4013      	ands	r3, r2
 8002b08:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3720      	adds	r7, #32
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	333c      	adds	r3, #60	; 0x3c
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	015a      	lsls	r2, r3, #5
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	f040 80a0 	bne.w	8002c8c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d015      	beq.n	8002b82 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4a72      	ldr	r2, [pc, #456]	; (8002d24 <PCD_EP_OutXfrComplete_int+0x210>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	f240 80dd 	bls.w	8002d1a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80d7 	beq.w	8002d1a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b78:	461a      	mov	r2, r3
 8002b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b7e:	6093      	str	r3, [r2, #8]
 8002b80:	e0cb      	b.n	8002d1a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d009      	beq.n	8002ba0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b98:	461a      	mov	r2, r3
 8002b9a:	2320      	movs	r3, #32
 8002b9c:	6093      	str	r3, [r2, #8]
 8002b9e:	e0bc      	b.n	8002d1a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f040 80b7 	bne.w	8002d1a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4a5d      	ldr	r2, [pc, #372]	; (8002d24 <PCD_EP_OutXfrComplete_int+0x210>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d90f      	bls.n	8002bd4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bd0:	6093      	str	r3, [r2, #8]
 8002bd2:	e0a2      	b.n	8002d1a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002be6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	0159      	lsls	r1, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	440b      	add	r3, r1
 8002bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002bfa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	4613      	mov	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4403      	add	r3, r0
 8002c0a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002c0e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	1a9b      	subs	r3, r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c22:	6819      	ldr	r1, [r3, #0]
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4403      	add	r3, r0
 8002c32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4419      	add	r1, r3
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	1a9b      	subs	r3, r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4403      	add	r3, r0
 8002c48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c4c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d114      	bne.n	8002c7e <PCD_EP_OutXfrComplete_int+0x16a>
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d108      	bne.n	8002c7e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c76:	461a      	mov	r2, r3
 8002c78:	2101      	movs	r1, #1
 8002c7a:	f004 ff9d 	bl	8007bb8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	4619      	mov	r1, r3
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f007 fa19 	bl	800a0bc <HAL_PCD_DataOutStageCallback>
 8002c8a:	e046      	b.n	8002d1a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4a26      	ldr	r2, [pc, #152]	; (8002d28 <PCD_EP_OutXfrComplete_int+0x214>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d124      	bne.n	8002cde <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002caa:	461a      	mov	r2, r3
 8002cac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cb0:	6093      	str	r3, [r2, #8]
 8002cb2:	e032      	b.n	8002d1a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f003 0320 	and.w	r3, r3, #32
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d008      	beq.n	8002cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cca:	461a      	mov	r2, r3
 8002ccc:	2320      	movs	r3, #32
 8002cce:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f007 f9f0 	bl	800a0bc <HAL_PCD_DataOutStageCallback>
 8002cdc:	e01d      	b.n	8002d1a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d114      	bne.n	8002d0e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d108      	bne.n	8002d0e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d06:	461a      	mov	r2, r3
 8002d08:	2100      	movs	r1, #0
 8002d0a:	f004 ff55 	bl	8007bb8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	4619      	mov	r1, r3
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f007 f9d1 	bl	800a0bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	4f54300a 	.word	0x4f54300a
 8002d28:	4f54310a 	.word	0x4f54310a

08002d2c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	333c      	adds	r3, #60	; 0x3c
 8002d44:	3304      	adds	r3, #4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4a15      	ldr	r2, [pc, #84]	; (8002db4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d90e      	bls.n	8002d80 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d009      	beq.n	8002d80 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d78:	461a      	mov	r2, r3
 8002d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d7e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f007 f989 	bl	800a098 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4a0a      	ldr	r2, [pc, #40]	; (8002db4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d90c      	bls.n	8002da8 <PCD_EP_OutSetupPacket_int+0x7c>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d108      	bne.n	8002da8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002da0:	461a      	mov	r2, r3
 8002da2:	2101      	movs	r1, #1
 8002da4:	f004 ff08 	bl	8007bb8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	4f54300a 	.word	0x4f54300a

08002db8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	70fb      	strb	r3, [r7, #3]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d107      	bne.n	8002de6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002dd6:	883b      	ldrh	r3, [r7, #0]
 8002dd8:	0419      	lsls	r1, r3, #16
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28
 8002de4:	e028      	b.n	8002e38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	0c1b      	lsrs	r3, r3, #16
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	4413      	add	r3, r2
 8002df2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002df4:	2300      	movs	r3, #0
 8002df6:	73fb      	strb	r3, [r7, #15]
 8002df8:	e00d      	b.n	8002e16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	3340      	adds	r3, #64	; 0x40
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	0c1b      	lsrs	r3, r3, #16
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	3301      	adds	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
 8002e16:	7bfa      	ldrb	r2, [r7, #15]
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d3ec      	bcc.n	8002dfa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e20:	883b      	ldrh	r3, [r7, #0]
 8002e22:	0418      	lsls	r0, r3, #16
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6819      	ldr	r1, [r3, #0]
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	4302      	orrs	r2, r0
 8002e30:	3340      	adds	r3, #64	; 0x40
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	887a      	ldrh	r2, [r7, #2]
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e264      	b.n	800335c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d075      	beq.n	8002f8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e9e:	4ba3      	ldr	r3, [pc, #652]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eaa:	4ba0      	ldr	r3, [pc, #640]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d112      	bne.n	8002edc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eb6:	4b9d      	ldr	r3, [pc, #628]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec2:	d10b      	bne.n	8002edc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec4:	4b99      	ldr	r3, [pc, #612]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d05b      	beq.n	8002f88 <HAL_RCC_OscConfig+0x108>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d157      	bne.n	8002f88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e23f      	b.n	800335c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee4:	d106      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x74>
 8002ee6:	4b91      	ldr	r3, [pc, #580]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a90      	ldr	r2, [pc, #576]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e01d      	b.n	8002f30 <HAL_RCC_OscConfig+0xb0>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x98>
 8002efe:	4b8b      	ldr	r3, [pc, #556]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a8a      	ldr	r2, [pc, #552]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	4b88      	ldr	r3, [pc, #544]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a87      	ldr	r2, [pc, #540]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	e00b      	b.n	8002f30 <HAL_RCC_OscConfig+0xb0>
 8002f18:	4b84      	ldr	r3, [pc, #528]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a83      	ldr	r2, [pc, #524]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	4b81      	ldr	r3, [pc, #516]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a80      	ldr	r2, [pc, #512]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d013      	beq.n	8002f60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7fd ff02 	bl	8000d40 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f40:	f7fd fefe 	bl	8000d40 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	; 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e204      	b.n	800335c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	4b76      	ldr	r3, [pc, #472]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0xc0>
 8002f5e:	e014      	b.n	8002f8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7fd feee 	bl	8000d40 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f68:	f7fd feea 	bl	8000d40 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e1f0      	b.n	800335c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7a:	4b6c      	ldr	r3, [pc, #432]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0xe8>
 8002f86:	e000      	b.n	8002f8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d063      	beq.n	800305e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f96:	4b65      	ldr	r3, [pc, #404]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00b      	beq.n	8002fba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fa2:	4b62      	ldr	r3, [pc, #392]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d11c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fae:	4b5f      	ldr	r3, [pc, #380]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d116      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fba:	4b5c      	ldr	r3, [pc, #368]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x152>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e1c4      	b.n	800335c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd2:	4b56      	ldr	r3, [pc, #344]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4952      	ldr	r1, [pc, #328]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe6:	e03a      	b.n	800305e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d020      	beq.n	8003032 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff0:	4b4f      	ldr	r3, [pc, #316]	; (8003130 <HAL_RCC_OscConfig+0x2b0>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff6:	f7fd fea3 	bl	8000d40 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ffe:	f7fd fe9f 	bl	8000d40 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e1a5      	b.n	800335c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003010:	4b46      	ldr	r3, [pc, #280]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301c:	4b43      	ldr	r3, [pc, #268]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4940      	ldr	r1, [pc, #256]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 800302c:	4313      	orrs	r3, r2
 800302e:	600b      	str	r3, [r1, #0]
 8003030:	e015      	b.n	800305e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003032:	4b3f      	ldr	r3, [pc, #252]	; (8003130 <HAL_RCC_OscConfig+0x2b0>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003038:	f7fd fe82 	bl	8000d40 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003040:	f7fd fe7e 	bl	8000d40 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e184      	b.n	800335c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003052:	4b36      	ldr	r3, [pc, #216]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d030      	beq.n	80030cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d016      	beq.n	80030a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003072:	4b30      	ldr	r3, [pc, #192]	; (8003134 <HAL_RCC_OscConfig+0x2b4>)
 8003074:	2201      	movs	r2, #1
 8003076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003078:	f7fd fe62 	bl	8000d40 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003080:	f7fd fe5e 	bl	8000d40 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e164      	b.n	800335c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003092:	4b26      	ldr	r3, [pc, #152]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 8003094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0x200>
 800309e:	e015      	b.n	80030cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a0:	4b24      	ldr	r3, [pc, #144]	; (8003134 <HAL_RCC_OscConfig+0x2b4>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a6:	f7fd fe4b 	bl	8000d40 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ae:	f7fd fe47 	bl	8000d40 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e14d      	b.n	800335c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c0:	4b1a      	ldr	r3, [pc, #104]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 80030c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f0      	bne.n	80030ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80a0 	beq.w	800321a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030da:	2300      	movs	r3, #0
 80030dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030de:	4b13      	ldr	r3, [pc, #76]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10f      	bne.n	800310a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	4b0f      	ldr	r3, [pc, #60]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	4a0e      	ldr	r2, [pc, #56]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f8:	6413      	str	r3, [r2, #64]	; 0x40
 80030fa:	4b0c      	ldr	r3, [pc, #48]	; (800312c <HAL_RCC_OscConfig+0x2ac>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003106:	2301      	movs	r3, #1
 8003108:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310a:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_RCC_OscConfig+0x2b8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d121      	bne.n	800315a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003116:	4b08      	ldr	r3, [pc, #32]	; (8003138 <HAL_RCC_OscConfig+0x2b8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a07      	ldr	r2, [pc, #28]	; (8003138 <HAL_RCC_OscConfig+0x2b8>)
 800311c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003122:	f7fd fe0d 	bl	8000d40 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003128:	e011      	b.n	800314e <HAL_RCC_OscConfig+0x2ce>
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800
 8003130:	42470000 	.word	0x42470000
 8003134:	42470e80 	.word	0x42470e80
 8003138:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313c:	f7fd fe00 	bl	8000d40 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e106      	b.n	800335c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314e:	4b85      	ldr	r3, [pc, #532]	; (8003364 <HAL_RCC_OscConfig+0x4e4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d106      	bne.n	8003170 <HAL_RCC_OscConfig+0x2f0>
 8003162:	4b81      	ldr	r3, [pc, #516]	; (8003368 <HAL_RCC_OscConfig+0x4e8>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	4a80      	ldr	r2, [pc, #512]	; (8003368 <HAL_RCC_OscConfig+0x4e8>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	6713      	str	r3, [r2, #112]	; 0x70
 800316e:	e01c      	b.n	80031aa <HAL_RCC_OscConfig+0x32a>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b05      	cmp	r3, #5
 8003176:	d10c      	bne.n	8003192 <HAL_RCC_OscConfig+0x312>
 8003178:	4b7b      	ldr	r3, [pc, #492]	; (8003368 <HAL_RCC_OscConfig+0x4e8>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	4a7a      	ldr	r2, [pc, #488]	; (8003368 <HAL_RCC_OscConfig+0x4e8>)
 800317e:	f043 0304 	orr.w	r3, r3, #4
 8003182:	6713      	str	r3, [r2, #112]	; 0x70
 8003184:	4b78      	ldr	r3, [pc, #480]	; (8003368 <HAL_RCC_OscConfig+0x4e8>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003188:	4a77      	ldr	r2, [pc, #476]	; (8003368 <HAL_RCC_OscConfig+0x4e8>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	6713      	str	r3, [r2, #112]	; 0x70
 8003190:	e00b      	b.n	80031aa <HAL_RCC_OscConfig+0x32a>
 8003192:	4b75      	ldr	r3, [pc, #468]	; (8003368 <HAL_RCC_OscConfig+0x4e8>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	4a74      	ldr	r2, [pc, #464]	; (8003368 <HAL_RCC_OscConfig+0x4e8>)
 8003198:	f023 0301 	bic.w	r3, r3, #1
 800319c:	6713      	str	r3, [r2, #112]	; 0x70
 800319e:	4b72      	ldr	r3, [pc, #456]	; (8003368 <HAL_RCC_OscConfig+0x4e8>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	4a71      	ldr	r2, [pc, #452]	; (8003368 <HAL_RCC_OscConfig+0x4e8>)
 80031a4:	f023 0304 	bic.w	r3, r3, #4
 80031a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d015      	beq.n	80031de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b2:	f7fd fdc5 	bl	8000d40 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b8:	e00a      	b.n	80031d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ba:	f7fd fdc1 	bl	8000d40 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e0c5      	b.n	800335c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d0:	4b65      	ldr	r3, [pc, #404]	; (8003368 <HAL_RCC_OscConfig+0x4e8>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0ee      	beq.n	80031ba <HAL_RCC_OscConfig+0x33a>
 80031dc:	e014      	b.n	8003208 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031de:	f7fd fdaf 	bl	8000d40 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e4:	e00a      	b.n	80031fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e6:	f7fd fdab 	bl	8000d40 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e0af      	b.n	800335c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031fc:	4b5a      	ldr	r3, [pc, #360]	; (8003368 <HAL_RCC_OscConfig+0x4e8>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1ee      	bne.n	80031e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003208:	7dfb      	ldrb	r3, [r7, #23]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d105      	bne.n	800321a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800320e:	4b56      	ldr	r3, [pc, #344]	; (8003368 <HAL_RCC_OscConfig+0x4e8>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	4a55      	ldr	r2, [pc, #340]	; (8003368 <HAL_RCC_OscConfig+0x4e8>)
 8003214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003218:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 809b 	beq.w	800335a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003224:	4b50      	ldr	r3, [pc, #320]	; (8003368 <HAL_RCC_OscConfig+0x4e8>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 030c 	and.w	r3, r3, #12
 800322c:	2b08      	cmp	r3, #8
 800322e:	d05c      	beq.n	80032ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d141      	bne.n	80032bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003238:	4b4c      	ldr	r3, [pc, #304]	; (800336c <HAL_RCC_OscConfig+0x4ec>)
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323e:	f7fd fd7f 	bl	8000d40 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003246:	f7fd fd7b 	bl	8000d40 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e081      	b.n	800335c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003258:	4b43      	ldr	r3, [pc, #268]	; (8003368 <HAL_RCC_OscConfig+0x4e8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f0      	bne.n	8003246 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69da      	ldr	r2, [r3, #28]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	019b      	lsls	r3, r3, #6
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	3b01      	subs	r3, #1
 800327e:	041b      	lsls	r3, r3, #16
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	061b      	lsls	r3, r3, #24
 8003288:	4937      	ldr	r1, [pc, #220]	; (8003368 <HAL_RCC_OscConfig+0x4e8>)
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800328e:	4b37      	ldr	r3, [pc, #220]	; (800336c <HAL_RCC_OscConfig+0x4ec>)
 8003290:	2201      	movs	r2, #1
 8003292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7fd fd54 	bl	8000d40 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329c:	f7fd fd50 	bl	8000d40 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e056      	b.n	800335c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ae:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <HAL_RCC_OscConfig+0x4e8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x41c>
 80032ba:	e04e      	b.n	800335a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032bc:	4b2b      	ldr	r3, [pc, #172]	; (800336c <HAL_RCC_OscConfig+0x4ec>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c2:	f7fd fd3d 	bl	8000d40 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fd fd39 	bl	8000d40 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e03f      	b.n	800335c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032dc:	4b22      	ldr	r3, [pc, #136]	; (8003368 <HAL_RCC_OscConfig+0x4e8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f0      	bne.n	80032ca <HAL_RCC_OscConfig+0x44a>
 80032e8:	e037      	b.n	800335a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e032      	b.n	800335c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032f6:	4b1c      	ldr	r3, [pc, #112]	; (8003368 <HAL_RCC_OscConfig+0x4e8>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d028      	beq.n	8003356 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800330e:	429a      	cmp	r2, r3
 8003310:	d121      	bne.n	8003356 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331c:	429a      	cmp	r2, r3
 800331e:	d11a      	bne.n	8003356 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003326:	4013      	ands	r3, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800332c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800332e:	4293      	cmp	r3, r2
 8003330:	d111      	bne.n	8003356 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	3b01      	subs	r3, #1
 8003340:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003342:	429a      	cmp	r2, r3
 8003344:	d107      	bne.n	8003356 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003352:	429a      	cmp	r2, r3
 8003354:	d001      	beq.n	800335a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40007000 	.word	0x40007000
 8003368:	40023800 	.word	0x40023800
 800336c:	42470060 	.word	0x42470060

08003370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0cc      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003384:	4b68      	ldr	r3, [pc, #416]	; (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d90c      	bls.n	80033ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003392:	4b65      	ldr	r3, [pc, #404]	; (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339a:	4b63      	ldr	r3, [pc, #396]	; (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0b8      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d020      	beq.n	80033fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c4:	4b59      	ldr	r3, [pc, #356]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	4a58      	ldr	r2, [pc, #352]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033dc:	4b53      	ldr	r3, [pc, #332]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4a52      	ldr	r2, [pc, #328]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e8:	4b50      	ldr	r3, [pc, #320]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	494d      	ldr	r1, [pc, #308]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d044      	beq.n	8003490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d107      	bne.n	800341e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	4b47      	ldr	r3, [pc, #284]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d119      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e07f      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d003      	beq.n	800342e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800342a:	2b03      	cmp	r3, #3
 800342c:	d107      	bne.n	800343e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342e:	4b3f      	ldr	r3, [pc, #252]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e06f      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343e:	4b3b      	ldr	r3, [pc, #236]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e067      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800344e:	4b37      	ldr	r3, [pc, #220]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f023 0203 	bic.w	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	4934      	ldr	r1, [pc, #208]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	4313      	orrs	r3, r2
 800345e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003460:	f7fd fc6e 	bl	8000d40 <HAL_GetTick>
 8003464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003466:	e00a      	b.n	800347e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003468:	f7fd fc6a 	bl	8000d40 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	; 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e04f      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	4b2b      	ldr	r3, [pc, #172]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 020c 	and.w	r2, r3, #12
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	429a      	cmp	r2, r3
 800348e:	d1eb      	bne.n	8003468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003490:	4b25      	ldr	r3, [pc, #148]	; (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d20c      	bcs.n	80034b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b22      	ldr	r3, [pc, #136]	; (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b20      	ldr	r3, [pc, #128]	; (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e032      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c4:	4b19      	ldr	r3, [pc, #100]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	4916      	ldr	r1, [pc, #88]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d009      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034e2:	4b12      	ldr	r3, [pc, #72]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	490e      	ldr	r1, [pc, #56]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034f6:	f000 f821 	bl	800353c <HAL_RCC_GetSysClockFreq>
 80034fa:	4602      	mov	r2, r0
 80034fc:	4b0b      	ldr	r3, [pc, #44]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	490a      	ldr	r1, [pc, #40]	; (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 8003508:	5ccb      	ldrb	r3, [r1, r3]
 800350a:	fa22 f303 	lsr.w	r3, r2, r3
 800350e:	4a09      	ldr	r2, [pc, #36]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003512:	4b09      	ldr	r3, [pc, #36]	; (8003538 <HAL_RCC_ClockConfig+0x1c8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f7fd fbce 	bl	8000cb8 <HAL_InitTick>

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40023c00 	.word	0x40023c00
 800352c:	40023800 	.word	0x40023800
 8003530:	0800a704 	.word	0x0800a704
 8003534:	20000000 	.word	0x20000000
 8003538:	20000004 	.word	0x20000004

0800353c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800353c:	b5b0      	push	{r4, r5, r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003542:	2100      	movs	r1, #0
 8003544:	6079      	str	r1, [r7, #4]
 8003546:	2100      	movs	r1, #0
 8003548:	60f9      	str	r1, [r7, #12]
 800354a:	2100      	movs	r1, #0
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800354e:	2100      	movs	r1, #0
 8003550:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003552:	4952      	ldr	r1, [pc, #328]	; (800369c <HAL_RCC_GetSysClockFreq+0x160>)
 8003554:	6889      	ldr	r1, [r1, #8]
 8003556:	f001 010c 	and.w	r1, r1, #12
 800355a:	2908      	cmp	r1, #8
 800355c:	d00d      	beq.n	800357a <HAL_RCC_GetSysClockFreq+0x3e>
 800355e:	2908      	cmp	r1, #8
 8003560:	f200 8094 	bhi.w	800368c <HAL_RCC_GetSysClockFreq+0x150>
 8003564:	2900      	cmp	r1, #0
 8003566:	d002      	beq.n	800356e <HAL_RCC_GetSysClockFreq+0x32>
 8003568:	2904      	cmp	r1, #4
 800356a:	d003      	beq.n	8003574 <HAL_RCC_GetSysClockFreq+0x38>
 800356c:	e08e      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800356e:	4b4c      	ldr	r3, [pc, #304]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003570:	60bb      	str	r3, [r7, #8]
       break;
 8003572:	e08e      	b.n	8003692 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003574:	4b4b      	ldr	r3, [pc, #300]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003576:	60bb      	str	r3, [r7, #8]
      break;
 8003578:	e08b      	b.n	8003692 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800357a:	4948      	ldr	r1, [pc, #288]	; (800369c <HAL_RCC_GetSysClockFreq+0x160>)
 800357c:	6849      	ldr	r1, [r1, #4]
 800357e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003582:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003584:	4945      	ldr	r1, [pc, #276]	; (800369c <HAL_RCC_GetSysClockFreq+0x160>)
 8003586:	6849      	ldr	r1, [r1, #4]
 8003588:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800358c:	2900      	cmp	r1, #0
 800358e:	d024      	beq.n	80035da <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003590:	4942      	ldr	r1, [pc, #264]	; (800369c <HAL_RCC_GetSysClockFreq+0x160>)
 8003592:	6849      	ldr	r1, [r1, #4]
 8003594:	0989      	lsrs	r1, r1, #6
 8003596:	4608      	mov	r0, r1
 8003598:	f04f 0100 	mov.w	r1, #0
 800359c:	f240 14ff 	movw	r4, #511	; 0x1ff
 80035a0:	f04f 0500 	mov.w	r5, #0
 80035a4:	ea00 0204 	and.w	r2, r0, r4
 80035a8:	ea01 0305 	and.w	r3, r1, r5
 80035ac:	493d      	ldr	r1, [pc, #244]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x168>)
 80035ae:	fb01 f003 	mul.w	r0, r1, r3
 80035b2:	2100      	movs	r1, #0
 80035b4:	fb01 f102 	mul.w	r1, r1, r2
 80035b8:	1844      	adds	r4, r0, r1
 80035ba:	493a      	ldr	r1, [pc, #232]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x168>)
 80035bc:	fba2 0101 	umull	r0, r1, r2, r1
 80035c0:	1863      	adds	r3, r4, r1
 80035c2:	4619      	mov	r1, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	461a      	mov	r2, r3
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	f7fc fe04 	bl	80001d8 <__aeabi_uldivmod>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4613      	mov	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	e04a      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035da:	4b30      	ldr	r3, [pc, #192]	; (800369c <HAL_RCC_GetSysClockFreq+0x160>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	099b      	lsrs	r3, r3, #6
 80035e0:	461a      	mov	r2, r3
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035ea:	f04f 0100 	mov.w	r1, #0
 80035ee:	ea02 0400 	and.w	r4, r2, r0
 80035f2:	ea03 0501 	and.w	r5, r3, r1
 80035f6:	4620      	mov	r0, r4
 80035f8:	4629      	mov	r1, r5
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	014b      	lsls	r3, r1, #5
 8003604:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003608:	0142      	lsls	r2, r0, #5
 800360a:	4610      	mov	r0, r2
 800360c:	4619      	mov	r1, r3
 800360e:	1b00      	subs	r0, r0, r4
 8003610:	eb61 0105 	sbc.w	r1, r1, r5
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	018b      	lsls	r3, r1, #6
 800361e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003622:	0182      	lsls	r2, r0, #6
 8003624:	1a12      	subs	r2, r2, r0
 8003626:	eb63 0301 	sbc.w	r3, r3, r1
 800362a:	f04f 0000 	mov.w	r0, #0
 800362e:	f04f 0100 	mov.w	r1, #0
 8003632:	00d9      	lsls	r1, r3, #3
 8003634:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003638:	00d0      	lsls	r0, r2, #3
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	1912      	adds	r2, r2, r4
 8003640:	eb45 0303 	adc.w	r3, r5, r3
 8003644:	f04f 0000 	mov.w	r0, #0
 8003648:	f04f 0100 	mov.w	r1, #0
 800364c:	0299      	lsls	r1, r3, #10
 800364e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003652:	0290      	lsls	r0, r2, #10
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4610      	mov	r0, r2
 800365a:	4619      	mov	r1, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	461a      	mov	r2, r3
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	f7fc fdb8 	bl	80001d8 <__aeabi_uldivmod>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4613      	mov	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003670:	4b0a      	ldr	r3, [pc, #40]	; (800369c <HAL_RCC_GetSysClockFreq+0x160>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	0c1b      	lsrs	r3, r3, #16
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	3301      	adds	r3, #1
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	fbb2 f3f3 	udiv	r3, r2, r3
 8003688:	60bb      	str	r3, [r7, #8]
      break;
 800368a:	e002      	b.n	8003692 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800368c:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x164>)
 800368e:	60bb      	str	r3, [r7, #8]
      break;
 8003690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003692:	68bb      	ldr	r3, [r7, #8]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bdb0      	pop	{r4, r5, r7, pc}
 800369c:	40023800 	.word	0x40023800
 80036a0:	00f42400 	.word	0x00f42400
 80036a4:	00b71b00 	.word	0x00b71b00

080036a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ae:	681b      	ldr	r3, [r3, #0]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20000000 	.word	0x20000000

080036c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036c4:	f7ff fff0 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	0a9b      	lsrs	r3, r3, #10
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	4903      	ldr	r1, [pc, #12]	; (80036e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40023800 	.word	0x40023800
 80036e4:	0800a714 	.word	0x0800a714

080036e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036ec:	f7ff ffdc 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 80036f0:	4602      	mov	r2, r0
 80036f2:	4b05      	ldr	r3, [pc, #20]	; (8003708 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	0b5b      	lsrs	r3, r3, #13
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	4903      	ldr	r1, [pc, #12]	; (800370c <HAL_RCC_GetPCLK2Freq+0x24>)
 80036fe:	5ccb      	ldrb	r3, [r1, r3]
 8003700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003704:	4618      	mov	r0, r3
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40023800 	.word	0x40023800
 800370c:	0800a714 	.word	0x0800a714

08003710 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e022      	b.n	8003768 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d105      	bne.n	800373a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7fd f8b5 	bl	80008a4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2203      	movs	r2, #3
 800373e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f814 	bl	8003770 <HAL_SD_InitCard>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e00a      	b.n	8003768 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003770:	b5b0      	push	{r4, r5, r7, lr}
 8003772:	b08e      	sub	sp, #56	; 0x38
 8003774:	af04      	add	r7, sp, #16
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003778:	2300      	movs	r3, #0
 800377a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003780:	2300      	movs	r3, #0
 8003782:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003788:	2300      	movs	r3, #0
 800378a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800378c:	2376      	movs	r3, #118	; 0x76
 800378e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681d      	ldr	r5, [r3, #0]
 8003794:	466c      	mov	r4, sp
 8003796:	f107 0314 	add.w	r3, r7, #20
 800379a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800379e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80037a2:	f107 0308 	add.w	r3, r7, #8
 80037a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037a8:	4628      	mov	r0, r5
 80037aa:	f002 f9a7 	bl	8005afc <SDIO_Init>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80037b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e04c      	b.n	800385a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80037c0:	4b28      	ldr	r3, [pc, #160]	; (8003864 <HAL_SD_InitCard+0xf4>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f002 f9df 	bl	8005b8e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80037d0:	4b24      	ldr	r3, [pc, #144]	; (8003864 <HAL_SD_InitCard+0xf4>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f001 f804 	bl	80047e4 <SD_PowerON>
 80037dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00b      	beq.n	80037fc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e02e      	b.n	800385a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 ff25 	bl	800464c <SD_InitCard>
 8003802:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00b      	beq.n	8003822 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e01b      	b.n	800385a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f44f 7100 	mov.w	r1, #512	; 0x200
 800382a:	4618      	mov	r0, r3
 800382c:	f002 fa42 	bl	8005cb4 <SDMMC_CmdBlockLength>
 8003830:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00f      	beq.n	8003858 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a0a      	ldr	r2, [pc, #40]	; (8003868 <HAL_SD_InitCard+0xf8>)
 800383e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3728      	adds	r7, #40	; 0x28
 800385e:	46bd      	mov	sp, r7
 8003860:	bdb0      	pop	{r4, r5, r7, pc}
 8003862:	bf00      	nop
 8003864:	422580a0 	.word	0x422580a0
 8003868:	004005ff 	.word	0x004005ff

0800386c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08c      	sub	sp, #48	; 0x30
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d107      	bne.n	8003894 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003888:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0c0      	b.n	8003a16 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b01      	cmp	r3, #1
 800389e:	f040 80b9 	bne.w	8003a14 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80038a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	441a      	add	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d907      	bls.n	80038c6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e0a7      	b.n	8003a16 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2203      	movs	r2, #3
 80038ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2200      	movs	r2, #0
 80038d4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80038e4:	f043 0302 	orr.w	r3, r3, #2
 80038e8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	4a4c      	ldr	r2, [pc, #304]	; (8003a20 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80038f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	4a4b      	ldr	r2, [pc, #300]	; (8003a24 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80038f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	2200      	movs	r2, #0
 8003900:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	2200      	movs	r2, #0
 8003908:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3380      	adds	r3, #128	; 0x80
 8003930:	4619      	mov	r1, r3
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	025b      	lsls	r3, r3, #9
 8003938:	089b      	lsrs	r3, r3, #2
 800393a:	f7fd fbf1 	bl	8001120 <HAL_DMA_Start_IT>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d017      	beq.n	8003974 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8003952:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a33      	ldr	r2, [pc, #204]	; (8003a28 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800395a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e050      	b.n	8003a16 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003974:	4b2d      	ldr	r3, [pc, #180]	; (8003a2c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003976:	2201      	movs	r2, #1
 8003978:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	2b01      	cmp	r3, #1
 8003980:	d002      	beq.n	8003988 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8003982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003984:	025b      	lsls	r3, r3, #9
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003988:	f04f 33ff 	mov.w	r3, #4294967295
 800398c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	025b      	lsls	r3, r3, #9
 8003992:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003994:	2390      	movs	r3, #144	; 0x90
 8003996:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003998:	2302      	movs	r3, #2
 800399a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800399c:	2300      	movs	r3, #0
 800399e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80039a0:	2301      	movs	r3, #1
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f107 0210 	add.w	r2, r7, #16
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f002 f954 	bl	8005c5c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d90a      	bls.n	80039d0 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2282      	movs	r2, #130	; 0x82
 80039be:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039c6:	4618      	mov	r0, r3
 80039c8:	f002 f9b8 	bl	8005d3c <SDMMC_CmdReadMultiBlock>
 80039cc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80039ce:	e009      	b.n	80039e4 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2281      	movs	r2, #129	; 0x81
 80039d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039dc:	4618      	mov	r0, r3
 80039de:	f002 f98b 	bl	8005cf8 <SDMMC_CmdReadSingleBlock>
 80039e2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80039e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d012      	beq.n	8003a10 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a0e      	ldr	r2, [pc, #56]	; (8003a28 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f8:	431a      	orrs	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e002      	b.n	8003a16 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e000      	b.n	8003a16 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003a14:	2302      	movs	r3, #2
  }
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3730      	adds	r7, #48	; 0x30
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	0800445b 	.word	0x0800445b
 8003a24:	080044cd 	.word	0x080044cd
 8003a28:	004005ff 	.word	0x004005ff
 8003a2c:	4225858c 	.word	0x4225858c

08003a30 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08c      	sub	sp, #48	; 0x30
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d107      	bne.n	8003a58 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0c5      	b.n	8003be4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	f040 80be 	bne.w	8003be2 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	441a      	add	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d907      	bls.n	8003a8a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e0ac      	b.n	8003be4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2200      	movs	r2, #0
 8003a98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003aa8:	f043 0302 	orr.w	r3, r3, #2
 8003aac:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab2:	4a4e      	ldr	r2, [pc, #312]	; (8003bec <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003ab4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aba:	4a4d      	ldr	r2, [pc, #308]	; (8003bf0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003abc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d002      	beq.n	8003ad4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	025b      	lsls	r3, r3, #9
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d90a      	bls.n	8003af0 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	22a0      	movs	r2, #160	; 0xa0
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f002 f96c 	bl	8005dc4 <SDMMC_CmdWriteMultiBlock>
 8003aec:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003aee:	e009      	b.n	8003b04 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2290      	movs	r2, #144	; 0x90
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003afc:	4618      	mov	r0, r3
 8003afe:	f002 f93f 	bl	8005d80 <SDMMC_CmdWriteSingleBlock>
 8003b02:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d012      	beq.n	8003b30 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a39      	ldr	r2, [pc, #228]	; (8003bf4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003b10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e059      	b.n	8003be4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003b30:	4b31      	ldr	r3, [pc, #196]	; (8003bf8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3a:	2240      	movs	r2, #64	; 0x40
 8003b3c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3380      	adds	r3, #128	; 0x80
 8003b66:	461a      	mov	r2, r3
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	025b      	lsls	r3, r3, #9
 8003b6c:	089b      	lsrs	r3, r3, #2
 8003b6e:	f7fd fad7 	bl	8001120 <HAL_DMA_Start_IT>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01c      	beq.n	8003bb2 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8003b86:	f023 0302 	bic.w	r3, r3, #2
 8003b8a:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a18      	ldr	r2, [pc, #96]	; (8003bf4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003b92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e018      	b.n	8003be4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	025b      	lsls	r3, r3, #9
 8003bbc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003bbe:	2390      	movs	r3, #144	; 0x90
 8003bc0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f107 0210 	add.w	r2, r7, #16
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f002 f83f 	bl	8005c5c <SDIO_ConfigData>

      return HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e000      	b.n	8003be4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003be2:	2302      	movs	r3, #2
  }
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3730      	adds	r7, #48	; 0x30
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	08004431 	.word	0x08004431
 8003bf0:	080044cd 	.word	0x080044cd
 8003bf4:	004005ff 	.word	0x004005ff
 8003bf8:	4225858c 	.word	0x4225858c

08003bfc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <HAL_SD_IRQHandler+0x2e>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 fffd 	bl	8004c22 <SD_Read_IT>
 8003c28:	e165      	b.n	8003ef6 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 808f 	beq.w	8003d58 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c42:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6812      	ldr	r2, [r2, #0]
 8003c4e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003c52:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003c56:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0201 	bic.w	r2, r2, #1
 8003c66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d039      	beq.n	8003ce6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d104      	bne.n	8003c86 <HAL_SD_IRQHandler+0x8a>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d011      	beq.n	8003caa <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f002 f8bc 	bl	8005e08 <SDMMC_CmdStopTransfer>
 8003c90:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f92f 	bl	8003f08 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f240 523a 	movw	r2, #1338	; 0x53a
 8003cb2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d104      	bne.n	8003cd6 <HAL_SD_IRQHandler+0xda>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f004 f89c 	bl	8007e14 <HAL_SD_RxCpltCallback>
 8003cdc:	e10b      	b.n	8003ef6 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f004 f88e 	bl	8007e00 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ce4:	e107      	b.n	8003ef6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 8102 	beq.w	8003ef6 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d011      	beq.n	8003d20 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f002 f881 	bl	8005e08 <SDMMC_CmdStopTransfer>
 8003d06:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d008      	beq.n	8003d20 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f8f4 	bl	8003f08 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f040 80e5 	bne.w	8003ef6 <HAL_SD_IRQHandler+0x2fa>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f040 80df 	bne.w	8003ef6 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0208 	bic.w	r2, r2, #8
 8003d46:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f004 f855 	bl	8007e00 <HAL_SD_TxCpltCallback>
}
 8003d56:	e0ce      	b.n	8003ef6 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_SD_IRQHandler+0x17c>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 ffa7 	bl	8004cc4 <SD_Write_IT>
 8003d76:	e0be      	b.n	8003ef6 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d7e:	f240 233a 	movw	r3, #570	; 0x23a
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80b6 	beq.w	8003ef6 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	f043 0202 	orr.w	r2, r3, #2
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d005      	beq.n	8003dbe <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	f043 0208 	orr.w	r2, r3, #8
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	f043 0220 	orr.w	r2, r3, #32
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dde:	f003 0310 	and.w	r3, r3, #16
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d005      	beq.n	8003df2 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dea:	f043 0210 	orr.w	r2, r3, #16
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	f043 0208 	orr.w	r2, r3, #8
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f240 723a 	movw	r2, #1850	; 0x73a
 8003e14:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003e24:	f023 0302 	bic.w	r3, r3, #2
 8003e28:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 ffea 	bl	8005e08 <SDMMC_CmdStopTransfer>
 8003e34:	4602      	mov	r2, r0
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f855 	bl	8003f08 <HAL_SD_ErrorCallback>
}
 8003e5e:	e04a      	b.n	8003ef6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d045      	beq.n	8003ef6 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d104      	bne.n	8003e7e <HAL_SD_IRQHandler+0x282>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d011      	beq.n	8003ea2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e82:	4a1f      	ldr	r2, [pc, #124]	; (8003f00 <HAL_SD_IRQHandler+0x304>)
 8003e84:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fd fa10 	bl	80012b0 <HAL_DMA_Abort_IT>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d02f      	beq.n	8003ef6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fb68 	bl	8004570 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003ea0:	e029      	b.n	8003ef6 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d104      	bne.n	8003eb6 <HAL_SD_IRQHandler+0x2ba>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d011      	beq.n	8003eda <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	4a12      	ldr	r2, [pc, #72]	; (8003f04 <HAL_SD_IRQHandler+0x308>)
 8003ebc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fd f9f4 	bl	80012b0 <HAL_DMA_Abort_IT>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d013      	beq.n	8003ef6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fb83 	bl	80045de <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003ed8:	e00d      	b.n	8003ef6 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f003 ff7c 	bl	8007dec <HAL_SD_AbortCallback>
}
 8003ef4:	e7ff      	b.n	8003ef6 <HAL_SD_IRQHandler+0x2fa>
 8003ef6:	bf00      	nop
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	08004571 	.word	0x08004571
 8003f04:	080045df 	.word	0x080045df

08003f08 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f2a:	0f9b      	lsrs	r3, r3, #30
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f36:	0e9b      	lsrs	r3, r3, #26
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f48:	0e1b      	lsrs	r3, r3, #24
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f003 0303 	and.w	r3, r3, #3
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f5a:	0c1b      	lsrs	r3, r3, #16
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f66:	0a1b      	lsrs	r3, r3, #8
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f7c:	0d1b      	lsrs	r3, r3, #20
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f88:	0c1b      	lsrs	r3, r3, #16
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f9a:	0bdb      	lsrs	r3, r3, #15
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fac:	0b9b      	lsrs	r3, r3, #14
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fbe:	0b5b      	lsrs	r3, r3, #13
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd0:	0b1b      	lsrs	r3, r3, #12
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d163      	bne.n	80040b4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ff0:	009a      	lsls	r2, r3, #2
 8003ff2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003ffc:	0f92      	lsrs	r2, r2, #30
 8003ffe:	431a      	orrs	r2, r3
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004008:	0edb      	lsrs	r3, r3, #27
 800400a:	b2db      	uxtb	r3, r3
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	b2da      	uxtb	r2, r3
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800401a:	0e1b      	lsrs	r3, r3, #24
 800401c:	b2db      	uxtb	r3, r3
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	b2da      	uxtb	r2, r3
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800402c:	0d5b      	lsrs	r3, r3, #21
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	b2da      	uxtb	r2, r3
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800403e:	0c9b      	lsrs	r3, r3, #18
 8004040:	b2db      	uxtb	r3, r3
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	b2da      	uxtb	r2, r3
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004050:	0bdb      	lsrs	r3, r3, #15
 8004052:	b2db      	uxtb	r3, r3
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	b2da      	uxtb	r2, r3
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	7e1b      	ldrb	r3, [r3, #24]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	3302      	adds	r3, #2
 8004074:	2201      	movs	r2, #1
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800407e:	fb02 f203 	mul.w	r2, r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	7a1b      	ldrb	r3, [r3, #8]
 800408a:	b2db      	uxtb	r3, r3
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	2201      	movs	r2, #1
 8004092:	409a      	lsls	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80040a0:	0a52      	lsrs	r2, r2, #9
 80040a2:	fb02 f203 	mul.w	r2, r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040b0:	661a      	str	r2, [r3, #96]	; 0x60
 80040b2:	e031      	b.n	8004118 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d11d      	bne.n	80040f8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040c0:	041b      	lsls	r3, r3, #16
 80040c2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ca:	0c1b      	lsrs	r3, r3, #16
 80040cc:	431a      	orrs	r2, r3
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	3301      	adds	r3, #1
 80040d8:	029a      	lsls	r2, r3, #10
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ec:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	661a      	str	r2, [r3, #96]	; 0x60
 80040f6:	e00f      	b.n	8004118 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a58      	ldr	r2, [pc, #352]	; (8004260 <HAL_SD_GetCardCSD+0x344>)
 80040fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e09d      	b.n	8004254 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800411c:	0b9b      	lsrs	r3, r3, #14
 800411e:	b2db      	uxtb	r3, r3
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	b2da      	uxtb	r2, r3
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800412e:	09db      	lsrs	r3, r3, #7
 8004130:	b2db      	uxtb	r3, r3
 8004132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004136:	b2da      	uxtb	r2, r3
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004140:	b2db      	uxtb	r3, r3
 8004142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004146:	b2da      	uxtb	r2, r3
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004150:	0fdb      	lsrs	r3, r3, #31
 8004152:	b2da      	uxtb	r2, r3
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415c:	0f5b      	lsrs	r3, r3, #29
 800415e:	b2db      	uxtb	r3, r3
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	b2da      	uxtb	r2, r3
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	0e9b      	lsrs	r3, r3, #26
 8004170:	b2db      	uxtb	r3, r3
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	b2da      	uxtb	r2, r3
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004180:	0d9b      	lsrs	r3, r3, #22
 8004182:	b2db      	uxtb	r3, r3
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	b2da      	uxtb	r2, r3
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004192:	0d5b      	lsrs	r3, r3, #21
 8004194:	b2db      	uxtb	r3, r3
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	b2da      	uxtb	r2, r3
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ae:	0c1b      	lsrs	r3, r3, #16
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c2:	0bdb      	lsrs	r3, r3, #15
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	0b9b      	lsrs	r3, r3, #14
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ea:	0b5b      	lsrs	r3, r3, #13
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	0b1b      	lsrs	r3, r3, #12
 8004200:	b2db      	uxtb	r3, r3
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	b2da      	uxtb	r2, r3
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004212:	0a9b      	lsrs	r3, r3, #10
 8004214:	b2db      	uxtb	r3, r3
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	b2da      	uxtb	r2, r3
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004226:	0a1b      	lsrs	r3, r3, #8
 8004228:	b2db      	uxtb	r3, r3
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	b2da      	uxtb	r2, r3
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423a:	085b      	lsrs	r3, r3, #1
 800423c:	b2db      	uxtb	r3, r3
 800423e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004242:	b2da      	uxtb	r2, r3
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	004005ff 	.word	0x004005ff

08004264 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80042bc:	b5b0      	push	{r4, r5, r7, lr}
 80042be:	b08e      	sub	sp, #56	; 0x38
 80042c0:	af04      	add	r7, sp, #16
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2203      	movs	r2, #3
 80042d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d8:	2b03      	cmp	r3, #3
 80042da:	d02e      	beq.n	800433a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e2:	d106      	bne.n	80042f2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	639a      	str	r2, [r3, #56]	; 0x38
 80042f0:	e029      	b.n	8004346 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f8:	d10a      	bne.n	8004310 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fb28 	bl	8004950 <SD_WideBus_Enable>
 8004300:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	639a      	str	r2, [r3, #56]	; 0x38
 800430e:	e01a      	b.n	8004346 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10a      	bne.n	800432c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fb65 	bl	80049e6 <SD_WideBus_Disable>
 800431c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	639a      	str	r2, [r3, #56]	; 0x38
 800432a:	e00c      	b.n	8004346 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	639a      	str	r2, [r3, #56]	; 0x38
 8004338:	e005      	b.n	8004346 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00b      	beq.n	8004366 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a26      	ldr	r2, [pc, #152]	; (80043ec <HAL_SD_ConfigWideBusOperation+0x130>)
 8004354:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004364:	e01f      	b.n	80043a6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681d      	ldr	r5, [r3, #0]
 800438c:	466c      	mov	r4, sp
 800438e:	f107 0314 	add.w	r3, r7, #20
 8004392:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004396:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800439a:	f107 0308 	add.w	r3, r7, #8
 800439e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043a0:	4628      	mov	r0, r5
 80043a2:	f001 fbab 	bl	8005afc <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043ae:	4618      	mov	r0, r3
 80043b0:	f001 fc80 	bl	8005cb4 <SDMMC_CmdBlockLength>
 80043b4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00c      	beq.n	80043d6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a0a      	ldr	r2, [pc, #40]	; (80043ec <HAL_SD_ConfigWideBusOperation+0x130>)
 80043c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80043de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3728      	adds	r7, #40	; 0x28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bdb0      	pop	{r4, r5, r7, pc}
 80043ea:	bf00      	nop
 80043ec:	004005ff 	.word	0x004005ff

080043f0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80043fc:	f107 030c 	add.w	r3, r7, #12
 8004400:	4619      	mov	r1, r3
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fa7c 	bl	8004900 <SD_SendStatus>
 8004408:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d005      	beq.n	800441c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	0a5b      	lsrs	r3, r3, #9
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004426:	693b      	ldr	r3, [r7, #16]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800444c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800444e:	bf00      	nop
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b084      	sub	sp, #16
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004466:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	2b82      	cmp	r3, #130	; 0x82
 800446e:	d111      	bne.n	8004494 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f001 fcc7 	bl	8005e08 <SDMMC_CmdStopTransfer>
 800447a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d008      	beq.n	8004494 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	431a      	orrs	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f7ff fd3a 	bl	8003f08 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0208 	bic.w	r2, r2, #8
 80044a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f240 523a 	movw	r2, #1338	; 0x53a
 80044ac:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f003 fca9 	bl	8007e14 <HAL_SD_RxCpltCallback>
#endif
}
 80044c2:	bf00      	nop
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fd f894 	bl	8001608 <HAL_DMA_GetError>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d03e      	beq.n	8004564 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ec:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d002      	beq.n	8004502 <SD_DMAError+0x36>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d12d      	bne.n	800455e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a19      	ldr	r2, [pc, #100]	; (800456c <SD_DMAError+0xa0>)
 8004508:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004518:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004526:	6978      	ldr	r0, [r7, #20]
 8004528:	f7ff ff62 	bl	80043f0 <HAL_SD_GetCardState>
 800452c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b06      	cmp	r3, #6
 8004532:	d002      	beq.n	800453a <SD_DMAError+0x6e>
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b05      	cmp	r3, #5
 8004538:	d10a      	bne.n	8004550 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f001 fc62 	bl	8005e08 <SDMMC_CmdStopTransfer>
 8004544:	4602      	mov	r2, r0
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	431a      	orrs	r2, r3
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2200      	movs	r2, #0
 800455c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800455e:	6978      	ldr	r0, [r7, #20]
 8004560:	f7ff fcd2 	bl	8003f08 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004564:	bf00      	nop
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	004005ff 	.word	0x004005ff

08004570 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f240 523a 	movw	r2, #1338	; 0x53a
 8004586:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f7ff ff31 	bl	80043f0 <HAL_SD_GetCardState>
 800458e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b06      	cmp	r3, #6
 80045a2:	d002      	beq.n	80045aa <SD_DMATxAbort+0x3a>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b05      	cmp	r3, #5
 80045a8:	d10a      	bne.n	80045c0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f001 fc2a 	bl	8005e08 <SDMMC_CmdStopTransfer>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	431a      	orrs	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d103      	bne.n	80045d0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f003 fc0f 	bl	8007dec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80045ce:	e002      	b.n	80045d6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f7ff fc99 	bl	8003f08 <HAL_SD_ErrorCallback>
}
 80045d6:	bf00      	nop
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b084      	sub	sp, #16
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f240 523a 	movw	r2, #1338	; 0x53a
 80045f4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f7ff fefa 	bl	80043f0 <HAL_SD_GetCardState>
 80045fc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b06      	cmp	r3, #6
 8004610:	d002      	beq.n	8004618 <SD_DMARxAbort+0x3a>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b05      	cmp	r3, #5
 8004616:	d10a      	bne.n	800462e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f001 fbf3 	bl	8005e08 <SDMMC_CmdStopTransfer>
 8004622:	4602      	mov	r2, r0
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	431a      	orrs	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004632:	2b00      	cmp	r3, #0
 8004634:	d103      	bne.n	800463e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f003 fbd8 	bl	8007dec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800463c:	e002      	b.n	8004644 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f7ff fc62 	bl	8003f08 <HAL_SD_ErrorCallback>
}
 8004644:	bf00      	nop
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800464c:	b5b0      	push	{r4, r5, r7, lr}
 800464e:	b094      	sub	sp, #80	; 0x50
 8004650:	af04      	add	r7, sp, #16
 8004652:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004654:	2301      	movs	r3, #1
 8004656:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f001 faa5 	bl	8005bac <SDIO_GetPowerState>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004668:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800466c:	e0b6      	b.n	80047dc <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004672:	2b03      	cmp	r3, #3
 8004674:	d02f      	beq.n	80046d6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f001 fcce 	bl	800601c <SDMMC_CmdSendCID>
 8004680:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <SD_InitCard+0x40>
    {
      return errorstate;
 8004688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800468a:	e0a7      	b.n	80047dc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2100      	movs	r1, #0
 8004692:	4618      	mov	r0, r3
 8004694:	f001 facf 	bl	8005c36 <SDIO_GetResponse>
 8004698:	4602      	mov	r2, r0
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2104      	movs	r1, #4
 80046a4:	4618      	mov	r0, r3
 80046a6:	f001 fac6 	bl	8005c36 <SDIO_GetResponse>
 80046aa:	4602      	mov	r2, r0
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2108      	movs	r1, #8
 80046b6:	4618      	mov	r0, r3
 80046b8:	f001 fabd 	bl	8005c36 <SDIO_GetResponse>
 80046bc:	4602      	mov	r2, r0
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	210c      	movs	r1, #12
 80046c8:	4618      	mov	r0, r3
 80046ca:	f001 fab4 	bl	8005c36 <SDIO_GetResponse>
 80046ce:	4602      	mov	r2, r0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d00d      	beq.n	80046fa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f107 020e 	add.w	r2, r7, #14
 80046e6:	4611      	mov	r1, r2
 80046e8:	4618      	mov	r0, r3
 80046ea:	f001 fcd4 	bl	8006096 <SDMMC_CmdSetRelAdd>
 80046ee:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80046f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <SD_InitCard+0xae>
    {
      return errorstate;
 80046f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f8:	e070      	b.n	80047dc <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fe:	2b03      	cmp	r3, #3
 8004700:	d036      	beq.n	8004770 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004702:	89fb      	ldrh	r3, [r7, #14]
 8004704:	461a      	mov	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004712:	041b      	lsls	r3, r3, #16
 8004714:	4619      	mov	r1, r3
 8004716:	4610      	mov	r0, r2
 8004718:	f001 fc9e 	bl	8006058 <SDMMC_CmdSendCSD>
 800471c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800471e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004726:	e059      	b.n	80047dc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2100      	movs	r1, #0
 800472e:	4618      	mov	r0, r3
 8004730:	f001 fa81 	bl	8005c36 <SDIO_GetResponse>
 8004734:	4602      	mov	r2, r0
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2104      	movs	r1, #4
 8004740:	4618      	mov	r0, r3
 8004742:	f001 fa78 	bl	8005c36 <SDIO_GetResponse>
 8004746:	4602      	mov	r2, r0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2108      	movs	r1, #8
 8004752:	4618      	mov	r0, r3
 8004754:	f001 fa6f 	bl	8005c36 <SDIO_GetResponse>
 8004758:	4602      	mov	r2, r0
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	210c      	movs	r1, #12
 8004764:	4618      	mov	r0, r3
 8004766:	f001 fa66 	bl	8005c36 <SDIO_GetResponse>
 800476a:	4602      	mov	r2, r0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2104      	movs	r1, #4
 8004776:	4618      	mov	r0, r3
 8004778:	f001 fa5d 	bl	8005c36 <SDIO_GetResponse>
 800477c:	4603      	mov	r3, r0
 800477e:	0d1a      	lsrs	r2, r3, #20
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004784:	f107 0310 	add.w	r3, r7, #16
 8004788:	4619      	mov	r1, r3
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff fbc6 	bl	8003f1c <HAL_SD_GetCardCSD>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004796:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800479a:	e01f      	b.n	80047dc <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6819      	ldr	r1, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a4:	041b      	lsls	r3, r3, #16
 80047a6:	461a      	mov	r2, r3
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	4608      	mov	r0, r1
 80047ae:	f001 fb4d 	bl	8005e4c <SDMMC_CmdSelDesel>
 80047b2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80047b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <SD_InitCard+0x172>
  {
    return errorstate;
 80047ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047bc:	e00e      	b.n	80047dc <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681d      	ldr	r5, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	466c      	mov	r4, sp
 80047c6:	f103 0210 	add.w	r2, r3, #16
 80047ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80047cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80047d0:	3304      	adds	r3, #4
 80047d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047d4:	4628      	mov	r0, r5
 80047d6:	f001 f991 	bl	8005afc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3740      	adds	r7, #64	; 0x40
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bdb0      	pop	{r4, r5, r7, pc}

080047e4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	2300      	movs	r3, #0
 80047f6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f001 fb48 	bl	8005e92 <SDMMC_CmdGoIdleState>
 8004802:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <SD_PowerON+0x2a>
  {
    return errorstate;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	e072      	b.n	80048f4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f001 fb5b 	bl	8005ece <SDMMC_CmdOperCond>
 8004818:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00d      	beq.n	800483c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f001 fb31 	bl	8005e92 <SDMMC_CmdGoIdleState>
 8004830:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d004      	beq.n	8004842 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	e05b      	b.n	80048f4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004846:	2b01      	cmp	r3, #1
 8004848:	d137      	bne.n	80048ba <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2100      	movs	r1, #0
 8004850:	4618      	mov	r0, r3
 8004852:	f001 fb5b 	bl	8005f0c <SDMMC_CmdAppCommand>
 8004856:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d02d      	beq.n	80048ba <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800485e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004862:	e047      	b.n	80048f4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2100      	movs	r1, #0
 800486a:	4618      	mov	r0, r3
 800486c:	f001 fb4e 	bl	8005f0c <SDMMC_CmdAppCommand>
 8004870:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <SD_PowerON+0x98>
    {
      return errorstate;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	e03b      	b.n	80048f4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	491e      	ldr	r1, [pc, #120]	; (80048fc <SD_PowerON+0x118>)
 8004882:	4618      	mov	r0, r3
 8004884:	f001 fb64 	bl	8005f50 <SDMMC_CmdAppOperCommand>
 8004888:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004890:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004894:	e02e      	b.n	80048f4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2100      	movs	r1, #0
 800489c:	4618      	mov	r0, r3
 800489e:	f001 f9ca 	bl	8005c36 <SDIO_GetResponse>
 80048a2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	0fdb      	lsrs	r3, r3, #31
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <SD_PowerON+0xcc>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <SD_PowerON+0xce>
 80048b0:	2300      	movs	r3, #0
 80048b2:	613b      	str	r3, [r7, #16]

    count++;
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	3301      	adds	r3, #1
 80048b8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d802      	bhi.n	80048ca <SD_PowerON+0xe6>
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0cc      	beq.n	8004864 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d902      	bls.n	80048da <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80048d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048d8:	e00c      	b.n	80048f4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	645a      	str	r2, [r3, #68]	; 0x44
 80048ea:	e002      	b.n	80048f2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	c1100000 	.word	0xc1100000

08004900 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d102      	bne.n	8004916 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004910:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004914:	e018      	b.n	8004948 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800491e:	041b      	lsls	r3, r3, #16
 8004920:	4619      	mov	r1, r3
 8004922:	4610      	mov	r0, r2
 8004924:	f001 fbd8 	bl	80060d8 <SDMMC_CmdSendStatus>
 8004928:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	e009      	b.n	8004948 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2100      	movs	r1, #0
 800493a:	4618      	mov	r0, r3
 800493c:	f001 f97b 	bl	8005c36 <SDIO_GetResponse>
 8004940:	4602      	mov	r2, r0
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	2300      	movs	r3, #0
 800495e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2100      	movs	r1, #0
 8004966:	4618      	mov	r0, r3
 8004968:	f001 f965 	bl	8005c36 <SDIO_GetResponse>
 800496c:	4603      	mov	r3, r0
 800496e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004972:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004976:	d102      	bne.n	800497e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004978:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800497c:	e02f      	b.n	80049de <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800497e:	f107 030c 	add.w	r3, r7, #12
 8004982:	4619      	mov	r1, r3
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f879 	bl	8004a7c <SD_FindSCR>
 800498a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	e023      	b.n	80049de <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01c      	beq.n	80049da <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a8:	041b      	lsls	r3, r3, #16
 80049aa:	4619      	mov	r1, r3
 80049ac:	4610      	mov	r0, r2
 80049ae:	f001 faad 	bl	8005f0c <SDMMC_CmdAppCommand>
 80049b2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	e00f      	b.n	80049de <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2102      	movs	r1, #2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f001 fae6 	bl	8005f96 <SDMMC_CmdBusWidth>
 80049ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	e003      	b.n	80049de <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80049d6:	2300      	movs	r3, #0
 80049d8:	e001      	b.n	80049de <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80049da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b086      	sub	sp, #24
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	2300      	movs	r3, #0
 80049f4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2100      	movs	r1, #0
 80049fc:	4618      	mov	r0, r3
 80049fe:	f001 f91a 	bl	8005c36 <SDIO_GetResponse>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a0c:	d102      	bne.n	8004a14 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004a0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a12:	e02f      	b.n	8004a74 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004a14:	f107 030c 	add.w	r3, r7, #12
 8004a18:	4619      	mov	r1, r3
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f82e 	bl	8004a7c <SD_FindSCR>
 8004a20:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	e023      	b.n	8004a74 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d01c      	beq.n	8004a70 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a3e:	041b      	lsls	r3, r3, #16
 8004a40:	4619      	mov	r1, r3
 8004a42:	4610      	mov	r0, r2
 8004a44:	f001 fa62 	bl	8005f0c <SDMMC_CmdAppCommand>
 8004a48:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	e00f      	b.n	8004a74 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2100      	movs	r1, #0
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 fa9b 	bl	8005f96 <SDMMC_CmdBusWidth>
 8004a60:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	e003      	b.n	8004a74 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	e001      	b.n	8004a74 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004a70:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004a7c:	b590      	push	{r4, r7, lr}
 8004a7e:	b08f      	sub	sp, #60	; 0x3c
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004a86:	f7fc f95b 	bl	8000d40 <HAL_GetTick>
 8004a8a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004a90:	2300      	movs	r3, #0
 8004a92:	60bb      	str	r3, [r7, #8]
 8004a94:	2300      	movs	r3, #0
 8004a96:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2108      	movs	r1, #8
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f001 f906 	bl	8005cb4 <SDMMC_CmdBlockLength>
 8004aa8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	e0b2      	b.n	8004c1a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004abc:	041b      	lsls	r3, r3, #16
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	f001 fa23 	bl	8005f0c <SDMMC_CmdAppCommand>
 8004ac6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad0:	e0a3      	b.n	8004c1a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004ad8:	2308      	movs	r3, #8
 8004ada:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004adc:	2330      	movs	r3, #48	; 0x30
 8004ade:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f107 0210 	add.w	r2, r7, #16
 8004af4:	4611      	mov	r1, r2
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 f8b0 	bl	8005c5c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f001 fa6a 	bl	8005fda <SDMMC_CmdSendSCR>
 8004b06:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d02a      	beq.n	8004b64 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b10:	e083      	b.n	8004c1a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00f      	beq.n	8004b40 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6819      	ldr	r1, [r3, #0]
 8004b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	f107 0208 	add.w	r2, r7, #8
 8004b2c:	18d4      	adds	r4, r2, r3
 8004b2e:	4608      	mov	r0, r1
 8004b30:	f001 f80f 	bl	8005b52 <SDIO_ReadFIFO>
 8004b34:	4603      	mov	r3, r0
 8004b36:	6023      	str	r3, [r4, #0]
      index++;
 8004b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b3e:	e006      	b.n	8004b4e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d012      	beq.n	8004b74 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004b4e:	f7fc f8f7 	bl	8000d40 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5c:	d102      	bne.n	8004b64 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004b5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b62:	e05a      	b.n	8004c1a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0cf      	beq.n	8004b12 <SD_FindSCR+0x96>
 8004b72:	e000      	b.n	8004b76 <SD_FindSCR+0xfa>
      break;
 8004b74:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2208      	movs	r2, #8
 8004b8a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004b8c:	2308      	movs	r3, #8
 8004b8e:	e044      	b.n	8004c1a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d005      	beq.n	8004baa <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e037      	b.n	8004c1a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb0:	f003 0320 	and.w	r3, r3, #32
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004bc0:	2320      	movs	r3, #32
 8004bc2:	e02a      	b.n	8004c1a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f240 523a 	movw	r2, #1338	; 0x53a
 8004bcc:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	061a      	lsls	r2, r3, #24
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	021b      	lsls	r3, r3, #8
 8004bd6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bda:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	0a1b      	lsrs	r3, r3, #8
 8004be0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004be4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	0e1b      	lsrs	r3, r3, #24
 8004bea:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bee:	601a      	str	r2, [r3, #0]
    scr++;
 8004bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	061a      	lsls	r2, r3, #24
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	021b      	lsls	r3, r3, #8
 8004bfe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c02:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	0a1b      	lsrs	r3, r3, #8
 8004c08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004c0c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	0e1b      	lsrs	r3, r3, #24
 8004c12:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c16:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	373c      	adds	r7, #60	; 0x3c
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd90      	pop	{r4, r7, pc}

08004c22 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b086      	sub	sp, #24
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d03f      	beq.n	8004cbc <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	e033      	b.n	8004caa <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 ff83 	bl	8005b52 <SDIO_ReadFIFO>
 8004c4c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	0a1b      	lsrs	r3, r3, #8
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	3b01      	subs	r3, #1
 8004c76:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	0c1b      	lsrs	r3, r3, #16
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3301      	adds	r3, #1
 8004c86:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	0e1b      	lsrs	r3, r3, #24
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b07      	cmp	r3, #7
 8004cae:	d9c8      	bls.n	8004c42 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004cbc:	bf00      	nop
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d043      	beq.n	8004d66 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	e037      	b.n	8004d54 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3301      	adds	r3, #1
 8004cee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	021a      	lsls	r2, r3, #8
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	3301      	adds	r3, #1
 8004d06:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	041a      	lsls	r2, r3, #16
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	061a      	lsls	r2, r3, #24
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	3301      	adds	r3, #1
 8004d36:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f107 0208 	add.w	r2, r7, #8
 8004d46:	4611      	mov	r1, r2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 ff0f 	bl	8005b6c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	3301      	adds	r3, #1
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	2b07      	cmp	r3, #7
 8004d58:	d9c4      	bls.n	8004ce4 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004d66:	bf00      	nop
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e03f      	b.n	8004e00 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d106      	bne.n	8004d9a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7fb fe85 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2224      	movs	r2, #36	; 0x24
 8004d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004db0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fcda 	bl	800576c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691a      	ldr	r2, [r3, #16]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dc6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695a      	ldr	r2, [r3, #20]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dd6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004de6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	4613      	mov	r3, r2
 8004e14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b20      	cmp	r3, #32
 8004e20:	d11d      	bne.n	8004e5e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <HAL_UART_Receive_IT+0x26>
 8004e28:	88fb      	ldrh	r3, [r7, #6]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e016      	b.n	8004e60 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_UART_Receive_IT+0x38>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e00f      	b.n	8004e60 <HAL_UART_Receive_IT+0x58>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e4e:	88fb      	ldrh	r3, [r7, #6]
 8004e50:	461a      	mov	r2, r3
 8004e52:	68b9      	ldr	r1, [r7, #8]
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 fab5 	bl	80053c4 <UART_Start_Receive_IT>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	e000      	b.n	8004e60 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004e5e:	2302      	movs	r3, #2
  }
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b0ba      	sub	sp, #232	; 0xe8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10f      	bne.n	8004ece <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eb2:	f003 0320 	and.w	r3, r3, #32
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d009      	beq.n	8004ece <HAL_UART_IRQHandler+0x66>
 8004eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fb95 	bl	80055f6 <UART_Receive_IT>
      return;
 8004ecc:	e256      	b.n	800537c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 80de 	beq.w	8005094 <HAL_UART_IRQHandler+0x22c>
 8004ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d106      	bne.n	8004ef2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 80d1 	beq.w	8005094 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00b      	beq.n	8004f16 <HAL_UART_IRQHandler+0xae>
 8004efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d005      	beq.n	8004f16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f043 0201 	orr.w	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00b      	beq.n	8004f3a <HAL_UART_IRQHandler+0xd2>
 8004f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d005      	beq.n	8004f3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	f043 0202 	orr.w	r2, r3, #2
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00b      	beq.n	8004f5e <HAL_UART_IRQHandler+0xf6>
 8004f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d005      	beq.n	8004f5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	f043 0204 	orr.w	r2, r3, #4
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d011      	beq.n	8004f8e <HAL_UART_IRQHandler+0x126>
 8004f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d105      	bne.n	8004f82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d005      	beq.n	8004f8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	f043 0208 	orr.w	r2, r3, #8
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 81ed 	beq.w	8005372 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d008      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x14e>
 8004fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fb20 	bl	80055f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc0:	2b40      	cmp	r3, #64	; 0x40
 8004fc2:	bf0c      	ite	eq
 8004fc4:	2301      	moveq	r3, #1
 8004fc6:	2300      	movne	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <HAL_UART_IRQHandler+0x17a>
 8004fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d04f      	beq.n	8005082 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fa28 	bl	8005438 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff2:	2b40      	cmp	r3, #64	; 0x40
 8004ff4:	d141      	bne.n	800507a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3314      	adds	r3, #20
 8004ffc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005004:	e853 3f00 	ldrex	r3, [r3]
 8005008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800500c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3314      	adds	r3, #20
 800501e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005022:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005026:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800502e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800503a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1d9      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005046:	2b00      	cmp	r3, #0
 8005048:	d013      	beq.n	8005072 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504e:	4a7d      	ldr	r2, [pc, #500]	; (8005244 <HAL_UART_IRQHandler+0x3dc>)
 8005050:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	4618      	mov	r0, r3
 8005058:	f7fc f92a 	bl	80012b0 <HAL_DMA_Abort_IT>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d016      	beq.n	8005090 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800506c:	4610      	mov	r0, r2
 800506e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005070:	e00e      	b.n	8005090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f990 	bl	8005398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005078:	e00a      	b.n	8005090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f98c 	bl	8005398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005080:	e006      	b.n	8005090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f988 	bl	8005398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800508e:	e170      	b.n	8005372 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005090:	bf00      	nop
    return;
 8005092:	e16e      	b.n	8005372 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	2b01      	cmp	r3, #1
 800509a:	f040 814a 	bne.w	8005332 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800509e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050a2:	f003 0310 	and.w	r3, r3, #16
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 8143 	beq.w	8005332 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80050ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 813c 	beq.w	8005332 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050ba:	2300      	movs	r3, #0
 80050bc:	60bb      	str	r3, [r7, #8]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60bb      	str	r3, [r7, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050da:	2b40      	cmp	r3, #64	; 0x40
 80050dc:	f040 80b4 	bne.w	8005248 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 8140 	beq.w	8005376 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050fe:	429a      	cmp	r2, r3
 8005100:	f080 8139 	bcs.w	8005376 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800510a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005116:	f000 8088 	beq.w	800522a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	330c      	adds	r3, #12
 8005120:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005124:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005128:	e853 3f00 	ldrex	r3, [r3]
 800512c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005130:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005138:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	330c      	adds	r3, #12
 8005142:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005146:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800514a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005152:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800515e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1d9      	bne.n	800511a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3314      	adds	r3, #20
 800516c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005170:	e853 3f00 	ldrex	r3, [r3]
 8005174:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005178:	f023 0301 	bic.w	r3, r3, #1
 800517c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3314      	adds	r3, #20
 8005186:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800518a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800518e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005190:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005192:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800519c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e1      	bne.n	8005166 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3314      	adds	r3, #20
 80051a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051ac:	e853 3f00 	ldrex	r3, [r3]
 80051b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80051b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3314      	adds	r3, #20
 80051c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80051c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051ce:	e841 2300 	strex	r3, r2, [r1]
 80051d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1e3      	bne.n	80051a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	330c      	adds	r3, #12
 80051ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f2:	e853 3f00 	ldrex	r3, [r3]
 80051f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051fa:	f023 0310 	bic.w	r3, r3, #16
 80051fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	330c      	adds	r3, #12
 8005208:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800520c:	65ba      	str	r2, [r7, #88]	; 0x58
 800520e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005212:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800521a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e3      	bne.n	80051e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005224:	4618      	mov	r0, r3
 8005226:	f7fb ffd3 	bl	80011d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005232:	b29b      	uxth	r3, r3
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	b29b      	uxth	r3, r3
 8005238:	4619      	mov	r1, r3
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f8b6 	bl	80053ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005240:	e099      	b.n	8005376 <HAL_UART_IRQHandler+0x50e>
 8005242:	bf00      	nop
 8005244:	080054ff 	.word	0x080054ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005250:	b29b      	uxth	r3, r3
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 808b 	beq.w	800537a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005264:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 8086 	beq.w	800537a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	330c      	adds	r3, #12
 8005274:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800527e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005280:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005284:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	330c      	adds	r3, #12
 800528e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005292:	647a      	str	r2, [r7, #68]	; 0x44
 8005294:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005298:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e3      	bne.n	800526e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3314      	adds	r3, #20
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	623b      	str	r3, [r7, #32]
   return(result);
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	f023 0301 	bic.w	r3, r3, #1
 80052bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	3314      	adds	r3, #20
 80052c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80052ca:	633a      	str	r2, [r7, #48]	; 0x30
 80052cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052d2:	e841 2300 	strex	r3, r2, [r1]
 80052d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e3      	bne.n	80052a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	330c      	adds	r3, #12
 80052f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	e853 3f00 	ldrex	r3, [r3]
 80052fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0310 	bic.w	r3, r3, #16
 8005302:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	330c      	adds	r3, #12
 800530c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005310:	61fa      	str	r2, [r7, #28]
 8005312:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	69b9      	ldr	r1, [r7, #24]
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	617b      	str	r3, [r7, #20]
   return(result);
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e3      	bne.n	80052ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005324:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f83e 	bl	80053ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005330:	e023      	b.n	800537a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533a:	2b00      	cmp	r3, #0
 800533c:	d009      	beq.n	8005352 <HAL_UART_IRQHandler+0x4ea>
 800533e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f8eb 	bl	8005526 <UART_Transmit_IT>
    return;
 8005350:	e014      	b.n	800537c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00e      	beq.n	800537c <HAL_UART_IRQHandler+0x514>
 800535e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d008      	beq.n	800537c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f92b 	bl	80055c6 <UART_EndTransmit_IT>
    return;
 8005370:	e004      	b.n	800537c <HAL_UART_IRQHandler+0x514>
    return;
 8005372:	bf00      	nop
 8005374:	e002      	b.n	800537c <HAL_UART_IRQHandler+0x514>
      return;
 8005376:	bf00      	nop
 8005378:	e000      	b.n	800537c <HAL_UART_IRQHandler+0x514>
      return;
 800537a:	bf00      	nop
  }
}
 800537c:	37e8      	adds	r7, #232	; 0xe8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop

08005384 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	460b      	mov	r3, r1
 80053b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	4613      	mov	r3, r2
 80053d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	88fa      	ldrh	r2, [r7, #6]
 80053dc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	88fa      	ldrh	r2, [r7, #6]
 80053e2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2222      	movs	r2, #34	; 0x22
 80053ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005408:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695a      	ldr	r2, [r3, #20]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0201 	orr.w	r2, r2, #1
 8005418:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 0220 	orr.w	r2, r2, #32
 8005428:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005438:	b480      	push	{r7}
 800543a:	b095      	sub	sp, #84	; 0x54
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	330c      	adds	r3, #12
 8005446:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544a:	e853 3f00 	ldrex	r3, [r3]
 800544e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	330c      	adds	r3, #12
 800545e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005460:	643a      	str	r2, [r7, #64]	; 0x40
 8005462:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005464:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005466:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005468:	e841 2300 	strex	r3, r2, [r1]
 800546c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800546e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1e5      	bne.n	8005440 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3314      	adds	r3, #20
 800547a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	e853 3f00 	ldrex	r3, [r3]
 8005482:	61fb      	str	r3, [r7, #28]
   return(result);
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	f023 0301 	bic.w	r3, r3, #1
 800548a:	64bb      	str	r3, [r7, #72]	; 0x48
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3314      	adds	r3, #20
 8005492:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005494:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005496:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800549a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800549c:	e841 2300 	strex	r3, r2, [r1]
 80054a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1e5      	bne.n	8005474 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d119      	bne.n	80054e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	330c      	adds	r3, #12
 80054b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	e853 3f00 	ldrex	r3, [r3]
 80054be:	60bb      	str	r3, [r7, #8]
   return(result);
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f023 0310 	bic.w	r3, r3, #16
 80054c6:	647b      	str	r3, [r7, #68]	; 0x44
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	330c      	adds	r3, #12
 80054ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054d0:	61ba      	str	r2, [r7, #24]
 80054d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d4:	6979      	ldr	r1, [r7, #20]
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	e841 2300 	strex	r3, r2, [r1]
 80054dc:	613b      	str	r3, [r7, #16]
   return(result);
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e5      	bne.n	80054b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80054f2:	bf00      	nop
 80054f4:	3754      	adds	r7, #84	; 0x54
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f7ff ff3d 	bl	8005398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800551e:	bf00      	nop
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005526:	b480      	push	{r7}
 8005528:	b085      	sub	sp, #20
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b21      	cmp	r3, #33	; 0x21
 8005538:	d13e      	bne.n	80055b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005542:	d114      	bne.n	800556e <UART_Transmit_IT+0x48>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d110      	bne.n	800556e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005560:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	1c9a      	adds	r2, r3, #2
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	621a      	str	r2, [r3, #32]
 800556c:	e008      	b.n	8005580 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	1c59      	adds	r1, r3, #1
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6211      	str	r1, [r2, #32]
 8005578:	781a      	ldrb	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005584:	b29b      	uxth	r3, r3
 8005586:	3b01      	subs	r3, #1
 8005588:	b29b      	uxth	r3, r3
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	4619      	mov	r1, r3
 800558e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10f      	bne.n	80055b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	e000      	b.n	80055ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80055b8:	2302      	movs	r3, #2
  }
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b082      	sub	sp, #8
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7ff fecc 	bl	8005384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b08c      	sub	sp, #48	; 0x30
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b22      	cmp	r3, #34	; 0x22
 8005608:	f040 80ab 	bne.w	8005762 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005614:	d117      	bne.n	8005646 <UART_Receive_IT+0x50>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d113      	bne.n	8005646 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800561e:	2300      	movs	r3, #0
 8005620:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005626:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	b29b      	uxth	r3, r3
 8005630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005634:	b29a      	uxth	r2, r3
 8005636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005638:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563e:	1c9a      	adds	r2, r3, #2
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	629a      	str	r2, [r3, #40]	; 0x28
 8005644:	e026      	b.n	8005694 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800564c:	2300      	movs	r3, #0
 800564e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005658:	d007      	beq.n	800566a <UART_Receive_IT+0x74>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10a      	bne.n	8005678 <UART_Receive_IT+0x82>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d106      	bne.n	8005678 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	b2da      	uxtb	r2, r3
 8005672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	e008      	b.n	800568a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	b2db      	uxtb	r3, r3
 8005680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005684:	b2da      	uxtb	r2, r3
 8005686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005688:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005698:	b29b      	uxth	r3, r3
 800569a:	3b01      	subs	r3, #1
 800569c:	b29b      	uxth	r3, r3
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	4619      	mov	r1, r3
 80056a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d15a      	bne.n	800575e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0220 	bic.w	r2, r2, #32
 80056b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695a      	ldr	r2, [r3, #20]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0201 	bic.w	r2, r2, #1
 80056d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2220      	movs	r2, #32
 80056dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d135      	bne.n	8005754 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	330c      	adds	r3, #12
 80056f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	613b      	str	r3, [r7, #16]
   return(result);
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f023 0310 	bic.w	r3, r3, #16
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	330c      	adds	r3, #12
 800570c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570e:	623a      	str	r2, [r7, #32]
 8005710:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	69f9      	ldr	r1, [r7, #28]
 8005714:	6a3a      	ldr	r2, [r7, #32]
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	61bb      	str	r3, [r7, #24]
   return(result);
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e5      	bne.n	80056ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0310 	and.w	r3, r3, #16
 800572c:	2b10      	cmp	r3, #16
 800572e:	d10a      	bne.n	8005746 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005730:	2300      	movs	r3, #0
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff fe2d 	bl	80053ac <HAL_UARTEx_RxEventCallback>
 8005752:	e002      	b.n	800575a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7fa febb 	bl	80004d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	e002      	b.n	8005764 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	e000      	b.n	8005764 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005762:	2302      	movs	r3, #2
  }
}
 8005764:	4618      	mov	r0, r3
 8005766:	3730      	adds	r7, #48	; 0x30
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800576c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005770:	b09f      	sub	sp, #124	; 0x7c
 8005772:	af00      	add	r7, sp, #0
 8005774:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005782:	68d9      	ldr	r1, [r3, #12]
 8005784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	ea40 0301 	orr.w	r3, r0, r1
 800578c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800578e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	431a      	orrs	r2, r3
 8005798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	431a      	orrs	r2, r3
 800579e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80057a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80057b0:	f021 010c 	bic.w	r1, r1, #12
 80057b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057ba:	430b      	orrs	r3, r1
 80057bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80057c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ca:	6999      	ldr	r1, [r3, #24]
 80057cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	ea40 0301 	orr.w	r3, r0, r1
 80057d4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	4bc5      	ldr	r3, [pc, #788]	; (8005af0 <UART_SetConfig+0x384>)
 80057dc:	429a      	cmp	r2, r3
 80057de:	d004      	beq.n	80057ea <UART_SetConfig+0x7e>
 80057e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	4bc3      	ldr	r3, [pc, #780]	; (8005af4 <UART_SetConfig+0x388>)
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d103      	bne.n	80057f2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057ea:	f7fd ff7d 	bl	80036e8 <HAL_RCC_GetPCLK2Freq>
 80057ee:	6778      	str	r0, [r7, #116]	; 0x74
 80057f0:	e002      	b.n	80057f8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057f2:	f7fd ff65 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 80057f6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005800:	f040 80b6 	bne.w	8005970 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005804:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005806:	461c      	mov	r4, r3
 8005808:	f04f 0500 	mov.w	r5, #0
 800580c:	4622      	mov	r2, r4
 800580e:	462b      	mov	r3, r5
 8005810:	1891      	adds	r1, r2, r2
 8005812:	6439      	str	r1, [r7, #64]	; 0x40
 8005814:	415b      	adcs	r3, r3
 8005816:	647b      	str	r3, [r7, #68]	; 0x44
 8005818:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800581c:	1912      	adds	r2, r2, r4
 800581e:	eb45 0303 	adc.w	r3, r5, r3
 8005822:	f04f 0000 	mov.w	r0, #0
 8005826:	f04f 0100 	mov.w	r1, #0
 800582a:	00d9      	lsls	r1, r3, #3
 800582c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005830:	00d0      	lsls	r0, r2, #3
 8005832:	4602      	mov	r2, r0
 8005834:	460b      	mov	r3, r1
 8005836:	1911      	adds	r1, r2, r4
 8005838:	6639      	str	r1, [r7, #96]	; 0x60
 800583a:	416b      	adcs	r3, r5
 800583c:	667b      	str	r3, [r7, #100]	; 0x64
 800583e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	461a      	mov	r2, r3
 8005844:	f04f 0300 	mov.w	r3, #0
 8005848:	1891      	adds	r1, r2, r2
 800584a:	63b9      	str	r1, [r7, #56]	; 0x38
 800584c:	415b      	adcs	r3, r3
 800584e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005850:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005854:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005858:	f7fa fcbe 	bl	80001d8 <__aeabi_uldivmod>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	4ba5      	ldr	r3, [pc, #660]	; (8005af8 <UART_SetConfig+0x38c>)
 8005862:	fba3 2302 	umull	r2, r3, r3, r2
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	011e      	lsls	r6, r3, #4
 800586a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800586c:	461c      	mov	r4, r3
 800586e:	f04f 0500 	mov.w	r5, #0
 8005872:	4622      	mov	r2, r4
 8005874:	462b      	mov	r3, r5
 8005876:	1891      	adds	r1, r2, r2
 8005878:	6339      	str	r1, [r7, #48]	; 0x30
 800587a:	415b      	adcs	r3, r3
 800587c:	637b      	str	r3, [r7, #52]	; 0x34
 800587e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005882:	1912      	adds	r2, r2, r4
 8005884:	eb45 0303 	adc.w	r3, r5, r3
 8005888:	f04f 0000 	mov.w	r0, #0
 800588c:	f04f 0100 	mov.w	r1, #0
 8005890:	00d9      	lsls	r1, r3, #3
 8005892:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005896:	00d0      	lsls	r0, r2, #3
 8005898:	4602      	mov	r2, r0
 800589a:	460b      	mov	r3, r1
 800589c:	1911      	adds	r1, r2, r4
 800589e:	65b9      	str	r1, [r7, #88]	; 0x58
 80058a0:	416b      	adcs	r3, r5
 80058a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	461a      	mov	r2, r3
 80058aa:	f04f 0300 	mov.w	r3, #0
 80058ae:	1891      	adds	r1, r2, r2
 80058b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80058b2:	415b      	adcs	r3, r3
 80058b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058ba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80058be:	f7fa fc8b 	bl	80001d8 <__aeabi_uldivmod>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4b8c      	ldr	r3, [pc, #560]	; (8005af8 <UART_SetConfig+0x38c>)
 80058c8:	fba3 1302 	umull	r1, r3, r3, r2
 80058cc:	095b      	lsrs	r3, r3, #5
 80058ce:	2164      	movs	r1, #100	; 0x64
 80058d0:	fb01 f303 	mul.w	r3, r1, r3
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	3332      	adds	r3, #50	; 0x32
 80058da:	4a87      	ldr	r2, [pc, #540]	; (8005af8 <UART_SetConfig+0x38c>)
 80058dc:	fba2 2303 	umull	r2, r3, r2, r3
 80058e0:	095b      	lsrs	r3, r3, #5
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058e8:	441e      	add	r6, r3
 80058ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058ec:	4618      	mov	r0, r3
 80058ee:	f04f 0100 	mov.w	r1, #0
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	1894      	adds	r4, r2, r2
 80058f8:	623c      	str	r4, [r7, #32]
 80058fa:	415b      	adcs	r3, r3
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
 80058fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005902:	1812      	adds	r2, r2, r0
 8005904:	eb41 0303 	adc.w	r3, r1, r3
 8005908:	f04f 0400 	mov.w	r4, #0
 800590c:	f04f 0500 	mov.w	r5, #0
 8005910:	00dd      	lsls	r5, r3, #3
 8005912:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005916:	00d4      	lsls	r4, r2, #3
 8005918:	4622      	mov	r2, r4
 800591a:	462b      	mov	r3, r5
 800591c:	1814      	adds	r4, r2, r0
 800591e:	653c      	str	r4, [r7, #80]	; 0x50
 8005920:	414b      	adcs	r3, r1
 8005922:	657b      	str	r3, [r7, #84]	; 0x54
 8005924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	461a      	mov	r2, r3
 800592a:	f04f 0300 	mov.w	r3, #0
 800592e:	1891      	adds	r1, r2, r2
 8005930:	61b9      	str	r1, [r7, #24]
 8005932:	415b      	adcs	r3, r3
 8005934:	61fb      	str	r3, [r7, #28]
 8005936:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800593a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800593e:	f7fa fc4b 	bl	80001d8 <__aeabi_uldivmod>
 8005942:	4602      	mov	r2, r0
 8005944:	460b      	mov	r3, r1
 8005946:	4b6c      	ldr	r3, [pc, #432]	; (8005af8 <UART_SetConfig+0x38c>)
 8005948:	fba3 1302 	umull	r1, r3, r3, r2
 800594c:	095b      	lsrs	r3, r3, #5
 800594e:	2164      	movs	r1, #100	; 0x64
 8005950:	fb01 f303 	mul.w	r3, r1, r3
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	3332      	adds	r3, #50	; 0x32
 800595a:	4a67      	ldr	r2, [pc, #412]	; (8005af8 <UART_SetConfig+0x38c>)
 800595c:	fba2 2303 	umull	r2, r3, r2, r3
 8005960:	095b      	lsrs	r3, r3, #5
 8005962:	f003 0207 	and.w	r2, r3, #7
 8005966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4432      	add	r2, r6
 800596c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800596e:	e0b9      	b.n	8005ae4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005972:	461c      	mov	r4, r3
 8005974:	f04f 0500 	mov.w	r5, #0
 8005978:	4622      	mov	r2, r4
 800597a:	462b      	mov	r3, r5
 800597c:	1891      	adds	r1, r2, r2
 800597e:	6139      	str	r1, [r7, #16]
 8005980:	415b      	adcs	r3, r3
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005988:	1912      	adds	r2, r2, r4
 800598a:	eb45 0303 	adc.w	r3, r5, r3
 800598e:	f04f 0000 	mov.w	r0, #0
 8005992:	f04f 0100 	mov.w	r1, #0
 8005996:	00d9      	lsls	r1, r3, #3
 8005998:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800599c:	00d0      	lsls	r0, r2, #3
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	eb12 0804 	adds.w	r8, r2, r4
 80059a6:	eb43 0905 	adc.w	r9, r3, r5
 80059aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f04f 0100 	mov.w	r1, #0
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	008b      	lsls	r3, r1, #2
 80059be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059c2:	0082      	lsls	r2, r0, #2
 80059c4:	4640      	mov	r0, r8
 80059c6:	4649      	mov	r1, r9
 80059c8:	f7fa fc06 	bl	80001d8 <__aeabi_uldivmod>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4b49      	ldr	r3, [pc, #292]	; (8005af8 <UART_SetConfig+0x38c>)
 80059d2:	fba3 2302 	umull	r2, r3, r3, r2
 80059d6:	095b      	lsrs	r3, r3, #5
 80059d8:	011e      	lsls	r6, r3, #4
 80059da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059dc:	4618      	mov	r0, r3
 80059de:	f04f 0100 	mov.w	r1, #0
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	1894      	adds	r4, r2, r2
 80059e8:	60bc      	str	r4, [r7, #8]
 80059ea:	415b      	adcs	r3, r3
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059f2:	1812      	adds	r2, r2, r0
 80059f4:	eb41 0303 	adc.w	r3, r1, r3
 80059f8:	f04f 0400 	mov.w	r4, #0
 80059fc:	f04f 0500 	mov.w	r5, #0
 8005a00:	00dd      	lsls	r5, r3, #3
 8005a02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a06:	00d4      	lsls	r4, r2, #3
 8005a08:	4622      	mov	r2, r4
 8005a0a:	462b      	mov	r3, r5
 8005a0c:	1814      	adds	r4, r2, r0
 8005a0e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005a10:	414b      	adcs	r3, r1
 8005a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f04f 0100 	mov.w	r1, #0
 8005a1e:	f04f 0200 	mov.w	r2, #0
 8005a22:	f04f 0300 	mov.w	r3, #0
 8005a26:	008b      	lsls	r3, r1, #2
 8005a28:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a2c:	0082      	lsls	r2, r0, #2
 8005a2e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005a32:	f7fa fbd1 	bl	80001d8 <__aeabi_uldivmod>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4b2f      	ldr	r3, [pc, #188]	; (8005af8 <UART_SetConfig+0x38c>)
 8005a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a40:	095b      	lsrs	r3, r3, #5
 8005a42:	2164      	movs	r1, #100	; 0x64
 8005a44:	fb01 f303 	mul.w	r3, r1, r3
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	3332      	adds	r3, #50	; 0x32
 8005a4e:	4a2a      	ldr	r2, [pc, #168]	; (8005af8 <UART_SetConfig+0x38c>)
 8005a50:	fba2 2303 	umull	r2, r3, r2, r3
 8005a54:	095b      	lsrs	r3, r3, #5
 8005a56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a5a:	441e      	add	r6, r3
 8005a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f04f 0100 	mov.w	r1, #0
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	1894      	adds	r4, r2, r2
 8005a6a:	603c      	str	r4, [r7, #0]
 8005a6c:	415b      	adcs	r3, r3
 8005a6e:	607b      	str	r3, [r7, #4]
 8005a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a74:	1812      	adds	r2, r2, r0
 8005a76:	eb41 0303 	adc.w	r3, r1, r3
 8005a7a:	f04f 0400 	mov.w	r4, #0
 8005a7e:	f04f 0500 	mov.w	r5, #0
 8005a82:	00dd      	lsls	r5, r3, #3
 8005a84:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a88:	00d4      	lsls	r4, r2, #3
 8005a8a:	4622      	mov	r2, r4
 8005a8c:	462b      	mov	r3, r5
 8005a8e:	eb12 0a00 	adds.w	sl, r2, r0
 8005a92:	eb43 0b01 	adc.w	fp, r3, r1
 8005a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f04f 0100 	mov.w	r1, #0
 8005aa0:	f04f 0200 	mov.w	r2, #0
 8005aa4:	f04f 0300 	mov.w	r3, #0
 8005aa8:	008b      	lsls	r3, r1, #2
 8005aaa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005aae:	0082      	lsls	r2, r0, #2
 8005ab0:	4650      	mov	r0, sl
 8005ab2:	4659      	mov	r1, fp
 8005ab4:	f7fa fb90 	bl	80001d8 <__aeabi_uldivmod>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4b0e      	ldr	r3, [pc, #56]	; (8005af8 <UART_SetConfig+0x38c>)
 8005abe:	fba3 1302 	umull	r1, r3, r3, r2
 8005ac2:	095b      	lsrs	r3, r3, #5
 8005ac4:	2164      	movs	r1, #100	; 0x64
 8005ac6:	fb01 f303 	mul.w	r3, r1, r3
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	011b      	lsls	r3, r3, #4
 8005ace:	3332      	adds	r3, #50	; 0x32
 8005ad0:	4a09      	ldr	r2, [pc, #36]	; (8005af8 <UART_SetConfig+0x38c>)
 8005ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad6:	095b      	lsrs	r3, r3, #5
 8005ad8:	f003 020f 	and.w	r2, r3, #15
 8005adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4432      	add	r2, r6
 8005ae2:	609a      	str	r2, [r3, #8]
}
 8005ae4:	bf00      	nop
 8005ae6:	377c      	adds	r7, #124	; 0x7c
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aee:	bf00      	nop
 8005af0:	40011000 	.word	0x40011000
 8005af4:	40011400 	.word	0x40011400
 8005af8:	51eb851f 	.word	0x51eb851f

08005afc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005afc:	b084      	sub	sp, #16
 8005afe:	b480      	push	{r7}
 8005b00:	b085      	sub	sp, #20
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	f107 001c 	add.w	r0, r7, #28
 8005b0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005b12:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005b14:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005b16:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005b1a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005b1e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005b22:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005b26:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005b36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	b004      	add	sp, #16
 8005b50:	4770      	bx	lr

08005b52 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b082      	sub	sp, #8
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2203      	movs	r2, #3
 8005b9a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005b9c:	2002      	movs	r0, #2
 8005b9e:	f7fb f8db 	bl	8000d58 <HAL_Delay>
  
  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0303 	and.w	r3, r3, #3
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005be6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005bec:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005bf2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005c02:	f023 030f 	bic.w	r3, r3, #15
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	b2db      	uxtb	r3, r3
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b085      	sub	sp, #20
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3314      	adds	r3, #20
 8005c44:	461a      	mov	r2, r3
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	4413      	add	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
}  
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c82:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005c88:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005c8e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0

}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005cc2:	2310      	movs	r3, #16
 8005cc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005cc6:	2340      	movs	r3, #64	; 0x40
 8005cc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005cd4:	f107 0308 	add.w	r3, r7, #8
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7ff ff74 	bl	8005bc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce4:	2110      	movs	r1, #16
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fa44 	bl	8006174 <SDMMC_GetCmdResp1>
 8005cec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cee:	69fb      	ldr	r3, [r7, #28]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3720      	adds	r7, #32
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005d06:	2311      	movs	r3, #17
 8005d08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d0a:	2340      	movs	r3, #64	; 0x40
 8005d0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d18:	f107 0308 	add.w	r3, r7, #8
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7ff ff52 	bl	8005bc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d28:	2111      	movs	r1, #17
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fa22 	bl	8006174 <SDMMC_GetCmdResp1>
 8005d30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d32:	69fb      	ldr	r3, [r7, #28]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3720      	adds	r7, #32
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005d4a:	2312      	movs	r3, #18
 8005d4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d4e:	2340      	movs	r3, #64	; 0x40
 8005d50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d5c:	f107 0308 	add.w	r3, r7, #8
 8005d60:	4619      	mov	r1, r3
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7ff ff30 	bl	8005bc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d6c:	2112      	movs	r1, #18
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fa00 	bl	8006174 <SDMMC_GetCmdResp1>
 8005d74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d76:	69fb      	ldr	r3, [r7, #28]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3720      	adds	r7, #32
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b088      	sub	sp, #32
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005d8e:	2318      	movs	r3, #24
 8005d90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d92:	2340      	movs	r3, #64	; 0x40
 8005d94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005da0:	f107 0308 	add.w	r3, r7, #8
 8005da4:	4619      	mov	r1, r3
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7ff ff0e 	bl	8005bc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db0:	2118      	movs	r1, #24
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f9de 	bl	8006174 <SDMMC_GetCmdResp1>
 8005db8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005dba:	69fb      	ldr	r3, [r7, #28]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3720      	adds	r7, #32
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005dd2:	2319      	movs	r3, #25
 8005dd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005dd6:	2340      	movs	r3, #64	; 0x40
 8005dd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005de2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005de4:	f107 0308 	add.w	r3, r7, #8
 8005de8:	4619      	mov	r1, r3
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7ff feec 	bl	8005bc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df4:	2119      	movs	r1, #25
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f9bc 	bl	8006174 <SDMMC_GetCmdResp1>
 8005dfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005dfe:	69fb      	ldr	r3, [r7, #28]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3720      	adds	r7, #32
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005e14:	230c      	movs	r3, #12
 8005e16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e18:	2340      	movs	r3, #64	; 0x40
 8005e1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e26:	f107 0308 	add.w	r3, r7, #8
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7ff fecb 	bl	8005bc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005e32:	4a05      	ldr	r2, [pc, #20]	; (8005e48 <SDMMC_CmdStopTransfer+0x40>)
 8005e34:	210c      	movs	r1, #12
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f99c 	bl	8006174 <SDMMC_GetCmdResp1>
 8005e3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e3e:	69fb      	ldr	r3, [r7, #28]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3720      	adds	r7, #32
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	05f5e100 	.word	0x05f5e100

08005e4c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08a      	sub	sp, #40	; 0x28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005e5c:	2307      	movs	r3, #7
 8005e5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e60:	2340      	movs	r3, #64	; 0x40
 8005e62:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e64:	2300      	movs	r3, #0
 8005e66:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e6c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e6e:	f107 0310 	add.w	r3, r7, #16
 8005e72:	4619      	mov	r1, r3
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f7ff fea7 	bl	8005bc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e7e:	2107      	movs	r1, #7
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 f977 	bl	8006174 <SDMMC_GetCmdResp1>
 8005e86:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3728      	adds	r7, #40	; 0x28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b088      	sub	sp, #32
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005eb0:	f107 0308 	add.w	r3, r7, #8
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7ff fe86 	bl	8005bc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f92d 	bl	800611c <SDMMC_GetCmdError>
 8005ec2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ec4:	69fb      	ldr	r3, [r7, #28]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3720      	adds	r7, #32
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b088      	sub	sp, #32
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005ed6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005eda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005edc:	2308      	movs	r3, #8
 8005ede:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ee0:	2340      	movs	r3, #64	; 0x40
 8005ee2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005eee:	f107 0308 	add.w	r3, r7, #8
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7ff fe67 	bl	8005bc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fb24 	bl	8006548 <SDMMC_GetCmdResp7>
 8005f00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f02:	69fb      	ldr	r3, [r7, #28]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3720      	adds	r7, #32
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005f1a:	2337      	movs	r3, #55	; 0x37
 8005f1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f1e:	2340      	movs	r3, #64	; 0x40
 8005f20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f2c:	f107 0308 	add.w	r3, r7, #8
 8005f30:	4619      	mov	r1, r3
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff fe48 	bl	8005bc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f3c:	2137      	movs	r1, #55	; 0x37
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f918 	bl	8006174 <SDMMC_GetCmdResp1>
 8005f44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f46:	69fb      	ldr	r3, [r7, #28]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3720      	adds	r7, #32
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b088      	sub	sp, #32
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005f66:	2329      	movs	r3, #41	; 0x29
 8005f68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f6a:	2340      	movs	r3, #64	; 0x40
 8005f6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f78:	f107 0308 	add.w	r3, r7, #8
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7ff fe22 	bl	8005bc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fa2b 	bl	80063e0 <SDMMC_GetCmdResp3>
 8005f8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f8c:	69fb      	ldr	r3, [r7, #28]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3720      	adds	r7, #32
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b088      	sub	sp, #32
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005fa4:	2306      	movs	r3, #6
 8005fa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fa8:	2340      	movs	r3, #64	; 0x40
 8005faa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fac:	2300      	movs	r3, #0
 8005fae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fb4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fb6:	f107 0308 	add.w	r3, r7, #8
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff fe03 	bl	8005bc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc6:	2106      	movs	r1, #6
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f8d3 	bl	8006174 <SDMMC_GetCmdResp1>
 8005fce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fd0:	69fb      	ldr	r3, [r7, #28]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3720      	adds	r7, #32
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b088      	sub	sp, #32
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005fe6:	2333      	movs	r3, #51	; 0x33
 8005fe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fea:	2340      	movs	r3, #64	; 0x40
 8005fec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ff6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ff8:	f107 0308 	add.w	r3, r7, #8
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7ff fde2 	bl	8005bc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006004:	f241 3288 	movw	r2, #5000	; 0x1388
 8006008:	2133      	movs	r1, #51	; 0x33
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f8b2 	bl	8006174 <SDMMC_GetCmdResp1>
 8006010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006012:	69fb      	ldr	r3, [r7, #28]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3720      	adds	r7, #32
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b088      	sub	sp, #32
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006024:	2300      	movs	r3, #0
 8006026:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006028:	2302      	movs	r3, #2
 800602a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800602c:	23c0      	movs	r3, #192	; 0xc0
 800602e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006030:	2300      	movs	r3, #0
 8006032:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006038:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800603a:	f107 0308 	add.w	r3, r7, #8
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff fdc1 	bl	8005bc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f982 	bl	8006350 <SDMMC_GetCmdResp2>
 800604c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800604e:	69fb      	ldr	r3, [r7, #28]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3720      	adds	r7, #32
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006066:	2309      	movs	r3, #9
 8006068:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800606a:	23c0      	movs	r3, #192	; 0xc0
 800606c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800606e:	2300      	movs	r3, #0
 8006070:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006076:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006078:	f107 0308 	add.w	r3, r7, #8
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff fda2 	bl	8005bc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f963 	bl	8006350 <SDMMC_GetCmdResp2>
 800608a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800608c:	69fb      	ldr	r3, [r7, #28]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3720      	adds	r7, #32
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b088      	sub	sp, #32
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80060a4:	2303      	movs	r3, #3
 80060a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060a8:	2340      	movs	r3, #64	; 0x40
 80060aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060ac:	2300      	movs	r3, #0
 80060ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060b6:	f107 0308 	add.w	r3, r7, #8
 80060ba:	4619      	mov	r1, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7ff fd83 	bl	8005bc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	2103      	movs	r1, #3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f9c8 	bl	800645c <SDMMC_GetCmdResp6>
 80060cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060ce:	69fb      	ldr	r3, [r7, #28]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3720      	adds	r7, #32
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80060e6:	230d      	movs	r3, #13
 80060e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060ea:	2340      	movs	r3, #64	; 0x40
 80060ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060f8:	f107 0308 	add.w	r3, r7, #8
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7ff fd62 	bl	8005bc8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006104:	f241 3288 	movw	r2, #5000	; 0x1388
 8006108:	210d      	movs	r1, #13
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f832 	bl	8006174 <SDMMC_GetCmdResp1>
 8006110:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006112:	69fb      	ldr	r3, [r7, #28]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3720      	adds	r7, #32
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006124:	4b11      	ldr	r3, [pc, #68]	; (800616c <SDMMC_GetCmdError+0x50>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a11      	ldr	r2, [pc, #68]	; (8006170 <SDMMC_GetCmdError+0x54>)
 800612a:	fba2 2303 	umull	r2, r3, r2, r3
 800612e:	0a5b      	lsrs	r3, r3, #9
 8006130:	f241 3288 	movw	r2, #5000	; 0x1388
 8006134:	fb02 f303 	mul.w	r3, r2, r3
 8006138:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	1e5a      	subs	r2, r3, #1
 800613e:	60fa      	str	r2, [r7, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d102      	bne.n	800614a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006144:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006148:	e009      	b.n	800615e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006152:	2b00      	cmp	r3, #0
 8006154:	d0f1      	beq.n	800613a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	22c5      	movs	r2, #197	; 0xc5
 800615a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	20000000 	.word	0x20000000
 8006170:	10624dd3 	.word	0x10624dd3

08006174 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b088      	sub	sp, #32
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	460b      	mov	r3, r1
 800617e:	607a      	str	r2, [r7, #4]
 8006180:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006182:	4b70      	ldr	r3, [pc, #448]	; (8006344 <SDMMC_GetCmdResp1+0x1d0>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a70      	ldr	r2, [pc, #448]	; (8006348 <SDMMC_GetCmdResp1+0x1d4>)
 8006188:	fba2 2303 	umull	r2, r3, r2, r3
 800618c:	0a5a      	lsrs	r2, r3, #9
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	fb02 f303 	mul.w	r3, r2, r3
 8006194:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	1e5a      	subs	r2, r3, #1
 800619a:	61fa      	str	r2, [r7, #28]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d102      	bne.n	80061a6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80061a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80061a4:	e0c9      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061aa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0ef      	beq.n	8006196 <SDMMC_GetCmdResp1+0x22>
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1ea      	bne.n	8006196 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d004      	beq.n	80061d6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2204      	movs	r2, #4
 80061d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80061d2:	2304      	movs	r3, #4
 80061d4:	e0b1      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d004      	beq.n	80061ec <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2201      	movs	r2, #1
 80061e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e0a6      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	22c5      	movs	r2, #197	; 0xc5
 80061f0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f7ff fd12 	bl	8005c1c <SDIO_GetCommandResponse>
 80061f8:	4603      	mov	r3, r0
 80061fa:	461a      	mov	r2, r3
 80061fc:	7afb      	ldrb	r3, [r7, #11]
 80061fe:	4293      	cmp	r3, r2
 8006200:	d001      	beq.n	8006206 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006202:	2301      	movs	r3, #1
 8006204:	e099      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006206:	2100      	movs	r1, #0
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f7ff fd14 	bl	8005c36 <SDIO_GetResponse>
 800620e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	4b4e      	ldr	r3, [pc, #312]	; (800634c <SDMMC_GetCmdResp1+0x1d8>)
 8006214:	4013      	ands	r3, r2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800621a:	2300      	movs	r3, #0
 800621c:	e08d      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2b00      	cmp	r3, #0
 8006222:	da02      	bge.n	800622a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006224:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006228:	e087      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006234:	2340      	movs	r3, #64	; 0x40
 8006236:	e080      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006242:	2380      	movs	r3, #128	; 0x80
 8006244:	e079      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d002      	beq.n	8006256 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006254:	e071      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006264:	e069      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006274:	e061      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006280:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006284:	e059      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006294:	e051      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80062a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062a4:	e049      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80062b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062b4:	e041      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80062c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062c4:	e039      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d002      	beq.n	80062d6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80062d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062d4:	e031      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80062e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80062e4:	e029      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80062f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80062f4:	e021      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006300:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006304:	e019      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006310:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006314:	e011      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d002      	beq.n	8006326 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006320:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006324:	e009      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f003 0308 	and.w	r3, r3, #8
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006330:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006334:	e001      	b.n	800633a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006336:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800633a:	4618      	mov	r0, r3
 800633c:	3720      	adds	r7, #32
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	20000000 	.word	0x20000000
 8006348:	10624dd3 	.word	0x10624dd3
 800634c:	fdffe008 	.word	0xfdffe008

08006350 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006358:	4b1f      	ldr	r3, [pc, #124]	; (80063d8 <SDMMC_GetCmdResp2+0x88>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a1f      	ldr	r2, [pc, #124]	; (80063dc <SDMMC_GetCmdResp2+0x8c>)
 800635e:	fba2 2303 	umull	r2, r3, r2, r3
 8006362:	0a5b      	lsrs	r3, r3, #9
 8006364:	f241 3288 	movw	r2, #5000	; 0x1388
 8006368:	fb02 f303 	mul.w	r3, r2, r3
 800636c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	1e5a      	subs	r2, r3, #1
 8006372:	60fa      	str	r2, [r7, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d102      	bne.n	800637e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006378:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800637c:	e026      	b.n	80063cc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006382:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0ef      	beq.n	800636e <SDMMC_GetCmdResp2+0x1e>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1ea      	bne.n	800636e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d004      	beq.n	80063ae <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2204      	movs	r2, #4
 80063a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80063aa:	2304      	movs	r3, #4
 80063ac:	e00e      	b.n	80063cc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d004      	beq.n	80063c4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e003      	b.n	80063cc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	22c5      	movs	r2, #197	; 0xc5
 80063c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	20000000 	.word	0x20000000
 80063dc:	10624dd3 	.word	0x10624dd3

080063e0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80063e8:	4b1a      	ldr	r3, [pc, #104]	; (8006454 <SDMMC_GetCmdResp3+0x74>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a1a      	ldr	r2, [pc, #104]	; (8006458 <SDMMC_GetCmdResp3+0x78>)
 80063ee:	fba2 2303 	umull	r2, r3, r2, r3
 80063f2:	0a5b      	lsrs	r3, r3, #9
 80063f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f8:	fb02 f303 	mul.w	r3, r2, r3
 80063fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	1e5a      	subs	r2, r3, #1
 8006402:	60fa      	str	r2, [r7, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d102      	bne.n	800640e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006408:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800640c:	e01b      	b.n	8006446 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006412:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0ef      	beq.n	80063fe <SDMMC_GetCmdResp3+0x1e>
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1ea      	bne.n	80063fe <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d004      	beq.n	800643e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2204      	movs	r2, #4
 8006438:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800643a:	2304      	movs	r3, #4
 800643c:	e003      	b.n	8006446 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	22c5      	movs	r2, #197	; 0xc5
 8006442:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3714      	adds	r7, #20
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	20000000 	.word	0x20000000
 8006458:	10624dd3 	.word	0x10624dd3

0800645c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	460b      	mov	r3, r1
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800646a:	4b35      	ldr	r3, [pc, #212]	; (8006540 <SDMMC_GetCmdResp6+0xe4>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a35      	ldr	r2, [pc, #212]	; (8006544 <SDMMC_GetCmdResp6+0xe8>)
 8006470:	fba2 2303 	umull	r2, r3, r2, r3
 8006474:	0a5b      	lsrs	r3, r3, #9
 8006476:	f241 3288 	movw	r2, #5000	; 0x1388
 800647a:	fb02 f303 	mul.w	r3, r2, r3
 800647e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	1e5a      	subs	r2, r3, #1
 8006484:	61fa      	str	r2, [r7, #28]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d102      	bne.n	8006490 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800648a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800648e:	e052      	b.n	8006536 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006494:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800649c:	2b00      	cmp	r3, #0
 800649e:	d0ef      	beq.n	8006480 <SDMMC_GetCmdResp6+0x24>
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1ea      	bne.n	8006480 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ae:	f003 0304 	and.w	r3, r3, #4
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d004      	beq.n	80064c0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2204      	movs	r2, #4
 80064ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80064bc:	2304      	movs	r3, #4
 80064be:	e03a      	b.n	8006536 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d004      	beq.n	80064d6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2201      	movs	r2, #1
 80064d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e02f      	b.n	8006536 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f7ff fba0 	bl	8005c1c <SDIO_GetCommandResponse>
 80064dc:	4603      	mov	r3, r0
 80064de:	461a      	mov	r2, r3
 80064e0:	7afb      	ldrb	r3, [r7, #11]
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d001      	beq.n	80064ea <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e025      	b.n	8006536 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	22c5      	movs	r2, #197	; 0xc5
 80064ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80064f0:	2100      	movs	r1, #0
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f7ff fb9f 	bl	8005c36 <SDIO_GetResponse>
 80064f8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d106      	bne.n	8006512 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	0c1b      	lsrs	r3, r3, #16
 8006508:	b29a      	uxth	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800650e:	2300      	movs	r3, #0
 8006510:	e011      	b.n	8006536 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800651c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006520:	e009      	b.n	8006536 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800652c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006530:	e001      	b.n	8006536 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006532:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006536:	4618      	mov	r0, r3
 8006538:	3720      	adds	r7, #32
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	20000000 	.word	0x20000000
 8006544:	10624dd3 	.word	0x10624dd3

08006548 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006550:	4b22      	ldr	r3, [pc, #136]	; (80065dc <SDMMC_GetCmdResp7+0x94>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a22      	ldr	r2, [pc, #136]	; (80065e0 <SDMMC_GetCmdResp7+0x98>)
 8006556:	fba2 2303 	umull	r2, r3, r2, r3
 800655a:	0a5b      	lsrs	r3, r3, #9
 800655c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006560:	fb02 f303 	mul.w	r3, r2, r3
 8006564:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	1e5a      	subs	r2, r3, #1
 800656a:	60fa      	str	r2, [r7, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d102      	bne.n	8006576 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006570:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006574:	e02c      	b.n	80065d0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0ef      	beq.n	8006566 <SDMMC_GetCmdResp7+0x1e>
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1ea      	bne.n	8006566 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006594:	f003 0304 	and.w	r3, r3, #4
 8006598:	2b00      	cmp	r3, #0
 800659a:	d004      	beq.n	80065a6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2204      	movs	r2, #4
 80065a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80065a2:	2304      	movs	r3, #4
 80065a4:	e014      	b.n	80065d0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d004      	beq.n	80065bc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e009      	b.n	80065d0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2240      	movs	r2, #64	; 0x40
 80065cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80065ce:	2300      	movs	r3, #0
  
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	20000000 	.word	0x20000000
 80065e0:	10624dd3 	.word	0x10624dd3

080065e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065e4:	b084      	sub	sp, #16
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b084      	sub	sp, #16
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	f107 001c 	add.w	r0, r7, #28
 80065f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d122      	bne.n	8006642 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006600:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006626:	2b01      	cmp	r3, #1
 8006628:	d105      	bne.n	8006636 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f001 fb1c 	bl	8007c74 <USB_CoreReset>
 800663c:	4603      	mov	r3, r0
 800663e:	73fb      	strb	r3, [r7, #15]
 8006640:	e01a      	b.n	8006678 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f001 fb10 	bl	8007c74 <USB_CoreReset>
 8006654:	4603      	mov	r3, r0
 8006656:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800665a:	2b00      	cmp	r3, #0
 800665c:	d106      	bne.n	800666c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006662:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	639a      	str	r2, [r3, #56]	; 0x38
 800666a:	e005      	b.n	8006678 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006670:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667a:	2b01      	cmp	r3, #1
 800667c:	d10b      	bne.n	8006696 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f043 0206 	orr.w	r2, r3, #6
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f043 0220 	orr.w	r2, r3, #32
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006696:	7bfb      	ldrb	r3, [r7, #15]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066a2:	b004      	add	sp, #16
 80066a4:	4770      	bx	lr
	...

080066a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	4613      	mov	r3, r2
 80066b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80066b6:	79fb      	ldrb	r3, [r7, #7]
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d165      	bne.n	8006788 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4a41      	ldr	r2, [pc, #260]	; (80067c4 <USB_SetTurnaroundTime+0x11c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d906      	bls.n	80066d2 <USB_SetTurnaroundTime+0x2a>
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	4a40      	ldr	r2, [pc, #256]	; (80067c8 <USB_SetTurnaroundTime+0x120>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d202      	bcs.n	80066d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80066cc:	230f      	movs	r3, #15
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	e062      	b.n	8006798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	4a3c      	ldr	r2, [pc, #240]	; (80067c8 <USB_SetTurnaroundTime+0x120>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d306      	bcc.n	80066e8 <USB_SetTurnaroundTime+0x40>
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	4a3b      	ldr	r2, [pc, #236]	; (80067cc <USB_SetTurnaroundTime+0x124>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d202      	bcs.n	80066e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80066e2:	230e      	movs	r3, #14
 80066e4:	617b      	str	r3, [r7, #20]
 80066e6:	e057      	b.n	8006798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	4a38      	ldr	r2, [pc, #224]	; (80067cc <USB_SetTurnaroundTime+0x124>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d306      	bcc.n	80066fe <USB_SetTurnaroundTime+0x56>
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	4a37      	ldr	r2, [pc, #220]	; (80067d0 <USB_SetTurnaroundTime+0x128>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d202      	bcs.n	80066fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80066f8:	230d      	movs	r3, #13
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	e04c      	b.n	8006798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	4a33      	ldr	r2, [pc, #204]	; (80067d0 <USB_SetTurnaroundTime+0x128>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d306      	bcc.n	8006714 <USB_SetTurnaroundTime+0x6c>
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	4a32      	ldr	r2, [pc, #200]	; (80067d4 <USB_SetTurnaroundTime+0x12c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d802      	bhi.n	8006714 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800670e:	230c      	movs	r3, #12
 8006710:	617b      	str	r3, [r7, #20]
 8006712:	e041      	b.n	8006798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4a2f      	ldr	r2, [pc, #188]	; (80067d4 <USB_SetTurnaroundTime+0x12c>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d906      	bls.n	800672a <USB_SetTurnaroundTime+0x82>
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	4a2e      	ldr	r2, [pc, #184]	; (80067d8 <USB_SetTurnaroundTime+0x130>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d802      	bhi.n	800672a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006724:	230b      	movs	r3, #11
 8006726:	617b      	str	r3, [r7, #20]
 8006728:	e036      	b.n	8006798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	4a2a      	ldr	r2, [pc, #168]	; (80067d8 <USB_SetTurnaroundTime+0x130>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d906      	bls.n	8006740 <USB_SetTurnaroundTime+0x98>
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	4a29      	ldr	r2, [pc, #164]	; (80067dc <USB_SetTurnaroundTime+0x134>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d802      	bhi.n	8006740 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800673a:	230a      	movs	r3, #10
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	e02b      	b.n	8006798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4a26      	ldr	r2, [pc, #152]	; (80067dc <USB_SetTurnaroundTime+0x134>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d906      	bls.n	8006756 <USB_SetTurnaroundTime+0xae>
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	4a25      	ldr	r2, [pc, #148]	; (80067e0 <USB_SetTurnaroundTime+0x138>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d202      	bcs.n	8006756 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006750:	2309      	movs	r3, #9
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	e020      	b.n	8006798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	4a21      	ldr	r2, [pc, #132]	; (80067e0 <USB_SetTurnaroundTime+0x138>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d306      	bcc.n	800676c <USB_SetTurnaroundTime+0xc4>
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	4a20      	ldr	r2, [pc, #128]	; (80067e4 <USB_SetTurnaroundTime+0x13c>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d802      	bhi.n	800676c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006766:	2308      	movs	r3, #8
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	e015      	b.n	8006798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	4a1d      	ldr	r2, [pc, #116]	; (80067e4 <USB_SetTurnaroundTime+0x13c>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d906      	bls.n	8006782 <USB_SetTurnaroundTime+0xda>
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	4a1c      	ldr	r2, [pc, #112]	; (80067e8 <USB_SetTurnaroundTime+0x140>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d202      	bcs.n	8006782 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800677c:	2307      	movs	r3, #7
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	e00a      	b.n	8006798 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006782:	2306      	movs	r3, #6
 8006784:	617b      	str	r3, [r7, #20]
 8006786:	e007      	b.n	8006798 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d102      	bne.n	8006794 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800678e:	2309      	movs	r3, #9
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	e001      	b.n	8006798 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006794:	2309      	movs	r3, #9
 8006796:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	68da      	ldr	r2, [r3, #12]
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	029b      	lsls	r3, r3, #10
 80067ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80067b0:	431a      	orrs	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	371c      	adds	r7, #28
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr
 80067c4:	00d8acbf 	.word	0x00d8acbf
 80067c8:	00e4e1c0 	.word	0x00e4e1c0
 80067cc:	00f42400 	.word	0x00f42400
 80067d0:	01067380 	.word	0x01067380
 80067d4:	011a499f 	.word	0x011a499f
 80067d8:	01312cff 	.word	0x01312cff
 80067dc:	014ca43f 	.word	0x014ca43f
 80067e0:	016e3600 	.word	0x016e3600
 80067e4:	01a6ab1f 	.word	0x01a6ab1f
 80067e8:	01e84800 	.word	0x01e84800

080067ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f043 0201 	orr.w	r2, r3, #1
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800680e:	b480      	push	{r7}
 8006810:	b083      	sub	sp, #12
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f023 0201 	bic.w	r2, r3, #1
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800684c:	78fb      	ldrb	r3, [r7, #3]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d115      	bne.n	800687e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800685e:	2001      	movs	r0, #1
 8006860:	f7fa fa7a 	bl	8000d58 <HAL_Delay>
      ms++;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	3301      	adds	r3, #1
 8006868:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f001 f972 	bl	8007b54 <USB_GetMode>
 8006870:	4603      	mov	r3, r0
 8006872:	2b01      	cmp	r3, #1
 8006874:	d01e      	beq.n	80068b4 <USB_SetCurrentMode+0x84>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2b31      	cmp	r3, #49	; 0x31
 800687a:	d9f0      	bls.n	800685e <USB_SetCurrentMode+0x2e>
 800687c:	e01a      	b.n	80068b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800687e:	78fb      	ldrb	r3, [r7, #3]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d115      	bne.n	80068b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006890:	2001      	movs	r0, #1
 8006892:	f7fa fa61 	bl	8000d58 <HAL_Delay>
      ms++;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	3301      	adds	r3, #1
 800689a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f001 f959 	bl	8007b54 <USB_GetMode>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d005      	beq.n	80068b4 <USB_SetCurrentMode+0x84>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2b31      	cmp	r3, #49	; 0x31
 80068ac:	d9f0      	bls.n	8006890 <USB_SetCurrentMode+0x60>
 80068ae:	e001      	b.n	80068b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e005      	b.n	80068c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b32      	cmp	r3, #50	; 0x32
 80068b8:	d101      	bne.n	80068be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e000      	b.n	80068c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068c8:	b084      	sub	sp, #16
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b086      	sub	sp, #24
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80068d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80068e2:	2300      	movs	r3, #0
 80068e4:	613b      	str	r3, [r7, #16]
 80068e6:	e009      	b.n	80068fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	3340      	adds	r3, #64	; 0x40
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	2200      	movs	r2, #0
 80068f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	3301      	adds	r3, #1
 80068fa:	613b      	str	r3, [r7, #16]
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	2b0e      	cmp	r3, #14
 8006900:	d9f2      	bls.n	80068e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006904:	2b00      	cmp	r3, #0
 8006906:	d11c      	bne.n	8006942 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006916:	f043 0302 	orr.w	r3, r3, #2
 800691a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006920:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006938:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	639a      	str	r2, [r3, #56]	; 0x38
 8006940:	e00b      	b.n	800695a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006946:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006952:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006960:	461a      	mov	r2, r3
 8006962:	2300      	movs	r3, #0
 8006964:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696c:	4619      	mov	r1, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006974:	461a      	mov	r2, r3
 8006976:	680b      	ldr	r3, [r1, #0]
 8006978:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800697a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697c:	2b01      	cmp	r3, #1
 800697e:	d10c      	bne.n	800699a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006982:	2b00      	cmp	r3, #0
 8006984:	d104      	bne.n	8006990 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006986:	2100      	movs	r1, #0
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f945 	bl	8006c18 <USB_SetDevSpeed>
 800698e:	e008      	b.n	80069a2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006990:	2101      	movs	r1, #1
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f940 	bl	8006c18 <USB_SetDevSpeed>
 8006998:	e003      	b.n	80069a2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800699a:	2103      	movs	r1, #3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f93b 	bl	8006c18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069a2:	2110      	movs	r1, #16
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f8f3 	bl	8006b90 <USB_FlushTxFifo>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f90f 	bl	8006bd8 <USB_FlushRxFifo>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ca:	461a      	mov	r2, r3
 80069cc:	2300      	movs	r3, #0
 80069ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d6:	461a      	mov	r2, r3
 80069d8:	2300      	movs	r3, #0
 80069da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e2:	461a      	mov	r2, r3
 80069e4:	2300      	movs	r3, #0
 80069e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069e8:	2300      	movs	r3, #0
 80069ea:	613b      	str	r3, [r7, #16]
 80069ec:	e043      	b.n	8006a76 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a04:	d118      	bne.n	8006a38 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10a      	bne.n	8006a22 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a18:	461a      	mov	r2, r3
 8006a1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	e013      	b.n	8006a4a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2e:	461a      	mov	r2, r3
 8006a30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a34:	6013      	str	r3, [r2, #0]
 8006a36:	e008      	b.n	8006a4a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a44:	461a      	mov	r2, r3
 8006a46:	2300      	movs	r3, #0
 8006a48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	015a      	lsls	r2, r3, #5
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a56:	461a      	mov	r2, r3
 8006a58:	2300      	movs	r3, #0
 8006a5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a68:	461a      	mov	r2, r3
 8006a6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	3301      	adds	r3, #1
 8006a74:	613b      	str	r3, [r7, #16]
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d3b7      	bcc.n	80069ee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a7e:	2300      	movs	r3, #0
 8006a80:	613b      	str	r3, [r7, #16]
 8006a82:	e043      	b.n	8006b0c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a9a:	d118      	bne.n	8006ace <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10a      	bne.n	8006ab8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	e013      	b.n	8006ae0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	e008      	b.n	8006ae0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ada:	461a      	mov	r2, r3
 8006adc:	2300      	movs	r3, #0
 8006ade:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aec:	461a      	mov	r2, r3
 8006aee:	2300      	movs	r3, #0
 8006af0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afe:	461a      	mov	r2, r3
 8006b00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	613b      	str	r3, [r7, #16]
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d3b7      	bcc.n	8006a84 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b26:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b34:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d105      	bne.n	8006b48 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	f043 0210 	orr.w	r2, r3, #16
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	699a      	ldr	r2, [r3, #24]
 8006b4c:	4b0f      	ldr	r3, [pc, #60]	; (8006b8c <USB_DevInit+0x2c4>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d005      	beq.n	8006b66 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	f043 0208 	orr.w	r2, r3, #8
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d107      	bne.n	8006b7c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b74:	f043 0304 	orr.w	r3, r3, #4
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b88:	b004      	add	sp, #16
 8006b8a:	4770      	bx	lr
 8006b8c:	803c3800 	.word	0x803c3800

08006b90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	019b      	lsls	r3, r3, #6
 8006ba2:	f043 0220 	orr.w	r2, r3, #32
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	3301      	adds	r3, #1
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	4a08      	ldr	r2, [pc, #32]	; (8006bd4 <USB_FlushTxFifo+0x44>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d901      	bls.n	8006bba <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e006      	b.n	8006bc8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	2b20      	cmp	r3, #32
 8006bc4:	d0f1      	beq.n	8006baa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	00030d40 	.word	0x00030d40

08006bd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2210      	movs	r2, #16
 8006be8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3301      	adds	r3, #1
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	4a08      	ldr	r2, [pc, #32]	; (8006c14 <USB_FlushRxFifo+0x3c>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d901      	bls.n	8006bfa <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e006      	b.n	8006c08 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	f003 0310 	and.w	r3, r3, #16
 8006c02:	2b10      	cmp	r3, #16
 8006c04:	d0f1      	beq.n	8006bea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr
 8006c14:	00030d40 	.word	0x00030d40

08006c18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	460b      	mov	r3, r1
 8006c22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	78fb      	ldrb	r3, [r7, #3]
 8006c32:	68f9      	ldr	r1, [r7, #12]
 8006c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b087      	sub	sp, #28
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f003 0306 	and.w	r3, r3, #6
 8006c62:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d102      	bne.n	8006c70 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	75fb      	strb	r3, [r7, #23]
 8006c6e:	e00a      	b.n	8006c86 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d002      	beq.n	8006c7c <USB_GetDevSpeed+0x32>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b06      	cmp	r3, #6
 8006c7a:	d102      	bne.n	8006c82 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	75fb      	strb	r3, [r7, #23]
 8006c80:	e001      	b.n	8006c86 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006c82:	230f      	movs	r3, #15
 8006c84:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	371c      	adds	r7, #28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	785b      	ldrb	r3, [r3, #1]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d13a      	bne.n	8006d26 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb6:	69da      	ldr	r2, [r3, #28]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	f003 030f 	and.w	r3, r3, #15
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	68f9      	ldr	r1, [r7, #12]
 8006cca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d155      	bne.n	8006d94 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	78db      	ldrb	r3, [r3, #3]
 8006d02:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d04:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	059b      	lsls	r3, r3, #22
 8006d0a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	0151      	lsls	r1, r2, #5
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	440a      	add	r2, r1
 8006d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d22:	6013      	str	r3, [r2, #0]
 8006d24:	e036      	b.n	8006d94 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2c:	69da      	ldr	r2, [r3, #28]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	f003 030f 	and.w	r3, r3, #15
 8006d36:	2101      	movs	r1, #1
 8006d38:	fa01 f303 	lsl.w	r3, r1, r3
 8006d3c:	041b      	lsls	r3, r3, #16
 8006d3e:	68f9      	ldr	r1, [r7, #12]
 8006d40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d44:	4313      	orrs	r3, r2
 8006d46:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d11a      	bne.n	8006d94 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	78db      	ldrb	r3, [r3, #3]
 8006d78:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d7a:	430b      	orrs	r3, r1
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	0151      	lsls	r1, r2, #5
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	440a      	add	r2, r1
 8006d86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d92:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
	...

08006da4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	785b      	ldrb	r3, [r3, #1]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d161      	bne.n	8006e84 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dd6:	d11f      	bne.n	8006e18 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	0151      	lsls	r1, r2, #5
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	440a      	add	r2, r1
 8006dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006df6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	0151      	lsls	r1, r2, #5
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	440a      	add	r2, r1
 8006e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	f003 030f 	and.w	r3, r3, #15
 8006e28:	2101      	movs	r1, #1
 8006e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	43db      	mvns	r3, r3
 8006e32:	68f9      	ldr	r1, [r7, #12]
 8006e34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e38:	4013      	ands	r3, r2
 8006e3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e42:	69da      	ldr	r2, [r3, #28]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	f003 030f 	and.w	r3, r3, #15
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	43db      	mvns	r3, r3
 8006e56:	68f9      	ldr	r1, [r7, #12]
 8006e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	0159      	lsls	r1, r3, #5
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	440b      	add	r3, r1
 8006e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	4b35      	ldr	r3, [pc, #212]	; (8006f54 <USB_DeactivateEndpoint+0x1b0>)
 8006e7e:	4013      	ands	r3, r2
 8006e80:	600b      	str	r3, [r1, #0]
 8006e82:	e060      	b.n	8006f46 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e9a:	d11f      	bne.n	8006edc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	0151      	lsls	r1, r2, #5
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	440a      	add	r2, r1
 8006eb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006eba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	0151      	lsls	r1, r2, #5
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	440a      	add	r2, r1
 8006ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ed6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006eda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	f003 030f 	and.w	r3, r3, #15
 8006eec:	2101      	movs	r1, #1
 8006eee:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef2:	041b      	lsls	r3, r3, #16
 8006ef4:	43db      	mvns	r3, r3
 8006ef6:	68f9      	ldr	r1, [r7, #12]
 8006ef8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006efc:	4013      	ands	r3, r2
 8006efe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f06:	69da      	ldr	r2, [r3, #28]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	f003 030f 	and.w	r3, r3, #15
 8006f10:	2101      	movs	r1, #1
 8006f12:	fa01 f303 	lsl.w	r3, r1, r3
 8006f16:	041b      	lsls	r3, r3, #16
 8006f18:	43db      	mvns	r3, r3
 8006f1a:	68f9      	ldr	r1, [r7, #12]
 8006f1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f20:	4013      	ands	r3, r2
 8006f22:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	0159      	lsls	r1, r3, #5
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	440b      	add	r3, r1
 8006f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3e:	4619      	mov	r1, r3
 8006f40:	4b05      	ldr	r3, [pc, #20]	; (8006f58 <USB_DeactivateEndpoint+0x1b4>)
 8006f42:	4013      	ands	r3, r2
 8006f44:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	ec337800 	.word	0xec337800
 8006f58:	eff37800 	.word	0xeff37800

08006f5c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b08a      	sub	sp, #40	; 0x28
 8006f60:	af02      	add	r7, sp, #8
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	4613      	mov	r3, r2
 8006f68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	785b      	ldrb	r3, [r3, #1]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	f040 815c 	bne.w	8007236 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d132      	bne.n	8006fec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	0151      	lsls	r1, r2, #5
 8006f98:	69fa      	ldr	r2, [r7, #28]
 8006f9a:	440a      	add	r2, r1
 8006f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fa0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fa4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006fa8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	015a      	lsls	r2, r3, #5
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	0151      	lsls	r1, r2, #5
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	440a      	add	r2, r1
 8006fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	015a      	lsls	r2, r3, #5
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	69ba      	ldr	r2, [r7, #24]
 8006fda:	0151      	lsls	r1, r2, #5
 8006fdc:	69fa      	ldr	r2, [r7, #28]
 8006fde:	440a      	add	r2, r1
 8006fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fe4:	0cdb      	lsrs	r3, r3, #19
 8006fe6:	04db      	lsls	r3, r3, #19
 8006fe8:	6113      	str	r3, [r2, #16]
 8006fea:	e074      	b.n	80070d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	69ba      	ldr	r2, [r7, #24]
 8006ffc:	0151      	lsls	r1, r2, #5
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	440a      	add	r2, r1
 8007002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007006:	0cdb      	lsrs	r3, r3, #19
 8007008:	04db      	lsls	r3, r3, #19
 800700a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	015a      	lsls	r2, r3, #5
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	4413      	add	r3, r2
 8007014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	0151      	lsls	r1, r2, #5
 800701e:	69fa      	ldr	r2, [r7, #28]
 8007020:	440a      	add	r2, r1
 8007022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007026:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800702a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800702e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	4413      	add	r3, r2
 8007038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	6959      	ldr	r1, [r3, #20]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	440b      	add	r3, r1
 8007048:	1e59      	subs	r1, r3, #1
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007052:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007054:	4b9d      	ldr	r3, [pc, #628]	; (80072cc <USB_EPStartXfer+0x370>)
 8007056:	400b      	ands	r3, r1
 8007058:	69b9      	ldr	r1, [r7, #24]
 800705a:	0148      	lsls	r0, r1, #5
 800705c:	69f9      	ldr	r1, [r7, #28]
 800705e:	4401      	add	r1, r0
 8007060:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007064:	4313      	orrs	r3, r2
 8007066:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007074:	691a      	ldr	r2, [r3, #16]
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800707e:	69b9      	ldr	r1, [r7, #24]
 8007080:	0148      	lsls	r0, r1, #5
 8007082:	69f9      	ldr	r1, [r7, #28]
 8007084:	4401      	add	r1, r0
 8007086:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800708a:	4313      	orrs	r3, r2
 800708c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	78db      	ldrb	r3, [r3, #3]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d11f      	bne.n	80070d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	4413      	add	r3, r2
 800709e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	0151      	lsls	r1, r2, #5
 80070a8:	69fa      	ldr	r2, [r7, #28]
 80070aa:	440a      	add	r2, r1
 80070ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80070b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	0151      	lsls	r1, r2, #5
 80070c8:	69fa      	ldr	r2, [r7, #28]
 80070ca:	440a      	add	r2, r1
 80070cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80070d6:	79fb      	ldrb	r3, [r7, #7]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d14b      	bne.n	8007174 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d009      	beq.n	80070f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f0:	461a      	mov	r2, r3
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	78db      	ldrb	r3, [r3, #3]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d128      	bne.n	8007152 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800710c:	2b00      	cmp	r3, #0
 800710e:	d110      	bne.n	8007132 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	0151      	lsls	r1, r2, #5
 8007122:	69fa      	ldr	r2, [r7, #28]
 8007124:	440a      	add	r2, r1
 8007126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800712a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800712e:	6013      	str	r3, [r2, #0]
 8007130:	e00f      	b.n	8007152 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	4413      	add	r3, r2
 800713a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	0151      	lsls	r1, r2, #5
 8007144:	69fa      	ldr	r2, [r7, #28]
 8007146:	440a      	add	r2, r1
 8007148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800714c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007150:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	4413      	add	r3, r2
 800715a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	0151      	lsls	r1, r2, #5
 8007164:	69fa      	ldr	r2, [r7, #28]
 8007166:	440a      	add	r2, r1
 8007168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800716c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007170:	6013      	str	r3, [r2, #0]
 8007172:	e12f      	b.n	80073d4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	0151      	lsls	r1, r2, #5
 8007186:	69fa      	ldr	r2, [r7, #28]
 8007188:	440a      	add	r2, r1
 800718a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800718e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007192:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	78db      	ldrb	r3, [r3, #3]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d015      	beq.n	80071c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 8117 	beq.w	80073d4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	f003 030f 	and.w	r3, r3, #15
 80071b6:	2101      	movs	r1, #1
 80071b8:	fa01 f303 	lsl.w	r3, r1, r3
 80071bc:	69f9      	ldr	r1, [r7, #28]
 80071be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071c2:	4313      	orrs	r3, r2
 80071c4:	634b      	str	r3, [r1, #52]	; 0x34
 80071c6:	e105      	b.n	80073d4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d110      	bne.n	80071fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	0151      	lsls	r1, r2, #5
 80071ea:	69fa      	ldr	r2, [r7, #28]
 80071ec:	440a      	add	r2, r1
 80071ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071f6:	6013      	str	r3, [r2, #0]
 80071f8:	e00f      	b.n	800721a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	4413      	add	r3, r2
 8007202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	69ba      	ldr	r2, [r7, #24]
 800720a:	0151      	lsls	r1, r2, #5
 800720c:	69fa      	ldr	r2, [r7, #28]
 800720e:	440a      	add	r2, r1
 8007210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007218:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	68d9      	ldr	r1, [r3, #12]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	781a      	ldrb	r2, [r3, #0]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	b298      	uxth	r0, r3
 8007228:	79fb      	ldrb	r3, [r7, #7]
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	4603      	mov	r3, r0
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 fa2b 	bl	800768a <USB_WritePacket>
 8007234:	e0ce      	b.n	80073d4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	4413      	add	r3, r2
 800723e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	0151      	lsls	r1, r2, #5
 8007248:	69fa      	ldr	r2, [r7, #28]
 800724a:	440a      	add	r2, r1
 800724c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007250:	0cdb      	lsrs	r3, r3, #19
 8007252:	04db      	lsls	r3, r3, #19
 8007254:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	4413      	add	r3, r2
 800725e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	69ba      	ldr	r2, [r7, #24]
 8007266:	0151      	lsls	r1, r2, #5
 8007268:	69fa      	ldr	r2, [r7, #28]
 800726a:	440a      	add	r2, r1
 800726c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007270:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007274:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007278:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d126      	bne.n	80072d0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	4413      	add	r3, r2
 800728a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728e:	691a      	ldr	r2, [r3, #16]
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007298:	69b9      	ldr	r1, [r7, #24]
 800729a:	0148      	lsls	r0, r1, #5
 800729c:	69f9      	ldr	r1, [r7, #28]
 800729e:	4401      	add	r1, r0
 80072a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072a4:	4313      	orrs	r3, r2
 80072a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	015a      	lsls	r2, r3, #5
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	69ba      	ldr	r2, [r7, #24]
 80072b8:	0151      	lsls	r1, r2, #5
 80072ba:	69fa      	ldr	r2, [r7, #28]
 80072bc:	440a      	add	r2, r1
 80072be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072c6:	6113      	str	r3, [r2, #16]
 80072c8:	e036      	b.n	8007338 <USB_EPStartXfer+0x3dc>
 80072ca:	bf00      	nop
 80072cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	695a      	ldr	r2, [r3, #20]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	4413      	add	r3, r2
 80072da:	1e5a      	subs	r2, r3, #1
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f2:	691a      	ldr	r2, [r3, #16]
 80072f4:	8afb      	ldrh	r3, [r7, #22]
 80072f6:	04d9      	lsls	r1, r3, #19
 80072f8:	4b39      	ldr	r3, [pc, #228]	; (80073e0 <USB_EPStartXfer+0x484>)
 80072fa:	400b      	ands	r3, r1
 80072fc:	69b9      	ldr	r1, [r7, #24]
 80072fe:	0148      	lsls	r0, r1, #5
 8007300:	69f9      	ldr	r1, [r7, #28]
 8007302:	4401      	add	r1, r0
 8007304:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007308:	4313      	orrs	r3, r2
 800730a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007318:	691a      	ldr	r2, [r3, #16]
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	8af9      	ldrh	r1, [r7, #22]
 8007320:	fb01 f303 	mul.w	r3, r1, r3
 8007324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007328:	69b9      	ldr	r1, [r7, #24]
 800732a:	0148      	lsls	r0, r1, #5
 800732c:	69f9      	ldr	r1, [r7, #28]
 800732e:	4401      	add	r1, r0
 8007330:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007334:	4313      	orrs	r3, r2
 8007336:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007338:	79fb      	ldrb	r3, [r7, #7]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d10d      	bne.n	800735a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d009      	beq.n	800735a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	68d9      	ldr	r1, [r3, #12]
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	4413      	add	r3, r2
 8007352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007356:	460a      	mov	r2, r1
 8007358:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	78db      	ldrb	r3, [r3, #3]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d128      	bne.n	80073b4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800736e:	2b00      	cmp	r3, #0
 8007370:	d110      	bne.n	8007394 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	0151      	lsls	r1, r2, #5
 8007384:	69fa      	ldr	r2, [r7, #28]
 8007386:	440a      	add	r2, r1
 8007388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800738c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007390:	6013      	str	r3, [r2, #0]
 8007392:	e00f      	b.n	80073b4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	69ba      	ldr	r2, [r7, #24]
 80073a4:	0151      	lsls	r1, r2, #5
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	440a      	add	r2, r1
 80073aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	0151      	lsls	r1, r2, #5
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	440a      	add	r2, r1
 80073ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3720      	adds	r7, #32
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	1ff80000 	.word	0x1ff80000

080073e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	4613      	mov	r3, r2
 80073f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	785b      	ldrb	r3, [r3, #1]
 8007400:	2b01      	cmp	r3, #1
 8007402:	f040 80cd 	bne.w	80075a0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d132      	bne.n	8007474 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	4413      	add	r3, r2
 8007416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	0151      	lsls	r1, r2, #5
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	440a      	add	r2, r1
 8007424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007428:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800742c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007430:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	015a      	lsls	r2, r3, #5
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	4413      	add	r3, r2
 800743a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	0151      	lsls	r1, r2, #5
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	440a      	add	r2, r1
 8007448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800744c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007450:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	4413      	add	r3, r2
 800745a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	0151      	lsls	r1, r2, #5
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	440a      	add	r2, r1
 8007468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800746c:	0cdb      	lsrs	r3, r3, #19
 800746e:	04db      	lsls	r3, r3, #19
 8007470:	6113      	str	r3, [r2, #16]
 8007472:	e04e      	b.n	8007512 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	0151      	lsls	r1, r2, #5
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	440a      	add	r2, r1
 800748a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800748e:	0cdb      	lsrs	r3, r3, #19
 8007490:	04db      	lsls	r3, r3, #19
 8007492:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	4413      	add	r3, r2
 800749c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	0151      	lsls	r1, r2, #5
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	440a      	add	r2, r1
 80074aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074b6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	695a      	ldr	r2, [r3, #20]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d903      	bls.n	80074cc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	689a      	ldr	r2, [r3, #8]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	0151      	lsls	r1, r2, #5
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	440a      	add	r2, r1
 80074e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f8:	691a      	ldr	r2, [r3, #16]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007502:	6939      	ldr	r1, [r7, #16]
 8007504:	0148      	lsls	r0, r1, #5
 8007506:	6979      	ldr	r1, [r7, #20]
 8007508:	4401      	add	r1, r0
 800750a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800750e:	4313      	orrs	r3, r2
 8007510:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007512:	79fb      	ldrb	r3, [r7, #7]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d11e      	bne.n	8007556 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d009      	beq.n	8007534 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	015a      	lsls	r2, r3, #5
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	4413      	add	r3, r2
 8007528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800752c:	461a      	mov	r2, r3
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	0151      	lsls	r1, r2, #5
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	440a      	add	r2, r1
 800754a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800754e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	e092      	b.n	800767c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	0151      	lsls	r1, r2, #5
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	440a      	add	r2, r1
 800756c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007570:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007574:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	695b      	ldr	r3, [r3, #20]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d07e      	beq.n	800767c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	f003 030f 	and.w	r3, r3, #15
 800758e:	2101      	movs	r1, #1
 8007590:	fa01 f303 	lsl.w	r3, r1, r3
 8007594:	6979      	ldr	r1, [r7, #20]
 8007596:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800759a:	4313      	orrs	r3, r2
 800759c:	634b      	str	r3, [r1, #52]	; 0x34
 800759e:	e06d      	b.n	800767c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	0151      	lsls	r1, r2, #5
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	440a      	add	r2, r1
 80075b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075ba:	0cdb      	lsrs	r3, r3, #19
 80075bc:	04db      	lsls	r3, r3, #19
 80075be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	0151      	lsls	r1, r2, #5
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	440a      	add	r2, r1
 80075d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075e2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	695b      	ldr	r3, [r3, #20]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	693a      	ldr	r2, [r7, #16]
 8007604:	0151      	lsls	r1, r2, #5
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	440a      	add	r2, r1
 800760a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800760e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007612:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007620:	691a      	ldr	r2, [r3, #16]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800762a:	6939      	ldr	r1, [r7, #16]
 800762c:	0148      	lsls	r0, r1, #5
 800762e:	6979      	ldr	r1, [r7, #20]
 8007630:	4401      	add	r1, r0
 8007632:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007636:	4313      	orrs	r3, r2
 8007638:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800763a:	79fb      	ldrb	r3, [r7, #7]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d10d      	bne.n	800765c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d009      	beq.n	800765c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	68d9      	ldr	r1, [r3, #12]
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	4413      	add	r3, r2
 8007654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007658:	460a      	mov	r2, r1
 800765a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	4413      	add	r3, r2
 8007664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	0151      	lsls	r1, r2, #5
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	440a      	add	r2, r1
 8007672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007676:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800767a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	371c      	adds	r7, #28
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800768a:	b480      	push	{r7}
 800768c:	b089      	sub	sp, #36	; 0x24
 800768e:	af00      	add	r7, sp, #0
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	60b9      	str	r1, [r7, #8]
 8007694:	4611      	mov	r1, r2
 8007696:	461a      	mov	r2, r3
 8007698:	460b      	mov	r3, r1
 800769a:	71fb      	strb	r3, [r7, #7]
 800769c:	4613      	mov	r3, r2
 800769e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80076a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d123      	bne.n	80076f8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80076b0:	88bb      	ldrh	r3, [r7, #4]
 80076b2:	3303      	adds	r3, #3
 80076b4:	089b      	lsrs	r3, r3, #2
 80076b6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80076b8:	2300      	movs	r3, #0
 80076ba:	61bb      	str	r3, [r7, #24]
 80076bc:	e018      	b.n	80076f0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80076be:	79fb      	ldrb	r3, [r7, #7]
 80076c0:	031a      	lsls	r2, r3, #12
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	4413      	add	r3, r2
 80076c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076ca:	461a      	mov	r2, r3
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	3301      	adds	r3, #1
 80076d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	3301      	adds	r3, #1
 80076dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	3301      	adds	r3, #1
 80076e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	3301      	adds	r3, #1
 80076e8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	3301      	adds	r3, #1
 80076ee:	61bb      	str	r3, [r7, #24]
 80076f0:	69ba      	ldr	r2, [r7, #24]
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d3e2      	bcc.n	80076be <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3724      	adds	r7, #36	; 0x24
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007706:	b480      	push	{r7}
 8007708:	b08b      	sub	sp, #44	; 0x2c
 800770a:	af00      	add	r7, sp, #0
 800770c:	60f8      	str	r0, [r7, #12]
 800770e:	60b9      	str	r1, [r7, #8]
 8007710:	4613      	mov	r3, r2
 8007712:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800771c:	88fb      	ldrh	r3, [r7, #6]
 800771e:	089b      	lsrs	r3, r3, #2
 8007720:	b29b      	uxth	r3, r3
 8007722:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007724:	88fb      	ldrh	r3, [r7, #6]
 8007726:	f003 0303 	and.w	r3, r3, #3
 800772a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800772c:	2300      	movs	r3, #0
 800772e:	623b      	str	r3, [r7, #32]
 8007730:	e014      	b.n	800775c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773c:	601a      	str	r2, [r3, #0]
    pDest++;
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	3301      	adds	r3, #1
 8007742:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007746:	3301      	adds	r3, #1
 8007748:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	3301      	adds	r3, #1
 800774e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	3301      	adds	r3, #1
 8007754:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	3301      	adds	r3, #1
 800775a:	623b      	str	r3, [r7, #32]
 800775c:	6a3a      	ldr	r2, [r7, #32]
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	429a      	cmp	r2, r3
 8007762:	d3e6      	bcc.n	8007732 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007764:	8bfb      	ldrh	r3, [r7, #30]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d01e      	beq.n	80077a8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800776a:	2300      	movs	r3, #0
 800776c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007774:	461a      	mov	r2, r3
 8007776:	f107 0310 	add.w	r3, r7, #16
 800777a:	6812      	ldr	r2, [r2, #0]
 800777c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800777e:	693a      	ldr	r2, [r7, #16]
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	b2db      	uxtb	r3, r3
 8007784:	00db      	lsls	r3, r3, #3
 8007786:	fa22 f303 	lsr.w	r3, r2, r3
 800778a:	b2da      	uxtb	r2, r3
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	701a      	strb	r2, [r3, #0]
      i++;
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	3301      	adds	r3, #1
 8007794:	623b      	str	r3, [r7, #32]
      pDest++;
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007798:	3301      	adds	r3, #1
 800779a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800779c:	8bfb      	ldrh	r3, [r7, #30]
 800779e:	3b01      	subs	r3, #1
 80077a0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80077a2:	8bfb      	ldrh	r3, [r7, #30]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1ea      	bne.n	800777e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	372c      	adds	r7, #44	; 0x2c
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b085      	sub	sp, #20
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	785b      	ldrb	r3, [r3, #1]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d12c      	bne.n	800782c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	db12      	blt.n	800780a <USB_EPSetStall+0x54>
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00f      	beq.n	800780a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	015a      	lsls	r2, r3, #5
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	4413      	add	r3, r2
 80077f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	0151      	lsls	r1, r2, #5
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	440a      	add	r2, r1
 8007800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007804:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007808:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	015a      	lsls	r2, r3, #5
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	4413      	add	r3, r2
 8007812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	0151      	lsls	r1, r2, #5
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	440a      	add	r2, r1
 8007820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007828:	6013      	str	r3, [r2, #0]
 800782a:	e02b      	b.n	8007884 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	db12      	blt.n	8007864 <USB_EPSetStall+0xae>
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00f      	beq.n	8007864 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	4413      	add	r3, r2
 800784c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	0151      	lsls	r1, r2, #5
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	440a      	add	r2, r1
 800785a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800785e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007862:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	4413      	add	r3, r2
 800786c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	0151      	lsls	r1, r2, #5
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	440a      	add	r2, r1
 800787a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800787e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007882:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007892:	b480      	push	{r7}
 8007894:	b085      	sub	sp, #20
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	785b      	ldrb	r3, [r3, #1]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d128      	bne.n	8007900 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	0151      	lsls	r1, r2, #5
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	440a      	add	r2, r1
 80078c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	78db      	ldrb	r3, [r3, #3]
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d003      	beq.n	80078de <USB_EPClearStall+0x4c>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	78db      	ldrb	r3, [r3, #3]
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d138      	bne.n	8007950 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	015a      	lsls	r2, r3, #5
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	0151      	lsls	r1, r2, #5
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	440a      	add	r2, r1
 80078f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078fc:	6013      	str	r3, [r2, #0]
 80078fe:	e027      	b.n	8007950 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	4413      	add	r3, r2
 8007908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	0151      	lsls	r1, r2, #5
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	440a      	add	r2, r1
 8007916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800791a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800791e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	78db      	ldrb	r3, [r3, #3]
 8007924:	2b03      	cmp	r3, #3
 8007926:	d003      	beq.n	8007930 <USB_EPClearStall+0x9e>
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	78db      	ldrb	r3, [r3, #3]
 800792c:	2b02      	cmp	r3, #2
 800792e:	d10f      	bne.n	8007950 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4413      	add	r3, r2
 8007938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	0151      	lsls	r1, r2, #5
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	440a      	add	r2, r1
 8007946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800794a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800794e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800795e:	b480      	push	{r7}
 8007960:	b085      	sub	sp, #20
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	460b      	mov	r3, r1
 8007968:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800797c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007980:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	78fb      	ldrb	r3, [r7, #3]
 800798c:	011b      	lsls	r3, r3, #4
 800798e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007992:	68f9      	ldr	r1, [r7, #12]
 8007994:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007998:	4313      	orrs	r3, r2
 800799a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b085      	sub	sp, #20
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079c4:	f023 0303 	bic.w	r3, r3, #3
 80079c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079d8:	f023 0302 	bic.w	r3, r3, #2
 80079dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a06:	f023 0303 	bic.w	r3, r3, #3
 8007a0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a1a:	f043 0302 	orr.w	r3, r3, #2
 8007a1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3714      	adds	r7, #20
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b085      	sub	sp, #20
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	4013      	ands	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007a46:	68fb      	ldr	r3, [r7, #12]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	4013      	ands	r3, r2
 8007a76:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	0c1b      	lsrs	r3, r3, #16
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aa4:	69db      	ldr	r3, [r3, #28]
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	b29b      	uxth	r3, r3
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007acc:	78fb      	ldrb	r3, [r7, #3]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae2:	695b      	ldr	r3, [r3, #20]
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007aea:	68bb      	ldr	r3, [r7, #8]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3714      	adds	r7, #20
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b087      	sub	sp, #28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	460b      	mov	r3, r1
 8007b02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b1a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007b1c:	78fb      	ldrb	r3, [r7, #3]
 8007b1e:	f003 030f 	and.w	r3, r3, #15
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	fa22 f303 	lsr.w	r3, r2, r3
 8007b28:	01db      	lsls	r3, r3, #7
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007b32:	78fb      	ldrb	r3, [r7, #3]
 8007b34:	015a      	lsls	r2, r3, #5
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	4413      	add	r3, r2
 8007b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	4013      	ands	r3, r2
 8007b44:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b46:	68bb      	ldr	r3, [r7, #8]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	371c      	adds	r7, #28
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	f003 0301 	and.w	r3, r3, #1
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b8a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007b8e:	f023 0307 	bic.w	r3, r3, #7
 8007b92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ba6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
	...

08007bb8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	607a      	str	r2, [r7, #4]
 8007bc4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	333c      	adds	r3, #60	; 0x3c
 8007bce:	3304      	adds	r3, #4
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	4a26      	ldr	r2, [pc, #152]	; (8007c70 <USB_EP0_OutStart+0xb8>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d90a      	bls.n	8007bf2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bec:	d101      	bne.n	8007bf2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	e037      	b.n	8007c62 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c20:	f043 0318 	orr.w	r3, r3, #24
 8007c24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c34:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007c38:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007c3a:	7afb      	ldrb	r3, [r7, #11]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d10f      	bne.n	8007c60 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c46:	461a      	mov	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c5a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007c5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	371c      	adds	r7, #28
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	4f54300a 	.word	0x4f54300a

08007c74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	3301      	adds	r3, #1
 8007c84:	60fb      	str	r3, [r7, #12]
 8007c86:	4a13      	ldr	r2, [pc, #76]	; (8007cd4 <USB_CoreReset+0x60>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d901      	bls.n	8007c90 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e01a      	b.n	8007cc6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	daf3      	bge.n	8007c80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	f043 0201 	orr.w	r2, r3, #1
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	3301      	adds	r3, #1
 8007cac:	60fb      	str	r3, [r7, #12]
 8007cae:	4a09      	ldr	r2, [pc, #36]	; (8007cd4 <USB_CoreReset+0x60>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d901      	bls.n	8007cb8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e006      	b.n	8007cc6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d0f1      	beq.n	8007ca8 <USB_CoreReset+0x34>

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	00030d40 	.word	0x00030d40

08007cd8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007cdc:	4904      	ldr	r1, [pc, #16]	; (8007cf0 <MX_FATFS_Init+0x18>)
 8007cde:	4805      	ldr	r0, [pc, #20]	; (8007cf4 <MX_FATFS_Init+0x1c>)
 8007ce0:	f001 ff30 	bl	8009b44 <FATFS_LinkDriver>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	4b03      	ldr	r3, [pc, #12]	; (8007cf8 <MX_FATFS_Init+0x20>)
 8007cea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007cec:	bf00      	nop
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	20000664 	.word	0x20000664
 8007cf4:	0800a724 	.word	0x0800a724
 8007cf8:	20000660 	.word	0x20000660

08007cfc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007d06:	f000 f896 	bl	8007e36 <BSP_SD_IsDetected>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d001      	beq.n	8007d14 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e012      	b.n	8007d3a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007d14:	480b      	ldr	r0, [pc, #44]	; (8007d44 <BSP_SD_Init+0x48>)
 8007d16:	f7fb fcfb 	bl	8003710 <HAL_SD_Init>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007d1e:	79fb      	ldrb	r3, [r7, #7]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d109      	bne.n	8007d38 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007d24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d28:	4806      	ldr	r0, [pc, #24]	; (8007d44 <BSP_SD_Init+0x48>)
 8007d2a:	f7fc fac7 	bl	80042bc <HAL_SD_ConfigWideBusOperation>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007d38:	79fb      	ldrb	r3, [r7, #7]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	200005d8 	.word	0x200005d8

08007d48 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	68f9      	ldr	r1, [r7, #12]
 8007d5e:	4806      	ldr	r0, [pc, #24]	; (8007d78 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007d60:	f7fb fd84 	bl	800386c <HAL_SD_ReadBlocks_DMA>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3718      	adds	r7, #24
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	200005d8 	.word	0x200005d8

08007d7c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	68f9      	ldr	r1, [r7, #12]
 8007d92:	4806      	ldr	r0, [pc, #24]	; (8007dac <BSP_SD_WriteBlocks_DMA+0x30>)
 8007d94:	f7fb fe4c 	bl	8003a30 <HAL_SD_WriteBlocks_DMA>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3718      	adds	r7, #24
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	200005d8 	.word	0x200005d8

08007db0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007db4:	4805      	ldr	r0, [pc, #20]	; (8007dcc <BSP_SD_GetCardState+0x1c>)
 8007db6:	f7fc fb1b 	bl	80043f0 <HAL_SD_GetCardState>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	bf14      	ite	ne
 8007dc0:	2301      	movne	r3, #1
 8007dc2:	2300      	moveq	r3, #0
 8007dc4:	b2db      	uxtb	r3, r3
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	200005d8 	.word	0x200005d8

08007dd0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007dd8:	6879      	ldr	r1, [r7, #4]
 8007dda:	4803      	ldr	r0, [pc, #12]	; (8007de8 <BSP_SD_GetCardInfo+0x18>)
 8007ddc:	f7fc fa42 	bl	8004264 <HAL_SD_GetCardInfo>
}
 8007de0:	bf00      	nop
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	200005d8 	.word	0x200005d8

08007dec <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007df4:	f000 f818 	bl	8007e28 <BSP_SD_AbortCallback>
}
 8007df8:	bf00      	nop
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007e08:	f000 f9a8 	bl	800815c <BSP_SD_WriteCpltCallback>
}
 8007e0c:	bf00      	nop
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007e1c:	f000 f9aa 	bl	8008174 <BSP_SD_ReadCpltCallback>
}
 8007e20:	bf00      	nop
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	af00      	add	r7, sp, #0

}
 8007e2c:	bf00      	nop
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b082      	sub	sp, #8
 8007e3a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007e40:	f000 f80c 	bl	8007e5c <BSP_PlatformIsDetected>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007e4e:	79fb      	ldrb	r3, [r7, #7]
 8007e50:	b2db      	uxtb	r3, r3
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
	...

08007e5c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007e62:	2301      	movs	r3, #1
 8007e64:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007e66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007e6a:	4806      	ldr	r0, [pc, #24]	; (8007e84 <BSP_PlatformIsDetected+0x28>)
 8007e6c:	f7f9 fe54 	bl	8001b18 <HAL_GPIO_ReadPin>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d001      	beq.n	8007e7a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8007e76:	2300      	movs	r3, #0
 8007e78:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007e7a:	79fb      	ldrb	r3, [r7, #7]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3708      	adds	r7, #8
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	40020400 	.word	0x40020400

08007e88 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8007e90:	f7f8 ff56 	bl	8000d40 <HAL_GetTick>
 8007e94:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8007e96:	e006      	b.n	8007ea6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007e98:	f7ff ff8a 	bl	8007db0 <BSP_SD_GetCardState>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	e009      	b.n	8007eba <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8007ea6:	f7f8 ff4b 	bl	8000d40 <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d8f0      	bhi.n	8007e98 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007eb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
	...

08007ec4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	4603      	mov	r3, r0
 8007ecc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007ece:	4b0b      	ldr	r3, [pc, #44]	; (8007efc <SD_CheckStatus+0x38>)
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007ed4:	f7ff ff6c 	bl	8007db0 <BSP_SD_GetCardState>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d107      	bne.n	8007eee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007ede:	4b07      	ldr	r3, [pc, #28]	; (8007efc <SD_CheckStatus+0x38>)
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	f023 0301 	bic.w	r3, r3, #1
 8007ee8:	b2da      	uxtb	r2, r3
 8007eea:	4b04      	ldr	r3, [pc, #16]	; (8007efc <SD_CheckStatus+0x38>)
 8007eec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007eee:	4b03      	ldr	r3, [pc, #12]	; (8007efc <SD_CheckStatus+0x38>)
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	b2db      	uxtb	r3, r3
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	20000009 	.word	0x20000009

08007f00 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	4603      	mov	r3, r0
 8007f08:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007f0a:	f7ff fef7 	bl	8007cfc <BSP_SD_Init>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d107      	bne.n	8007f24 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007f14:	79fb      	ldrb	r3, [r7, #7]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7ff ffd4 	bl	8007ec4 <SD_CheckStatus>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	461a      	mov	r2, r3
 8007f20:	4b04      	ldr	r3, [pc, #16]	; (8007f34 <SD_initialize+0x34>)
 8007f22:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007f24:	4b03      	ldr	r3, [pc, #12]	; (8007f34 <SD_initialize+0x34>)
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	b2db      	uxtb	r3, r3
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	20000009 	.word	0x20000009

08007f38 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	4603      	mov	r3, r0
 8007f40:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007f42:	79fb      	ldrb	r3, [r7, #7]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7ff ffbd 	bl	8007ec4 <SD_CheckStatus>
 8007f4a:	4603      	mov	r3, r0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60b9      	str	r1, [r7, #8]
 8007f5c:	607a      	str	r2, [r7, #4]
 8007f5e:	603b      	str	r3, [r7, #0]
 8007f60:	4603      	mov	r3, r0
 8007f62:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007f68:	f247 5030 	movw	r0, #30000	; 0x7530
 8007f6c:	f7ff ff8c 	bl	8007e88 <SD_CheckStatusWithTimeout>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	da01      	bge.n	8007f7a <SD_read+0x26>
  {
    return res;
 8007f76:	7dfb      	ldrb	r3, [r7, #23]
 8007f78:	e03b      	b.n	8007ff2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8007f7a:	683a      	ldr	r2, [r7, #0]
 8007f7c:	6879      	ldr	r1, [r7, #4]
 8007f7e:	68b8      	ldr	r0, [r7, #8]
 8007f80:	f7ff fee2 	bl	8007d48 <BSP_SD_ReadBlocks_DMA>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d132      	bne.n	8007ff0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8007f8a:	4b1c      	ldr	r3, [pc, #112]	; (8007ffc <SD_read+0xa8>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8007f90:	f7f8 fed6 	bl	8000d40 <HAL_GetTick>
 8007f94:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007f96:	bf00      	nop
 8007f98:	4b18      	ldr	r3, [pc, #96]	; (8007ffc <SD_read+0xa8>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d108      	bne.n	8007fb2 <SD_read+0x5e>
 8007fa0:	f7f8 fece 	bl	8000d40 <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	f247 522f 	movw	r2, #29999	; 0x752f
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d9f2      	bls.n	8007f98 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8007fb2:	4b12      	ldr	r3, [pc, #72]	; (8007ffc <SD_read+0xa8>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d102      	bne.n	8007fc0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	75fb      	strb	r3, [r7, #23]
 8007fbe:	e017      	b.n	8007ff0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8007fc0:	4b0e      	ldr	r3, [pc, #56]	; (8007ffc <SD_read+0xa8>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007fc6:	f7f8 febb 	bl	8000d40 <HAL_GetTick>
 8007fca:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007fcc:	e007      	b.n	8007fde <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007fce:	f7ff feef 	bl	8007db0 <BSP_SD_GetCardState>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d102      	bne.n	8007fde <SD_read+0x8a>
          {
            res = RES_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8007fdc:	e008      	b.n	8007ff0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007fde:	f7f8 feaf 	bl	8000d40 <HAL_GetTick>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	f247 522f 	movw	r2, #29999	; 0x752f
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d9ee      	bls.n	8007fce <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8007ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3718      	adds	r7, #24
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	200001a0 	.word	0x200001a0

08008000 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	60b9      	str	r1, [r7, #8]
 8008008:	607a      	str	r2, [r7, #4]
 800800a:	603b      	str	r3, [r7, #0]
 800800c:	4603      	mov	r3, r0
 800800e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8008014:	4b24      	ldr	r3, [pc, #144]	; (80080a8 <SD_write+0xa8>)
 8008016:	2200      	movs	r2, #0
 8008018:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800801a:	f247 5030 	movw	r0, #30000	; 0x7530
 800801e:	f7ff ff33 	bl	8007e88 <SD_CheckStatusWithTimeout>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	da01      	bge.n	800802c <SD_write+0x2c>
  {
    return res;
 8008028:	7dfb      	ldrb	r3, [r7, #23]
 800802a:	e038      	b.n	800809e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	68b8      	ldr	r0, [r7, #8]
 8008032:	f7ff fea3 	bl	8007d7c <BSP_SD_WriteBlocks_DMA>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d12f      	bne.n	800809c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800803c:	f7f8 fe80 	bl	8000d40 <HAL_GetTick>
 8008040:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008042:	bf00      	nop
 8008044:	4b18      	ldr	r3, [pc, #96]	; (80080a8 <SD_write+0xa8>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d108      	bne.n	800805e <SD_write+0x5e>
 800804c:	f7f8 fe78 	bl	8000d40 <HAL_GetTick>
 8008050:	4602      	mov	r2, r0
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	f247 522f 	movw	r2, #29999	; 0x752f
 800805a:	4293      	cmp	r3, r2
 800805c:	d9f2      	bls.n	8008044 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800805e:	4b12      	ldr	r3, [pc, #72]	; (80080a8 <SD_write+0xa8>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d102      	bne.n	800806c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	75fb      	strb	r3, [r7, #23]
 800806a:	e017      	b.n	800809c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800806c:	4b0e      	ldr	r3, [pc, #56]	; (80080a8 <SD_write+0xa8>)
 800806e:	2200      	movs	r2, #0
 8008070:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008072:	f7f8 fe65 	bl	8000d40 <HAL_GetTick>
 8008076:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008078:	e007      	b.n	800808a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800807a:	f7ff fe99 	bl	8007db0 <BSP_SD_GetCardState>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d102      	bne.n	800808a <SD_write+0x8a>
          {
            res = RES_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	75fb      	strb	r3, [r7, #23]
            break;
 8008088:	e008      	b.n	800809c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800808a:	f7f8 fe59 	bl	8000d40 <HAL_GetTick>
 800808e:	4602      	mov	r2, r0
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	f247 522f 	movw	r2, #29999	; 0x752f
 8008098:	4293      	cmp	r3, r2
 800809a:	d9ee      	bls.n	800807a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800809c:	7dfb      	ldrb	r3, [r7, #23]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3718      	adds	r7, #24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	2000019c 	.word	0x2000019c

080080ac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b08c      	sub	sp, #48	; 0x30
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	4603      	mov	r3, r0
 80080b4:	603a      	str	r2, [r7, #0]
 80080b6:	71fb      	strb	r3, [r7, #7]
 80080b8:	460b      	mov	r3, r1
 80080ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80080c2:	4b25      	ldr	r3, [pc, #148]	; (8008158 <SD_ioctl+0xac>)
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d001      	beq.n	80080d4 <SD_ioctl+0x28>
 80080d0:	2303      	movs	r3, #3
 80080d2:	e03c      	b.n	800814e <SD_ioctl+0xa2>

  switch (cmd)
 80080d4:	79bb      	ldrb	r3, [r7, #6]
 80080d6:	2b03      	cmp	r3, #3
 80080d8:	d834      	bhi.n	8008144 <SD_ioctl+0x98>
 80080da:	a201      	add	r2, pc, #4	; (adr r2, 80080e0 <SD_ioctl+0x34>)
 80080dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e0:	080080f1 	.word	0x080080f1
 80080e4:	080080f9 	.word	0x080080f9
 80080e8:	08008111 	.word	0x08008111
 80080ec:	0800812b 	.word	0x0800812b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80080f6:	e028      	b.n	800814a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80080f8:	f107 030c 	add.w	r3, r7, #12
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7ff fe67 	bl	8007dd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800810e:	e01c      	b.n	800814a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008110:	f107 030c 	add.w	r3, r7, #12
 8008114:	4618      	mov	r0, r3
 8008116:	f7ff fe5b 	bl	8007dd0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811c:	b29a      	uxth	r2, r3
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008122:	2300      	movs	r3, #0
 8008124:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008128:	e00f      	b.n	800814a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800812a:	f107 030c 	add.w	r3, r7, #12
 800812e:	4618      	mov	r0, r3
 8008130:	f7ff fe4e 	bl	8007dd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	0a5a      	lsrs	r2, r3, #9
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008142:	e002      	b.n	800814a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008144:	2304      	movs	r3, #4
 8008146:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800814a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800814e:	4618      	mov	r0, r3
 8008150:	3730      	adds	r7, #48	; 0x30
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	20000009 	.word	0x20000009

0800815c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800815c:	b480      	push	{r7}
 800815e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008160:	4b03      	ldr	r3, [pc, #12]	; (8008170 <BSP_SD_WriteCpltCallback+0x14>)
 8008162:	2201      	movs	r2, #1
 8008164:	601a      	str	r2, [r3, #0]
}
 8008166:	bf00      	nop
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr
 8008170:	2000019c 	.word	0x2000019c

08008174 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008174:	b480      	push	{r7}
 8008176:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8008178:	4b03      	ldr	r3, [pc, #12]	; (8008188 <BSP_SD_ReadCpltCallback+0x14>)
 800817a:	2201      	movs	r2, #1
 800817c:	601a      	str	r2, [r3, #0]
}
 800817e:	bf00      	nop
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	200001a0 	.word	0x200001a0

0800818c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	460b      	mov	r3, r1
 8008196:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008198:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800819c:	f002 f9f8 	bl	800a590 <USBD_static_malloc>
 80081a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d105      	bne.n	80081b4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80081b0:	2302      	movs	r3, #2
 80081b2:	e066      	b.n	8008282 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	7c1b      	ldrb	r3, [r3, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d119      	bne.n	80081f8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80081c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081c8:	2202      	movs	r2, #2
 80081ca:	2181      	movs	r1, #129	; 0x81
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f002 f8bc 	bl	800a34a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80081d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081dc:	2202      	movs	r2, #2
 80081de:	2101      	movs	r1, #1
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f002 f8b2 	bl	800a34a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2210      	movs	r2, #16
 80081f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80081f6:	e016      	b.n	8008226 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80081f8:	2340      	movs	r3, #64	; 0x40
 80081fa:	2202      	movs	r2, #2
 80081fc:	2181      	movs	r1, #129	; 0x81
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f002 f8a3 	bl	800a34a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800820a:	2340      	movs	r3, #64	; 0x40
 800820c:	2202      	movs	r2, #2
 800820e:	2101      	movs	r1, #1
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f002 f89a 	bl	800a34a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2210      	movs	r2, #16
 8008222:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008226:	2308      	movs	r3, #8
 8008228:	2203      	movs	r2, #3
 800822a:	2182      	movs	r1, #130	; 0x82
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f002 f88c 	bl	800a34a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	7c1b      	ldrb	r3, [r3, #16]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d109      	bne.n	8008270 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008262:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008266:	2101      	movs	r1, #1
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f002 f95d 	bl	800a528 <USBD_LL_PrepareReceive>
 800826e:	e007      	b.n	8008280 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008276:	2340      	movs	r3, #64	; 0x40
 8008278:	2101      	movs	r1, #1
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f002 f954 	bl	800a528 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b082      	sub	sp, #8
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	460b      	mov	r3, r1
 8008294:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008296:	2181      	movs	r1, #129	; 0x81
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f002 f87c 	bl	800a396 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80082a4:	2101      	movs	r1, #1
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f002 f875 	bl	800a396 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80082b4:	2182      	movs	r1, #130	; 0x82
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f002 f86d 	bl	800a396 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00e      	beq.n	80082f4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082e6:	4618      	mov	r0, r3
 80082e8:	f002 f960 	bl	800a5ac <USBD_static_free>
    pdev->pClassData = NULL;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
	...

08008300 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008310:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008312:	2300      	movs	r3, #0
 8008314:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008316:	2300      	movs	r3, #0
 8008318:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008324:	2303      	movs	r3, #3
 8008326:	e0af      	b.n	8008488 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008330:	2b00      	cmp	r3, #0
 8008332:	d03f      	beq.n	80083b4 <USBD_CDC_Setup+0xb4>
 8008334:	2b20      	cmp	r3, #32
 8008336:	f040 809f 	bne.w	8008478 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	88db      	ldrh	r3, [r3, #6]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d02e      	beq.n	80083a0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	b25b      	sxtb	r3, r3
 8008348:	2b00      	cmp	r3, #0
 800834a:	da16      	bge.n	800837a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	683a      	ldr	r2, [r7, #0]
 8008356:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008358:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	88d2      	ldrh	r2, [r2, #6]
 800835e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	88db      	ldrh	r3, [r3, #6]
 8008364:	2b07      	cmp	r3, #7
 8008366:	bf28      	it	cs
 8008368:	2307      	movcs	r3, #7
 800836a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	89fa      	ldrh	r2, [r7, #14]
 8008370:	4619      	mov	r1, r3
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f001 fb19 	bl	80099aa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008378:	e085      	b.n	8008486 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	785a      	ldrb	r2, [r3, #1]
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	88db      	ldrh	r3, [r3, #6]
 8008388:	b2da      	uxtb	r2, r3
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008390:	6939      	ldr	r1, [r7, #16]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	88db      	ldrh	r3, [r3, #6]
 8008396:	461a      	mov	r2, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 fb32 	bl	8009a02 <USBD_CtlPrepareRx>
      break;
 800839e:	e072      	b.n	8008486 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	7850      	ldrb	r0, [r2, #1]
 80083ac:	2200      	movs	r2, #0
 80083ae:	6839      	ldr	r1, [r7, #0]
 80083b0:	4798      	blx	r3
      break;
 80083b2:	e068      	b.n	8008486 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	785b      	ldrb	r3, [r3, #1]
 80083b8:	2b0b      	cmp	r3, #11
 80083ba:	d852      	bhi.n	8008462 <USBD_CDC_Setup+0x162>
 80083bc:	a201      	add	r2, pc, #4	; (adr r2, 80083c4 <USBD_CDC_Setup+0xc4>)
 80083be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c2:	bf00      	nop
 80083c4:	080083f5 	.word	0x080083f5
 80083c8:	08008471 	.word	0x08008471
 80083cc:	08008463 	.word	0x08008463
 80083d0:	08008463 	.word	0x08008463
 80083d4:	08008463 	.word	0x08008463
 80083d8:	08008463 	.word	0x08008463
 80083dc:	08008463 	.word	0x08008463
 80083e0:	08008463 	.word	0x08008463
 80083e4:	08008463 	.word	0x08008463
 80083e8:	08008463 	.word	0x08008463
 80083ec:	0800841f 	.word	0x0800841f
 80083f0:	08008449 	.word	0x08008449
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d107      	bne.n	8008410 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008400:	f107 030a 	add.w	r3, r7, #10
 8008404:	2202      	movs	r2, #2
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f001 face 	bl	80099aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800840e:	e032      	b.n	8008476 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f001 fa58 	bl	80098c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008418:	2303      	movs	r3, #3
 800841a:	75fb      	strb	r3, [r7, #23]
          break;
 800841c:	e02b      	b.n	8008476 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b03      	cmp	r3, #3
 8008428:	d107      	bne.n	800843a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800842a:	f107 030d 	add.w	r3, r7, #13
 800842e:	2201      	movs	r2, #1
 8008430:	4619      	mov	r1, r3
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f001 fab9 	bl	80099aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008438:	e01d      	b.n	8008476 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f001 fa43 	bl	80098c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008442:	2303      	movs	r3, #3
 8008444:	75fb      	strb	r3, [r7, #23]
          break;
 8008446:	e016      	b.n	8008476 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800844e:	b2db      	uxtb	r3, r3
 8008450:	2b03      	cmp	r3, #3
 8008452:	d00f      	beq.n	8008474 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f001 fa36 	bl	80098c8 <USBD_CtlError>
            ret = USBD_FAIL;
 800845c:	2303      	movs	r3, #3
 800845e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008460:	e008      	b.n	8008474 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f001 fa2f 	bl	80098c8 <USBD_CtlError>
          ret = USBD_FAIL;
 800846a:	2303      	movs	r3, #3
 800846c:	75fb      	strb	r3, [r7, #23]
          break;
 800846e:	e002      	b.n	8008476 <USBD_CDC_Setup+0x176>
          break;
 8008470:	bf00      	nop
 8008472:	e008      	b.n	8008486 <USBD_CDC_Setup+0x186>
          break;
 8008474:	bf00      	nop
      }
      break;
 8008476:	e006      	b.n	8008486 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f001 fa24 	bl	80098c8 <USBD_CtlError>
      ret = USBD_FAIL;
 8008480:	2303      	movs	r3, #3
 8008482:	75fb      	strb	r3, [r7, #23]
      break;
 8008484:	bf00      	nop
  }

  return (uint8_t)ret;
 8008486:	7dfb      	ldrb	r3, [r7, #23]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	460b      	mov	r3, r1
 800849a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80084a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e04f      	b.n	8008552 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80084ba:	78fa      	ldrb	r2, [r7, #3]
 80084bc:	6879      	ldr	r1, [r7, #4]
 80084be:	4613      	mov	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	440b      	add	r3, r1
 80084c8:	3318      	adds	r3, #24
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d029      	beq.n	8008524 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80084d0:	78fa      	ldrb	r2, [r7, #3]
 80084d2:	6879      	ldr	r1, [r7, #4]
 80084d4:	4613      	mov	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4413      	add	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	440b      	add	r3, r1
 80084de:	3318      	adds	r3, #24
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	78f9      	ldrb	r1, [r7, #3]
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	460b      	mov	r3, r1
 80084e8:	00db      	lsls	r3, r3, #3
 80084ea:	1a5b      	subs	r3, r3, r1
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4403      	add	r3, r0
 80084f0:	3344      	adds	r3, #68	; 0x44
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80084f8:	fb03 f301 	mul.w	r3, r3, r1
 80084fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d110      	bne.n	8008524 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008502:	78fa      	ldrb	r2, [r7, #3]
 8008504:	6879      	ldr	r1, [r7, #4]
 8008506:	4613      	mov	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4413      	add	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	440b      	add	r3, r1
 8008510:	3318      	adds	r3, #24
 8008512:	2200      	movs	r2, #0
 8008514:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008516:	78f9      	ldrb	r1, [r7, #3]
 8008518:	2300      	movs	r3, #0
 800851a:	2200      	movs	r2, #0
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f001 ffe2 	bl	800a4e6 <USBD_LL_Transmit>
 8008522:	e015      	b.n	8008550 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	2200      	movs	r2, #0
 8008528:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00b      	beq.n	8008550 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008546:	68ba      	ldr	r2, [r7, #8]
 8008548:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800854c:	78fa      	ldrb	r2, [r7, #3]
 800854e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b084      	sub	sp, #16
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	460b      	mov	r3, r1
 8008564:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800856c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008574:	2b00      	cmp	r3, #0
 8008576:	d101      	bne.n	800857c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008578:	2303      	movs	r3, #3
 800857a:	e015      	b.n	80085a8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800857c:	78fb      	ldrb	r3, [r7, #3]
 800857e:	4619      	mov	r1, r3
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f001 fff2 	bl	800a56a <USBD_LL_GetRxDataSize>
 8008586:	4602      	mov	r2, r0
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80085a2:	4611      	mov	r1, r2
 80085a4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d101      	bne.n	80085ca <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e01b      	b.n	8008602 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d015      	beq.n	8008600 <USBD_CDC_EP0_RxReady+0x50>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80085da:	2bff      	cmp	r3, #255	; 0xff
 80085dc:	d010      	beq.n	8008600 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80085ec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80085f4:	b292      	uxth	r2, r2
 80085f6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	22ff      	movs	r2, #255	; 0xff
 80085fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
	...

0800860c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2243      	movs	r2, #67	; 0x43
 8008618:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800861a:	4b03      	ldr	r3, [pc, #12]	; (8008628 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800861c:	4618      	mov	r0, r3
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr
 8008628:	20000094 	.word	0x20000094

0800862c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2243      	movs	r2, #67	; 0x43
 8008638:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800863a:	4b03      	ldr	r3, [pc, #12]	; (8008648 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800863c:	4618      	mov	r0, r3
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	20000050 	.word	0x20000050

0800864c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2243      	movs	r2, #67	; 0x43
 8008658:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800865a:	4b03      	ldr	r3, [pc, #12]	; (8008668 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800865c:	4618      	mov	r0, r3
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	200000d8 	.word	0x200000d8

0800866c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	220a      	movs	r2, #10
 8008678:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800867a:	4b03      	ldr	r3, [pc, #12]	; (8008688 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800867c:	4618      	mov	r0, r3
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr
 8008688:	2000000c 	.word	0x2000000c

0800868c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d101      	bne.n	80086a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800869c:	2303      	movs	r3, #3
 800869e:	e004      	b.n	80086aa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	370c      	adds	r7, #12
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80086b6:	b480      	push	{r7}
 80086b8:	b087      	sub	sp, #28
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	60b9      	str	r1, [r7, #8]
 80086c0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086c8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e008      	b.n	80086e6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	371c      	adds	r7, #28
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b085      	sub	sp, #20
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008702:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d101      	bne.n	800870e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800870a:	2303      	movs	r3, #3
 800870c:	e004      	b.n	8008718 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	683a      	ldr	r2, [r7, #0]
 8008712:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008732:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008734:	2301      	movs	r3, #1
 8008736:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008742:	2303      	movs	r3, #3
 8008744:	e01a      	b.n	800877c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800874c:	2b00      	cmp	r3, #0
 800874e:	d114      	bne.n	800877a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	2201      	movs	r2, #1
 8008754:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800876e:	2181      	movs	r1, #129	; 0x81
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f001 feb8 	bl	800a4e6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800877a:	7bfb      	ldrb	r3, [r7, #15]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008792:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800879e:	2303      	movs	r3, #3
 80087a0:	e016      	b.n	80087d0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	7c1b      	ldrb	r3, [r3, #16]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d109      	bne.n	80087be <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087b4:	2101      	movs	r1, #1
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f001 feb6 	bl	800a528 <USBD_LL_PrepareReceive>
 80087bc:	e007      	b.n	80087ce <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087c4:	2340      	movs	r3, #64	; 0x40
 80087c6:	2101      	movs	r1, #1
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f001 fead 	bl	800a528 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b086      	sub	sp, #24
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	4613      	mov	r3, r2
 80087e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d101      	bne.n	80087f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e01f      	b.n	8008830 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2201      	movs	r2, #1
 800881a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	79fa      	ldrb	r2, [r7, #7]
 8008822:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f001 fd29 	bl	800a27c <USBD_LL_Init>
 800882a:	4603      	mov	r3, r0
 800882c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800882e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3718      	adds	r7, #24
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008842:	2300      	movs	r3, #0
 8008844:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800884c:	2303      	movs	r3, #3
 800884e:	e016      	b.n	800887e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	683a      	ldr	r2, [r7, #0]
 8008854:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800885e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00b      	beq.n	800887c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800886a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886c:	f107 020e 	add.w	r2, r7, #14
 8008870:	4610      	mov	r0, r2
 8008872:	4798      	blx	r3
 8008874:	4602      	mov	r2, r0
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b082      	sub	sp, #8
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f001 fd40 	bl	800a314 <USBD_LL_Start>
 8008894:	4603      	mov	r3, r0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3708      	adds	r7, #8
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800889e:	b480      	push	{r7}
 80088a0:	b083      	sub	sp, #12
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80088c0:	2303      	movs	r3, #3
 80088c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d009      	beq.n	80088e2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	78fa      	ldrb	r2, [r7, #3]
 80088d8:	4611      	mov	r1, r2
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	4798      	blx	r3
 80088de:	4603      	mov	r3, r0
 80088e0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80088e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	460b      	mov	r3, r1
 80088f6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d007      	beq.n	8008912 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	78fa      	ldrb	r2, [r7, #3]
 800890c:	4611      	mov	r1, r2
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	4798      	blx	r3
  }

  return USBD_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800892c:	6839      	ldr	r1, [r7, #0]
 800892e:	4618      	mov	r0, r3
 8008930:	f000 ff90 	bl	8009854 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008942:	461a      	mov	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008950:	f003 031f 	and.w	r3, r3, #31
 8008954:	2b02      	cmp	r3, #2
 8008956:	d01a      	beq.n	800898e <USBD_LL_SetupStage+0x72>
 8008958:	2b02      	cmp	r3, #2
 800895a:	d822      	bhi.n	80089a2 <USBD_LL_SetupStage+0x86>
 800895c:	2b00      	cmp	r3, #0
 800895e:	d002      	beq.n	8008966 <USBD_LL_SetupStage+0x4a>
 8008960:	2b01      	cmp	r3, #1
 8008962:	d00a      	beq.n	800897a <USBD_LL_SetupStage+0x5e>
 8008964:	e01d      	b.n	80089a2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fa62 	bl	8008e38 <USBD_StdDevReq>
 8008974:	4603      	mov	r3, r0
 8008976:	73fb      	strb	r3, [r7, #15]
      break;
 8008978:	e020      	b.n	80089bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008980:	4619      	mov	r1, r3
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fac6 	bl	8008f14 <USBD_StdItfReq>
 8008988:	4603      	mov	r3, r0
 800898a:	73fb      	strb	r3, [r7, #15]
      break;
 800898c:	e016      	b.n	80089bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008994:	4619      	mov	r1, r3
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fb05 	bl	8008fa6 <USBD_StdEPReq>
 800899c:	4603      	mov	r3, r0
 800899e:	73fb      	strb	r3, [r7, #15]
      break;
 80089a0:	e00c      	b.n	80089bc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80089a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f001 fd0f 	bl	800a3d4 <USBD_LL_StallEP>
 80089b6:	4603      	mov	r3, r0
 80089b8:	73fb      	strb	r3, [r7, #15]
      break;
 80089ba:	bf00      	nop
  }

  return ret;
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b086      	sub	sp, #24
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	60f8      	str	r0, [r7, #12]
 80089ce:	460b      	mov	r3, r1
 80089d0:	607a      	str	r2, [r7, #4]
 80089d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80089d4:	7afb      	ldrb	r3, [r7, #11]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d138      	bne.n	8008a4c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80089e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089e8:	2b03      	cmp	r3, #3
 80089ea:	d14a      	bne.n	8008a82 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	689a      	ldr	r2, [r3, #8]
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d913      	bls.n	8008a20 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	689a      	ldr	r2, [r3, #8]
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	1ad2      	subs	r2, r2, r3
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	68da      	ldr	r2, [r3, #12]
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	bf28      	it	cs
 8008a12:	4613      	movcs	r3, r2
 8008a14:	461a      	mov	r2, r3
 8008a16:	6879      	ldr	r1, [r7, #4]
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f001 f80f 	bl	8009a3c <USBD_CtlContinueRx>
 8008a1e:	e030      	b.n	8008a82 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d10b      	bne.n	8008a44 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d005      	beq.n	8008a44 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f001 f80a 	bl	8009a5e <USBD_CtlSendStatus>
 8008a4a:	e01a      	b.n	8008a82 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	2b03      	cmp	r3, #3
 8008a56:	d114      	bne.n	8008a82 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00e      	beq.n	8008a82 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a6a:	699b      	ldr	r3, [r3, #24]
 8008a6c:	7afa      	ldrb	r2, [r7, #11]
 8008a6e:	4611      	mov	r1, r2
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	4798      	blx	r3
 8008a74:	4603      	mov	r3, r0
 8008a76:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008a78:	7dfb      	ldrb	r3, [r7, #23]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d001      	beq.n	8008a82 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008a7e:	7dfb      	ldrb	r3, [r7, #23]
 8008a80:	e000      	b.n	8008a84 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b086      	sub	sp, #24
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	460b      	mov	r3, r1
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008a9a:	7afb      	ldrb	r3, [r7, #11]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d16b      	bne.n	8008b78 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	3314      	adds	r3, #20
 8008aa4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d156      	bne.n	8008b5e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	689a      	ldr	r2, [r3, #8]
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d914      	bls.n	8008ae6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	689a      	ldr	r2, [r3, #8]
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	1ad2      	subs	r2, r2, r3
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	6879      	ldr	r1, [r7, #4]
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f000 ff84 	bl	80099e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ad8:	2300      	movs	r3, #0
 8008ada:	2200      	movs	r2, #0
 8008adc:	2100      	movs	r1, #0
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f001 fd22 	bl	800a528 <USBD_LL_PrepareReceive>
 8008ae4:	e03b      	b.n	8008b5e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	68da      	ldr	r2, [r3, #12]
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d11c      	bne.n	8008b2c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d316      	bcc.n	8008b2c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	685a      	ldr	r2, [r3, #4]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d20f      	bcs.n	8008b2c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	2100      	movs	r1, #0
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f000 ff65 	bl	80099e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b1e:	2300      	movs	r3, #0
 8008b20:	2200      	movs	r2, #0
 8008b22:	2100      	movs	r1, #0
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f001 fcff 	bl	800a528 <USBD_LL_PrepareReceive>
 8008b2a:	e018      	b.n	8008b5e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	2b03      	cmp	r3, #3
 8008b36:	d10b      	bne.n	8008b50 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d005      	beq.n	8008b50 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b50:	2180      	movs	r1, #128	; 0x80
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f001 fc3e 	bl	800a3d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 ff93 	bl	8009a84 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d122      	bne.n	8008bae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f7ff fe98 	bl	800889e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008b76:	e01a      	b.n	8008bae <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	d114      	bne.n	8008bae <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b8a:	695b      	ldr	r3, [r3, #20]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00e      	beq.n	8008bae <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b96:	695b      	ldr	r3, [r3, #20]
 8008b98:	7afa      	ldrb	r2, [r7, #11]
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	4798      	blx	r3
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d001      	beq.n	8008bae <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008baa:	7dfb      	ldrb	r3, [r7, #23]
 8008bac:	e000      	b.n	8008bb0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3718      	adds	r7, #24
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d101      	bne.n	8008bec <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e02f      	b.n	8008c4c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00f      	beq.n	8008c16 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d009      	beq.n	8008c16 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	6852      	ldr	r2, [r2, #4]
 8008c0e:	b2d2      	uxtb	r2, r2
 8008c10:	4611      	mov	r1, r2
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c16:	2340      	movs	r3, #64	; 0x40
 8008c18:	2200      	movs	r2, #0
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 fb94 	bl	800a34a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2240      	movs	r2, #64	; 0x40
 8008c2e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c32:	2340      	movs	r3, #64	; 0x40
 8008c34:	2200      	movs	r2, #0
 8008c36:	2180      	movs	r1, #128	; 0x80
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f001 fb86 	bl	800a34a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2240      	movs	r2, #64	; 0x40
 8008c48:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	78fa      	ldrb	r2, [r7, #3]
 8008c64:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c82:	b2da      	uxtb	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2204      	movs	r2, #4
 8008c8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	2b04      	cmp	r3, #4
 8008cb2:	d106      	bne.n	8008cc2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008cba:	b2da      	uxtb	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d101      	bne.n	8008ce6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e012      	b.n	8008d0c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2b03      	cmp	r3, #3
 8008cf0:	d10b      	bne.n	8008d0a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf8:	69db      	ldr	r3, [r3, #28]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d005      	beq.n	8008d0a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d04:	69db      	ldr	r3, [r3, #28]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d101      	bne.n	8008d2e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	e014      	b.n	8008d58 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	d10d      	bne.n	8008d56 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d007      	beq.n	8008d56 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d4c:	6a1b      	ldr	r3, [r3, #32]
 8008d4e:	78fa      	ldrb	r2, [r7, #3]
 8008d50:	4611      	mov	r1, r2
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	460b      	mov	r3, r1
 8008d6a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d101      	bne.n	8008d7a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008d76:	2303      	movs	r3, #3
 8008d78:	e014      	b.n	8008da4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b03      	cmp	r3, #3
 8008d84:	d10d      	bne.n	8008da2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d007      	beq.n	8008da2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9a:	78fa      	ldrb	r2, [r7, #3]
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr

08008dc2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b082      	sub	sp, #8
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d009      	beq.n	8008df0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	6852      	ldr	r2, [r2, #4]
 8008de8:	b2d2      	uxtb	r2, r2
 8008dea:	4611      	mov	r1, r2
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	4798      	blx	r3
  }

  return USBD_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b087      	sub	sp, #28
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008e18:	8a3b      	ldrh	r3, [r7, #16]
 8008e1a:	021b      	lsls	r3, r3, #8
 8008e1c:	b21a      	sxth	r2, r3
 8008e1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	b21b      	sxth	r3, r3
 8008e26:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008e28:	89fb      	ldrh	r3, [r7, #14]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	371c      	adds	r7, #28
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
	...

08008e38 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e4e:	2b40      	cmp	r3, #64	; 0x40
 8008e50:	d005      	beq.n	8008e5e <USBD_StdDevReq+0x26>
 8008e52:	2b40      	cmp	r3, #64	; 0x40
 8008e54:	d853      	bhi.n	8008efe <USBD_StdDevReq+0xc6>
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00b      	beq.n	8008e72 <USBD_StdDevReq+0x3a>
 8008e5a:	2b20      	cmp	r3, #32
 8008e5c:	d14f      	bne.n	8008efe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	4798      	blx	r3
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e70:	e04a      	b.n	8008f08 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	785b      	ldrb	r3, [r3, #1]
 8008e76:	2b09      	cmp	r3, #9
 8008e78:	d83b      	bhi.n	8008ef2 <USBD_StdDevReq+0xba>
 8008e7a:	a201      	add	r2, pc, #4	; (adr r2, 8008e80 <USBD_StdDevReq+0x48>)
 8008e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e80:	08008ed5 	.word	0x08008ed5
 8008e84:	08008ee9 	.word	0x08008ee9
 8008e88:	08008ef3 	.word	0x08008ef3
 8008e8c:	08008edf 	.word	0x08008edf
 8008e90:	08008ef3 	.word	0x08008ef3
 8008e94:	08008eb3 	.word	0x08008eb3
 8008e98:	08008ea9 	.word	0x08008ea9
 8008e9c:	08008ef3 	.word	0x08008ef3
 8008ea0:	08008ecb 	.word	0x08008ecb
 8008ea4:	08008ebd 	.word	0x08008ebd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f9de 	bl	800926c <USBD_GetDescriptor>
          break;
 8008eb0:	e024      	b.n	8008efc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fb43 	bl	8009540 <USBD_SetAddress>
          break;
 8008eba:	e01f      	b.n	8008efc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008ebc:	6839      	ldr	r1, [r7, #0]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 fb82 	bl	80095c8 <USBD_SetConfig>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	73fb      	strb	r3, [r7, #15]
          break;
 8008ec8:	e018      	b.n	8008efc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fc21 	bl	8009714 <USBD_GetConfig>
          break;
 8008ed2:	e013      	b.n	8008efc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fc52 	bl	8009780 <USBD_GetStatus>
          break;
 8008edc:	e00e      	b.n	8008efc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008ede:	6839      	ldr	r1, [r7, #0]
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fc81 	bl	80097e8 <USBD_SetFeature>
          break;
 8008ee6:	e009      	b.n	8008efc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fc90 	bl	8009810 <USBD_ClrFeature>
          break;
 8008ef0:	e004      	b.n	8008efc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008ef2:	6839      	ldr	r1, [r7, #0]
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fce7 	bl	80098c8 <USBD_CtlError>
          break;
 8008efa:	bf00      	nop
      }
      break;
 8008efc:	e004      	b.n	8008f08 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008efe:	6839      	ldr	r1, [r7, #0]
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fce1 	bl	80098c8 <USBD_CtlError>
      break;
 8008f06:	bf00      	nop
  }

  return ret;
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop

08008f14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f2a:	2b40      	cmp	r3, #64	; 0x40
 8008f2c:	d005      	beq.n	8008f3a <USBD_StdItfReq+0x26>
 8008f2e:	2b40      	cmp	r3, #64	; 0x40
 8008f30:	d82f      	bhi.n	8008f92 <USBD_StdItfReq+0x7e>
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <USBD_StdItfReq+0x26>
 8008f36:	2b20      	cmp	r3, #32
 8008f38:	d12b      	bne.n	8008f92 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	3b01      	subs	r3, #1
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d81d      	bhi.n	8008f84 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	889b      	ldrh	r3, [r3, #4]
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d813      	bhi.n	8008f7a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	4798      	blx	r3
 8008f60:	4603      	mov	r3, r0
 8008f62:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	88db      	ldrh	r3, [r3, #6]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d110      	bne.n	8008f8e <USBD_StdItfReq+0x7a>
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10d      	bne.n	8008f8e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fd73 	bl	8009a5e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f78:	e009      	b.n	8008f8e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008f7a:	6839      	ldr	r1, [r7, #0]
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fca3 	bl	80098c8 <USBD_CtlError>
          break;
 8008f82:	e004      	b.n	8008f8e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fc9e 	bl	80098c8 <USBD_CtlError>
          break;
 8008f8c:	e000      	b.n	8008f90 <USBD_StdItfReq+0x7c>
          break;
 8008f8e:	bf00      	nop
      }
      break;
 8008f90:	e004      	b.n	8008f9c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fc97 	bl	80098c8 <USBD_CtlError>
      break;
 8008f9a:	bf00      	nop
  }

  return ret;
 8008f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b084      	sub	sp, #16
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	889b      	ldrh	r3, [r3, #4]
 8008fb8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fc2:	2b40      	cmp	r3, #64	; 0x40
 8008fc4:	d007      	beq.n	8008fd6 <USBD_StdEPReq+0x30>
 8008fc6:	2b40      	cmp	r3, #64	; 0x40
 8008fc8:	f200 8145 	bhi.w	8009256 <USBD_StdEPReq+0x2b0>
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00c      	beq.n	8008fea <USBD_StdEPReq+0x44>
 8008fd0:	2b20      	cmp	r3, #32
 8008fd2:	f040 8140 	bne.w	8009256 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	6839      	ldr	r1, [r7, #0]
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	4798      	blx	r3
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8008fe8:	e13a      	b.n	8009260 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	785b      	ldrb	r3, [r3, #1]
 8008fee:	2b03      	cmp	r3, #3
 8008ff0:	d007      	beq.n	8009002 <USBD_StdEPReq+0x5c>
 8008ff2:	2b03      	cmp	r3, #3
 8008ff4:	f300 8129 	bgt.w	800924a <USBD_StdEPReq+0x2a4>
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d07f      	beq.n	80090fc <USBD_StdEPReq+0x156>
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d03c      	beq.n	800907a <USBD_StdEPReq+0xd4>
 8009000:	e123      	b.n	800924a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009008:	b2db      	uxtb	r3, r3
 800900a:	2b02      	cmp	r3, #2
 800900c:	d002      	beq.n	8009014 <USBD_StdEPReq+0x6e>
 800900e:	2b03      	cmp	r3, #3
 8009010:	d016      	beq.n	8009040 <USBD_StdEPReq+0x9a>
 8009012:	e02c      	b.n	800906e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009014:	7bbb      	ldrb	r3, [r7, #14]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00d      	beq.n	8009036 <USBD_StdEPReq+0x90>
 800901a:	7bbb      	ldrb	r3, [r7, #14]
 800901c:	2b80      	cmp	r3, #128	; 0x80
 800901e:	d00a      	beq.n	8009036 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009020:	7bbb      	ldrb	r3, [r7, #14]
 8009022:	4619      	mov	r1, r3
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f001 f9d5 	bl	800a3d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800902a:	2180      	movs	r1, #128	; 0x80
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f001 f9d1 	bl	800a3d4 <USBD_LL_StallEP>
 8009032:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009034:	e020      	b.n	8009078 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009036:	6839      	ldr	r1, [r7, #0]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fc45 	bl	80098c8 <USBD_CtlError>
              break;
 800903e:	e01b      	b.n	8009078 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	885b      	ldrh	r3, [r3, #2]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10e      	bne.n	8009066 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009048:	7bbb      	ldrb	r3, [r7, #14]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00b      	beq.n	8009066 <USBD_StdEPReq+0xc0>
 800904e:	7bbb      	ldrb	r3, [r7, #14]
 8009050:	2b80      	cmp	r3, #128	; 0x80
 8009052:	d008      	beq.n	8009066 <USBD_StdEPReq+0xc0>
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	88db      	ldrh	r3, [r3, #6]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d104      	bne.n	8009066 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800905c:	7bbb      	ldrb	r3, [r7, #14]
 800905e:	4619      	mov	r1, r3
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f001 f9b7 	bl	800a3d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fcf9 	bl	8009a5e <USBD_CtlSendStatus>

              break;
 800906c:	e004      	b.n	8009078 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800906e:	6839      	ldr	r1, [r7, #0]
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fc29 	bl	80098c8 <USBD_CtlError>
              break;
 8009076:	bf00      	nop
          }
          break;
 8009078:	e0ec      	b.n	8009254 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009080:	b2db      	uxtb	r3, r3
 8009082:	2b02      	cmp	r3, #2
 8009084:	d002      	beq.n	800908c <USBD_StdEPReq+0xe6>
 8009086:	2b03      	cmp	r3, #3
 8009088:	d016      	beq.n	80090b8 <USBD_StdEPReq+0x112>
 800908a:	e030      	b.n	80090ee <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800908c:	7bbb      	ldrb	r3, [r7, #14]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00d      	beq.n	80090ae <USBD_StdEPReq+0x108>
 8009092:	7bbb      	ldrb	r3, [r7, #14]
 8009094:	2b80      	cmp	r3, #128	; 0x80
 8009096:	d00a      	beq.n	80090ae <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009098:	7bbb      	ldrb	r3, [r7, #14]
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f001 f999 	bl	800a3d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80090a2:	2180      	movs	r1, #128	; 0x80
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f001 f995 	bl	800a3d4 <USBD_LL_StallEP>
 80090aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80090ac:	e025      	b.n	80090fa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80090ae:	6839      	ldr	r1, [r7, #0]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 fc09 	bl	80098c8 <USBD_CtlError>
              break;
 80090b6:	e020      	b.n	80090fa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	885b      	ldrh	r3, [r3, #2]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d11b      	bne.n	80090f8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80090c0:	7bbb      	ldrb	r3, [r7, #14]
 80090c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d004      	beq.n	80090d4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80090ca:	7bbb      	ldrb	r3, [r7, #14]
 80090cc:	4619      	mov	r1, r3
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f001 f99f 	bl	800a412 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 fcc2 	bl	8009a5e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	6839      	ldr	r1, [r7, #0]
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	4798      	blx	r3
 80090e8:	4603      	mov	r3, r0
 80090ea:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80090ec:	e004      	b.n	80090f8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 fbe9 	bl	80098c8 <USBD_CtlError>
              break;
 80090f6:	e000      	b.n	80090fa <USBD_StdEPReq+0x154>
              break;
 80090f8:	bf00      	nop
          }
          break;
 80090fa:	e0ab      	b.n	8009254 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b02      	cmp	r3, #2
 8009106:	d002      	beq.n	800910e <USBD_StdEPReq+0x168>
 8009108:	2b03      	cmp	r3, #3
 800910a:	d032      	beq.n	8009172 <USBD_StdEPReq+0x1cc>
 800910c:	e097      	b.n	800923e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800910e:	7bbb      	ldrb	r3, [r7, #14]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d007      	beq.n	8009124 <USBD_StdEPReq+0x17e>
 8009114:	7bbb      	ldrb	r3, [r7, #14]
 8009116:	2b80      	cmp	r3, #128	; 0x80
 8009118:	d004      	beq.n	8009124 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fbd3 	bl	80098c8 <USBD_CtlError>
                break;
 8009122:	e091      	b.n	8009248 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009124:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009128:	2b00      	cmp	r3, #0
 800912a:	da0b      	bge.n	8009144 <USBD_StdEPReq+0x19e>
 800912c:	7bbb      	ldrb	r3, [r7, #14]
 800912e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009132:	4613      	mov	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4413      	add	r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	3310      	adds	r3, #16
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	4413      	add	r3, r2
 8009140:	3304      	adds	r3, #4
 8009142:	e00b      	b.n	800915c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009144:	7bbb      	ldrb	r3, [r7, #14]
 8009146:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800914a:	4613      	mov	r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4413      	add	r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	4413      	add	r3, r2
 800915a:	3304      	adds	r3, #4
 800915c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	2200      	movs	r2, #0
 8009162:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	2202      	movs	r2, #2
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 fc1d 	bl	80099aa <USBD_CtlSendData>
              break;
 8009170:	e06a      	b.n	8009248 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009172:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009176:	2b00      	cmp	r3, #0
 8009178:	da11      	bge.n	800919e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800917a:	7bbb      	ldrb	r3, [r7, #14]
 800917c:	f003 020f 	and.w	r2, r3, #15
 8009180:	6879      	ldr	r1, [r7, #4]
 8009182:	4613      	mov	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4413      	add	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	440b      	add	r3, r1
 800918c:	3324      	adds	r3, #36	; 0x24
 800918e:	881b      	ldrh	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d117      	bne.n	80091c4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fb96 	bl	80098c8 <USBD_CtlError>
                  break;
 800919c:	e054      	b.n	8009248 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800919e:	7bbb      	ldrb	r3, [r7, #14]
 80091a0:	f003 020f 	and.w	r2, r3, #15
 80091a4:	6879      	ldr	r1, [r7, #4]
 80091a6:	4613      	mov	r3, r2
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	4413      	add	r3, r2
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	440b      	add	r3, r1
 80091b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80091b4:	881b      	ldrh	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d104      	bne.n	80091c4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80091ba:	6839      	ldr	r1, [r7, #0]
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fb83 	bl	80098c8 <USBD_CtlError>
                  break;
 80091c2:	e041      	b.n	8009248 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	da0b      	bge.n	80091e4 <USBD_StdEPReq+0x23e>
 80091cc:	7bbb      	ldrb	r3, [r7, #14]
 80091ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091d2:	4613      	mov	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	4413      	add	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	3310      	adds	r3, #16
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	4413      	add	r3, r2
 80091e0:	3304      	adds	r3, #4
 80091e2:	e00b      	b.n	80091fc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80091e4:	7bbb      	ldrb	r3, [r7, #14]
 80091e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091ea:	4613      	mov	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4413      	add	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	4413      	add	r3, r2
 80091fa:	3304      	adds	r3, #4
 80091fc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80091fe:	7bbb      	ldrb	r3, [r7, #14]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d002      	beq.n	800920a <USBD_StdEPReq+0x264>
 8009204:	7bbb      	ldrb	r3, [r7, #14]
 8009206:	2b80      	cmp	r3, #128	; 0x80
 8009208:	d103      	bne.n	8009212 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	2200      	movs	r2, #0
 800920e:	601a      	str	r2, [r3, #0]
 8009210:	e00e      	b.n	8009230 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009212:	7bbb      	ldrb	r3, [r7, #14]
 8009214:	4619      	mov	r1, r3
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f001 f91a 	bl	800a450 <USBD_LL_IsStallEP>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d003      	beq.n	800922a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	2201      	movs	r2, #1
 8009226:	601a      	str	r2, [r3, #0]
 8009228:	e002      	b.n	8009230 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	2200      	movs	r2, #0
 800922e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	2202      	movs	r2, #2
 8009234:	4619      	mov	r1, r3
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fbb7 	bl	80099aa <USBD_CtlSendData>
              break;
 800923c:	e004      	b.n	8009248 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800923e:	6839      	ldr	r1, [r7, #0]
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 fb41 	bl	80098c8 <USBD_CtlError>
              break;
 8009246:	bf00      	nop
          }
          break;
 8009248:	e004      	b.n	8009254 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fb3b 	bl	80098c8 <USBD_CtlError>
          break;
 8009252:	bf00      	nop
      }
      break;
 8009254:	e004      	b.n	8009260 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009256:	6839      	ldr	r1, [r7, #0]
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fb35 	bl	80098c8 <USBD_CtlError>
      break;
 800925e:	bf00      	nop
  }

  return ret;
 8009260:	7bfb      	ldrb	r3, [r7, #15]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
	...

0800926c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009276:	2300      	movs	r3, #0
 8009278:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800927a:	2300      	movs	r3, #0
 800927c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800927e:	2300      	movs	r3, #0
 8009280:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	885b      	ldrh	r3, [r3, #2]
 8009286:	0a1b      	lsrs	r3, r3, #8
 8009288:	b29b      	uxth	r3, r3
 800928a:	3b01      	subs	r3, #1
 800928c:	2b06      	cmp	r3, #6
 800928e:	f200 8128 	bhi.w	80094e2 <USBD_GetDescriptor+0x276>
 8009292:	a201      	add	r2, pc, #4	; (adr r2, 8009298 <USBD_GetDescriptor+0x2c>)
 8009294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009298:	080092b5 	.word	0x080092b5
 800929c:	080092cd 	.word	0x080092cd
 80092a0:	0800930d 	.word	0x0800930d
 80092a4:	080094e3 	.word	0x080094e3
 80092a8:	080094e3 	.word	0x080094e3
 80092ac:	08009483 	.word	0x08009483
 80092b0:	080094af 	.word	0x080094af
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	7c12      	ldrb	r2, [r2, #16]
 80092c0:	f107 0108 	add.w	r1, r7, #8
 80092c4:	4610      	mov	r0, r2
 80092c6:	4798      	blx	r3
 80092c8:	60f8      	str	r0, [r7, #12]
      break;
 80092ca:	e112      	b.n	80094f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	7c1b      	ldrb	r3, [r3, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10d      	bne.n	80092f0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092dc:	f107 0208 	add.w	r2, r7, #8
 80092e0:	4610      	mov	r0, r2
 80092e2:	4798      	blx	r3
 80092e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	3301      	adds	r3, #1
 80092ea:	2202      	movs	r2, #2
 80092ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80092ee:	e100      	b.n	80094f2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f8:	f107 0208 	add.w	r2, r7, #8
 80092fc:	4610      	mov	r0, r2
 80092fe:	4798      	blx	r3
 8009300:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	3301      	adds	r3, #1
 8009306:	2202      	movs	r2, #2
 8009308:	701a      	strb	r2, [r3, #0]
      break;
 800930a:	e0f2      	b.n	80094f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	885b      	ldrh	r3, [r3, #2]
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b05      	cmp	r3, #5
 8009314:	f200 80ac 	bhi.w	8009470 <USBD_GetDescriptor+0x204>
 8009318:	a201      	add	r2, pc, #4	; (adr r2, 8009320 <USBD_GetDescriptor+0xb4>)
 800931a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931e:	bf00      	nop
 8009320:	08009339 	.word	0x08009339
 8009324:	0800936d 	.word	0x0800936d
 8009328:	080093a1 	.word	0x080093a1
 800932c:	080093d5 	.word	0x080093d5
 8009330:	08009409 	.word	0x08009409
 8009334:	0800943d 	.word	0x0800943d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00b      	beq.n	800935c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	7c12      	ldrb	r2, [r2, #16]
 8009350:	f107 0108 	add.w	r1, r7, #8
 8009354:	4610      	mov	r0, r2
 8009356:	4798      	blx	r3
 8009358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800935a:	e091      	b.n	8009480 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fab2 	bl	80098c8 <USBD_CtlError>
            err++;
 8009364:	7afb      	ldrb	r3, [r7, #11]
 8009366:	3301      	adds	r3, #1
 8009368:	72fb      	strb	r3, [r7, #11]
          break;
 800936a:	e089      	b.n	8009480 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00b      	beq.n	8009390 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	7c12      	ldrb	r2, [r2, #16]
 8009384:	f107 0108 	add.w	r1, r7, #8
 8009388:	4610      	mov	r0, r2
 800938a:	4798      	blx	r3
 800938c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800938e:	e077      	b.n	8009480 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fa98 	bl	80098c8 <USBD_CtlError>
            err++;
 8009398:	7afb      	ldrb	r3, [r7, #11]
 800939a:	3301      	adds	r3, #1
 800939c:	72fb      	strb	r3, [r7, #11]
          break;
 800939e:	e06f      	b.n	8009480 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d00b      	beq.n	80093c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	7c12      	ldrb	r2, [r2, #16]
 80093b8:	f107 0108 	add.w	r1, r7, #8
 80093bc:	4610      	mov	r0, r2
 80093be:	4798      	blx	r3
 80093c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093c2:	e05d      	b.n	8009480 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fa7e 	bl	80098c8 <USBD_CtlError>
            err++;
 80093cc:	7afb      	ldrb	r3, [r7, #11]
 80093ce:	3301      	adds	r3, #1
 80093d0:	72fb      	strb	r3, [r7, #11]
          break;
 80093d2:	e055      	b.n	8009480 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00b      	beq.n	80093f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	7c12      	ldrb	r2, [r2, #16]
 80093ec:	f107 0108 	add.w	r1, r7, #8
 80093f0:	4610      	mov	r0, r2
 80093f2:	4798      	blx	r3
 80093f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093f6:	e043      	b.n	8009480 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093f8:	6839      	ldr	r1, [r7, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fa64 	bl	80098c8 <USBD_CtlError>
            err++;
 8009400:	7afb      	ldrb	r3, [r7, #11]
 8009402:	3301      	adds	r3, #1
 8009404:	72fb      	strb	r3, [r7, #11]
          break;
 8009406:	e03b      	b.n	8009480 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800940e:	695b      	ldr	r3, [r3, #20]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00b      	beq.n	800942c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800941a:	695b      	ldr	r3, [r3, #20]
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	7c12      	ldrb	r2, [r2, #16]
 8009420:	f107 0108 	add.w	r1, r7, #8
 8009424:	4610      	mov	r0, r2
 8009426:	4798      	blx	r3
 8009428:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800942a:	e029      	b.n	8009480 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fa4a 	bl	80098c8 <USBD_CtlError>
            err++;
 8009434:	7afb      	ldrb	r3, [r7, #11]
 8009436:	3301      	adds	r3, #1
 8009438:	72fb      	strb	r3, [r7, #11]
          break;
 800943a:	e021      	b.n	8009480 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d00b      	beq.n	8009460 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	7c12      	ldrb	r2, [r2, #16]
 8009454:	f107 0108 	add.w	r1, r7, #8
 8009458:	4610      	mov	r0, r2
 800945a:	4798      	blx	r3
 800945c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800945e:	e00f      	b.n	8009480 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 fa30 	bl	80098c8 <USBD_CtlError>
            err++;
 8009468:	7afb      	ldrb	r3, [r7, #11]
 800946a:	3301      	adds	r3, #1
 800946c:	72fb      	strb	r3, [r7, #11]
          break;
 800946e:	e007      	b.n	8009480 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fa28 	bl	80098c8 <USBD_CtlError>
          err++;
 8009478:	7afb      	ldrb	r3, [r7, #11]
 800947a:	3301      	adds	r3, #1
 800947c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800947e:	bf00      	nop
      }
      break;
 8009480:	e037      	b.n	80094f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	7c1b      	ldrb	r3, [r3, #16]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d109      	bne.n	800949e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009492:	f107 0208 	add.w	r2, r7, #8
 8009496:	4610      	mov	r0, r2
 8009498:	4798      	blx	r3
 800949a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800949c:	e029      	b.n	80094f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800949e:	6839      	ldr	r1, [r7, #0]
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 fa11 	bl	80098c8 <USBD_CtlError>
        err++;
 80094a6:	7afb      	ldrb	r3, [r7, #11]
 80094a8:	3301      	adds	r3, #1
 80094aa:	72fb      	strb	r3, [r7, #11]
      break;
 80094ac:	e021      	b.n	80094f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	7c1b      	ldrb	r3, [r3, #16]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d10d      	bne.n	80094d2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094be:	f107 0208 	add.w	r2, r7, #8
 80094c2:	4610      	mov	r0, r2
 80094c4:	4798      	blx	r3
 80094c6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	3301      	adds	r3, #1
 80094cc:	2207      	movs	r2, #7
 80094ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094d0:	e00f      	b.n	80094f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80094d2:	6839      	ldr	r1, [r7, #0]
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 f9f7 	bl	80098c8 <USBD_CtlError>
        err++;
 80094da:	7afb      	ldrb	r3, [r7, #11]
 80094dc:	3301      	adds	r3, #1
 80094de:	72fb      	strb	r3, [r7, #11]
      break;
 80094e0:	e007      	b.n	80094f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f9ef 	bl	80098c8 <USBD_CtlError>
      err++;
 80094ea:	7afb      	ldrb	r3, [r7, #11]
 80094ec:	3301      	adds	r3, #1
 80094ee:	72fb      	strb	r3, [r7, #11]
      break;
 80094f0:	bf00      	nop
  }

  if (err != 0U)
 80094f2:	7afb      	ldrb	r3, [r7, #11]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d11e      	bne.n	8009536 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	88db      	ldrh	r3, [r3, #6]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d016      	beq.n	800952e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009500:	893b      	ldrh	r3, [r7, #8]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00e      	beq.n	8009524 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	88da      	ldrh	r2, [r3, #6]
 800950a:	893b      	ldrh	r3, [r7, #8]
 800950c:	4293      	cmp	r3, r2
 800950e:	bf28      	it	cs
 8009510:	4613      	movcs	r3, r2
 8009512:	b29b      	uxth	r3, r3
 8009514:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009516:	893b      	ldrh	r3, [r7, #8]
 8009518:	461a      	mov	r2, r3
 800951a:	68f9      	ldr	r1, [r7, #12]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fa44 	bl	80099aa <USBD_CtlSendData>
 8009522:	e009      	b.n	8009538 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009524:	6839      	ldr	r1, [r7, #0]
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f9ce 	bl	80098c8 <USBD_CtlError>
 800952c:	e004      	b.n	8009538 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fa95 	bl	8009a5e <USBD_CtlSendStatus>
 8009534:	e000      	b.n	8009538 <USBD_GetDescriptor+0x2cc>
    return;
 8009536:	bf00      	nop
  }
}
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop

08009540 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	889b      	ldrh	r3, [r3, #4]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d131      	bne.n	80095b6 <USBD_SetAddress+0x76>
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	88db      	ldrh	r3, [r3, #6]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d12d      	bne.n	80095b6 <USBD_SetAddress+0x76>
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	885b      	ldrh	r3, [r3, #2]
 800955e:	2b7f      	cmp	r3, #127	; 0x7f
 8009560:	d829      	bhi.n	80095b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	885b      	ldrh	r3, [r3, #2]
 8009566:	b2db      	uxtb	r3, r3
 8009568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800956c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009574:	b2db      	uxtb	r3, r3
 8009576:	2b03      	cmp	r3, #3
 8009578:	d104      	bne.n	8009584 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800957a:	6839      	ldr	r1, [r7, #0]
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f9a3 	bl	80098c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009582:	e01d      	b.n	80095c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	7bfa      	ldrb	r2, [r7, #15]
 8009588:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800958c:	7bfb      	ldrb	r3, [r7, #15]
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 ff89 	bl	800a4a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 fa61 	bl	8009a5e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800959c:	7bfb      	ldrb	r3, [r7, #15]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d004      	beq.n	80095ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2202      	movs	r2, #2
 80095a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095aa:	e009      	b.n	80095c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095b4:	e004      	b.n	80095c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80095b6:	6839      	ldr	r1, [r7, #0]
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 f985 	bl	80098c8 <USBD_CtlError>
  }
}
 80095be:	bf00      	nop
 80095c0:	bf00      	nop
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095d2:	2300      	movs	r3, #0
 80095d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	885b      	ldrh	r3, [r3, #2]
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	4b4c      	ldr	r3, [pc, #304]	; (8009710 <USBD_SetConfig+0x148>)
 80095de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80095e0:	4b4b      	ldr	r3, [pc, #300]	; (8009710 <USBD_SetConfig+0x148>)
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d905      	bls.n	80095f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80095e8:	6839      	ldr	r1, [r7, #0]
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f96c 	bl	80098c8 <USBD_CtlError>
    return USBD_FAIL;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e088      	b.n	8009706 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d002      	beq.n	8009606 <USBD_SetConfig+0x3e>
 8009600:	2b03      	cmp	r3, #3
 8009602:	d025      	beq.n	8009650 <USBD_SetConfig+0x88>
 8009604:	e071      	b.n	80096ea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009606:	4b42      	ldr	r3, [pc, #264]	; (8009710 <USBD_SetConfig+0x148>)
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d01c      	beq.n	8009648 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800960e:	4b40      	ldr	r3, [pc, #256]	; (8009710 <USBD_SetConfig+0x148>)
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	461a      	mov	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009618:	4b3d      	ldr	r3, [pc, #244]	; (8009710 <USBD_SetConfig+0x148>)
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	4619      	mov	r1, r3
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f7ff f948 	bl	80088b4 <USBD_SetClassConfig>
 8009624:	4603      	mov	r3, r0
 8009626:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009628:	7bfb      	ldrb	r3, [r7, #15]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d004      	beq.n	8009638 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800962e:	6839      	ldr	r1, [r7, #0]
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f949 	bl	80098c8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009636:	e065      	b.n	8009704 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fa10 	bl	8009a5e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2203      	movs	r2, #3
 8009642:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009646:	e05d      	b.n	8009704 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fa08 	bl	8009a5e <USBD_CtlSendStatus>
      break;
 800964e:	e059      	b.n	8009704 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009650:	4b2f      	ldr	r3, [pc, #188]	; (8009710 <USBD_SetConfig+0x148>)
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d112      	bne.n	800967e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2202      	movs	r2, #2
 800965c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009660:	4b2b      	ldr	r3, [pc, #172]	; (8009710 <USBD_SetConfig+0x148>)
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	461a      	mov	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800966a:	4b29      	ldr	r3, [pc, #164]	; (8009710 <USBD_SetConfig+0x148>)
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f7ff f93b 	bl	80088ec <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f9f1 	bl	8009a5e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800967c:	e042      	b.n	8009704 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800967e:	4b24      	ldr	r3, [pc, #144]	; (8009710 <USBD_SetConfig+0x148>)
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	461a      	mov	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	429a      	cmp	r2, r3
 800968a:	d02a      	beq.n	80096e2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	b2db      	uxtb	r3, r3
 8009692:	4619      	mov	r1, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7ff f929 	bl	80088ec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800969a:	4b1d      	ldr	r3, [pc, #116]	; (8009710 <USBD_SetConfig+0x148>)
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	461a      	mov	r2, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096a4:	4b1a      	ldr	r3, [pc, #104]	; (8009710 <USBD_SetConfig+0x148>)
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	4619      	mov	r1, r3
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f7ff f902 	bl	80088b4 <USBD_SetClassConfig>
 80096b0:	4603      	mov	r3, r0
 80096b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00f      	beq.n	80096da <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80096ba:	6839      	ldr	r1, [r7, #0]
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f903 	bl	80098c8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	4619      	mov	r1, r3
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f7ff f90e 	bl	80088ec <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2202      	movs	r2, #2
 80096d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80096d8:	e014      	b.n	8009704 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 f9bf 	bl	8009a5e <USBD_CtlSendStatus>
      break;
 80096e0:	e010      	b.n	8009704 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 f9bb 	bl	8009a5e <USBD_CtlSendStatus>
      break;
 80096e8:	e00c      	b.n	8009704 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80096ea:	6839      	ldr	r1, [r7, #0]
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 f8eb 	bl	80098c8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80096f2:	4b07      	ldr	r3, [pc, #28]	; (8009710 <USBD_SetConfig+0x148>)
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	4619      	mov	r1, r3
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f7ff f8f7 	bl	80088ec <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80096fe:	2303      	movs	r3, #3
 8009700:	73fb      	strb	r3, [r7, #15]
      break;
 8009702:	bf00      	nop
  }

  return ret;
 8009704:	7bfb      	ldrb	r3, [r7, #15]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	200001a4 	.word	0x200001a4

08009714 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	88db      	ldrh	r3, [r3, #6]
 8009722:	2b01      	cmp	r3, #1
 8009724:	d004      	beq.n	8009730 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009726:	6839      	ldr	r1, [r7, #0]
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f8cd 	bl	80098c8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800972e:	e023      	b.n	8009778 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009736:	b2db      	uxtb	r3, r3
 8009738:	2b02      	cmp	r3, #2
 800973a:	dc02      	bgt.n	8009742 <USBD_GetConfig+0x2e>
 800973c:	2b00      	cmp	r3, #0
 800973e:	dc03      	bgt.n	8009748 <USBD_GetConfig+0x34>
 8009740:	e015      	b.n	800976e <USBD_GetConfig+0x5a>
 8009742:	2b03      	cmp	r3, #3
 8009744:	d00b      	beq.n	800975e <USBD_GetConfig+0x4a>
 8009746:	e012      	b.n	800976e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	3308      	adds	r3, #8
 8009752:	2201      	movs	r2, #1
 8009754:	4619      	mov	r1, r3
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f927 	bl	80099aa <USBD_CtlSendData>
        break;
 800975c:	e00c      	b.n	8009778 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	3304      	adds	r3, #4
 8009762:	2201      	movs	r2, #1
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f91f 	bl	80099aa <USBD_CtlSendData>
        break;
 800976c:	e004      	b.n	8009778 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f8a9 	bl	80098c8 <USBD_CtlError>
        break;
 8009776:	bf00      	nop
}
 8009778:	bf00      	nop
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009790:	b2db      	uxtb	r3, r3
 8009792:	3b01      	subs	r3, #1
 8009794:	2b02      	cmp	r3, #2
 8009796:	d81e      	bhi.n	80097d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	88db      	ldrh	r3, [r3, #6]
 800979c:	2b02      	cmp	r3, #2
 800979e:	d004      	beq.n	80097aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f890 	bl	80098c8 <USBD_CtlError>
        break;
 80097a8:	e01a      	b.n	80097e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2201      	movs	r2, #1
 80097ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d005      	beq.n	80097c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	f043 0202 	orr.w	r2, r3, #2
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	330c      	adds	r3, #12
 80097ca:	2202      	movs	r2, #2
 80097cc:	4619      	mov	r1, r3
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f8eb 	bl	80099aa <USBD_CtlSendData>
      break;
 80097d4:	e004      	b.n	80097e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 f875 	bl	80098c8 <USBD_CtlError>
      break;
 80097de:	bf00      	nop
  }
}
 80097e0:	bf00      	nop
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	885b      	ldrh	r3, [r3, #2]
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d106      	bne.n	8009808 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2201      	movs	r2, #1
 80097fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f92b 	bl	8009a5e <USBD_CtlSendStatus>
  }
}
 8009808:	bf00      	nop
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009820:	b2db      	uxtb	r3, r3
 8009822:	3b01      	subs	r3, #1
 8009824:	2b02      	cmp	r3, #2
 8009826:	d80b      	bhi.n	8009840 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	885b      	ldrh	r3, [r3, #2]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d10c      	bne.n	800984a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 f910 	bl	8009a5e <USBD_CtlSendStatus>
      }
      break;
 800983e:	e004      	b.n	800984a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f840 	bl	80098c8 <USBD_CtlError>
      break;
 8009848:	e000      	b.n	800984c <USBD_ClrFeature+0x3c>
      break;
 800984a:	bf00      	nop
  }
}
 800984c:	bf00      	nop
 800984e:	3708      	adds	r7, #8
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	781a      	ldrb	r2, [r3, #0]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	3301      	adds	r3, #1
 800986e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	781a      	ldrb	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	3301      	adds	r3, #1
 800987c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f7ff fabb 	bl	8008dfa <SWAPBYTE>
 8009884:	4603      	mov	r3, r0
 8009886:	461a      	mov	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	3301      	adds	r3, #1
 8009890:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	3301      	adds	r3, #1
 8009896:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f7ff faae 	bl	8008dfa <SWAPBYTE>
 800989e:	4603      	mov	r3, r0
 80098a0:	461a      	mov	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	3301      	adds	r3, #1
 80098aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	3301      	adds	r3, #1
 80098b0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f7ff faa1 	bl	8008dfa <SWAPBYTE>
 80098b8:	4603      	mov	r3, r0
 80098ba:	461a      	mov	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	80da      	strh	r2, [r3, #6]
}
 80098c0:	bf00      	nop
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80098d2:	2180      	movs	r1, #128	; 0x80
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 fd7d 	bl	800a3d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80098da:	2100      	movs	r1, #0
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 fd79 	bl	800a3d4 <USBD_LL_StallEP>
}
 80098e2:	bf00      	nop
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b086      	sub	sp, #24
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	60f8      	str	r0, [r7, #12]
 80098f2:	60b9      	str	r1, [r7, #8]
 80098f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80098f6:	2300      	movs	r3, #0
 80098f8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d036      	beq.n	800996e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009904:	6938      	ldr	r0, [r7, #16]
 8009906:	f000 f836 	bl	8009976 <USBD_GetLen>
 800990a:	4603      	mov	r3, r0
 800990c:	3301      	adds	r3, #1
 800990e:	b29b      	uxth	r3, r3
 8009910:	005b      	lsls	r3, r3, #1
 8009912:	b29a      	uxth	r2, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009918:	7dfb      	ldrb	r3, [r7, #23]
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	4413      	add	r3, r2
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	7812      	ldrb	r2, [r2, #0]
 8009922:	701a      	strb	r2, [r3, #0]
  idx++;
 8009924:	7dfb      	ldrb	r3, [r7, #23]
 8009926:	3301      	adds	r3, #1
 8009928:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800992a:	7dfb      	ldrb	r3, [r7, #23]
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	4413      	add	r3, r2
 8009930:	2203      	movs	r2, #3
 8009932:	701a      	strb	r2, [r3, #0]
  idx++;
 8009934:	7dfb      	ldrb	r3, [r7, #23]
 8009936:	3301      	adds	r3, #1
 8009938:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800993a:	e013      	b.n	8009964 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800993c:	7dfb      	ldrb	r3, [r7, #23]
 800993e:	68ba      	ldr	r2, [r7, #8]
 8009940:	4413      	add	r3, r2
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	7812      	ldrb	r2, [r2, #0]
 8009946:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	3301      	adds	r3, #1
 800994c:	613b      	str	r3, [r7, #16]
    idx++;
 800994e:	7dfb      	ldrb	r3, [r7, #23]
 8009950:	3301      	adds	r3, #1
 8009952:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009954:	7dfb      	ldrb	r3, [r7, #23]
 8009956:	68ba      	ldr	r2, [r7, #8]
 8009958:	4413      	add	r3, r2
 800995a:	2200      	movs	r2, #0
 800995c:	701a      	strb	r2, [r3, #0]
    idx++;
 800995e:	7dfb      	ldrb	r3, [r7, #23]
 8009960:	3301      	adds	r3, #1
 8009962:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1e7      	bne.n	800993c <USBD_GetString+0x52>
 800996c:	e000      	b.n	8009970 <USBD_GetString+0x86>
    return;
 800996e:	bf00      	nop
  }
}
 8009970:	3718      	adds	r7, #24
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009976:	b480      	push	{r7}
 8009978:	b085      	sub	sp, #20
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800997e:	2300      	movs	r3, #0
 8009980:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009986:	e005      	b.n	8009994 <USBD_GetLen+0x1e>
  {
    len++;
 8009988:	7bfb      	ldrb	r3, [r7, #15]
 800998a:	3301      	adds	r3, #1
 800998c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	3301      	adds	r3, #1
 8009992:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1f5      	bne.n	8009988 <USBD_GetLen+0x12>
  }

  return len;
 800999c:	7bfb      	ldrb	r3, [r7, #15]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3714      	adds	r7, #20
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr

080099aa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b084      	sub	sp, #16
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	60f8      	str	r0, [r7, #12]
 80099b2:	60b9      	str	r1, [r7, #8]
 80099b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2202      	movs	r2, #2
 80099ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	2100      	movs	r1, #0
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f000 fd88 	bl	800a4e6 <USBD_LL_Transmit>

  return USBD_OK;
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	2100      	movs	r1, #0
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f000 fd77 	bl	800a4e6 <USBD_LL_Transmit>

  return USBD_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b084      	sub	sp, #16
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	60f8      	str	r0, [r7, #12]
 8009a0a:	60b9      	str	r1, [r7, #8]
 8009a0c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2203      	movs	r2, #3
 8009a12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	68ba      	ldr	r2, [r7, #8]
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f000 fd7b 	bl	800a528 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f000 fd6a 	bl	800a528 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b082      	sub	sp, #8
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2204      	movs	r2, #4
 8009a6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a6e:	2300      	movs	r3, #0
 8009a70:	2200      	movs	r2, #0
 8009a72:	2100      	movs	r1, #0
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fd36 	bl	800a4e6 <USBD_LL_Transmit>

  return USBD_OK;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3708      	adds	r7, #8
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2205      	movs	r2, #5
 8009a90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a94:	2300      	movs	r3, #0
 8009a96:	2200      	movs	r2, #0
 8009a98:	2100      	movs	r1, #0
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fd44 	bl	800a528 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
	...

08009aac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b087      	sub	sp, #28
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009aba:	2301      	movs	r3, #1
 8009abc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009ac2:	4b1f      	ldr	r3, [pc, #124]	; (8009b40 <FATFS_LinkDriverEx+0x94>)
 8009ac4:	7a5b      	ldrb	r3, [r3, #9]
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d131      	bne.n	8009b30 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009acc:	4b1c      	ldr	r3, [pc, #112]	; (8009b40 <FATFS_LinkDriverEx+0x94>)
 8009ace:	7a5b      	ldrb	r3, [r3, #9]
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	4b1a      	ldr	r3, [pc, #104]	; (8009b40 <FATFS_LinkDriverEx+0x94>)
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009ada:	4b19      	ldr	r3, [pc, #100]	; (8009b40 <FATFS_LinkDriverEx+0x94>)
 8009adc:	7a5b      	ldrb	r3, [r3, #9]
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	4a17      	ldr	r2, [pc, #92]	; (8009b40 <FATFS_LinkDriverEx+0x94>)
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4413      	add	r3, r2
 8009ae6:	68fa      	ldr	r2, [r7, #12]
 8009ae8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009aea:	4b15      	ldr	r3, [pc, #84]	; (8009b40 <FATFS_LinkDriverEx+0x94>)
 8009aec:	7a5b      	ldrb	r3, [r3, #9]
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	461a      	mov	r2, r3
 8009af2:	4b13      	ldr	r3, [pc, #76]	; (8009b40 <FATFS_LinkDriverEx+0x94>)
 8009af4:	4413      	add	r3, r2
 8009af6:	79fa      	ldrb	r2, [r7, #7]
 8009af8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009afa:	4b11      	ldr	r3, [pc, #68]	; (8009b40 <FATFS_LinkDriverEx+0x94>)
 8009afc:	7a5b      	ldrb	r3, [r3, #9]
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	1c5a      	adds	r2, r3, #1
 8009b02:	b2d1      	uxtb	r1, r2
 8009b04:	4a0e      	ldr	r2, [pc, #56]	; (8009b40 <FATFS_LinkDriverEx+0x94>)
 8009b06:	7251      	strb	r1, [r2, #9]
 8009b08:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009b0a:	7dbb      	ldrb	r3, [r7, #22]
 8009b0c:	3330      	adds	r3, #48	; 0x30
 8009b0e:	b2da      	uxtb	r2, r3
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	3301      	adds	r3, #1
 8009b18:	223a      	movs	r2, #58	; 0x3a
 8009b1a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	3302      	adds	r3, #2
 8009b20:	222f      	movs	r2, #47	; 0x2f
 8009b22:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	3303      	adds	r3, #3
 8009b28:	2200      	movs	r2, #0
 8009b2a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	371c      	adds	r7, #28
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	200001a8 	.word	0x200001a8

08009b44 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009b4e:	2200      	movs	r2, #0
 8009b50:	6839      	ldr	r1, [r7, #0]
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7ff ffaa 	bl	8009aac <FATFS_LinkDriverEx>
 8009b58:	4603      	mov	r3, r0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
	...

08009b64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	4912      	ldr	r1, [pc, #72]	; (8009bb4 <MX_USB_DEVICE_Init+0x50>)
 8009b6c:	4812      	ldr	r0, [pc, #72]	; (8009bb8 <MX_USB_DEVICE_Init+0x54>)
 8009b6e:	f7fe fe33 	bl	80087d8 <USBD_Init>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d001      	beq.n	8009b7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b78:	f7f6 fe66 	bl	8000848 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009b7c:	490f      	ldr	r1, [pc, #60]	; (8009bbc <MX_USB_DEVICE_Init+0x58>)
 8009b7e:	480e      	ldr	r0, [pc, #56]	; (8009bb8 <MX_USB_DEVICE_Init+0x54>)
 8009b80:	f7fe fe5a 	bl	8008838 <USBD_RegisterClass>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b8a:	f7f6 fe5d 	bl	8000848 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009b8e:	490c      	ldr	r1, [pc, #48]	; (8009bc0 <MX_USB_DEVICE_Init+0x5c>)
 8009b90:	4809      	ldr	r0, [pc, #36]	; (8009bb8 <MX_USB_DEVICE_Init+0x54>)
 8009b92:	f7fe fd7b 	bl	800868c <USBD_CDC_RegisterInterface>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d001      	beq.n	8009ba0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b9c:	f7f6 fe54 	bl	8000848 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009ba0:	4805      	ldr	r0, [pc, #20]	; (8009bb8 <MX_USB_DEVICE_Init+0x54>)
 8009ba2:	f7fe fe70 	bl	8008886 <USBD_Start>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d001      	beq.n	8009bb0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009bac:	f7f6 fe4c 	bl	8000848 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009bb0:	bf00      	nop
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	20000130 	.word	0x20000130
 8009bb8:	20000ac8 	.word	0x20000ac8
 8009bbc:	20000018 	.word	0x20000018
 8009bc0:	2000011c 	.word	0x2000011c

08009bc4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009bc8:	2200      	movs	r2, #0
 8009bca:	4905      	ldr	r1, [pc, #20]	; (8009be0 <CDC_Init_FS+0x1c>)
 8009bcc:	4805      	ldr	r0, [pc, #20]	; (8009be4 <CDC_Init_FS+0x20>)
 8009bce:	f7fe fd72 	bl	80086b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009bd2:	4905      	ldr	r1, [pc, #20]	; (8009be8 <CDC_Init_FS+0x24>)
 8009bd4:	4803      	ldr	r0, [pc, #12]	; (8009be4 <CDC_Init_FS+0x20>)
 8009bd6:	f7fe fd8c 	bl	80086f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009bda:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	20001598 	.word	0x20001598
 8009be4:	20000ac8 	.word	0x20000ac8
 8009be8:	20000d98 	.word	0x20000d98

08009bec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009bec:	b480      	push	{r7}
 8009bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009bf0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	4603      	mov	r3, r0
 8009c04:	6039      	str	r1, [r7, #0]
 8009c06:	71fb      	strb	r3, [r7, #7]
 8009c08:	4613      	mov	r3, r2
 8009c0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 8009c0c:	4a49      	ldr	r2, [pc, #292]	; (8009d34 <CDC_Control_FS+0x138>)
 8009c0e:	f107 0308 	add.w	r3, r7, #8
 8009c12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c16:	6018      	str	r0, [r3, #0]
 8009c18:	3304      	adds	r3, #4
 8009c1a:	8019      	strh	r1, [r3, #0]
 8009c1c:	3302      	adds	r3, #2
 8009c1e:	0c0a      	lsrs	r2, r1, #16
 8009c20:	701a      	strb	r2, [r3, #0]
  switch(cmd)
 8009c22:	79fb      	ldrb	r3, [r7, #7]
 8009c24:	2b23      	cmp	r3, #35	; 0x23
 8009c26:	d87d      	bhi.n	8009d24 <CDC_Control_FS+0x128>
 8009c28:	a201      	add	r2, pc, #4	; (adr r2, 8009c30 <CDC_Control_FS+0x34>)
 8009c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c2e:	bf00      	nop
 8009c30:	08009d25 	.word	0x08009d25
 8009c34:	08009d25 	.word	0x08009d25
 8009c38:	08009d25 	.word	0x08009d25
 8009c3c:	08009d25 	.word	0x08009d25
 8009c40:	08009d25 	.word	0x08009d25
 8009c44:	08009d25 	.word	0x08009d25
 8009c48:	08009d25 	.word	0x08009d25
 8009c4c:	08009d25 	.word	0x08009d25
 8009c50:	08009d25 	.word	0x08009d25
 8009c54:	08009d25 	.word	0x08009d25
 8009c58:	08009d25 	.word	0x08009d25
 8009c5c:	08009d25 	.word	0x08009d25
 8009c60:	08009d25 	.word	0x08009d25
 8009c64:	08009d25 	.word	0x08009d25
 8009c68:	08009d25 	.word	0x08009d25
 8009c6c:	08009d25 	.word	0x08009d25
 8009c70:	08009d25 	.word	0x08009d25
 8009c74:	08009d25 	.word	0x08009d25
 8009c78:	08009d25 	.word	0x08009d25
 8009c7c:	08009d25 	.word	0x08009d25
 8009c80:	08009d25 	.word	0x08009d25
 8009c84:	08009d25 	.word	0x08009d25
 8009c88:	08009d25 	.word	0x08009d25
 8009c8c:	08009d25 	.word	0x08009d25
 8009c90:	08009d25 	.word	0x08009d25
 8009c94:	08009d25 	.word	0x08009d25
 8009c98:	08009d25 	.word	0x08009d25
 8009c9c:	08009d25 	.word	0x08009d25
 8009ca0:	08009d25 	.word	0x08009d25
 8009ca4:	08009d25 	.word	0x08009d25
 8009ca8:	08009d25 	.word	0x08009d25
 8009cac:	08009d25 	.word	0x08009d25
 8009cb0:	08009cc1 	.word	0x08009cc1
 8009cb4:	08009ced 	.word	0x08009ced
 8009cb8:	08009d25 	.word	0x08009d25
 8009cbc:	08009d25 	.word	0x08009d25
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
       tempbuf[0] = pbuf[0];
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	723b      	strb	r3, [r7, #8]
       tempbuf[1] = pbuf[1];
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	785b      	ldrb	r3, [r3, #1]
 8009cca:	727b      	strb	r3, [r7, #9]
       tempbuf[2] = pbuf[2];
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	789b      	ldrb	r3, [r3, #2]
 8009cd0:	72bb      	strb	r3, [r7, #10]
       tempbuf[3] = pbuf[3];
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	78db      	ldrb	r3, [r3, #3]
 8009cd6:	72fb      	strb	r3, [r7, #11]
       tempbuf[4] = pbuf[4];
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	791b      	ldrb	r3, [r3, #4]
 8009cdc:	733b      	strb	r3, [r7, #12]
       tempbuf[5] = pbuf[5];
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	795b      	ldrb	r3, [r3, #5]
 8009ce2:	737b      	strb	r3, [r7, #13]
       tempbuf[6] = pbuf[6];
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	799b      	ldrb	r3, [r3, #6]
 8009ce8:	73bb      	strb	r3, [r7, #14]
       break;
 8009cea:	e01c      	b.n	8009d26 <CDC_Control_FS+0x12a>

     case CDC_GET_LINE_CODING:
       pbuf[0] = tempbuf[0];
 8009cec:	7a3a      	ldrb	r2, [r7, #8]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	701a      	strb	r2, [r3, #0]
       pbuf[1] = tempbuf[1];
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	7a7a      	ldrb	r2, [r7, #9]
 8009cf8:	701a      	strb	r2, [r3, #0]
       pbuf[2] = tempbuf[2];
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	3302      	adds	r3, #2
 8009cfe:	7aba      	ldrb	r2, [r7, #10]
 8009d00:	701a      	strb	r2, [r3, #0]
       pbuf[3] = tempbuf[3];
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	3303      	adds	r3, #3
 8009d06:	7afa      	ldrb	r2, [r7, #11]
 8009d08:	701a      	strb	r2, [r3, #0]
       pbuf[4] = tempbuf[4];
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	3304      	adds	r3, #4
 8009d0e:	7b3a      	ldrb	r2, [r7, #12]
 8009d10:	701a      	strb	r2, [r3, #0]
       pbuf[5] = tempbuf[5];
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	3305      	adds	r3, #5
 8009d16:	7b7a      	ldrb	r2, [r7, #13]
 8009d18:	701a      	strb	r2, [r3, #0]
       pbuf[6] = tempbuf[6];
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	3306      	adds	r3, #6
 8009d1e:	7bba      	ldrb	r2, [r7, #14]
 8009d20:	701a      	strb	r2, [r3, #0]
       break;
 8009d22:	e000      	b.n	8009d26 <CDC_Control_FS+0x12a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009d24:	bf00      	nop
  }

  return (USBD_OK);
 8009d26:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3714      	adds	r7, #20
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	0800a6b4 	.word	0x0800a6b4

08009d38 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009d42:	6879      	ldr	r1, [r7, #4]
 8009d44:	4805      	ldr	r0, [pc, #20]	; (8009d5c <CDC_Receive_FS+0x24>)
 8009d46:	f7fe fcd4 	bl	80086f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009d4a:	4804      	ldr	r0, [pc, #16]	; (8009d5c <CDC_Receive_FS+0x24>)
 8009d4c:	f7fe fd1a 	bl	8008784 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009d50:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20000ac8 	.word	0x20000ac8

08009d60 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009d70:	4b0d      	ldr	r3, [pc, #52]	; (8009da8 <CDC_Transmit_FS+0x48>)
 8009d72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d76:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009d82:	2301      	movs	r3, #1
 8009d84:	e00b      	b.n	8009d9e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009d86:	887b      	ldrh	r3, [r7, #2]
 8009d88:	461a      	mov	r2, r3
 8009d8a:	6879      	ldr	r1, [r7, #4]
 8009d8c:	4806      	ldr	r0, [pc, #24]	; (8009da8 <CDC_Transmit_FS+0x48>)
 8009d8e:	f7fe fc92 	bl	80086b6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009d92:	4805      	ldr	r0, [pc, #20]	; (8009da8 <CDC_Transmit_FS+0x48>)
 8009d94:	f7fe fcc6 	bl	8008724 <USBD_CDC_TransmitPacket>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	20000ac8 	.word	0x20000ac8

08009dac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b087      	sub	sp, #28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	4613      	mov	r3, r2
 8009db8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009dbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	371c      	adds	r7, #28
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr
	...

08009dd0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	6039      	str	r1, [r7, #0]
 8009dda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	2212      	movs	r2, #18
 8009de0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009de2:	4b03      	ldr	r3, [pc, #12]	; (8009df0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	2000014c 	.word	0x2000014c

08009df4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	6039      	str	r1, [r7, #0]
 8009dfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	2204      	movs	r2, #4
 8009e04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009e06:	4b03      	ldr	r3, [pc, #12]	; (8009e14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr
 8009e14:	20000160 	.word	0x20000160

08009e18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	4603      	mov	r3, r0
 8009e20:	6039      	str	r1, [r7, #0]
 8009e22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e24:	79fb      	ldrb	r3, [r7, #7]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d105      	bne.n	8009e36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e2a:	683a      	ldr	r2, [r7, #0]
 8009e2c:	4907      	ldr	r1, [pc, #28]	; (8009e4c <USBD_FS_ProductStrDescriptor+0x34>)
 8009e2e:	4808      	ldr	r0, [pc, #32]	; (8009e50 <USBD_FS_ProductStrDescriptor+0x38>)
 8009e30:	f7ff fd5b 	bl	80098ea <USBD_GetString>
 8009e34:	e004      	b.n	8009e40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e36:	683a      	ldr	r2, [r7, #0]
 8009e38:	4904      	ldr	r1, [pc, #16]	; (8009e4c <USBD_FS_ProductStrDescriptor+0x34>)
 8009e3a:	4805      	ldr	r0, [pc, #20]	; (8009e50 <USBD_FS_ProductStrDescriptor+0x38>)
 8009e3c:	f7ff fd55 	bl	80098ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e40:	4b02      	ldr	r3, [pc, #8]	; (8009e4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3708      	adds	r7, #8
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	20001d98 	.word	0x20001d98
 8009e50:	0800a6bc 	.word	0x0800a6bc

08009e54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	6039      	str	r1, [r7, #0]
 8009e5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e60:	683a      	ldr	r2, [r7, #0]
 8009e62:	4904      	ldr	r1, [pc, #16]	; (8009e74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009e64:	4804      	ldr	r0, [pc, #16]	; (8009e78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009e66:	f7ff fd40 	bl	80098ea <USBD_GetString>
  return USBD_StrDesc;
 8009e6a:	4b02      	ldr	r3, [pc, #8]	; (8009e74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3708      	adds	r7, #8
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	20001d98 	.word	0x20001d98
 8009e78:	0800a6d4 	.word	0x0800a6d4

08009e7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	4603      	mov	r3, r0
 8009e84:	6039      	str	r1, [r7, #0]
 8009e86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	221a      	movs	r2, #26
 8009e8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009e8e:	f000 f843 	bl	8009f18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009e92:	4b02      	ldr	r3, [pc, #8]	; (8009e9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3708      	adds	r7, #8
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	20000164 	.word	0x20000164

08009ea0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	6039      	str	r1, [r7, #0]
 8009eaa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009eac:	79fb      	ldrb	r3, [r7, #7]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d105      	bne.n	8009ebe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	4907      	ldr	r1, [pc, #28]	; (8009ed4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009eb6:	4808      	ldr	r0, [pc, #32]	; (8009ed8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009eb8:	f7ff fd17 	bl	80098ea <USBD_GetString>
 8009ebc:	e004      	b.n	8009ec8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	4904      	ldr	r1, [pc, #16]	; (8009ed4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ec2:	4805      	ldr	r0, [pc, #20]	; (8009ed8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ec4:	f7ff fd11 	bl	80098ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ec8:	4b02      	ldr	r3, [pc, #8]	; (8009ed4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	20001d98 	.word	0x20001d98
 8009ed8:	0800a6e8 	.word	0x0800a6e8

08009edc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	6039      	str	r1, [r7, #0]
 8009ee6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ee8:	79fb      	ldrb	r3, [r7, #7]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d105      	bne.n	8009efa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009eee:	683a      	ldr	r2, [r7, #0]
 8009ef0:	4907      	ldr	r1, [pc, #28]	; (8009f10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ef2:	4808      	ldr	r0, [pc, #32]	; (8009f14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ef4:	f7ff fcf9 	bl	80098ea <USBD_GetString>
 8009ef8:	e004      	b.n	8009f04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009efa:	683a      	ldr	r2, [r7, #0]
 8009efc:	4904      	ldr	r1, [pc, #16]	; (8009f10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009efe:	4805      	ldr	r0, [pc, #20]	; (8009f14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f00:	f7ff fcf3 	bl	80098ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f04:	4b02      	ldr	r3, [pc, #8]	; (8009f10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3708      	adds	r7, #8
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	20001d98 	.word	0x20001d98
 8009f14:	0800a6f4 	.word	0x0800a6f4

08009f18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009f1e:	4b0f      	ldr	r3, [pc, #60]	; (8009f5c <Get_SerialNum+0x44>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009f24:	4b0e      	ldr	r3, [pc, #56]	; (8009f60 <Get_SerialNum+0x48>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009f2a:	4b0e      	ldr	r3, [pc, #56]	; (8009f64 <Get_SerialNum+0x4c>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4413      	add	r3, r2
 8009f36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d009      	beq.n	8009f52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009f3e:	2208      	movs	r2, #8
 8009f40:	4909      	ldr	r1, [pc, #36]	; (8009f68 <Get_SerialNum+0x50>)
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f000 f814 	bl	8009f70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009f48:	2204      	movs	r2, #4
 8009f4a:	4908      	ldr	r1, [pc, #32]	; (8009f6c <Get_SerialNum+0x54>)
 8009f4c:	68b8      	ldr	r0, [r7, #8]
 8009f4e:	f000 f80f 	bl	8009f70 <IntToUnicode>
  }
}
 8009f52:	bf00      	nop
 8009f54:	3710      	adds	r7, #16
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	1fff7a10 	.word	0x1fff7a10
 8009f60:	1fff7a14 	.word	0x1fff7a14
 8009f64:	1fff7a18 	.word	0x1fff7a18
 8009f68:	20000166 	.word	0x20000166
 8009f6c:	20000176 	.word	0x20000176

08009f70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b087      	sub	sp, #28
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009f82:	2300      	movs	r3, #0
 8009f84:	75fb      	strb	r3, [r7, #23]
 8009f86:	e027      	b.n	8009fd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	0f1b      	lsrs	r3, r3, #28
 8009f8c:	2b09      	cmp	r3, #9
 8009f8e:	d80b      	bhi.n	8009fa8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	0f1b      	lsrs	r3, r3, #28
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	7dfb      	ldrb	r3, [r7, #23]
 8009f98:	005b      	lsls	r3, r3, #1
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	440b      	add	r3, r1
 8009fa0:	3230      	adds	r2, #48	; 0x30
 8009fa2:	b2d2      	uxtb	r2, r2
 8009fa4:	701a      	strb	r2, [r3, #0]
 8009fa6:	e00a      	b.n	8009fbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	0f1b      	lsrs	r3, r3, #28
 8009fac:	b2da      	uxtb	r2, r3
 8009fae:	7dfb      	ldrb	r3, [r7, #23]
 8009fb0:	005b      	lsls	r3, r3, #1
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	440b      	add	r3, r1
 8009fb8:	3237      	adds	r2, #55	; 0x37
 8009fba:	b2d2      	uxtb	r2, r2
 8009fbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	011b      	lsls	r3, r3, #4
 8009fc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009fc4:	7dfb      	ldrb	r3, [r7, #23]
 8009fc6:	005b      	lsls	r3, r3, #1
 8009fc8:	3301      	adds	r3, #1
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	4413      	add	r3, r2
 8009fce:	2200      	movs	r2, #0
 8009fd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009fd2:	7dfb      	ldrb	r3, [r7, #23]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	75fb      	strb	r3, [r7, #23]
 8009fd8:	7dfa      	ldrb	r2, [r7, #23]
 8009fda:	79fb      	ldrb	r3, [r7, #7]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d3d3      	bcc.n	8009f88 <IntToUnicode+0x18>
  }
}
 8009fe0:	bf00      	nop
 8009fe2:	bf00      	nop
 8009fe4:	371c      	adds	r7, #28
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
	...

08009ff0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08a      	sub	sp, #40	; 0x28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ff8:	f107 0314 	add.w	r3, r7, #20
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	601a      	str	r2, [r3, #0]
 800a000:	605a      	str	r2, [r3, #4]
 800a002:	609a      	str	r2, [r3, #8]
 800a004:	60da      	str	r2, [r3, #12]
 800a006:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a010:	d13a      	bne.n	800a088 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a012:	2300      	movs	r3, #0
 800a014:	613b      	str	r3, [r7, #16]
 800a016:	4b1e      	ldr	r3, [pc, #120]	; (800a090 <HAL_PCD_MspInit+0xa0>)
 800a018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01a:	4a1d      	ldr	r2, [pc, #116]	; (800a090 <HAL_PCD_MspInit+0xa0>)
 800a01c:	f043 0301 	orr.w	r3, r3, #1
 800a020:	6313      	str	r3, [r2, #48]	; 0x30
 800a022:	4b1b      	ldr	r3, [pc, #108]	; (800a090 <HAL_PCD_MspInit+0xa0>)
 800a024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a026:	f003 0301 	and.w	r3, r3, #1
 800a02a:	613b      	str	r3, [r7, #16]
 800a02c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a02e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a034:	2302      	movs	r3, #2
 800a036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a038:	2300      	movs	r3, #0
 800a03a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a03c:	2303      	movs	r3, #3
 800a03e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a040:	230a      	movs	r3, #10
 800a042:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a044:	f107 0314 	add.w	r3, r7, #20
 800a048:	4619      	mov	r1, r3
 800a04a:	4812      	ldr	r0, [pc, #72]	; (800a094 <HAL_PCD_MspInit+0xa4>)
 800a04c:	f7f7 fbc8 	bl	80017e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a050:	4b0f      	ldr	r3, [pc, #60]	; (800a090 <HAL_PCD_MspInit+0xa0>)
 800a052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a054:	4a0e      	ldr	r2, [pc, #56]	; (800a090 <HAL_PCD_MspInit+0xa0>)
 800a056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a05a:	6353      	str	r3, [r2, #52]	; 0x34
 800a05c:	2300      	movs	r3, #0
 800a05e:	60fb      	str	r3, [r7, #12]
 800a060:	4b0b      	ldr	r3, [pc, #44]	; (800a090 <HAL_PCD_MspInit+0xa0>)
 800a062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a064:	4a0a      	ldr	r2, [pc, #40]	; (800a090 <HAL_PCD_MspInit+0xa0>)
 800a066:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a06a:	6453      	str	r3, [r2, #68]	; 0x44
 800a06c:	4b08      	ldr	r3, [pc, #32]	; (800a090 <HAL_PCD_MspInit+0xa0>)
 800a06e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a074:	60fb      	str	r3, [r7, #12]
 800a076:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a078:	2200      	movs	r2, #0
 800a07a:	2100      	movs	r1, #0
 800a07c:	2043      	movs	r0, #67	; 0x43
 800a07e:	f7f6 ff6a 	bl	8000f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a082:	2043      	movs	r0, #67	; 0x43
 800a084:	f7f6 ff83 	bl	8000f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a088:	bf00      	nop
 800a08a:	3728      	adds	r7, #40	; 0x28
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	40023800 	.word	0x40023800
 800a094:	40020000 	.word	0x40020000

0800a098 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	4610      	mov	r0, r2
 800a0b0:	f7fe fc34 	bl	800891c <USBD_LL_SetupStage>
}
 800a0b4:	bf00      	nop
 800a0b6:	3708      	adds	r7, #8
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a0ce:	78fa      	ldrb	r2, [r7, #3]
 800a0d0:	6879      	ldr	r1, [r7, #4]
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	00db      	lsls	r3, r3, #3
 800a0d6:	1a9b      	subs	r3, r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	440b      	add	r3, r1
 800a0dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	78fb      	ldrb	r3, [r7, #3]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	f7fe fc6e 	bl	80089c6 <USBD_LL_DataOutStage>
}
 800a0ea:	bf00      	nop
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b082      	sub	sp, #8
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a104:	78fa      	ldrb	r2, [r7, #3]
 800a106:	6879      	ldr	r1, [r7, #4]
 800a108:	4613      	mov	r3, r2
 800a10a:	00db      	lsls	r3, r3, #3
 800a10c:	1a9b      	subs	r3, r3, r2
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	440b      	add	r3, r1
 800a112:	3348      	adds	r3, #72	; 0x48
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	78fb      	ldrb	r3, [r7, #3]
 800a118:	4619      	mov	r1, r3
 800a11a:	f7fe fcb7 	bl	8008a8c <USBD_LL_DataInStage>
}
 800a11e:	bf00      	nop
 800a120:	3708      	adds	r7, #8
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b082      	sub	sp, #8
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a134:	4618      	mov	r0, r3
 800a136:	f7fe fdcb 	bl	8008cd0 <USBD_LL_SOF>
}
 800a13a:	bf00      	nop
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b084      	sub	sp, #16
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a14a:	2301      	movs	r3, #1
 800a14c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d102      	bne.n	800a15c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a156:	2300      	movs	r3, #0
 800a158:	73fb      	strb	r3, [r7, #15]
 800a15a:	e008      	b.n	800a16e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	2b02      	cmp	r3, #2
 800a162:	d102      	bne.n	800a16a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a164:	2301      	movs	r3, #1
 800a166:	73fb      	strb	r3, [r7, #15]
 800a168:	e001      	b.n	800a16e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a16a:	f7f6 fb6d 	bl	8000848 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a174:	7bfa      	ldrb	r2, [r7, #15]
 800a176:	4611      	mov	r1, r2
 800a178:	4618      	mov	r0, r3
 800a17a:	f7fe fd6b 	bl	8008c54 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a184:	4618      	mov	r0, r3
 800a186:	f7fe fd17 	bl	8008bb8 <USBD_LL_Reset>
}
 800a18a:	bf00      	nop
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
	...

0800a194 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7fe fd66 	bl	8008c74 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	6812      	ldr	r2, [r2, #0]
 800a1b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a1ba:	f043 0301 	orr.w	r3, r3, #1
 800a1be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6a1b      	ldr	r3, [r3, #32]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d005      	beq.n	800a1d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1c8:	4b04      	ldr	r3, [pc, #16]	; (800a1dc <HAL_PCD_SuspendCallback+0x48>)
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	4a03      	ldr	r2, [pc, #12]	; (800a1dc <HAL_PCD_SuspendCallback+0x48>)
 800a1ce:	f043 0306 	orr.w	r3, r3, #6
 800a1d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a1d4:	bf00      	nop
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	e000ed00 	.word	0xe000ed00

0800a1e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fe fd56 	bl	8008ca0 <USBD_LL_Resume>
}
 800a1f4:	bf00      	nop
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	460b      	mov	r3, r1
 800a206:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a20e:	78fa      	ldrb	r2, [r7, #3]
 800a210:	4611      	mov	r1, r2
 800a212:	4618      	mov	r0, r3
 800a214:	f7fe fda4 	bl	8008d60 <USBD_LL_IsoOUTIncomplete>
}
 800a218:	bf00      	nop
 800a21a:	3708      	adds	r7, #8
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	460b      	mov	r3, r1
 800a22a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a232:	78fa      	ldrb	r2, [r7, #3]
 800a234:	4611      	mov	r1, r2
 800a236:	4618      	mov	r0, r3
 800a238:	f7fe fd6c 	bl	8008d14 <USBD_LL_IsoINIncomplete>
}
 800a23c:	bf00      	nop
 800a23e:	3708      	adds	r7, #8
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a252:	4618      	mov	r0, r3
 800a254:	f7fe fdaa 	bl	8008dac <USBD_LL_DevConnected>
}
 800a258:	bf00      	nop
 800a25a:	3708      	adds	r7, #8
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fe fda7 	bl	8008dc2 <USBD_LL_DevDisconnected>
}
 800a274:	bf00      	nop
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d13c      	bne.n	800a306 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a28c:	4a20      	ldr	r2, [pc, #128]	; (800a310 <USBD_LL_Init+0x94>)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a1e      	ldr	r2, [pc, #120]	; (800a310 <USBD_LL_Init+0x94>)
 800a298:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a29c:	4b1c      	ldr	r3, [pc, #112]	; (800a310 <USBD_LL_Init+0x94>)
 800a29e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a2a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a2a4:	4b1a      	ldr	r3, [pc, #104]	; (800a310 <USBD_LL_Init+0x94>)
 800a2a6:	2204      	movs	r2, #4
 800a2a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a2aa:	4b19      	ldr	r3, [pc, #100]	; (800a310 <USBD_LL_Init+0x94>)
 800a2ac:	2202      	movs	r2, #2
 800a2ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a2b0:	4b17      	ldr	r3, [pc, #92]	; (800a310 <USBD_LL_Init+0x94>)
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a2b6:	4b16      	ldr	r3, [pc, #88]	; (800a310 <USBD_LL_Init+0x94>)
 800a2b8:	2202      	movs	r2, #2
 800a2ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a2bc:	4b14      	ldr	r3, [pc, #80]	; (800a310 <USBD_LL_Init+0x94>)
 800a2be:	2200      	movs	r2, #0
 800a2c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a2c2:	4b13      	ldr	r3, [pc, #76]	; (800a310 <USBD_LL_Init+0x94>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a2c8:	4b11      	ldr	r3, [pc, #68]	; (800a310 <USBD_LL_Init+0x94>)
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a2ce:	4b10      	ldr	r3, [pc, #64]	; (800a310 <USBD_LL_Init+0x94>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a2d4:	4b0e      	ldr	r3, [pc, #56]	; (800a310 <USBD_LL_Init+0x94>)
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a2da:	480d      	ldr	r0, [pc, #52]	; (800a310 <USBD_LL_Init+0x94>)
 800a2dc:	f7f7 fc4d 	bl	8001b7a <HAL_PCD_Init>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a2e6:	f7f6 faaf 	bl	8000848 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a2ea:	2180      	movs	r1, #128	; 0x80
 800a2ec:	4808      	ldr	r0, [pc, #32]	; (800a310 <USBD_LL_Init+0x94>)
 800a2ee:	f7f8 fdaa 	bl	8002e46 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a2f2:	2240      	movs	r2, #64	; 0x40
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	4806      	ldr	r0, [pc, #24]	; (800a310 <USBD_LL_Init+0x94>)
 800a2f8:	f7f8 fd5e 	bl	8002db8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a2fc:	2280      	movs	r2, #128	; 0x80
 800a2fe:	2101      	movs	r1, #1
 800a300:	4803      	ldr	r0, [pc, #12]	; (800a310 <USBD_LL_Init+0x94>)
 800a302:	f7f8 fd59 	bl	8002db8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3708      	adds	r7, #8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	20001f98 	.word	0x20001f98

0800a314 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7f7 fd42 	bl	8001db4 <HAL_PCD_Start>
 800a330:	4603      	mov	r3, r0
 800a332:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a334:	7bfb      	ldrb	r3, [r7, #15]
 800a336:	4618      	mov	r0, r3
 800a338:	f000 f942 	bl	800a5c0 <USBD_Get_USB_Status>
 800a33c:	4603      	mov	r3, r0
 800a33e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a340:	7bbb      	ldrb	r3, [r7, #14]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b084      	sub	sp, #16
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	4608      	mov	r0, r1
 800a354:	4611      	mov	r1, r2
 800a356:	461a      	mov	r2, r3
 800a358:	4603      	mov	r3, r0
 800a35a:	70fb      	strb	r3, [r7, #3]
 800a35c:	460b      	mov	r3, r1
 800a35e:	70bb      	strb	r3, [r7, #2]
 800a360:	4613      	mov	r3, r2
 800a362:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a364:	2300      	movs	r3, #0
 800a366:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a368:	2300      	movs	r3, #0
 800a36a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a372:	78bb      	ldrb	r3, [r7, #2]
 800a374:	883a      	ldrh	r2, [r7, #0]
 800a376:	78f9      	ldrb	r1, [r7, #3]
 800a378:	f7f8 f926 	bl	80025c8 <HAL_PCD_EP_Open>
 800a37c:	4603      	mov	r3, r0
 800a37e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a380:	7bfb      	ldrb	r3, [r7, #15]
 800a382:	4618      	mov	r0, r3
 800a384:	f000 f91c 	bl	800a5c0 <USBD_Get_USB_Status>
 800a388:	4603      	mov	r3, r0
 800a38a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a38c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b084      	sub	sp, #16
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
 800a39e:	460b      	mov	r3, r1
 800a3a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3b0:	78fa      	ldrb	r2, [r7, #3]
 800a3b2:	4611      	mov	r1, r2
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7f8 f96f 	bl	8002698 <HAL_PCD_EP_Close>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3be:	7bfb      	ldrb	r3, [r7, #15]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f000 f8fd 	bl	800a5c0 <USBD_Get_USB_Status>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3710      	adds	r7, #16
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	460b      	mov	r3, r1
 800a3de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3ee:	78fa      	ldrb	r2, [r7, #3]
 800a3f0:	4611      	mov	r1, r2
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7f8 fa47 	bl	8002886 <HAL_PCD_EP_SetStall>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3fc:	7bfb      	ldrb	r3, [r7, #15]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f000 f8de 	bl	800a5c0 <USBD_Get_USB_Status>
 800a404:	4603      	mov	r3, r0
 800a406:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a408:	7bbb      	ldrb	r3, [r7, #14]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b084      	sub	sp, #16
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
 800a41a:	460b      	mov	r3, r1
 800a41c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a41e:	2300      	movs	r3, #0
 800a420:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a422:	2300      	movs	r3, #0
 800a424:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a42c:	78fa      	ldrb	r2, [r7, #3]
 800a42e:	4611      	mov	r1, r2
 800a430:	4618      	mov	r0, r3
 800a432:	f7f8 fa8c 	bl	800294e <HAL_PCD_EP_ClrStall>
 800a436:	4603      	mov	r3, r0
 800a438:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a43a:	7bfb      	ldrb	r3, [r7, #15]
 800a43c:	4618      	mov	r0, r3
 800a43e:	f000 f8bf 	bl	800a5c0 <USBD_Get_USB_Status>
 800a442:	4603      	mov	r3, r0
 800a444:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a446:	7bbb      	ldrb	r3, [r7, #14]
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	460b      	mov	r3, r1
 800a45a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a462:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	da0b      	bge.n	800a484 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a46c:	78fb      	ldrb	r3, [r7, #3]
 800a46e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a472:	68f9      	ldr	r1, [r7, #12]
 800a474:	4613      	mov	r3, r2
 800a476:	00db      	lsls	r3, r3, #3
 800a478:	1a9b      	subs	r3, r3, r2
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	440b      	add	r3, r1
 800a47e:	333e      	adds	r3, #62	; 0x3e
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	e00b      	b.n	800a49c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a484:	78fb      	ldrb	r3, [r7, #3]
 800a486:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a48a:	68f9      	ldr	r1, [r7, #12]
 800a48c:	4613      	mov	r3, r2
 800a48e:	00db      	lsls	r3, r3, #3
 800a490:	1a9b      	subs	r3, r3, r2
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	440b      	add	r3, r1
 800a496:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a49a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3714      	adds	r7, #20
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a4c2:	78fa      	ldrb	r2, [r7, #3]
 800a4c4:	4611      	mov	r1, r2
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7f8 f859 	bl	800257e <HAL_PCD_SetAddress>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4d0:	7bfb      	ldrb	r3, [r7, #15]
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f000 f874 	bl	800a5c0 <USBD_Get_USB_Status>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b086      	sub	sp, #24
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	60f8      	str	r0, [r7, #12]
 800a4ee:	607a      	str	r2, [r7, #4]
 800a4f0:	603b      	str	r3, [r7, #0]
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a504:	7af9      	ldrb	r1, [r7, #11]
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	f7f8 f972 	bl	80027f2 <HAL_PCD_EP_Transmit>
 800a50e:	4603      	mov	r3, r0
 800a510:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a512:	7dfb      	ldrb	r3, [r7, #23]
 800a514:	4618      	mov	r0, r3
 800a516:	f000 f853 	bl	800a5c0 <USBD_Get_USB_Status>
 800a51a:	4603      	mov	r3, r0
 800a51c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a51e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a520:	4618      	mov	r0, r3
 800a522:	3718      	adds	r7, #24
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b086      	sub	sp, #24
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	607a      	str	r2, [r7, #4]
 800a532:	603b      	str	r3, [r7, #0]
 800a534:	460b      	mov	r3, r1
 800a536:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a538:	2300      	movs	r3, #0
 800a53a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a53c:	2300      	movs	r3, #0
 800a53e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a546:	7af9      	ldrb	r1, [r7, #11]
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	f7f8 f8ee 	bl	800272c <HAL_PCD_EP_Receive>
 800a550:	4603      	mov	r3, r0
 800a552:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a554:	7dfb      	ldrb	r3, [r7, #23]
 800a556:	4618      	mov	r0, r3
 800a558:	f000 f832 	bl	800a5c0 <USBD_Get_USB_Status>
 800a55c:	4603      	mov	r3, r0
 800a55e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a560:	7dbb      	ldrb	r3, [r7, #22]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3718      	adds	r7, #24
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b082      	sub	sp, #8
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	460b      	mov	r3, r1
 800a574:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a57c:	78fa      	ldrb	r2, [r7, #3]
 800a57e:	4611      	mov	r1, r2
 800a580:	4618      	mov	r0, r3
 800a582:	f7f8 f91e 	bl	80027c2 <HAL_PCD_EP_GetRxCount>
 800a586:	4603      	mov	r3, r0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a598:	4b03      	ldr	r3, [pc, #12]	; (800a5a8 <USBD_static_malloc+0x18>)
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	370c      	adds	r7, #12
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	200001b4 	.word	0x200001b4

0800a5ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]

}
 800a5b4:	bf00      	nop
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a5ce:	79fb      	ldrb	r3, [r7, #7]
 800a5d0:	2b03      	cmp	r3, #3
 800a5d2:	d817      	bhi.n	800a604 <USBD_Get_USB_Status+0x44>
 800a5d4:	a201      	add	r2, pc, #4	; (adr r2, 800a5dc <USBD_Get_USB_Status+0x1c>)
 800a5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5da:	bf00      	nop
 800a5dc:	0800a5ed 	.word	0x0800a5ed
 800a5e0:	0800a5f3 	.word	0x0800a5f3
 800a5e4:	0800a5f9 	.word	0x0800a5f9
 800a5e8:	0800a5ff 	.word	0x0800a5ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a5f0:	e00b      	b.n	800a60a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	73fb      	strb	r3, [r7, #15]
    break;
 800a5f6:	e008      	b.n	800a60a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a5fc:	e005      	b.n	800a60a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a5fe:	2303      	movs	r3, #3
 800a600:	73fb      	strb	r3, [r7, #15]
    break;
 800a602:	e002      	b.n	800a60a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a604:	2303      	movs	r3, #3
 800a606:	73fb      	strb	r3, [r7, #15]
    break;
 800a608:	bf00      	nop
  }
  return usb_status;
 800a60a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3714      	adds	r7, #20
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <__libc_init_array>:
 800a618:	b570      	push	{r4, r5, r6, lr}
 800a61a:	4d0d      	ldr	r5, [pc, #52]	; (800a650 <__libc_init_array+0x38>)
 800a61c:	4c0d      	ldr	r4, [pc, #52]	; (800a654 <__libc_init_array+0x3c>)
 800a61e:	1b64      	subs	r4, r4, r5
 800a620:	10a4      	asrs	r4, r4, #2
 800a622:	2600      	movs	r6, #0
 800a624:	42a6      	cmp	r6, r4
 800a626:	d109      	bne.n	800a63c <__libc_init_array+0x24>
 800a628:	4d0b      	ldr	r5, [pc, #44]	; (800a658 <__libc_init_array+0x40>)
 800a62a:	4c0c      	ldr	r4, [pc, #48]	; (800a65c <__libc_init_array+0x44>)
 800a62c:	f000 f830 	bl	800a690 <_init>
 800a630:	1b64      	subs	r4, r4, r5
 800a632:	10a4      	asrs	r4, r4, #2
 800a634:	2600      	movs	r6, #0
 800a636:	42a6      	cmp	r6, r4
 800a638:	d105      	bne.n	800a646 <__libc_init_array+0x2e>
 800a63a:	bd70      	pop	{r4, r5, r6, pc}
 800a63c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a640:	4798      	blx	r3
 800a642:	3601      	adds	r6, #1
 800a644:	e7ee      	b.n	800a624 <__libc_init_array+0xc>
 800a646:	f855 3b04 	ldr.w	r3, [r5], #4
 800a64a:	4798      	blx	r3
 800a64c:	3601      	adds	r6, #1
 800a64e:	e7f2      	b.n	800a636 <__libc_init_array+0x1e>
 800a650:	0800a740 	.word	0x0800a740
 800a654:	0800a740 	.word	0x0800a740
 800a658:	0800a740 	.word	0x0800a740
 800a65c:	0800a744 	.word	0x0800a744

0800a660 <memset>:
 800a660:	4402      	add	r2, r0
 800a662:	4603      	mov	r3, r0
 800a664:	4293      	cmp	r3, r2
 800a666:	d100      	bne.n	800a66a <memset+0xa>
 800a668:	4770      	bx	lr
 800a66a:	f803 1b01 	strb.w	r1, [r3], #1
 800a66e:	e7f9      	b.n	800a664 <memset+0x4>

0800a670 <strcat>:
 800a670:	b510      	push	{r4, lr}
 800a672:	4602      	mov	r2, r0
 800a674:	7814      	ldrb	r4, [r2, #0]
 800a676:	4613      	mov	r3, r2
 800a678:	3201      	adds	r2, #1
 800a67a:	2c00      	cmp	r4, #0
 800a67c:	d1fa      	bne.n	800a674 <strcat+0x4>
 800a67e:	3b01      	subs	r3, #1
 800a680:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a684:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a688:	2a00      	cmp	r2, #0
 800a68a:	d1f9      	bne.n	800a680 <strcat+0x10>
 800a68c:	bd10      	pop	{r4, pc}
	...

0800a690 <_init>:
 800a690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a692:	bf00      	nop
 800a694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a696:	bc08      	pop	{r3}
 800a698:	469e      	mov	lr, r3
 800a69a:	4770      	bx	lr

0800a69c <_fini>:
 800a69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69e:	bf00      	nop
 800a6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6a2:	bc08      	pop	{r3}
 800a6a4:	469e      	mov	lr, r3
 800a6a6:	4770      	bx	lr
