
adafruit-stm32F405-E-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800b0d8  0800b0d8  0001b0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1d4  0800b1d4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1d4  0800b1d4  0001b1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1dc  0800b1dc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1dc  0800b1dc  0001b1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1e0  0800b1e0  0001b1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b1e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000214c  200001e4  0800b3c8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002330  0800b3c8  00022330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ece7  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004528  00000000  00000000  0003eefb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  00043428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  00044750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023de3  00000000  00000000  000458c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019cc9  00000000  00000000  000696ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2587  00000000  00000000  00083374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001458fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051f4  00000000  00000000  00145950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b0c0 	.word	0x0800b0c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800b0c0 	.word	0x0800b0c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af02      	add	r7, sp, #8
//	char* msg = "Successfully written to sd card:D\n";
//	char log_path[] = "/LOG.TXT";
//	uint32_t currentTick = HAL_GetTick();
	uint8_t* magData;
	HAL_StatusTypeDef ret;
	char msg[20] = "empty";
 800057e:	4a2c      	ldr	r2, [pc, #176]	; (8000630 <main+0xb8>)
 8000580:	463b      	mov	r3, r7
 8000582:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000586:	6018      	str	r0, [r3, #0]
 8000588:	3304      	adds	r3, #4
 800058a:	8019      	strh	r1, [r3, #0]
 800058c:	1dbb      	adds	r3, r7, #6
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	819a      	strh	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fc06 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f854 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f932 	bl	8000808 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 f908 	bl	80007b8 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80005a8:	f009 fbc2 	bl	8009d30 <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 80005ac:	f000 f8e4 	bl	8000778 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80005b0:	f007 fc78 	bl	8007ea4 <MX_FATFS_Init>
  MX_I2C2_Init();
 80005b4:	f000 f8b2 	bl	800071c <MX_I2C2_Init>
//				BlinkLED(200, 3);
//				printVCP((char*)"error no SD card present\n\r");
//			}
//		}

	  HAL_Delay(1000);
 80005b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005bc:	f000 fc66 	bl	8000e8c <HAL_Delay>

	  ret =  HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)I2C_ADDR, (uint8_t*)&I2C_REG_ADDR, 1, I2C_DELAY);
 80005c0:	23d0      	movs	r3, #208	; 0xd0
 80005c2:	b299      	uxth	r1, r3
 80005c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2301      	movs	r3, #1
 80005cc:	4a19      	ldr	r2, [pc, #100]	; (8000634 <main+0xbc>)
 80005ce:	481a      	ldr	r0, [pc, #104]	; (8000638 <main+0xc0>)
 80005d0:	f001 fc42 	bl	8001e58 <HAL_I2C_Master_Transmit>
 80005d4:	4603      	mov	r3, r0
 80005d6:	77fb      	strb	r3, [r7, #31]
	  if(ret != HAL_OK){
 80005d8:	7ffb      	ldrb	r3, [r7, #31]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d002      	beq.n	80005e4 <main+0x6c>
		  printVCP((char*)"transmit error\n\r");
 80005de:	4817      	ldr	r0, [pc, #92]	; (800063c <main+0xc4>)
 80005e0:	f000 f98e 	bl	8000900 <printVCP>
	  }

	  ret = HAL_I2C_Master_Receive(&hi2c2, (uint16_t)I2C_ADDR, (uint8_t*)magData, 2, I2C_DELAY);
 80005e4:	23d0      	movs	r3, #208	; 0xd0
 80005e6:	b299      	uxth	r1, r3
 80005e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2302      	movs	r3, #2
 80005f0:	69ba      	ldr	r2, [r7, #24]
 80005f2:	4811      	ldr	r0, [pc, #68]	; (8000638 <main+0xc0>)
 80005f4:	f001 fd2e 	bl	8002054 <HAL_I2C_Master_Receive>
 80005f8:	4603      	mov	r3, r0
 80005fa:	77fb      	strb	r3, [r7, #31]
	  if(ret != HAL_OK){
 80005fc:	7ffb      	ldrb	r3, [r7, #31]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d002      	beq.n	8000608 <main+0x90>
	  		  printVCP((char*)"read error\n\r");
 8000602:	480f      	ldr	r0, [pc, #60]	; (8000640 <main+0xc8>)
 8000604:	f000 f97c 	bl	8000900 <printVCP>
	  	  }
	  uint32_t hold = ((magData[0] << 4) | (magData[1]));
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	011b      	lsls	r3, r3, #4
 800060e:	69ba      	ldr	r2, [r7, #24]
 8000610:	3201      	adds	r2, #1
 8000612:	7812      	ldrb	r2, [r2, #0]
 8000614:	4313      	orrs	r3, r2
 8000616:	617b      	str	r3, [r7, #20]
	  sprintf((char*)msg, "%d\n\r", (int)hold);
 8000618:	697a      	ldr	r2, [r7, #20]
 800061a:	463b      	mov	r3, r7
 800061c:	4909      	ldr	r1, [pc, #36]	; (8000644 <main+0xcc>)
 800061e:	4618      	mov	r0, r3
 8000620:	f00a f912 	bl	800a848 <siprintf>
	  printVCP((char*)msg);
 8000624:	463b      	mov	r3, r7
 8000626:	4618      	mov	r0, r3
 8000628:	f000 f96a 	bl	8000900 <printVCP>
  {
 800062c:	e7c4      	b.n	80005b8 <main+0x40>
 800062e:	bf00      	nop
 8000630:	0800b104 	.word	0x0800b104
 8000634:	0800b16a 	.word	0x0800b16a
 8000638:	200004a4 	.word	0x200004a4
 800063c:	0800b0d8 	.word	0x0800b0d8
 8000640:	0800b0ec 	.word	0x0800b0ec
 8000644:	0800b0fc 	.word	0x0800b0fc

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f00a f8ee 	bl	800a838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b28      	ldr	r3, [pc, #160]	; (8000714 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a27      	ldr	r2, [pc, #156]	; (8000714 <SystemClock_Config+0xcc>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b25      	ldr	r3, [pc, #148]	; (8000714 <SystemClock_Config+0xcc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b22      	ldr	r3, [pc, #136]	; (8000718 <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a21      	ldr	r2, [pc, #132]	; (8000718 <SystemClock_Config+0xd0>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <SystemClock_Config+0xd0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a4:	2301      	movs	r3, #1
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80006b8:	2306      	movs	r3, #6
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006bc:	23a8      	movs	r3, #168	; 0xa8
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c4:	2307      	movs	r3, #7
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f003 fb97 	bl	8003e00 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d8:	f000 f92c 	bl	8000934 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2105      	movs	r1, #5
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 fdf8 	bl	80042f0 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000706:	f000 f915 	bl	8000934 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	; 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_I2C2_Init+0x50>)
 8000722:	4a13      	ldr	r2, [pc, #76]	; (8000770 <MX_I2C2_Init+0x54>)
 8000724:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_I2C2_Init+0x50>)
 8000728:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_I2C2_Init+0x58>)
 800072a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_I2C2_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_I2C2_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_I2C2_Init+0x50>)
 800073a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800073e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MX_I2C2_Init+0x50>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_I2C2_Init+0x50>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_I2C2_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_I2C2_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_I2C2_Init+0x50>)
 800075a:	f001 fa39 	bl	8001bd0 <HAL_I2C_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000764:	f000 f8e6 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200004a4 	.word	0x200004a4
 8000770:	40005800 	.word	0x40005800
 8000774:	000186a0 	.word	0x000186a0

08000778 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_SDIO_SD_Init+0x38>)
 800077e:	4a0d      	ldr	r2, [pc, #52]	; (80007b4 <MX_SDIO_SD_Init+0x3c>)
 8000780:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_SDIO_SD_Init+0x38>)
 8000784:	2200      	movs	r2, #0
 8000786:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_SDIO_SD_Init+0x38>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_SDIO_SD_Init+0x38>)
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_SDIO_SD_Init+0x38>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <MX_SDIO_SD_Init+0x38>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <MX_SDIO_SD_Init+0x38>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	20000558 	.word	0x20000558
 80007b4:	40012c00 	.word	0x40012c00

080007b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_DMA_Init+0x4c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <MX_DMA_Init+0x4c>)
 80007c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_DMA_Init+0x4c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	203b      	movs	r0, #59	; 0x3b
 80007e0:	f000 fc53 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80007e4:	203b      	movs	r0, #59	; 0x3b
 80007e6:	f000 fc6c 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2045      	movs	r0, #69	; 0x45
 80007f0:	f000 fc4b 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80007f4:	2045      	movs	r0, #69	; 0x45
 80007f6:	f000 fc64 	bl	80010c2 <HAL_NVIC_EnableIRQ>

}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	; 0x28
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	4b34      	ldr	r3, [pc, #208]	; (80008f4 <MX_GPIO_Init+0xec>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a33      	ldr	r2, [pc, #204]	; (80008f4 <MX_GPIO_Init+0xec>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b31      	ldr	r3, [pc, #196]	; (80008f4 <MX_GPIO_Init+0xec>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <MX_GPIO_Init+0xec>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a2c      	ldr	r2, [pc, #176]	; (80008f4 <MX_GPIO_Init+0xec>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <MX_GPIO_Init+0xec>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <MX_GPIO_Init+0xec>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a25      	ldr	r2, [pc, #148]	; (80008f4 <MX_GPIO_Init+0xec>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <MX_GPIO_Init+0xec>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_GPIO_Init+0xec>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a1e      	ldr	r2, [pc, #120]	; (80008f4 <MX_GPIO_Init+0xec>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_GPIO_Init+0xec>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_GPIO_Init+0xec>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <MX_GPIO_Init+0xec>)
 8000898:	f043 0308 	orr.w	r3, r3, #8
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_GPIO_Init+0xec>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0308 	and.w	r3, r3, #8
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2102      	movs	r1, #2
 80008ae:	4812      	ldr	r0, [pc, #72]	; (80008f8 <MX_GPIO_Init+0xf0>)
 80008b0:	f001 f974 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 80008b4:	2302      	movs	r3, #2
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	480b      	ldr	r0, [pc, #44]	; (80008f8 <MX_GPIO_Init+0xf0>)
 80008cc:	f000 ffb2 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_GPIO_Init+0xf4>)
 80008e6:	f000 ffa5 	bl	8001834 <HAL_GPIO_Init>

}
 80008ea:	bf00      	nop
 80008ec:	3728      	adds	r7, #40	; 0x28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020800 	.word	0x40020800
 80008fc:	40020400 	.word	0x40020400

08000900 <printVCP>:

/* USER CODE BEGIN 4 */
void printVCP(char* buf)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	char* eol = "\r\n";
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <printVCP+0x30>)
 800090a:	60fb      	str	r3, [r7, #12]
	strcat(buf, eol);
 800090c:	68f9      	ldr	r1, [r7, #12]
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f009 ffba 	bl	800a888 <strcat>
	CDC_Transmit_FS((uint8_t*)buf, strlen(buf)); //use sizeof() as it returns size of array of anytype, strlen() expects char pointer in its argument
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff fc5b 	bl	80001d0 <strlen>
 800091a:	4603      	mov	r3, r0
 800091c:	b29b      	uxth	r3, r3
 800091e:	4619      	mov	r1, r3
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f009 fb03 	bl	8009f2c <CDC_Transmit_FS>
}
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	0800b118 	.word	0x0800b118

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	e7fe      	b.n	800093c <Error_Handler+0x8>
	...

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4a0f      	ldr	r2, [pc, #60]	; (800098c <HAL_MspInit+0x4c>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000954:	6453      	str	r3, [r2, #68]	; 0x44
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <HAL_MspInit+0x4c>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	6413      	str	r3, [r2, #64]	; 0x40
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a19      	ldr	r2, [pc, #100]	; (8000a14 <HAL_I2C_MspInit+0x84>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d12c      	bne.n	8000a0c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <HAL_I2C_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <HAL_I2C_MspInit+0x88>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <HAL_I2C_MspInit+0x88>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d4:	2312      	movs	r3, #18
 80009d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d8:	2301      	movs	r3, #1
 80009da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009e0:	2304      	movs	r3, #4
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	480c      	ldr	r0, [pc, #48]	; (8000a1c <HAL_I2C_MspInit+0x8c>)
 80009ec:	f000 ff22 	bl	8001834 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <HAL_I2C_MspInit+0x88>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <HAL_I2C_MspInit+0x88>)
 80009fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <HAL_I2C_MspInit+0x88>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a0c:	bf00      	nop
 8000a0e:	3728      	adds	r7, #40	; 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40005800 	.word	0x40005800
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020400 	.word	0x40020400

08000a20 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a70      	ldr	r2, [pc, #448]	; (8000c00 <HAL_SD_MspInit+0x1e0>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	f040 80da 	bne.w	8000bf8 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	4b6e      	ldr	r3, [pc, #440]	; (8000c04 <HAL_SD_MspInit+0x1e4>)
 8000a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4c:	4a6d      	ldr	r2, [pc, #436]	; (8000c04 <HAL_SD_MspInit+0x1e4>)
 8000a4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a52:	6453      	str	r3, [r2, #68]	; 0x44
 8000a54:	4b6b      	ldr	r3, [pc, #428]	; (8000c04 <HAL_SD_MspInit+0x1e4>)
 8000a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	4b67      	ldr	r3, [pc, #412]	; (8000c04 <HAL_SD_MspInit+0x1e4>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a68:	4a66      	ldr	r2, [pc, #408]	; (8000c04 <HAL_SD_MspInit+0x1e4>)
 8000a6a:	f043 0304 	orr.w	r3, r3, #4
 8000a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a70:	4b64      	ldr	r3, [pc, #400]	; (8000c04 <HAL_SD_MspInit+0x1e4>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a74:	f003 0304 	and.w	r3, r3, #4
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	4b60      	ldr	r3, [pc, #384]	; (8000c04 <HAL_SD_MspInit+0x1e4>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	4a5f      	ldr	r2, [pc, #380]	; (8000c04 <HAL_SD_MspInit+0x1e4>)
 8000a86:	f043 0308 	orr.w	r3, r3, #8
 8000a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8c:	4b5d      	ldr	r3, [pc, #372]	; (8000c04 <HAL_SD_MspInit+0x1e4>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	f003 0308 	and.w	r3, r3, #8
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000a98:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000aaa:	230c      	movs	r3, #12
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4854      	ldr	r0, [pc, #336]	; (8000c08 <HAL_SD_MspInit+0x1e8>)
 8000ab6:	f000 febd 	bl	8001834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000aba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000acc:	230c      	movs	r3, #12
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	484c      	ldr	r0, [pc, #304]	; (8000c08 <HAL_SD_MspInit+0x1e8>)
 8000ad8:	f000 feac 	bl	8001834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000adc:	2304      	movs	r3, #4
 8000ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000aec:	230c      	movs	r3, #12
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	4845      	ldr	r0, [pc, #276]	; (8000c0c <HAL_SD_MspInit+0x1ec>)
 8000af8:	f000 fe9c 	bl	8001834 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000afc:	4b44      	ldr	r3, [pc, #272]	; (8000c10 <HAL_SD_MspInit+0x1f0>)
 8000afe:	4a45      	ldr	r2, [pc, #276]	; (8000c14 <HAL_SD_MspInit+0x1f4>)
 8000b00:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000b02:	4b43      	ldr	r3, [pc, #268]	; (8000c10 <HAL_SD_MspInit+0x1f0>)
 8000b04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b08:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b0a:	4b41      	ldr	r3, [pc, #260]	; (8000c10 <HAL_SD_MspInit+0x1f0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b10:	4b3f      	ldr	r3, [pc, #252]	; (8000c10 <HAL_SD_MspInit+0x1f0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b16:	4b3e      	ldr	r3, [pc, #248]	; (8000c10 <HAL_SD_MspInit+0x1f0>)
 8000b18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b1c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b1e:	4b3c      	ldr	r3, [pc, #240]	; (8000c10 <HAL_SD_MspInit+0x1f0>)
 8000b20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b24:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b26:	4b3a      	ldr	r3, [pc, #232]	; (8000c10 <HAL_SD_MspInit+0x1f0>)
 8000b28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b2c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000b2e:	4b38      	ldr	r3, [pc, #224]	; (8000c10 <HAL_SD_MspInit+0x1f0>)
 8000b30:	2220      	movs	r2, #32
 8000b32:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b34:	4b36      	ldr	r3, [pc, #216]	; (8000c10 <HAL_SD_MspInit+0x1f0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b3a:	4b35      	ldr	r3, [pc, #212]	; (8000c10 <HAL_SD_MspInit+0x1f0>)
 8000b3c:	2204      	movs	r2, #4
 8000b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b40:	4b33      	ldr	r3, [pc, #204]	; (8000c10 <HAL_SD_MspInit+0x1f0>)
 8000b42:	2203      	movs	r2, #3
 8000b44:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000b46:	4b32      	ldr	r3, [pc, #200]	; (8000c10 <HAL_SD_MspInit+0x1f0>)
 8000b48:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000b4e:	4b30      	ldr	r3, [pc, #192]	; (8000c10 <HAL_SD_MspInit+0x1f0>)
 8000b50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b54:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000b56:	482e      	ldr	r0, [pc, #184]	; (8000c10 <HAL_SD_MspInit+0x1f0>)
 8000b58:	f000 face 	bl	80010f8 <HAL_DMA_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8000b62:	f7ff fee7 	bl	8000934 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a29      	ldr	r2, [pc, #164]	; (8000c10 <HAL_SD_MspInit+0x1f0>)
 8000b6a:	641a      	str	r2, [r3, #64]	; 0x40
 8000b6c:	4a28      	ldr	r2, [pc, #160]	; (8000c10 <HAL_SD_MspInit+0x1f0>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000b72:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <HAL_SD_MspInit+0x1f8>)
 8000b74:	4a29      	ldr	r2, [pc, #164]	; (8000c1c <HAL_SD_MspInit+0x1fc>)
 8000b76:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000b78:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <HAL_SD_MspInit+0x1f8>)
 8000b7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b7e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b80:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <HAL_SD_MspInit+0x1f8>)
 8000b82:	2240      	movs	r2, #64	; 0x40
 8000b84:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b86:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <HAL_SD_MspInit+0x1f8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <HAL_SD_MspInit+0x1f8>)
 8000b8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b92:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b94:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <HAL_SD_MspInit+0x1f8>)
 8000b96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b9a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <HAL_SD_MspInit+0x1f8>)
 8000b9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ba2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <HAL_SD_MspInit+0x1f8>)
 8000ba6:	2220      	movs	r2, #32
 8000ba8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000baa:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <HAL_SD_MspInit+0x1f8>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <HAL_SD_MspInit+0x1f8>)
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_SD_MspInit+0x1f8>)
 8000bb8:	2203      	movs	r2, #3
 8000bba:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <HAL_SD_MspInit+0x1f8>)
 8000bbe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <HAL_SD_MspInit+0x1f8>)
 8000bc6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000bca:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000bcc:	4812      	ldr	r0, [pc, #72]	; (8000c18 <HAL_SD_MspInit+0x1f8>)
 8000bce:	f000 fa93 	bl	80010f8 <HAL_DMA_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8000bd8:	f7ff feac 	bl	8000934 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <HAL_SD_MspInit+0x1f8>)
 8000be0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000be2:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <HAL_SD_MspInit+0x1f8>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	2031      	movs	r0, #49	; 0x31
 8000bee:	f000 fa4c 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000bf2:	2031      	movs	r0, #49	; 0x31
 8000bf4:	f000 fa65 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	; 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40012c00 	.word	0x40012c00
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020800 	.word	0x40020800
 8000c0c:	40020c00 	.word	0x40020c00
 8000c10:	20000444 	.word	0x20000444
 8000c14:	40026458 	.word	0x40026458
 8000c18:	200004f8 	.word	0x200004f8
 8000c1c:	400264a0 	.word	0x400264a0

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6c:	f000 f8ee 	bl	8000e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <SDIO_IRQHandler+0x10>)
 8000c7a:	f003 ff6b 	bl	8004b54 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000558 	.word	0x20000558

08000c88 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <DMA2_Stream3_IRQHandler+0x10>)
 8000c8e:	f000 fb5b 	bl	8001348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000444 	.word	0x20000444

08000c9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <OTG_FS_IRQHandler+0x10>)
 8000ca2:	f002 f87a 	bl	8002d9a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20001f18 	.word	0x20001f18

08000cb0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <DMA2_Stream6_IRQHandler+0x10>)
 8000cb6:	f000 fb47 	bl	8001348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200004f8 	.word	0x200004f8

08000cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ccc:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <_sbrk+0x5c>)
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <_sbrk+0x60>)
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <_sbrk+0x64>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <_sbrk+0x68>)
 8000ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d207      	bcs.n	8000d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf4:	f009 fd76 	bl	800a7e4 <__errno>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	e009      	b.n	8000d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <_sbrk+0x64>)
 8000d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20020000 	.word	0x20020000
 8000d24:	00000400 	.word	0x00000400
 8000d28:	20000200 	.word	0x20000200
 8000d2c:	20002330 	.word	0x20002330

08000d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <SystemInit+0x20>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3a:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <SystemInit+0x20>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d5a:	490e      	ldr	r1, [pc, #56]	; (8000d94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d70:	4c0b      	ldr	r4, [pc, #44]	; (8000da0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d7e:	f7ff ffd7 	bl	8000d30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d82:	f009 fd35 	bl	800a7f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d86:	f7ff fbf7 	bl	8000578 <main>
  bx  lr    
 8000d8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000d98:	0800b1e4 	.word	0x0800b1e4
  ldr r2, =_sbss
 8000d9c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000da0:	20002330 	.word	0x20002330

08000da4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <HAL_Init+0x40>)
 8000db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <HAL_Init+0x40>)
 8000dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <HAL_Init+0x40>)
 8000dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	f000 f94f 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f000 f808 	bl	8000dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ddc:	f7ff fdb0 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023c00 	.word	0x40023c00

08000dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_InitTick+0x54>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_InitTick+0x58>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f967 	bl	80010de <HAL_SYSTICK_Config>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00e      	b.n	8000e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	d80a      	bhi.n	8000e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	f000 f92f 	bl	800108a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e2c:	4a06      	ldr	r2, [pc, #24]	; (8000e48 <HAL_InitTick+0x5c>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e000      	b.n	8000e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000008 	.word	0x20000008
 8000e48:	20000004 	.word	0x20000004

08000e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_IncTick+0x20>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x24>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <HAL_IncTick+0x24>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	200005dc 	.word	0x200005dc

08000e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return uwTick;
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <HAL_GetTick+0x14>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	200005dc 	.word	0x200005dc

08000e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e94:	f7ff ffee 	bl	8000e74 <HAL_GetTick>
 8000e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea4:	d005      	beq.n	8000eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_Delay+0x44>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4413      	add	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eb2:	bf00      	nop
 8000eb4:	f7ff ffde 	bl	8000e74 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d8f7      	bhi.n	8000eb4 <HAL_Delay+0x28>
  {
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008

08000ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f06:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	60d3      	str	r3, [r2, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <__NVIC_GetPriorityGrouping+0x18>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	f003 0307 	and.w	r3, r3, #7
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	db0b      	blt.n	8000f62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f003 021f 	and.w	r2, r3, #31
 8000f50:	4907      	ldr	r1, [pc, #28]	; (8000f70 <__NVIC_EnableIRQ+0x38>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	095b      	lsrs	r3, r3, #5
 8000f58:	2001      	movs	r0, #1
 8000f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000e100 	.word	0xe000e100

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	; (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	; (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	; 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f7ff ff8e 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff29 	bl	8000ed4 <__NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff3e 	bl	8000f1c <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff8e 	bl	8000fc8 <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5d 	bl	8000f74 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff31 	bl	8000f38 <__NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffa2 	bl	8001030 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff feb6 	bl	8000e74 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e099      	b.n	8001248 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2202      	movs	r2, #2
 8001118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0201 	bic.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001134:	e00f      	b.n	8001156 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001136:	f7ff fe9d 	bl	8000e74 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b05      	cmp	r3, #5
 8001142:	d908      	bls.n	8001156 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2220      	movs	r2, #32
 8001148:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2203      	movs	r2, #3
 800114e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e078      	b.n	8001248 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1e8      	bne.n	8001136 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	4b38      	ldr	r3, [pc, #224]	; (8001250 <HAL_DMA_Init+0x158>)
 8001170:	4013      	ands	r3, r2
 8001172:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001182:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800118e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800119a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ac:	2b04      	cmp	r3, #4
 80011ae:	d107      	bne.n	80011c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	4313      	orrs	r3, r2
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4313      	orrs	r3, r2
 80011be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	f023 0307 	bic.w	r3, r3, #7
 80011d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	4313      	orrs	r3, r2
 80011e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d117      	bne.n	800121a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00e      	beq.n	800121a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 fa9d 	bl	800173c <DMA_CheckFifoParam>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d008      	beq.n	800121a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2240      	movs	r2, #64	; 0x40
 800120c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2201      	movs	r2, #1
 8001212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001216:	2301      	movs	r3, #1
 8001218:	e016      	b.n	8001248 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 fa54 	bl	80016d0 <DMA_CalcBaseAndBitshift>
 8001228:	4603      	mov	r3, r0
 800122a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001230:	223f      	movs	r2, #63	; 0x3f
 8001232:	409a      	lsls	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	f010803f 	.word	0xf010803f

08001254 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001272:	2b01      	cmp	r3, #1
 8001274:	d101      	bne.n	800127a <HAL_DMA_Start_IT+0x26>
 8001276:	2302      	movs	r3, #2
 8001278:	e040      	b.n	80012fc <HAL_DMA_Start_IT+0xa8>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b01      	cmp	r3, #1
 800128c:	d12f      	bne.n	80012ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2202      	movs	r2, #2
 8001292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2200      	movs	r2, #0
 800129a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f000 f9e6 	bl	8001674 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ac:	223f      	movs	r2, #63	; 0x3f
 80012ae:	409a      	lsls	r2, r3
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 0216 	orr.w	r2, r2, #22
 80012c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d007      	beq.n	80012dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 0208 	orr.w	r2, r2, #8
 80012da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f042 0201 	orr.w	r2, r2, #1
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	e005      	b.n	80012fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80012f6:	2302      	movs	r3, #2
 80012f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80012fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d004      	beq.n	8001322 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2280      	movs	r2, #128	; 0x80
 800131c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e00c      	b.n	800133c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2205      	movs	r2, #5
 8001326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0201 	bic.w	r2, r2, #1
 8001338:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001354:	4b92      	ldr	r3, [pc, #584]	; (80015a0 <HAL_DMA_IRQHandler+0x258>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a92      	ldr	r2, [pc, #584]	; (80015a4 <HAL_DMA_IRQHandler+0x25c>)
 800135a:	fba2 2303 	umull	r2, r3, r2, r3
 800135e:	0a9b      	lsrs	r3, r3, #10
 8001360:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001366:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001372:	2208      	movs	r2, #8
 8001374:	409a      	lsls	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d01a      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b00      	cmp	r3, #0
 800138a:	d013      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0204 	bic.w	r2, r2, #4
 800139a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a0:	2208      	movs	r2, #8
 80013a2:	409a      	lsls	r2, r3
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ac:	f043 0201 	orr.w	r2, r3, #1
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b8:	2201      	movs	r2, #1
 80013ba:	409a      	lsls	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4013      	ands	r3, r2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d012      	beq.n	80013ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00b      	beq.n	80013ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d6:	2201      	movs	r2, #1
 80013d8:	409a      	lsls	r2, r3
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e2:	f043 0202 	orr.w	r2, r3, #2
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ee:	2204      	movs	r2, #4
 80013f0:	409a      	lsls	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d012      	beq.n	8001420 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00b      	beq.n	8001420 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140c:	2204      	movs	r2, #4
 800140e:	409a      	lsls	r2, r3
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001418:	f043 0204 	orr.w	r2, r3, #4
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001424:	2210      	movs	r2, #16
 8001426:	409a      	lsls	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4013      	ands	r3, r2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d043      	beq.n	80014b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	2b00      	cmp	r3, #0
 800143c:	d03c      	beq.n	80014b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001442:	2210      	movs	r2, #16
 8001444:	409a      	lsls	r2, r3
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d018      	beq.n	800148a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d108      	bne.n	8001478 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	2b00      	cmp	r3, #0
 800146c:	d024      	beq.n	80014b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	4798      	blx	r3
 8001476:	e01f      	b.n	80014b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800147c:	2b00      	cmp	r3, #0
 800147e:	d01b      	beq.n	80014b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	4798      	blx	r3
 8001488:	e016      	b.n	80014b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001494:	2b00      	cmp	r3, #0
 8001496:	d107      	bne.n	80014a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0208 	bic.w	r2, r2, #8
 80014a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014bc:	2220      	movs	r2, #32
 80014be:	409a      	lsls	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4013      	ands	r3, r2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 808e 	beq.w	80015e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0310 	and.w	r3, r3, #16
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 8086 	beq.w	80015e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014de:	2220      	movs	r2, #32
 80014e0:	409a      	lsls	r2, r3
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b05      	cmp	r3, #5
 80014f0:	d136      	bne.n	8001560 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0216 	bic.w	r2, r2, #22
 8001500:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	695a      	ldr	r2, [r3, #20]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001510:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	2b00      	cmp	r3, #0
 8001518:	d103      	bne.n	8001522 <HAL_DMA_IRQHandler+0x1da>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151e:	2b00      	cmp	r3, #0
 8001520:	d007      	beq.n	8001532 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0208 	bic.w	r2, r2, #8
 8001530:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001536:	223f      	movs	r2, #63	; 0x3f
 8001538:	409a      	lsls	r2, r3
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001552:	2b00      	cmp	r3, #0
 8001554:	d07d      	beq.n	8001652 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	4798      	blx	r3
        }
        return;
 800155e:	e078      	b.n	8001652 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d01c      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d108      	bne.n	800158e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001580:	2b00      	cmp	r3, #0
 8001582:	d030      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	4798      	blx	r3
 800158c:	e02b      	b.n	80015e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001592:	2b00      	cmp	r3, #0
 8001594:	d027      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	4798      	blx	r3
 800159e:	e022      	b.n	80015e6 <HAL_DMA_IRQHandler+0x29e>
 80015a0:	20000000 	.word	0x20000000
 80015a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10f      	bne.n	80015d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0210 	bic.w	r2, r2, #16
 80015c4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d032      	beq.n	8001654 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d022      	beq.n	8001640 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2205      	movs	r2, #5
 80015fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0201 	bic.w	r2, r2, #1
 8001610:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	3301      	adds	r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	429a      	cmp	r2, r3
 800161c:	d307      	bcc.n	800162e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f2      	bne.n	8001612 <HAL_DMA_IRQHandler+0x2ca>
 800162c:	e000      	b.n	8001630 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800162e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	4798      	blx	r3
 8001650:	e000      	b.n	8001654 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001652:	bf00      	nop
    }
  }
}
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop

0800165c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
 8001680:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001690:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b40      	cmp	r3, #64	; 0x40
 80016a0:	d108      	bne.n	80016b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80016b2:	e007      	b.n	80016c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	60da      	str	r2, [r3, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	3b10      	subs	r3, #16
 80016e0:	4a14      	ldr	r2, [pc, #80]	; (8001734 <DMA_CalcBaseAndBitshift+0x64>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	091b      	lsrs	r3, r3, #4
 80016e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016ea:	4a13      	ldr	r2, [pc, #76]	; (8001738 <DMA_CalcBaseAndBitshift+0x68>)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4413      	add	r3, r2
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d909      	bls.n	8001712 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001706:	f023 0303 	bic.w	r3, r3, #3
 800170a:	1d1a      	adds	r2, r3, #4
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	659a      	str	r2, [r3, #88]	; 0x58
 8001710:	e007      	b.n	8001722 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800171a:	f023 0303 	bic.w	r3, r3, #3
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	aaaaaaab 	.word	0xaaaaaaab
 8001738:	0800b184 	.word	0x0800b184

0800173c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d11f      	bne.n	8001796 <DMA_CheckFifoParam+0x5a>
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	2b03      	cmp	r3, #3
 800175a:	d856      	bhi.n	800180a <DMA_CheckFifoParam+0xce>
 800175c:	a201      	add	r2, pc, #4	; (adr r2, 8001764 <DMA_CheckFifoParam+0x28>)
 800175e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001762:	bf00      	nop
 8001764:	08001775 	.word	0x08001775
 8001768:	08001787 	.word	0x08001787
 800176c:	08001775 	.word	0x08001775
 8001770:	0800180b 	.word	0x0800180b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d046      	beq.n	800180e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001784:	e043      	b.n	800180e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800178e:	d140      	bne.n	8001812 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001794:	e03d      	b.n	8001812 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800179e:	d121      	bne.n	80017e4 <DMA_CheckFifoParam+0xa8>
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d837      	bhi.n	8001816 <DMA_CheckFifoParam+0xda>
 80017a6:	a201      	add	r2, pc, #4	; (adr r2, 80017ac <DMA_CheckFifoParam+0x70>)
 80017a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ac:	080017bd 	.word	0x080017bd
 80017b0:	080017c3 	.word	0x080017c3
 80017b4:	080017bd 	.word	0x080017bd
 80017b8:	080017d5 	.word	0x080017d5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	73fb      	strb	r3, [r7, #15]
      break;
 80017c0:	e030      	b.n	8001824 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d025      	beq.n	800181a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017d2:	e022      	b.n	800181a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017dc:	d11f      	bne.n	800181e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017e2:	e01c      	b.n	800181e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d903      	bls.n	80017f2 <DMA_CheckFifoParam+0xb6>
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d003      	beq.n	80017f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017f0:	e018      	b.n	8001824 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	73fb      	strb	r3, [r7, #15]
      break;
 80017f6:	e015      	b.n	8001824 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00e      	beq.n	8001822 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
      break;
 8001808:	e00b      	b.n	8001822 <DMA_CheckFifoParam+0xe6>
      break;
 800180a:	bf00      	nop
 800180c:	e00a      	b.n	8001824 <DMA_CheckFifoParam+0xe8>
      break;
 800180e:	bf00      	nop
 8001810:	e008      	b.n	8001824 <DMA_CheckFifoParam+0xe8>
      break;
 8001812:	bf00      	nop
 8001814:	e006      	b.n	8001824 <DMA_CheckFifoParam+0xe8>
      break;
 8001816:	bf00      	nop
 8001818:	e004      	b.n	8001824 <DMA_CheckFifoParam+0xe8>
      break;
 800181a:	bf00      	nop
 800181c:	e002      	b.n	8001824 <DMA_CheckFifoParam+0xe8>
      break;   
 800181e:	bf00      	nop
 8001820:	e000      	b.n	8001824 <DMA_CheckFifoParam+0xe8>
      break;
 8001822:	bf00      	nop
    }
  } 
  
  return status; 
 8001824:	7bfb      	ldrb	r3, [r7, #15]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop

08001834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	; 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
 800184e:	e16b      	b.n	8001b28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001850:	2201      	movs	r2, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	429a      	cmp	r2, r3
 800186a:	f040 815a 	bne.w	8001b22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b01      	cmp	r3, #1
 8001878:	d005      	beq.n	8001886 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001882:	2b02      	cmp	r3, #2
 8001884:	d130      	bne.n	80018e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	2203      	movs	r2, #3
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4013      	ands	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018bc:	2201      	movs	r2, #1
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 0201 	and.w	r2, r3, #1
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d017      	beq.n	8001924 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d123      	bne.n	8001978 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	08da      	lsrs	r2, r3, #3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3208      	adds	r2, #8
 8001938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800193c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	220f      	movs	r2, #15
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	691a      	ldr	r2, [r3, #16]
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	08da      	lsrs	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3208      	adds	r2, #8
 8001972:	69b9      	ldr	r1, [r7, #24]
 8001974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	2203      	movs	r2, #3
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0203 	and.w	r2, r3, #3
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 80b4 	beq.w	8001b22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b60      	ldr	r3, [pc, #384]	; (8001b40 <HAL_GPIO_Init+0x30c>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	4a5f      	ldr	r2, [pc, #380]	; (8001b40 <HAL_GPIO_Init+0x30c>)
 80019c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ca:	4b5d      	ldr	r3, [pc, #372]	; (8001b40 <HAL_GPIO_Init+0x30c>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019d6:	4a5b      	ldr	r2, [pc, #364]	; (8001b44 <HAL_GPIO_Init+0x310>)
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	089b      	lsrs	r3, r3, #2
 80019dc:	3302      	adds	r3, #2
 80019de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	220f      	movs	r2, #15
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a52      	ldr	r2, [pc, #328]	; (8001b48 <HAL_GPIO_Init+0x314>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d02b      	beq.n	8001a5a <HAL_GPIO_Init+0x226>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a51      	ldr	r2, [pc, #324]	; (8001b4c <HAL_GPIO_Init+0x318>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d025      	beq.n	8001a56 <HAL_GPIO_Init+0x222>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a50      	ldr	r2, [pc, #320]	; (8001b50 <HAL_GPIO_Init+0x31c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d01f      	beq.n	8001a52 <HAL_GPIO_Init+0x21e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4f      	ldr	r2, [pc, #316]	; (8001b54 <HAL_GPIO_Init+0x320>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d019      	beq.n	8001a4e <HAL_GPIO_Init+0x21a>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4e      	ldr	r2, [pc, #312]	; (8001b58 <HAL_GPIO_Init+0x324>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d013      	beq.n	8001a4a <HAL_GPIO_Init+0x216>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4d      	ldr	r2, [pc, #308]	; (8001b5c <HAL_GPIO_Init+0x328>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d00d      	beq.n	8001a46 <HAL_GPIO_Init+0x212>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a4c      	ldr	r2, [pc, #304]	; (8001b60 <HAL_GPIO_Init+0x32c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d007      	beq.n	8001a42 <HAL_GPIO_Init+0x20e>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a4b      	ldr	r2, [pc, #300]	; (8001b64 <HAL_GPIO_Init+0x330>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d101      	bne.n	8001a3e <HAL_GPIO_Init+0x20a>
 8001a3a:	2307      	movs	r3, #7
 8001a3c:	e00e      	b.n	8001a5c <HAL_GPIO_Init+0x228>
 8001a3e:	2308      	movs	r3, #8
 8001a40:	e00c      	b.n	8001a5c <HAL_GPIO_Init+0x228>
 8001a42:	2306      	movs	r3, #6
 8001a44:	e00a      	b.n	8001a5c <HAL_GPIO_Init+0x228>
 8001a46:	2305      	movs	r3, #5
 8001a48:	e008      	b.n	8001a5c <HAL_GPIO_Init+0x228>
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	e006      	b.n	8001a5c <HAL_GPIO_Init+0x228>
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e004      	b.n	8001a5c <HAL_GPIO_Init+0x228>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e002      	b.n	8001a5c <HAL_GPIO_Init+0x228>
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <HAL_GPIO_Init+0x228>
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	f002 0203 	and.w	r2, r2, #3
 8001a62:	0092      	lsls	r2, r2, #2
 8001a64:	4093      	lsls	r3, r2
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a6c:	4935      	ldr	r1, [pc, #212]	; (8001b44 <HAL_GPIO_Init+0x310>)
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	089b      	lsrs	r3, r3, #2
 8001a72:	3302      	adds	r3, #2
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a7a:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <HAL_GPIO_Init+0x334>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a9e:	4a32      	ldr	r2, [pc, #200]	; (8001b68 <HAL_GPIO_Init+0x334>)
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001aa4:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <HAL_GPIO_Init+0x334>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ac8:	4a27      	ldr	r2, [pc, #156]	; (8001b68 <HAL_GPIO_Init+0x334>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ace:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <HAL_GPIO_Init+0x334>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001af2:	4a1d      	ldr	r2, [pc, #116]	; (8001b68 <HAL_GPIO_Init+0x334>)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001af8:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <HAL_GPIO_Init+0x334>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b1c:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <HAL_GPIO_Init+0x334>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3301      	adds	r3, #1
 8001b26:	61fb      	str	r3, [r7, #28]
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	2b0f      	cmp	r3, #15
 8001b2c:	f67f ae90 	bls.w	8001850 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	3724      	adds	r7, #36	; 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40013800 	.word	0x40013800
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	40020400 	.word	0x40020400
 8001b50:	40020800 	.word	0x40020800
 8001b54:	40020c00 	.word	0x40020c00
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40021400 	.word	0x40021400
 8001b60:	40021800 	.word	0x40021800
 8001b64:	40021c00 	.word	0x40021c00
 8001b68:	40013c00 	.word	0x40013c00

08001b6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	887b      	ldrh	r3, [r7, #2]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
 8001b88:	e001      	b.n	8001b8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb8:	e003      	b.n	8001bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bba:	887b      	ldrh	r3, [r7, #2]
 8001bbc:	041a      	lsls	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	619a      	str	r2, [r3, #24]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e12b      	b.n	8001e3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7fe feca 	bl	8000990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2224      	movs	r2, #36	; 0x24
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c34:	f002 fd04 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 8001c38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	4a81      	ldr	r2, [pc, #516]	; (8001e44 <HAL_I2C_Init+0x274>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d807      	bhi.n	8001c54 <HAL_I2C_Init+0x84>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4a80      	ldr	r2, [pc, #512]	; (8001e48 <HAL_I2C_Init+0x278>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	bf94      	ite	ls
 8001c4c:	2301      	movls	r3, #1
 8001c4e:	2300      	movhi	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	e006      	b.n	8001c62 <HAL_I2C_Init+0x92>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4a7d      	ldr	r2, [pc, #500]	; (8001e4c <HAL_I2C_Init+0x27c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	bf94      	ite	ls
 8001c5c:	2301      	movls	r3, #1
 8001c5e:	2300      	movhi	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0e7      	b.n	8001e3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4a78      	ldr	r2, [pc, #480]	; (8001e50 <HAL_I2C_Init+0x280>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	0c9b      	lsrs	r3, r3, #18
 8001c74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	4a6a      	ldr	r2, [pc, #424]	; (8001e44 <HAL_I2C_Init+0x274>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d802      	bhi.n	8001ca4 <HAL_I2C_Init+0xd4>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	e009      	b.n	8001cb8 <HAL_I2C_Init+0xe8>
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001caa:	fb02 f303 	mul.w	r3, r2, r3
 8001cae:	4a69      	ldr	r2, [pc, #420]	; (8001e54 <HAL_I2C_Init+0x284>)
 8001cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb4:	099b      	lsrs	r3, r3, #6
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	495c      	ldr	r1, [pc, #368]	; (8001e44 <HAL_I2C_Init+0x274>)
 8001cd4:	428b      	cmp	r3, r1
 8001cd6:	d819      	bhi.n	8001d0c <HAL_I2C_Init+0x13c>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1e59      	subs	r1, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ce6:	1c59      	adds	r1, r3, #1
 8001ce8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001cec:	400b      	ands	r3, r1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00a      	beq.n	8001d08 <HAL_I2C_Init+0x138>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1e59      	subs	r1, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d00:	3301      	adds	r3, #1
 8001d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d06:	e051      	b.n	8001dac <HAL_I2C_Init+0x1dc>
 8001d08:	2304      	movs	r3, #4
 8001d0a:	e04f      	b.n	8001dac <HAL_I2C_Init+0x1dc>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d111      	bne.n	8001d38 <HAL_I2C_Init+0x168>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	1e58      	subs	r0, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6859      	ldr	r1, [r3, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	440b      	add	r3, r1
 8001d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	bf0c      	ite	eq
 8001d30:	2301      	moveq	r3, #1
 8001d32:	2300      	movne	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	e012      	b.n	8001d5e <HAL_I2C_Init+0x18e>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	1e58      	subs	r0, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	0099      	lsls	r1, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bf0c      	ite	eq
 8001d58:	2301      	moveq	r3, #1
 8001d5a:	2300      	movne	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_I2C_Init+0x196>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e022      	b.n	8001dac <HAL_I2C_Init+0x1dc>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10e      	bne.n	8001d8c <HAL_I2C_Init+0x1bc>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1e58      	subs	r0, r3, #1
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6859      	ldr	r1, [r3, #4]
 8001d76:	460b      	mov	r3, r1
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	440b      	add	r3, r1
 8001d7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d80:	3301      	adds	r3, #1
 8001d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d8a:	e00f      	b.n	8001dac <HAL_I2C_Init+0x1dc>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1e58      	subs	r0, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6859      	ldr	r1, [r3, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	0099      	lsls	r1, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da2:	3301      	adds	r3, #1
 8001da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	6809      	ldr	r1, [r1, #0]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69da      	ldr	r2, [r3, #28]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6911      	ldr	r1, [r2, #16]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68d2      	ldr	r2, [r2, #12]
 8001de6:	4311      	orrs	r1, r2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	430b      	orrs	r3, r1
 8001dee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2220      	movs	r2, #32
 8001e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	000186a0 	.word	0x000186a0
 8001e48:	001e847f 	.word	0x001e847f
 8001e4c:	003d08ff 	.word	0x003d08ff
 8001e50:	431bde83 	.word	0x431bde83
 8001e54:	10624dd3 	.word	0x10624dd3

08001e58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af02      	add	r7, sp, #8
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	461a      	mov	r2, r3
 8001e64:	460b      	mov	r3, r1
 8001e66:	817b      	strh	r3, [r7, #10]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff f802 	bl	8000e74 <HAL_GetTick>
 8001e70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b20      	cmp	r3, #32
 8001e7c:	f040 80e0 	bne.w	8002040 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2319      	movs	r3, #25
 8001e86:	2201      	movs	r2, #1
 8001e88:	4970      	ldr	r1, [pc, #448]	; (800204c <HAL_I2C_Master_Transmit+0x1f4>)
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 fc58 	bl	8002740 <I2C_WaitOnFlagUntilTimeout>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e96:	2302      	movs	r3, #2
 8001e98:	e0d3      	b.n	8002042 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_I2C_Master_Transmit+0x50>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e0cc      	b.n	8002042 <HAL_I2C_Master_Transmit+0x1ea>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d007      	beq.n	8001ece <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f042 0201 	orr.w	r2, r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001edc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2221      	movs	r2, #33	; 0x21
 8001ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2210      	movs	r2, #16
 8001eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	893a      	ldrh	r2, [r7, #8]
 8001efe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4a50      	ldr	r2, [pc, #320]	; (8002050 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f10:	8979      	ldrh	r1, [r7, #10]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	6a3a      	ldr	r2, [r7, #32]
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 fac2 	bl	80024a0 <I2C_MasterRequestWrite>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e08d      	b.n	8002042 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f3c:	e066      	b.n	800200c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	6a39      	ldr	r1, [r7, #32]
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 fcd2 	bl	80028ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00d      	beq.n	8001f6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d107      	bne.n	8001f66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e06b      	b.n	8002042 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d11b      	bne.n	8001fe0 <HAL_I2C_Master_Transmit+0x188>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d017      	beq.n	8001fe0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	781a      	ldrb	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	6a39      	ldr	r1, [r7, #32]
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 fcc2 	bl	800296e <I2C_WaitOnBTFFlagUntilTimeout>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00d      	beq.n	800200c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d107      	bne.n	8002008 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002006:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e01a      	b.n	8002042 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002010:	2b00      	cmp	r3, #0
 8002012:	d194      	bne.n	8001f3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002022:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	e000      	b.n	8002042 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002040:	2302      	movs	r3, #2
  }
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	00100002 	.word	0x00100002
 8002050:	ffff0000 	.word	0xffff0000

08002054 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08c      	sub	sp, #48	; 0x30
 8002058:	af02      	add	r7, sp, #8
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	461a      	mov	r2, r3
 8002060:	460b      	mov	r3, r1
 8002062:	817b      	strh	r3, [r7, #10]
 8002064:	4613      	mov	r3, r2
 8002066:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002068:	f7fe ff04 	bl	8000e74 <HAL_GetTick>
 800206c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b20      	cmp	r3, #32
 8002078:	f040 820b 	bne.w	8002492 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	2319      	movs	r3, #25
 8002082:	2201      	movs	r2, #1
 8002084:	497c      	ldr	r1, [pc, #496]	; (8002278 <HAL_I2C_Master_Receive+0x224>)
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 fb5a 	bl	8002740 <I2C_WaitOnFlagUntilTimeout>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002092:	2302      	movs	r3, #2
 8002094:	e1fe      	b.n	8002494 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800209c:	2b01      	cmp	r3, #1
 800209e:	d101      	bne.n	80020a4 <HAL_I2C_Master_Receive+0x50>
 80020a0:	2302      	movs	r3, #2
 80020a2:	e1f7      	b.n	8002494 <HAL_I2C_Master_Receive+0x440>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d007      	beq.n	80020ca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f042 0201 	orr.w	r2, r2, #1
 80020c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2222      	movs	r2, #34	; 0x22
 80020de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2210      	movs	r2, #16
 80020e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	893a      	ldrh	r2, [r7, #8]
 80020fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4a5c      	ldr	r2, [pc, #368]	; (800227c <HAL_I2C_Master_Receive+0x228>)
 800210a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800210c:	8979      	ldrh	r1, [r7, #10]
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 fa46 	bl	80025a4 <I2C_MasterRequestRead>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e1b8      	b.n	8002494 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002126:	2b00      	cmp	r3, #0
 8002128:	d113      	bne.n	8002152 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	623b      	str	r3, [r7, #32]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	623b      	str	r3, [r7, #32]
 800213e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	e18c      	b.n	800246c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002156:	2b01      	cmp	r3, #1
 8002158:	d11b      	bne.n	8002192 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002168:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	e16c      	b.n	800246c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002196:	2b02      	cmp	r3, #2
 8002198:	d11b      	bne.n	80021d2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ba:	2300      	movs	r3, #0
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	e14c      	b.n	800246c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80021f8:	e138      	b.n	800246c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fe:	2b03      	cmp	r3, #3
 8002200:	f200 80f1 	bhi.w	80023e6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002208:	2b01      	cmp	r3, #1
 800220a:	d123      	bne.n	8002254 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800220c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800220e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 fbed 	bl	80029f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e139      	b.n	8002494 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691a      	ldr	r2, [r3, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002248:	b29b      	uxth	r3, r3
 800224a:	3b01      	subs	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002252:	e10b      	b.n	800246c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002258:	2b02      	cmp	r3, #2
 800225a:	d14e      	bne.n	80022fa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002262:	2200      	movs	r2, #0
 8002264:	4906      	ldr	r1, [pc, #24]	; (8002280 <HAL_I2C_Master_Receive+0x22c>)
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 fa6a 	bl	8002740 <I2C_WaitOnFlagUntilTimeout>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d008      	beq.n	8002284 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e10e      	b.n	8002494 <HAL_I2C_Master_Receive+0x440>
 8002276:	bf00      	nop
 8002278:	00100002 	.word	0x00100002
 800227c:	ffff0000 	.word	0xffff0000
 8002280:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002292:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691a      	ldr	r2, [r3, #16]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022bc:	b29b      	uxth	r3, r3
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022f8:	e0b8      	b.n	800246c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002300:	2200      	movs	r2, #0
 8002302:	4966      	ldr	r1, [pc, #408]	; (800249c <HAL_I2C_Master_Receive+0x448>)
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 fa1b 	bl	8002740 <I2C_WaitOnFlagUntilTimeout>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0bf      	b.n	8002494 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002322:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235c:	2200      	movs	r2, #0
 800235e:	494f      	ldr	r1, [pc, #316]	; (800249c <HAL_I2C_Master_Receive+0x448>)
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 f9ed 	bl	8002740 <I2C_WaitOnFlagUntilTimeout>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e091      	b.n	8002494 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800237e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691a      	ldr	r2, [r3, #16]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023e4:	e042      	b.n	800246c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 fb00 	bl	80029f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e04c      	b.n	8002494 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002416:	3b01      	subs	r3, #1
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002422:	b29b      	uxth	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b04      	cmp	r3, #4
 8002438:	d118      	bne.n	800246c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002470:	2b00      	cmp	r3, #0
 8002472:	f47f aec2 	bne.w	80021fa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e000      	b.n	8002494 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002492:	2302      	movs	r3, #2
  }
}
 8002494:	4618      	mov	r0, r3
 8002496:	3728      	adds	r7, #40	; 0x28
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	00010004 	.word	0x00010004

080024a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	607a      	str	r2, [r7, #4]
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	460b      	mov	r3, r1
 80024ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d006      	beq.n	80024ca <I2C_MasterRequestWrite+0x2a>
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d003      	beq.n	80024ca <I2C_MasterRequestWrite+0x2a>
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024c8:	d108      	bne.n	80024dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	e00b      	b.n	80024f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	2b12      	cmp	r3, #18
 80024e2:	d107      	bne.n	80024f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f91d 	bl	8002740 <I2C_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00d      	beq.n	8002528 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800251a:	d103      	bne.n	8002524 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002522:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e035      	b.n	8002594 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002530:	d108      	bne.n	8002544 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002532:	897b      	ldrh	r3, [r7, #10]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002540:	611a      	str	r2, [r3, #16]
 8002542:	e01b      	b.n	800257c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002544:	897b      	ldrh	r3, [r7, #10]
 8002546:	11db      	asrs	r3, r3, #7
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f003 0306 	and.w	r3, r3, #6
 800254e:	b2db      	uxtb	r3, r3
 8002550:	f063 030f 	orn	r3, r3, #15
 8002554:	b2da      	uxtb	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	490e      	ldr	r1, [pc, #56]	; (800259c <I2C_MasterRequestWrite+0xfc>)
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 f943 	bl	80027ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e010      	b.n	8002594 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002572:	897b      	ldrh	r3, [r7, #10]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	4907      	ldr	r1, [pc, #28]	; (80025a0 <I2C_MasterRequestWrite+0x100>)
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f933 	bl	80027ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	00010008 	.word	0x00010008
 80025a0:	00010002 	.word	0x00010002

080025a4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	460b      	mov	r3, r1
 80025b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025c8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d006      	beq.n	80025de <I2C_MasterRequestRead+0x3a>
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d003      	beq.n	80025de <I2C_MasterRequestRead+0x3a>
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025dc:	d108      	bne.n	80025f0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	e00b      	b.n	8002608 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	2b11      	cmp	r3, #17
 80025f6:	d107      	bne.n	8002608 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002606:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f893 	bl	8002740 <I2C_WaitOnFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00d      	beq.n	800263c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800262e:	d103      	bne.n	8002638 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002636:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e079      	b.n	8002730 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002644:	d108      	bne.n	8002658 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002646:	897b      	ldrh	r3, [r7, #10]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	b2da      	uxtb	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	611a      	str	r2, [r3, #16]
 8002656:	e05f      	b.n	8002718 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002658:	897b      	ldrh	r3, [r7, #10]
 800265a:	11db      	asrs	r3, r3, #7
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f003 0306 	and.w	r3, r3, #6
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f063 030f 	orn	r3, r3, #15
 8002668:	b2da      	uxtb	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	4930      	ldr	r1, [pc, #192]	; (8002738 <I2C_MasterRequestRead+0x194>)
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f8b9 	bl	80027ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e054      	b.n	8002730 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002686:	897b      	ldrh	r3, [r7, #10]
 8002688:	b2da      	uxtb	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4929      	ldr	r1, [pc, #164]	; (800273c <I2C_MasterRequestRead+0x198>)
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f8a9 	bl	80027ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e044      	b.n	8002730 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 f831 	bl	8002740 <I2C_WaitOnFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00d      	beq.n	8002700 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f2:	d103      	bne.n	80026fc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026fa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e017      	b.n	8002730 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002700:	897b      	ldrh	r3, [r7, #10]
 8002702:	11db      	asrs	r3, r3, #7
 8002704:	b2db      	uxtb	r3, r3
 8002706:	f003 0306 	and.w	r3, r3, #6
 800270a:	b2db      	uxtb	r3, r3
 800270c:	f063 030e 	orn	r3, r3, #14
 8002710:	b2da      	uxtb	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	4907      	ldr	r1, [pc, #28]	; (800273c <I2C_MasterRequestRead+0x198>)
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f865 	bl	80027ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	00010008 	.word	0x00010008
 800273c:	00010002 	.word	0x00010002

08002740 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	4613      	mov	r3, r2
 800274e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002750:	e025      	b.n	800279e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002758:	d021      	beq.n	800279e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275a:	f7fe fb8b 	bl	8000e74 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d302      	bcc.n	8002770 <I2C_WaitOnFlagUntilTimeout+0x30>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d116      	bne.n	800279e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2220      	movs	r2, #32
 800277a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f043 0220 	orr.w	r2, r3, #32
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e023      	b.n	80027e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	0c1b      	lsrs	r3, r3, #16
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d10d      	bne.n	80027c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	43da      	mvns	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4013      	ands	r3, r2
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	bf0c      	ite	eq
 80027ba:	2301      	moveq	r3, #1
 80027bc:	2300      	movne	r3, #0
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	e00c      	b.n	80027de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	43da      	mvns	r2, r3
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	4013      	ands	r3, r2
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	bf0c      	ite	eq
 80027d6:	2301      	moveq	r3, #1
 80027d8:	2300      	movne	r3, #0
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d0b6      	beq.n	8002752 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027fc:	e051      	b.n	80028a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280c:	d123      	bne.n	8002856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002826:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2220      	movs	r2, #32
 8002832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f043 0204 	orr.w	r2, r3, #4
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e046      	b.n	80028e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285c:	d021      	beq.n	80028a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285e:	f7fe fb09 	bl	8000e74 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	429a      	cmp	r2, r3
 800286c:	d302      	bcc.n	8002874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d116      	bne.n	80028a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f043 0220 	orr.w	r2, r3, #32
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e020      	b.n	80028e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	0c1b      	lsrs	r3, r3, #16
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d10c      	bne.n	80028c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	43da      	mvns	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4013      	ands	r3, r2
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	bf14      	ite	ne
 80028be:	2301      	movne	r3, #1
 80028c0:	2300      	moveq	r3, #0
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	e00b      	b.n	80028de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	43da      	mvns	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	4013      	ands	r3, r2
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf14      	ite	ne
 80028d8:	2301      	movne	r3, #1
 80028da:	2300      	moveq	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d18d      	bne.n	80027fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028f8:	e02d      	b.n	8002956 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f8ce 	bl	8002a9c <I2C_IsAcknowledgeFailed>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e02d      	b.n	8002966 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002910:	d021      	beq.n	8002956 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002912:	f7fe faaf 	bl	8000e74 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	429a      	cmp	r2, r3
 8002920:	d302      	bcc.n	8002928 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d116      	bne.n	8002956 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f043 0220 	orr.w	r2, r3, #32
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e007      	b.n	8002966 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002960:	2b80      	cmp	r3, #128	; 0x80
 8002962:	d1ca      	bne.n	80028fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800297a:	e02d      	b.n	80029d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f88d 	bl	8002a9c <I2C_IsAcknowledgeFailed>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e02d      	b.n	80029e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002992:	d021      	beq.n	80029d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002994:	f7fe fa6e 	bl	8000e74 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d302      	bcc.n	80029aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d116      	bne.n	80029d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	f043 0220 	orr.w	r2, r3, #32
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e007      	b.n	80029e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d1ca      	bne.n	800297c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029fc:	e042      	b.n	8002a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f003 0310 	and.w	r3, r3, #16
 8002a08:	2b10      	cmp	r3, #16
 8002a0a:	d119      	bne.n	8002a40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0210 	mvn.w	r2, #16
 8002a14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e029      	b.n	8002a94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a40:	f7fe fa18 	bl	8000e74 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d302      	bcc.n	8002a56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d116      	bne.n	8002a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f043 0220 	orr.w	r2, r3, #32
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e007      	b.n	8002a94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8e:	2b40      	cmp	r3, #64	; 0x40
 8002a90:	d1b5      	bne.n	80029fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab2:	d11b      	bne.n	8002aec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002abc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	f043 0204 	orr.w	r2, r3, #4
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002afa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002afc:	b08f      	sub	sp, #60	; 0x3c
 8002afe:	af0a      	add	r7, sp, #40	; 0x28
 8002b00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e10f      	b.n	8002d2c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f007 fb48 	bl	800a1bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2203      	movs	r2, #3
 8002b30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f003 ff45 	bl	80069da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	603b      	str	r3, [r7, #0]
 8002b56:	687e      	ldr	r6, [r7, #4]
 8002b58:	466d      	mov	r5, sp
 8002b5a:	f106 0410 	add.w	r4, r6, #16
 8002b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b6e:	1d33      	adds	r3, r6, #4
 8002b70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b72:	6838      	ldr	r0, [r7, #0]
 8002b74:	f003 fe1c 	bl	80067b0 <USB_CoreInit>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e0d0      	b.n	8002d2c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2100      	movs	r1, #0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f003 ff33 	bl	80069fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b96:	2300      	movs	r3, #0
 8002b98:	73fb      	strb	r3, [r7, #15]
 8002b9a:	e04a      	b.n	8002c32 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b9c:	7bfa      	ldrb	r2, [r7, #15]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	333d      	adds	r3, #61	; 0x3d
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	333c      	adds	r3, #60	; 0x3c
 8002bc0:	7bfa      	ldrb	r2, [r7, #15]
 8002bc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	b298      	uxth	r0, r3
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3342      	adds	r3, #66	; 0x42
 8002bd8:	4602      	mov	r2, r0
 8002bda:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	333f      	adds	r3, #63	; 0x3f
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bf0:	7bfa      	ldrb	r2, [r7, #15]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	3344      	adds	r3, #68	; 0x44
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	3348      	adds	r3, #72	; 0x48
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	1a9b      	subs	r3, r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	3350      	adds	r3, #80	; 0x50
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	73fb      	strb	r3, [r7, #15]
 8002c32:	7bfa      	ldrb	r2, [r7, #15]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d3af      	bcc.n	8002b9c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	e044      	b.n	8002ccc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002c6a:	7bfa      	ldrb	r2, [r7, #15]
 8002c6c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c84:	7bfa      	ldrb	r2, [r7, #15]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cb0:	7bfa      	ldrb	r2, [r7, #15]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
 8002ccc:	7bfa      	ldrb	r2, [r7, #15]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d3b5      	bcc.n	8002c42 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	687e      	ldr	r6, [r7, #4]
 8002cde:	466d      	mov	r5, sp
 8002ce0:	f106 0410 	add.w	r4, r6, #16
 8002ce4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ce6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cf0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cf4:	1d33      	adds	r3, r6, #4
 8002cf6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cf8:	6838      	ldr	r0, [r7, #0]
 8002cfa:	f003 fecb 	bl	8006a94 <USB_DevInit>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e00d      	b.n	8002d2c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f004 ff47 	bl	8007bb8 <USB_DevDisconnect>

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d34 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_PCD_Start+0x1c>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e020      	b.n	8002d92 <HAL_PCD_Start+0x5e>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d109      	bne.n	8002d74 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d005      	beq.n	8002d74 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f003 fe1d 	bl	80069b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f004 fef7 	bl	8007b76 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d9a:	b590      	push	{r4, r7, lr}
 8002d9c:	b08d      	sub	sp, #52	; 0x34
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f004 ffb5 	bl	8007d20 <USB_GetMode>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 839d 	bne.w	80034f8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f004 ff19 	bl	8007bfa <USB_ReadInterrupts>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 8393 	beq.w	80034f6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f004 ff10 	bl	8007bfa <USB_ReadInterrupts>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d107      	bne.n	8002df4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f002 0202 	and.w	r2, r2, #2
 8002df2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f004 fefe 	bl	8007bfa <USB_ReadInterrupts>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	f003 0310 	and.w	r3, r3, #16
 8002e04:	2b10      	cmp	r3, #16
 8002e06:	d161      	bne.n	8002ecc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699a      	ldr	r2, [r3, #24]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0210 	bic.w	r2, r2, #16
 8002e16:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f003 020f 	and.w	r2, r3, #15
 8002e24:	4613      	mov	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	1a9b      	subs	r3, r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	4413      	add	r3, r2
 8002e34:	3304      	adds	r3, #4
 8002e36:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	0c5b      	lsrs	r3, r3, #17
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d124      	bne.n	8002e8e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d035      	beq.n	8002ebc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	091b      	lsrs	r3, r3, #4
 8002e58:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	6a38      	ldr	r0, [r7, #32]
 8002e64:	f004 fd35 	bl	80078d2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	091b      	lsrs	r3, r3, #4
 8002e70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e74:	441a      	add	r2, r3
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	699a      	ldr	r2, [r3, #24]
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e86:	441a      	add	r2, r3
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	619a      	str	r2, [r3, #24]
 8002e8c:	e016      	b.n	8002ebc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	0c5b      	lsrs	r3, r3, #17
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	2b06      	cmp	r3, #6
 8002e98:	d110      	bne.n	8002ebc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ea0:	2208      	movs	r2, #8
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	6a38      	ldr	r0, [r7, #32]
 8002ea6:	f004 fd14 	bl	80078d2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eb6:	441a      	add	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0210 	orr.w	r2, r2, #16
 8002eca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f004 fe92 	bl	8007bfa <USB_ReadInterrupts>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002edc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ee0:	d16e      	bne.n	8002fc0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f004 fe98 	bl	8007c20 <USB_ReadDevAllOutEpInterrupt>
 8002ef0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002ef2:	e062      	b.n	8002fba <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d057      	beq.n	8002fae <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f004 febd 	bl	8007c88 <USB_ReadDevOutEPInterrupt>
 8002f0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00c      	beq.n	8002f34 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f26:	461a      	mov	r2, r3
 8002f28:	2301      	movs	r3, #1
 8002f2a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fdb0 	bl	8003a94 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00c      	beq.n	8002f58 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	2308      	movs	r3, #8
 8002f4e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 feaa 	bl	8003cac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d008      	beq.n	8002f74 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2310      	movs	r3, #16
 8002f72:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d008      	beq.n	8002f90 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	2320      	movs	r3, #32
 8002f8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb6:	085b      	lsrs	r3, r3, #1
 8002fb8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d199      	bne.n	8002ef4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f004 fe18 	bl	8007bfa <USB_ReadInterrupts>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fd4:	f040 80c0 	bne.w	8003158 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f004 fe39 	bl	8007c54 <USB_ReadDevAllInEpInterrupt>
 8002fe2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002fe8:	e0b2      	b.n	8003150 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 80a7 	beq.w	8003144 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	4611      	mov	r1, r2
 8003000:	4618      	mov	r0, r3
 8003002:	f004 fe5f 	bl	8007cc4 <USB_ReadDevInEPInterrupt>
 8003006:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d057      	beq.n	80030c2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	2201      	movs	r2, #1
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003026:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	43db      	mvns	r3, r3
 800302c:	69f9      	ldr	r1, [r7, #28]
 800302e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003032:	4013      	ands	r3, r2
 8003034:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	015a      	lsls	r2, r3, #5
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	4413      	add	r3, r2
 800303e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003042:	461a      	mov	r2, r3
 8003044:	2301      	movs	r3, #1
 8003046:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d132      	bne.n	80030b6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003054:	4613      	mov	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	1a9b      	subs	r3, r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	3348      	adds	r3, #72	; 0x48
 8003060:	6819      	ldr	r1, [r3, #0]
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003066:	4613      	mov	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	1a9b      	subs	r3, r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4403      	add	r3, r0
 8003070:	3344      	adds	r3, #68	; 0x44
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4419      	add	r1, r3
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307a:	4613      	mov	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4403      	add	r3, r0
 8003084:	3348      	adds	r3, #72	; 0x48
 8003086:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	2b00      	cmp	r3, #0
 800308c:	d113      	bne.n	80030b6 <HAL_PCD_IRQHandler+0x31c>
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003092:	4613      	mov	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	3350      	adds	r3, #80	; 0x50
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d108      	bne.n	80030b6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80030ae:	461a      	mov	r2, r3
 80030b0:	2101      	movs	r1, #1
 80030b2:	f004 fe67 	bl	8007d84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	4619      	mov	r1, r3
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f007 f8fe 	bl	800a2be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d8:	461a      	mov	r2, r3
 80030da:	2308      	movs	r3, #8
 80030dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d008      	beq.n	80030fa <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f4:	461a      	mov	r2, r3
 80030f6:	2310      	movs	r3, #16
 80030f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	4413      	add	r3, r2
 800310c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003110:	461a      	mov	r2, r3
 8003112:	2340      	movs	r3, #64	; 0x40
 8003114:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d008      	beq.n	8003132 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	4413      	add	r3, r2
 8003128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800312c:	461a      	mov	r2, r3
 800312e:	2302      	movs	r3, #2
 8003130:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800313c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fc1b 	bl	800397a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	3301      	adds	r3, #1
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800314a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314c:	085b      	lsrs	r3, r3, #1
 800314e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003152:	2b00      	cmp	r3, #0
 8003154:	f47f af49 	bne.w	8002fea <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f004 fd4c 	bl	8007bfa <USB_ReadInterrupts>
 8003162:	4603      	mov	r3, r0
 8003164:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003168:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800316c:	d122      	bne.n	80031b4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	69fa      	ldr	r2, [r7, #28]
 8003178:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800317c:	f023 0301 	bic.w	r3, r3, #1
 8003180:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003188:	2b01      	cmp	r3, #1
 800318a:	d108      	bne.n	800319e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003194:	2100      	movs	r1, #0
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fe26 	bl	8003de8 <HAL_PCDEx_LPM_Callback>
 800319c:	e002      	b.n	80031a4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f007 f904 	bl	800a3ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80031b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f004 fd1e 	bl	8007bfa <USB_ReadInterrupts>
 80031be:	4603      	mov	r3, r0
 80031c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c8:	d112      	bne.n	80031f0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d102      	bne.n	80031e0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f007 f8c0 	bl	800a360 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695a      	ldr	r2, [r3, #20]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80031ee:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f004 fd00 	bl	8007bfa <USB_ReadInterrupts>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003204:	f040 80c7 	bne.w	8003396 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	69fa      	ldr	r2, [r7, #28]
 8003212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2110      	movs	r1, #16
 8003222:	4618      	mov	r0, r3
 8003224:	f003 fd9a 	bl	8006d5c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003228:	2300      	movs	r3, #0
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800322c:	e056      	b.n	80032dc <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800322e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003230:	015a      	lsls	r2, r3, #5
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	4413      	add	r3, r2
 8003236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800323a:	461a      	mov	r2, r3
 800323c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003240:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	4413      	add	r3, r2
 800324a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003252:	0151      	lsls	r1, r2, #5
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	440a      	add	r2, r1
 8003258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800325c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003260:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	4413      	add	r3, r2
 800326a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003272:	0151      	lsls	r1, r2, #5
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	440a      	add	r2, r1
 8003278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800327c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003280:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	4413      	add	r3, r2
 800328a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328e:	461a      	mov	r2, r3
 8003290:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003294:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032a6:	0151      	lsls	r1, r2, #5
 80032a8:	69fa      	ldr	r2, [r7, #28]
 80032aa:	440a      	add	r2, r1
 80032ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032c6:	0151      	lsls	r1, r2, #5
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	440a      	add	r2, r1
 80032cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032d4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d8:	3301      	adds	r3, #1
 80032da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d3a3      	bcc.n	800322e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	69fa      	ldr	r2, [r7, #28]
 80032f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032f4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80032f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d016      	beq.n	8003330 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003312:	f043 030b 	orr.w	r3, r3, #11
 8003316:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003328:	f043 030b 	orr.w	r3, r3, #11
 800332c:	6453      	str	r3, [r2, #68]	; 0x44
 800332e:	e015      	b.n	800335c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800333e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003342:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003346:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003356:	f043 030b 	orr.w	r3, r3, #11
 800335a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	69fa      	ldr	r2, [r7, #28]
 8003366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800336a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800336e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6818      	ldr	r0, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003380:	461a      	mov	r2, r3
 8003382:	f004 fcff 	bl	8007d84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003394:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f004 fc2d 	bl	8007bfa <USB_ReadInterrupts>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033aa:	d124      	bne.n	80033f6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f004 fcc3 	bl	8007d3c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f003 fd2b 	bl	8006e16 <USB_GetDevSpeed>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461a      	mov	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681c      	ldr	r4, [r3, #0]
 80033cc:	f001 f92c 	bl	8004628 <HAL_RCC_GetHCLKFreq>
 80033d0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	461a      	mov	r2, r3
 80033da:	4620      	mov	r0, r4
 80033dc:	f003 fa4a 	bl	8006874 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f006 ff94 	bl	800a30e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695a      	ldr	r2, [r3, #20]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80033f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f004 fbfd 	bl	8007bfa <USB_ReadInterrupts>
 8003400:	4603      	mov	r3, r0
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b08      	cmp	r3, #8
 8003408:	d10a      	bne.n	8003420 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f006 ff71 	bl	800a2f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f002 0208 	and.w	r2, r2, #8
 800341e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f004 fbe8 	bl	8007bfa <USB_ReadInterrupts>
 800342a:	4603      	mov	r3, r0
 800342c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003434:	d10f      	bne.n	8003456 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	b2db      	uxtb	r3, r3
 800343e:	4619      	mov	r1, r3
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f006 ffd3 	bl	800a3ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695a      	ldr	r2, [r3, #20]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003454:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f004 fbcd 	bl	8007bfa <USB_ReadInterrupts>
 8003460:	4603      	mov	r3, r0
 8003462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003466:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800346a:	d10f      	bne.n	800348c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	b2db      	uxtb	r3, r3
 8003474:	4619      	mov	r1, r3
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f006 ffa6 	bl	800a3c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800348a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f004 fbb2 	bl	8007bfa <USB_ReadInterrupts>
 8003496:	4603      	mov	r3, r0
 8003498:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800349c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a0:	d10a      	bne.n	80034b8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f006 ffb4 	bl	800a410 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695a      	ldr	r2, [r3, #20]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80034b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f004 fb9c 	bl	8007bfa <USB_ReadInterrupts>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d115      	bne.n	80034f8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f006 ffa4 	bl	800a42c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6859      	ldr	r1, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	605a      	str	r2, [r3, #4]
 80034f4:	e000      	b.n	80034f8 <HAL_PCD_IRQHandler+0x75e>
      return;
 80034f6:	bf00      	nop
    }
  }
}
 80034f8:	3734      	adds	r7, #52	; 0x34
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd90      	pop	{r4, r7, pc}

080034fe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	460b      	mov	r3, r1
 8003508:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_PCD_SetAddress+0x1a>
 8003514:	2302      	movs	r3, #2
 8003516:	e013      	b.n	8003540 <HAL_PCD_SetAddress+0x42>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	78fa      	ldrb	r2, [r7, #3]
 8003524:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	4611      	mov	r1, r2
 8003530:	4618      	mov	r0, r3
 8003532:	f004 fafa 	bl	8007b2a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	4608      	mov	r0, r1
 8003552:	4611      	mov	r1, r2
 8003554:	461a      	mov	r2, r3
 8003556:	4603      	mov	r3, r0
 8003558:	70fb      	strb	r3, [r7, #3]
 800355a:	460b      	mov	r3, r1
 800355c:	803b      	strh	r3, [r7, #0]
 800355e:	4613      	mov	r3, r2
 8003560:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003566:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800356a:	2b00      	cmp	r3, #0
 800356c:	da0f      	bge.n	800358e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	f003 020f 	and.w	r2, r3, #15
 8003574:	4613      	mov	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	3338      	adds	r3, #56	; 0x38
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	3304      	adds	r3, #4
 8003584:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	705a      	strb	r2, [r3, #1]
 800358c:	e00f      	b.n	80035ae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800358e:	78fb      	ldrb	r3, [r7, #3]
 8003590:	f003 020f 	and.w	r2, r3, #15
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	4413      	add	r3, r2
 80035a4:	3304      	adds	r3, #4
 80035a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80035ba:	883a      	ldrh	r2, [r7, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	78ba      	ldrb	r2, [r7, #2]
 80035c4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	785b      	ldrb	r3, [r3, #1]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d004      	beq.n	80035d8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80035d8:	78bb      	ldrb	r3, [r7, #2]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d102      	bne.n	80035e4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d101      	bne.n	80035f2 <HAL_PCD_EP_Open+0xaa>
 80035ee:	2302      	movs	r3, #2
 80035f0:	e00e      	b.n	8003610 <HAL_PCD_EP_Open+0xc8>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68f9      	ldr	r1, [r7, #12]
 8003600:	4618      	mov	r0, r3
 8003602:	f003 fc2d 	bl	8006e60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800360e:	7afb      	ldrb	r3, [r7, #11]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003624:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003628:	2b00      	cmp	r3, #0
 800362a:	da0f      	bge.n	800364c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	f003 020f 	and.w	r2, r3, #15
 8003632:	4613      	mov	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	3338      	adds	r3, #56	; 0x38
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	4413      	add	r3, r2
 8003640:	3304      	adds	r3, #4
 8003642:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2201      	movs	r2, #1
 8003648:	705a      	strb	r2, [r3, #1]
 800364a:	e00f      	b.n	800366c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	f003 020f 	and.w	r2, r3, #15
 8003652:	4613      	mov	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	3304      	adds	r3, #4
 8003664:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800366c:	78fb      	ldrb	r3, [r7, #3]
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	b2da      	uxtb	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_PCD_EP_Close+0x6e>
 8003682:	2302      	movs	r3, #2
 8003684:	e00e      	b.n	80036a4 <HAL_PCD_EP_Close+0x8c>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68f9      	ldr	r1, [r7, #12]
 8003694:	4618      	mov	r0, r3
 8003696:	f003 fc6b 	bl	8006f70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	607a      	str	r2, [r7, #4]
 80036b6:	603b      	str	r3, [r7, #0]
 80036b8:	460b      	mov	r3, r1
 80036ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036bc:	7afb      	ldrb	r3, [r7, #11]
 80036be:	f003 020f 	and.w	r2, r3, #15
 80036c2:	4613      	mov	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4413      	add	r3, r2
 80036d2:	3304      	adds	r3, #4
 80036d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2200      	movs	r2, #0
 80036e6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2200      	movs	r2, #0
 80036ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036ee:	7afb      	ldrb	r3, [r7, #11]
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d102      	bne.n	8003708 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003708:	7afb      	ldrb	r3, [r7, #11]
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	6979      	ldr	r1, [r7, #20]
 8003720:	f003 ff46 	bl	80075b0 <USB_EP0StartXfer>
 8003724:	e008      	b.n	8003738 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	6979      	ldr	r1, [r7, #20]
 8003734:	f003 fcf8 	bl	8007128 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	460b      	mov	r3, r1
 800374c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800374e:	78fb      	ldrb	r3, [r7, #3]
 8003750:	f003 020f 	and.w	r2, r3, #15
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003764:	681b      	ldr	r3, [r3, #0]
}
 8003766:	4618      	mov	r0, r3
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b086      	sub	sp, #24
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	603b      	str	r3, [r7, #0]
 800377e:	460b      	mov	r3, r1
 8003780:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003782:	7afb      	ldrb	r3, [r7, #11]
 8003784:	f003 020f 	and.w	r2, r3, #15
 8003788:	4613      	mov	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	3338      	adds	r3, #56	; 0x38
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4413      	add	r3, r2
 8003796:	3304      	adds	r3, #4
 8003798:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2200      	movs	r2, #0
 80037aa:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2201      	movs	r2, #1
 80037b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037b2:	7afb      	ldrb	r3, [r7, #11]
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d102      	bne.n	80037cc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037cc:	7afb      	ldrb	r3, [r7, #11]
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d109      	bne.n	80037ea <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	461a      	mov	r2, r3
 80037e2:	6979      	ldr	r1, [r7, #20]
 80037e4:	f003 fee4 	bl	80075b0 <USB_EP0StartXfer>
 80037e8:	e008      	b.n	80037fc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	461a      	mov	r2, r3
 80037f6:	6979      	ldr	r1, [r7, #20]
 80037f8:	f003 fc96 	bl	8007128 <USB_EPStartXfer>
  }

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b084      	sub	sp, #16
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	460b      	mov	r3, r1
 8003810:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	f003 020f 	and.w	r2, r3, #15
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	429a      	cmp	r2, r3
 800381e:	d901      	bls.n	8003824 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e050      	b.n	80038c6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003824:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003828:	2b00      	cmp	r3, #0
 800382a:	da0f      	bge.n	800384c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	f003 020f 	and.w	r2, r3, #15
 8003832:	4613      	mov	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	3338      	adds	r3, #56	; 0x38
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	4413      	add	r3, r2
 8003840:	3304      	adds	r3, #4
 8003842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2201      	movs	r2, #1
 8003848:	705a      	strb	r2, [r3, #1]
 800384a:	e00d      	b.n	8003868 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800384c:	78fa      	ldrb	r2, [r7, #3]
 800384e:	4613      	mov	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	4413      	add	r3, r2
 800385e:	3304      	adds	r3, #4
 8003860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	f003 030f 	and.w	r3, r3, #15
 8003874:	b2da      	uxtb	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_PCD_EP_SetStall+0x82>
 8003884:	2302      	movs	r3, #2
 8003886:	e01e      	b.n	80038c6 <HAL_PCD_EP_SetStall+0xc0>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68f9      	ldr	r1, [r7, #12]
 8003896:	4618      	mov	r0, r3
 8003898:	f004 f873 	bl	8007982 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800389c:	78fb      	ldrb	r3, [r7, #3]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10a      	bne.n	80038bc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	b2d9      	uxtb	r1, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038b6:	461a      	mov	r2, r3
 80038b8:	f004 fa64 	bl	8007d84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	460b      	mov	r3, r1
 80038d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80038da:	78fb      	ldrb	r3, [r7, #3]
 80038dc:	f003 020f 	and.w	r2, r3, #15
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d901      	bls.n	80038ec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e042      	b.n	8003972 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	da0f      	bge.n	8003914 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	f003 020f 	and.w	r2, r3, #15
 80038fa:	4613      	mov	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	3338      	adds	r3, #56	; 0x38
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4413      	add	r3, r2
 8003908:	3304      	adds	r3, #4
 800390a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2201      	movs	r2, #1
 8003910:	705a      	strb	r2, [r3, #1]
 8003912:	e00f      	b.n	8003934 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	f003 020f 	and.w	r2, r3, #15
 800391a:	4613      	mov	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	4413      	add	r3, r2
 800392a:	3304      	adds	r3, #4
 800392c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	b2da      	uxtb	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_PCD_EP_ClrStall+0x86>
 8003950:	2302      	movs	r3, #2
 8003952:	e00e      	b.n	8003972 <HAL_PCD_EP_ClrStall+0xa4>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68f9      	ldr	r1, [r7, #12]
 8003962:	4618      	mov	r0, r3
 8003964:	f004 f87b 	bl	8007a5e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b08a      	sub	sp, #40	; 0x28
 800397e:	af02      	add	r7, sp, #8
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	4613      	mov	r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	3338      	adds	r3, #56	; 0x38
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	4413      	add	r3, r2
 800399e:	3304      	adds	r3, #4
 80039a0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d901      	bls.n	80039b2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e06c      	b.n	8003a8c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	695a      	ldr	r2, [r3, #20]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d902      	bls.n	80039ce <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3303      	adds	r3, #3
 80039d2:	089b      	lsrs	r3, r3, #2
 80039d4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039d6:	e02b      	b.n	8003a30 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	695a      	ldr	r2, [r3, #20]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	69fa      	ldr	r2, [r7, #28]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d902      	bls.n	80039f4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	3303      	adds	r3, #3
 80039f8:	089b      	lsrs	r3, r3, #2
 80039fa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	68d9      	ldr	r1, [r3, #12]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	4603      	mov	r3, r0
 8003a12:	6978      	ldr	r0, [r7, #20]
 8003a14:	f003 ff1f 	bl	8007856 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	441a      	add	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	699a      	ldr	r2, [r3, #24]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	441a      	add	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d809      	bhi.n	8003a5a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d203      	bcs.n	8003a5a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1be      	bne.n	80039d8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	695a      	ldr	r2, [r3, #20]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d811      	bhi.n	8003a8a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	6939      	ldr	r1, [r7, #16]
 8003a82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a86:	4013      	ands	r3, r2
 8003a88:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3720      	adds	r7, #32
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	333c      	adds	r3, #60	; 0x3c
 8003aac:	3304      	adds	r3, #4
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	f040 80a0 	bne.w	8003c0c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d015      	beq.n	8003b02 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4a72      	ldr	r2, [pc, #456]	; (8003ca4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	f240 80dd 	bls.w	8003c9a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 80d7 	beq.w	8003c9a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af8:	461a      	mov	r2, r3
 8003afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003afe:	6093      	str	r3, [r2, #8]
 8003b00:	e0cb      	b.n	8003c9a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d009      	beq.n	8003b20 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b18:	461a      	mov	r2, r3
 8003b1a:	2320      	movs	r3, #32
 8003b1c:	6093      	str	r3, [r2, #8]
 8003b1e:	e0bc      	b.n	8003c9a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f040 80b7 	bne.w	8003c9a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4a5d      	ldr	r2, [pc, #372]	; (8003ca4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d90f      	bls.n	8003b54 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b50:	6093      	str	r3, [r2, #8]
 8003b52:	e0a2      	b.n	8003c9a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	1a9b      	subs	r3, r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003b66:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	0159      	lsls	r1, r3, #5
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	440b      	add	r3, r1
 8003b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003b7a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	4613      	mov	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4403      	add	r3, r0
 8003b8a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003b8e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	4613      	mov	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	1a9b      	subs	r3, r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ba2:	6819      	ldr	r1, [r3, #0]
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4403      	add	r3, r0
 8003bb2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4419      	add	r1, r3
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4403      	add	r3, r0
 8003bc8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003bcc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d114      	bne.n	8003bfe <PCD_EP_OutXfrComplete_int+0x16a>
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d108      	bne.n	8003bfe <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	f004 f8c3 	bl	8007d84 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	4619      	mov	r1, r3
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f006 fb3f 	bl	800a288 <HAL_PCD_DataOutStageCallback>
 8003c0a:	e046      	b.n	8003c9a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a26      	ldr	r2, [pc, #152]	; (8003ca8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d124      	bne.n	8003c5e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c30:	6093      	str	r3, [r2, #8]
 8003c32:	e032      	b.n	8003c9a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d008      	beq.n	8003c50 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	2320      	movs	r3, #32
 8003c4e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	4619      	mov	r1, r3
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f006 fb16 	bl	800a288 <HAL_PCD_DataOutStageCallback>
 8003c5c:	e01d      	b.n	8003c9a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d114      	bne.n	8003c8e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	1a9b      	subs	r3, r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d108      	bne.n	8003c8e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6818      	ldr	r0, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c86:	461a      	mov	r2, r3
 8003c88:	2100      	movs	r1, #0
 8003c8a:	f004 f87b 	bl	8007d84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	4619      	mov	r1, r3
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f006 faf7 	bl	800a288 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	4f54300a 	.word	0x4f54300a
 8003ca8:	4f54310a 	.word	0x4f54310a

08003cac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	333c      	adds	r3, #60	; 0x3c
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4a15      	ldr	r2, [pc, #84]	; (8003d34 <PCD_EP_OutSetupPacket_int+0x88>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d90e      	bls.n	8003d00 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d009      	beq.n	8003d00 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cfe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f006 faaf 	bl	800a264 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4a0a      	ldr	r2, [pc, #40]	; (8003d34 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d90c      	bls.n	8003d28 <PCD_EP_OutSetupPacket_int+0x7c>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d108      	bne.n	8003d28 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d20:	461a      	mov	r2, r3
 8003d22:	2101      	movs	r1, #1
 8003d24:	f004 f82e 	bl	8007d84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	4f54300a 	.word	0x4f54300a

08003d38 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	70fb      	strb	r3, [r7, #3]
 8003d44:	4613      	mov	r3, r2
 8003d46:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d107      	bne.n	8003d66 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d56:	883b      	ldrh	r3, [r7, #0]
 8003d58:	0419      	lsls	r1, r3, #16
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	629a      	str	r2, [r3, #40]	; 0x28
 8003d64:	e028      	b.n	8003db8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	0c1b      	lsrs	r3, r3, #16
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	4413      	add	r3, r2
 8003d72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d74:	2300      	movs	r3, #0
 8003d76:	73fb      	strb	r3, [r7, #15]
 8003d78:	e00d      	b.n	8003d96 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	3340      	adds	r3, #64	; 0x40
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	0c1b      	lsrs	r3, r3, #16
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	3301      	adds	r3, #1
 8003d94:	73fb      	strb	r3, [r7, #15]
 8003d96:	7bfa      	ldrb	r2, [r7, #15]
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d3ec      	bcc.n	8003d7a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003da0:	883b      	ldrh	r3, [r7, #0]
 8003da2:	0418      	lsls	r0, r3, #16
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6819      	ldr	r1, [r3, #0]
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	4302      	orrs	r2, r0
 8003db0:	3340      	adds	r3, #64	; 0x40
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	460b      	mov	r3, r1
 8003dd0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	887a      	ldrh	r2, [r7, #2]
 8003dd8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e264      	b.n	80042dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d075      	beq.n	8003f0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e1e:	4ba3      	ldr	r3, [pc, #652]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d00c      	beq.n	8003e44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e2a:	4ba0      	ldr	r3, [pc, #640]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d112      	bne.n	8003e5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e36:	4b9d      	ldr	r3, [pc, #628]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e42:	d10b      	bne.n	8003e5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e44:	4b99      	ldr	r3, [pc, #612]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d05b      	beq.n	8003f08 <HAL_RCC_OscConfig+0x108>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d157      	bne.n	8003f08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e23f      	b.n	80042dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e64:	d106      	bne.n	8003e74 <HAL_RCC_OscConfig+0x74>
 8003e66:	4b91      	ldr	r3, [pc, #580]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a90      	ldr	r2, [pc, #576]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	e01d      	b.n	8003eb0 <HAL_RCC_OscConfig+0xb0>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x98>
 8003e7e:	4b8b      	ldr	r3, [pc, #556]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a8a      	ldr	r2, [pc, #552]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	4b88      	ldr	r3, [pc, #544]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a87      	ldr	r2, [pc, #540]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	e00b      	b.n	8003eb0 <HAL_RCC_OscConfig+0xb0>
 8003e98:	4b84      	ldr	r3, [pc, #528]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a83      	ldr	r2, [pc, #524]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	4b81      	ldr	r3, [pc, #516]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a80      	ldr	r2, [pc, #512]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d013      	beq.n	8003ee0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb8:	f7fc ffdc 	bl	8000e74 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ec0:	f7fc ffd8 	bl	8000e74 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b64      	cmp	r3, #100	; 0x64
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e204      	b.n	80042dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed2:	4b76      	ldr	r3, [pc, #472]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0xc0>
 8003ede:	e014      	b.n	8003f0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee0:	f7fc ffc8 	bl	8000e74 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ee8:	f7fc ffc4 	bl	8000e74 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b64      	cmp	r3, #100	; 0x64
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e1f0      	b.n	80042dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efa:	4b6c      	ldr	r3, [pc, #432]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0xe8>
 8003f06:	e000      	b.n	8003f0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d063      	beq.n	8003fde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f16:	4b65      	ldr	r3, [pc, #404]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00b      	beq.n	8003f3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f22:	4b62      	ldr	r3, [pc, #392]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d11c      	bne.n	8003f68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f2e:	4b5f      	ldr	r3, [pc, #380]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d116      	bne.n	8003f68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f3a:	4b5c      	ldr	r3, [pc, #368]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d005      	beq.n	8003f52 <HAL_RCC_OscConfig+0x152>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d001      	beq.n	8003f52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e1c4      	b.n	80042dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f52:	4b56      	ldr	r3, [pc, #344]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4952      	ldr	r1, [pc, #328]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f66:	e03a      	b.n	8003fde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d020      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f70:	4b4f      	ldr	r3, [pc, #316]	; (80040b0 <HAL_RCC_OscConfig+0x2b0>)
 8003f72:	2201      	movs	r2, #1
 8003f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f76:	f7fc ff7d 	bl	8000e74 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f7e:	f7fc ff79 	bl	8000e74 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e1a5      	b.n	80042dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f90:	4b46      	ldr	r3, [pc, #280]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0f0      	beq.n	8003f7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f9c:	4b43      	ldr	r3, [pc, #268]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4940      	ldr	r1, [pc, #256]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	600b      	str	r3, [r1, #0]
 8003fb0:	e015      	b.n	8003fde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fb2:	4b3f      	ldr	r3, [pc, #252]	; (80040b0 <HAL_RCC_OscConfig+0x2b0>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb8:	f7fc ff5c 	bl	8000e74 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fc0:	f7fc ff58 	bl	8000e74 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e184      	b.n	80042dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fd2:	4b36      	ldr	r3, [pc, #216]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d030      	beq.n	800404c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d016      	beq.n	8004020 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ff2:	4b30      	ldr	r3, [pc, #192]	; (80040b4 <HAL_RCC_OscConfig+0x2b4>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff8:	f7fc ff3c 	bl	8000e74 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004000:	f7fc ff38 	bl	8000e74 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e164      	b.n	80042dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004012:	4b26      	ldr	r3, [pc, #152]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8004014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x200>
 800401e:	e015      	b.n	800404c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004020:	4b24      	ldr	r3, [pc, #144]	; (80040b4 <HAL_RCC_OscConfig+0x2b4>)
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004026:	f7fc ff25 	bl	8000e74 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800402e:	f7fc ff21 	bl	8000e74 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e14d      	b.n	80042dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004040:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8004042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f0      	bne.n	800402e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80a0 	beq.w	800419a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800405a:	2300      	movs	r3, #0
 800405c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800405e:	4b13      	ldr	r3, [pc, #76]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10f      	bne.n	800408a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800406a:	2300      	movs	r3, #0
 800406c:	60bb      	str	r3, [r7, #8]
 800406e:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	4a0e      	ldr	r2, [pc, #56]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 8004074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004078:	6413      	str	r3, [r2, #64]	; 0x40
 800407a:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <HAL_RCC_OscConfig+0x2ac>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004082:	60bb      	str	r3, [r7, #8]
 8004084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004086:	2301      	movs	r3, #1
 8004088:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800408a:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <HAL_RCC_OscConfig+0x2b8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004092:	2b00      	cmp	r3, #0
 8004094:	d121      	bne.n	80040da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004096:	4b08      	ldr	r3, [pc, #32]	; (80040b8 <HAL_RCC_OscConfig+0x2b8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a07      	ldr	r2, [pc, #28]	; (80040b8 <HAL_RCC_OscConfig+0x2b8>)
 800409c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040a2:	f7fc fee7 	bl	8000e74 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a8:	e011      	b.n	80040ce <HAL_RCC_OscConfig+0x2ce>
 80040aa:	bf00      	nop
 80040ac:	40023800 	.word	0x40023800
 80040b0:	42470000 	.word	0x42470000
 80040b4:	42470e80 	.word	0x42470e80
 80040b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040bc:	f7fc feda 	bl	8000e74 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e106      	b.n	80042dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ce:	4b85      	ldr	r3, [pc, #532]	; (80042e4 <HAL_RCC_OscConfig+0x4e4>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f0      	beq.n	80040bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d106      	bne.n	80040f0 <HAL_RCC_OscConfig+0x2f0>
 80040e2:	4b81      	ldr	r3, [pc, #516]	; (80042e8 <HAL_RCC_OscConfig+0x4e8>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e6:	4a80      	ldr	r2, [pc, #512]	; (80042e8 <HAL_RCC_OscConfig+0x4e8>)
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	6713      	str	r3, [r2, #112]	; 0x70
 80040ee:	e01c      	b.n	800412a <HAL_RCC_OscConfig+0x32a>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b05      	cmp	r3, #5
 80040f6:	d10c      	bne.n	8004112 <HAL_RCC_OscConfig+0x312>
 80040f8:	4b7b      	ldr	r3, [pc, #492]	; (80042e8 <HAL_RCC_OscConfig+0x4e8>)
 80040fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fc:	4a7a      	ldr	r2, [pc, #488]	; (80042e8 <HAL_RCC_OscConfig+0x4e8>)
 80040fe:	f043 0304 	orr.w	r3, r3, #4
 8004102:	6713      	str	r3, [r2, #112]	; 0x70
 8004104:	4b78      	ldr	r3, [pc, #480]	; (80042e8 <HAL_RCC_OscConfig+0x4e8>)
 8004106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004108:	4a77      	ldr	r2, [pc, #476]	; (80042e8 <HAL_RCC_OscConfig+0x4e8>)
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	6713      	str	r3, [r2, #112]	; 0x70
 8004110:	e00b      	b.n	800412a <HAL_RCC_OscConfig+0x32a>
 8004112:	4b75      	ldr	r3, [pc, #468]	; (80042e8 <HAL_RCC_OscConfig+0x4e8>)
 8004114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004116:	4a74      	ldr	r2, [pc, #464]	; (80042e8 <HAL_RCC_OscConfig+0x4e8>)
 8004118:	f023 0301 	bic.w	r3, r3, #1
 800411c:	6713      	str	r3, [r2, #112]	; 0x70
 800411e:	4b72      	ldr	r3, [pc, #456]	; (80042e8 <HAL_RCC_OscConfig+0x4e8>)
 8004120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004122:	4a71      	ldr	r2, [pc, #452]	; (80042e8 <HAL_RCC_OscConfig+0x4e8>)
 8004124:	f023 0304 	bic.w	r3, r3, #4
 8004128:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d015      	beq.n	800415e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004132:	f7fc fe9f 	bl	8000e74 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004138:	e00a      	b.n	8004150 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800413a:	f7fc fe9b 	bl	8000e74 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	f241 3288 	movw	r2, #5000	; 0x1388
 8004148:	4293      	cmp	r3, r2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e0c5      	b.n	80042dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004150:	4b65      	ldr	r3, [pc, #404]	; (80042e8 <HAL_RCC_OscConfig+0x4e8>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0ee      	beq.n	800413a <HAL_RCC_OscConfig+0x33a>
 800415c:	e014      	b.n	8004188 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800415e:	f7fc fe89 	bl	8000e74 <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004164:	e00a      	b.n	800417c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004166:	f7fc fe85 	bl	8000e74 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	f241 3288 	movw	r2, #5000	; 0x1388
 8004174:	4293      	cmp	r3, r2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e0af      	b.n	80042dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800417c:	4b5a      	ldr	r3, [pc, #360]	; (80042e8 <HAL_RCC_OscConfig+0x4e8>)
 800417e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1ee      	bne.n	8004166 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004188:	7dfb      	ldrb	r3, [r7, #23]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d105      	bne.n	800419a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800418e:	4b56      	ldr	r3, [pc, #344]	; (80042e8 <HAL_RCC_OscConfig+0x4e8>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	4a55      	ldr	r2, [pc, #340]	; (80042e8 <HAL_RCC_OscConfig+0x4e8>)
 8004194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004198:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 809b 	beq.w	80042da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041a4:	4b50      	ldr	r3, [pc, #320]	; (80042e8 <HAL_RCC_OscConfig+0x4e8>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 030c 	and.w	r3, r3, #12
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d05c      	beq.n	800426a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d141      	bne.n	800423c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b8:	4b4c      	ldr	r3, [pc, #304]	; (80042ec <HAL_RCC_OscConfig+0x4ec>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041be:	f7fc fe59 	bl	8000e74 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c6:	f7fc fe55 	bl	8000e74 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e081      	b.n	80042dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d8:	4b43      	ldr	r3, [pc, #268]	; (80042e8 <HAL_RCC_OscConfig+0x4e8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1f0      	bne.n	80041c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69da      	ldr	r2, [r3, #28]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	019b      	lsls	r3, r3, #6
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	085b      	lsrs	r3, r3, #1
 80041fc:	3b01      	subs	r3, #1
 80041fe:	041b      	lsls	r3, r3, #16
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004206:	061b      	lsls	r3, r3, #24
 8004208:	4937      	ldr	r1, [pc, #220]	; (80042e8 <HAL_RCC_OscConfig+0x4e8>)
 800420a:	4313      	orrs	r3, r2
 800420c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800420e:	4b37      	ldr	r3, [pc, #220]	; (80042ec <HAL_RCC_OscConfig+0x4ec>)
 8004210:	2201      	movs	r2, #1
 8004212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004214:	f7fc fe2e 	bl	8000e74 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800421c:	f7fc fe2a 	bl	8000e74 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e056      	b.n	80042dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800422e:	4b2e      	ldr	r3, [pc, #184]	; (80042e8 <HAL_RCC_OscConfig+0x4e8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCC_OscConfig+0x41c>
 800423a:	e04e      	b.n	80042da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800423c:	4b2b      	ldr	r3, [pc, #172]	; (80042ec <HAL_RCC_OscConfig+0x4ec>)
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004242:	f7fc fe17 	bl	8000e74 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800424a:	f7fc fe13 	bl	8000e74 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e03f      	b.n	80042dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425c:	4b22      	ldr	r3, [pc, #136]	; (80042e8 <HAL_RCC_OscConfig+0x4e8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f0      	bne.n	800424a <HAL_RCC_OscConfig+0x44a>
 8004268:	e037      	b.n	80042da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d101      	bne.n	8004276 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e032      	b.n	80042dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004276:	4b1c      	ldr	r3, [pc, #112]	; (80042e8 <HAL_RCC_OscConfig+0x4e8>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d028      	beq.n	80042d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800428e:	429a      	cmp	r2, r3
 8004290:	d121      	bne.n	80042d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d11a      	bne.n	80042d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042a6:	4013      	ands	r3, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d111      	bne.n	80042d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	085b      	lsrs	r3, r3, #1
 80042be:	3b01      	subs	r3, #1
 80042c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d107      	bne.n	80042d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d001      	beq.n	80042da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40007000 	.word	0x40007000
 80042e8:	40023800 	.word	0x40023800
 80042ec:	42470060 	.word	0x42470060

080042f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0cc      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004304:	4b68      	ldr	r3, [pc, #416]	; (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d90c      	bls.n	800432c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004312:	4b65      	ldr	r3, [pc, #404]	; (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800431a:	4b63      	ldr	r3, [pc, #396]	; (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0b8      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d020      	beq.n	800437a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004344:	4b59      	ldr	r3, [pc, #356]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	4a58      	ldr	r2, [pc, #352]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800434e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800435c:	4b53      	ldr	r3, [pc, #332]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	4a52      	ldr	r2, [pc, #328]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004366:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004368:	4b50      	ldr	r3, [pc, #320]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	494d      	ldr	r1, [pc, #308]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	4313      	orrs	r3, r2
 8004378:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d044      	beq.n	8004410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d107      	bne.n	800439e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438e:	4b47      	ldr	r3, [pc, #284]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d119      	bne.n	80043ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e07f      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d003      	beq.n	80043ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d107      	bne.n	80043be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ae:	4b3f      	ldr	r3, [pc, #252]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d109      	bne.n	80043ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e06f      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043be:	4b3b      	ldr	r3, [pc, #236]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e067      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ce:	4b37      	ldr	r3, [pc, #220]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f023 0203 	bic.w	r2, r3, #3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	4934      	ldr	r1, [pc, #208]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043e0:	f7fc fd48 	bl	8000e74 <HAL_GetTick>
 80043e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e6:	e00a      	b.n	80043fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e8:	f7fc fd44 	bl	8000e74 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e04f      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fe:	4b2b      	ldr	r3, [pc, #172]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 020c 	and.w	r2, r3, #12
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	429a      	cmp	r2, r3
 800440e:	d1eb      	bne.n	80043e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004410:	4b25      	ldr	r3, [pc, #148]	; (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d20c      	bcs.n	8004438 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441e:	4b22      	ldr	r3, [pc, #136]	; (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004426:	4b20      	ldr	r3, [pc, #128]	; (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d001      	beq.n	8004438 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e032      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d008      	beq.n	8004456 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004444:	4b19      	ldr	r3, [pc, #100]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4916      	ldr	r1, [pc, #88]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d009      	beq.n	8004476 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004462:	4b12      	ldr	r3, [pc, #72]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	490e      	ldr	r1, [pc, #56]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	4313      	orrs	r3, r2
 8004474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004476:	f000 f821 	bl	80044bc <HAL_RCC_GetSysClockFreq>
 800447a:	4602      	mov	r2, r0
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	490a      	ldr	r1, [pc, #40]	; (80044b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004488:	5ccb      	ldrb	r3, [r1, r3]
 800448a:	fa22 f303 	lsr.w	r3, r2, r3
 800448e:	4a09      	ldr	r2, [pc, #36]	; (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004492:	4b09      	ldr	r3, [pc, #36]	; (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7fc fca8 	bl	8000dec <HAL_InitTick>

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40023c00 	.word	0x40023c00
 80044ac:	40023800 	.word	0x40023800
 80044b0:	0800b16c 	.word	0x0800b16c
 80044b4:	20000000 	.word	0x20000000
 80044b8:	20000004 	.word	0x20000004

080044bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044bc:	b5b0      	push	{r4, r5, r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044c2:	2100      	movs	r1, #0
 80044c4:	6079      	str	r1, [r7, #4]
 80044c6:	2100      	movs	r1, #0
 80044c8:	60f9      	str	r1, [r7, #12]
 80044ca:	2100      	movs	r1, #0
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80044ce:	2100      	movs	r1, #0
 80044d0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044d2:	4952      	ldr	r1, [pc, #328]	; (800461c <HAL_RCC_GetSysClockFreq+0x160>)
 80044d4:	6889      	ldr	r1, [r1, #8]
 80044d6:	f001 010c 	and.w	r1, r1, #12
 80044da:	2908      	cmp	r1, #8
 80044dc:	d00d      	beq.n	80044fa <HAL_RCC_GetSysClockFreq+0x3e>
 80044de:	2908      	cmp	r1, #8
 80044e0:	f200 8094 	bhi.w	800460c <HAL_RCC_GetSysClockFreq+0x150>
 80044e4:	2900      	cmp	r1, #0
 80044e6:	d002      	beq.n	80044ee <HAL_RCC_GetSysClockFreq+0x32>
 80044e8:	2904      	cmp	r1, #4
 80044ea:	d003      	beq.n	80044f4 <HAL_RCC_GetSysClockFreq+0x38>
 80044ec:	e08e      	b.n	800460c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044ee:	4b4c      	ldr	r3, [pc, #304]	; (8004620 <HAL_RCC_GetSysClockFreq+0x164>)
 80044f0:	60bb      	str	r3, [r7, #8]
       break;
 80044f2:	e08e      	b.n	8004612 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044f4:	4b4b      	ldr	r3, [pc, #300]	; (8004624 <HAL_RCC_GetSysClockFreq+0x168>)
 80044f6:	60bb      	str	r3, [r7, #8]
      break;
 80044f8:	e08b      	b.n	8004612 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044fa:	4948      	ldr	r1, [pc, #288]	; (800461c <HAL_RCC_GetSysClockFreq+0x160>)
 80044fc:	6849      	ldr	r1, [r1, #4]
 80044fe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004502:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004504:	4945      	ldr	r1, [pc, #276]	; (800461c <HAL_RCC_GetSysClockFreq+0x160>)
 8004506:	6849      	ldr	r1, [r1, #4]
 8004508:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800450c:	2900      	cmp	r1, #0
 800450e:	d024      	beq.n	800455a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004510:	4942      	ldr	r1, [pc, #264]	; (800461c <HAL_RCC_GetSysClockFreq+0x160>)
 8004512:	6849      	ldr	r1, [r1, #4]
 8004514:	0989      	lsrs	r1, r1, #6
 8004516:	4608      	mov	r0, r1
 8004518:	f04f 0100 	mov.w	r1, #0
 800451c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004520:	f04f 0500 	mov.w	r5, #0
 8004524:	ea00 0204 	and.w	r2, r0, r4
 8004528:	ea01 0305 	and.w	r3, r1, r5
 800452c:	493d      	ldr	r1, [pc, #244]	; (8004624 <HAL_RCC_GetSysClockFreq+0x168>)
 800452e:	fb01 f003 	mul.w	r0, r1, r3
 8004532:	2100      	movs	r1, #0
 8004534:	fb01 f102 	mul.w	r1, r1, r2
 8004538:	1844      	adds	r4, r0, r1
 800453a:	493a      	ldr	r1, [pc, #232]	; (8004624 <HAL_RCC_GetSysClockFreq+0x168>)
 800453c:	fba2 0101 	umull	r0, r1, r2, r1
 8004540:	1863      	adds	r3, r4, r1
 8004542:	4619      	mov	r1, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	461a      	mov	r2, r3
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	f7fb fe98 	bl	8000280 <__aeabi_uldivmod>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	4613      	mov	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	e04a      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800455a:	4b30      	ldr	r3, [pc, #192]	; (800461c <HAL_RCC_GetSysClockFreq+0x160>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	099b      	lsrs	r3, r3, #6
 8004560:	461a      	mov	r2, r3
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	f240 10ff 	movw	r0, #511	; 0x1ff
 800456a:	f04f 0100 	mov.w	r1, #0
 800456e:	ea02 0400 	and.w	r4, r2, r0
 8004572:	ea03 0501 	and.w	r5, r3, r1
 8004576:	4620      	mov	r0, r4
 8004578:	4629      	mov	r1, r5
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	014b      	lsls	r3, r1, #5
 8004584:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004588:	0142      	lsls	r2, r0, #5
 800458a:	4610      	mov	r0, r2
 800458c:	4619      	mov	r1, r3
 800458e:	1b00      	subs	r0, r0, r4
 8004590:	eb61 0105 	sbc.w	r1, r1, r5
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	018b      	lsls	r3, r1, #6
 800459e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045a2:	0182      	lsls	r2, r0, #6
 80045a4:	1a12      	subs	r2, r2, r0
 80045a6:	eb63 0301 	sbc.w	r3, r3, r1
 80045aa:	f04f 0000 	mov.w	r0, #0
 80045ae:	f04f 0100 	mov.w	r1, #0
 80045b2:	00d9      	lsls	r1, r3, #3
 80045b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045b8:	00d0      	lsls	r0, r2, #3
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	1912      	adds	r2, r2, r4
 80045c0:	eb45 0303 	adc.w	r3, r5, r3
 80045c4:	f04f 0000 	mov.w	r0, #0
 80045c8:	f04f 0100 	mov.w	r1, #0
 80045cc:	0299      	lsls	r1, r3, #10
 80045ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045d2:	0290      	lsls	r0, r2, #10
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4610      	mov	r0, r2
 80045da:	4619      	mov	r1, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	461a      	mov	r2, r3
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	f7fb fe4c 	bl	8000280 <__aeabi_uldivmod>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4613      	mov	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045f0:	4b0a      	ldr	r3, [pc, #40]	; (800461c <HAL_RCC_GetSysClockFreq+0x160>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	0c1b      	lsrs	r3, r3, #16
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	3301      	adds	r3, #1
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	fbb2 f3f3 	udiv	r3, r2, r3
 8004608:	60bb      	str	r3, [r7, #8]
      break;
 800460a:	e002      	b.n	8004612 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800460c:	4b04      	ldr	r3, [pc, #16]	; (8004620 <HAL_RCC_GetSysClockFreq+0x164>)
 800460e:	60bb      	str	r3, [r7, #8]
      break;
 8004610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004612:	68bb      	ldr	r3, [r7, #8]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bdb0      	pop	{r4, r5, r7, pc}
 800461c:	40023800 	.word	0x40023800
 8004620:	00f42400 	.word	0x00f42400
 8004624:	00b71b00 	.word	0x00b71b00

08004628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800462c:	4b03      	ldr	r3, [pc, #12]	; (800463c <HAL_RCC_GetHCLKFreq+0x14>)
 800462e:	681b      	ldr	r3, [r3, #0]
}
 8004630:	4618      	mov	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	20000000 	.word	0x20000000

08004640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004644:	f7ff fff0 	bl	8004628 <HAL_RCC_GetHCLKFreq>
 8004648:	4602      	mov	r2, r0
 800464a:	4b05      	ldr	r3, [pc, #20]	; (8004660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	0a9b      	lsrs	r3, r3, #10
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	4903      	ldr	r1, [pc, #12]	; (8004664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004656:	5ccb      	ldrb	r3, [r1, r3]
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800465c:	4618      	mov	r0, r3
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40023800 	.word	0x40023800
 8004664:	0800b17c 	.word	0x0800b17c

08004668 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e022      	b.n	80046c0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d105      	bne.n	8004692 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7fc f9c7 	bl	8000a20 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2203      	movs	r2, #3
 8004696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f814 	bl	80046c8 <HAL_SD_InitCard>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e00a      	b.n	80046c0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80046c8:	b5b0      	push	{r4, r5, r7, lr}
 80046ca:	b08e      	sub	sp, #56	; 0x38
 80046cc:	af04      	add	r7, sp, #16
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80046d8:	2300      	movs	r3, #0
 80046da:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80046e0:	2300      	movs	r3, #0
 80046e2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80046e4:	2376      	movs	r3, #118	; 0x76
 80046e6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681d      	ldr	r5, [r3, #0]
 80046ec:	466c      	mov	r4, sp
 80046ee:	f107 0314 	add.w	r3, r7, #20
 80046f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80046f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80046fa:	f107 0308 	add.w	r3, r7, #8
 80046fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004700:	4628      	mov	r0, r5
 8004702:	f001 fae0 	bl	8005cc6 <SDIO_Init>
 8004706:	4603      	mov	r3, r0
 8004708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800470c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e04c      	b.n	80047b2 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004718:	4b28      	ldr	r3, [pc, #160]	; (80047bc <HAL_SD_InitCard+0xf4>)
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f001 fb18 	bl	8005d58 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004728:	4b24      	ldr	r3, [pc, #144]	; (80047bc <HAL_SD_InitCard+0xf4>)
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f001 f804 	bl	800573c <SD_PowerON>
 8004734:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00b      	beq.n	8004754 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e02e      	b.n	80047b2 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 ff25 	bl	80055a4 <SD_InitCard>
 800475a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00b      	beq.n	800477a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e01b      	b.n	80047b2 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004782:	4618      	mov	r0, r3
 8004784:	f001 fb7b 	bl	8005e7e <SDMMC_CmdBlockLength>
 8004788:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00f      	beq.n	80047b0 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a0a      	ldr	r2, [pc, #40]	; (80047c0 <HAL_SD_InitCard+0xf8>)
 8004796:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3728      	adds	r7, #40	; 0x28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bdb0      	pop	{r4, r5, r7, pc}
 80047ba:	bf00      	nop
 80047bc:	422580a0 	.word	0x422580a0
 80047c0:	004005ff 	.word	0x004005ff

080047c4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08c      	sub	sp, #48	; 0x30
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d107      	bne.n	80047ec <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0c0      	b.n	800496e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	f040 80b9 	bne.w	800496c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	441a      	add	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480a:	429a      	cmp	r2, r3
 800480c:	d907      	bls.n	800481e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e0a7      	b.n	800496e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2203      	movs	r2, #3
 8004822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2200      	movs	r2, #0
 800482c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	6812      	ldr	r2, [r2, #0]
 8004838:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800483c:	f043 0302 	orr.w	r3, r3, #2
 8004840:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	4a4c      	ldr	r2, [pc, #304]	; (8004978 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004848:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	4a4b      	ldr	r2, [pc, #300]	; (800497c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004850:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	2200      	movs	r2, #0
 8004858:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	2200      	movs	r2, #0
 8004860:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3380      	adds	r3, #128	; 0x80
 8004888:	4619      	mov	r1, r3
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	025b      	lsls	r3, r3, #9
 8004890:	089b      	lsrs	r3, r3, #2
 8004892:	f7fc fcdf 	bl	8001254 <HAL_DMA_Start_IT>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d017      	beq.n	80048cc <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80048aa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a33      	ldr	r2, [pc, #204]	; (8004980 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80048b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e050      	b.n	800496e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80048cc:	4b2d      	ldr	r3, [pc, #180]	; (8004984 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80048ce:	2201      	movs	r2, #1
 80048d0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d002      	beq.n	80048e0 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80048da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048dc:	025b      	lsls	r3, r3, #9
 80048de:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80048e0:	f04f 33ff 	mov.w	r3, #4294967295
 80048e4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	025b      	lsls	r3, r3, #9
 80048ea:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80048ec:	2390      	movs	r3, #144	; 0x90
 80048ee:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80048f0:	2302      	movs	r3, #2
 80048f2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80048f8:	2301      	movs	r3, #1
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f107 0210 	add.w	r2, r7, #16
 8004904:	4611      	mov	r1, r2
 8004906:	4618      	mov	r0, r3
 8004908:	f001 fa8d 	bl	8005e26 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d90a      	bls.n	8004928 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2282      	movs	r2, #130	; 0x82
 8004916:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800491e:	4618      	mov	r0, r3
 8004920:	f001 faf1 	bl	8005f06 <SDMMC_CmdReadMultiBlock>
 8004924:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004926:	e009      	b.n	800493c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2281      	movs	r2, #129	; 0x81
 800492c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004934:	4618      	mov	r0, r3
 8004936:	f001 fac4 	bl	8005ec2 <SDMMC_CmdReadSingleBlock>
 800493a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800493c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493e:	2b00      	cmp	r3, #0
 8004940:	d012      	beq.n	8004968 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a0e      	ldr	r2, [pc, #56]	; (8004980 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004948:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800494e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004950:	431a      	orrs	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e002      	b.n	800496e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8004968:	2300      	movs	r3, #0
 800496a:	e000      	b.n	800496e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800496c:	2302      	movs	r3, #2
  }
}
 800496e:	4618      	mov	r0, r3
 8004970:	3730      	adds	r7, #48	; 0x30
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	080053b3 	.word	0x080053b3
 800497c:	08005425 	.word	0x08005425
 8004980:	004005ff 	.word	0x004005ff
 8004984:	4225858c 	.word	0x4225858c

08004988 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08c      	sub	sp, #48	; 0x30
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d107      	bne.n	80049b0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0c5      	b.n	8004b3c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	f040 80be 	bne.w	8004b3a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80049c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	441a      	add	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d907      	bls.n	80049e2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e0ac      	b.n	8004b3c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2203      	movs	r2, #3
 80049e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2200      	movs	r2, #0
 80049f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	6812      	ldr	r2, [r2, #0]
 80049fc:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004a00:	f043 0302 	orr.w	r3, r3, #2
 8004a04:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0a:	4a4e      	ldr	r2, [pc, #312]	; (8004b44 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004a0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a12:	4a4d      	ldr	r2, [pc, #308]	; (8004b48 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004a14:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d002      	beq.n	8004a2c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a28:	025b      	lsls	r3, r3, #9
 8004a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d90a      	bls.n	8004a48 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	22a0      	movs	r2, #160	; 0xa0
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f001 faa5 	bl	8005f8e <SDMMC_CmdWriteMultiBlock>
 8004a44:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004a46:	e009      	b.n	8004a5c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2290      	movs	r2, #144	; 0x90
 8004a4c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a54:	4618      	mov	r0, r3
 8004a56:	f001 fa78 	bl	8005f4a <SDMMC_CmdWriteSingleBlock>
 8004a5a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d012      	beq.n	8004a88 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a39      	ldr	r2, [pc, #228]	; (8004b4c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a70:	431a      	orrs	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e059      	b.n	8004b3c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004a88:	4b31      	ldr	r3, [pc, #196]	; (8004b50 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a92:	2240      	movs	r2, #64	; 0x40
 8004a94:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3380      	adds	r3, #128	; 0x80
 8004abe:	461a      	mov	r2, r3
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	025b      	lsls	r3, r3, #9
 8004ac4:	089b      	lsrs	r3, r3, #2
 8004ac6:	f7fc fbc5 	bl	8001254 <HAL_DMA_Start_IT>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01c      	beq.n	8004b0a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	6812      	ldr	r2, [r2, #0]
 8004ada:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8004ade:	f023 0302 	bic.w	r3, r3, #2
 8004ae2:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a18      	ldr	r2, [pc, #96]	; (8004b4c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004aea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e018      	b.n	8004b3c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	025b      	lsls	r3, r3, #9
 8004b14:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004b16:	2390      	movs	r3, #144	; 0x90
 8004b18:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004b22:	2301      	movs	r3, #1
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f107 0210 	add.w	r2, r7, #16
 8004b2e:	4611      	mov	r1, r2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f001 f978 	bl	8005e26 <SDIO_ConfigData>

      return HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	e000      	b.n	8004b3c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8004b3a:	2302      	movs	r3, #2
  }
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3730      	adds	r7, #48	; 0x30
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	08005389 	.word	0x08005389
 8004b48:	08005425 	.word	0x08005425
 8004b4c:	004005ff 	.word	0x004005ff
 8004b50:	4225858c 	.word	0x4225858c

08004b54 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d008      	beq.n	8004b82 <HAL_SD_IRQHandler+0x2e>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fffd 	bl	8005b7a <SD_Read_IT>
 8004b80:	e165      	b.n	8004e4e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 808f 	beq.w	8004cb0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b9a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6812      	ldr	r2, [r2, #0]
 8004ba6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8004baa:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004bae:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0201 	bic.w	r2, r2, #1
 8004bbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d039      	beq.n	8004c3e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d104      	bne.n	8004bde <HAL_SD_IRQHandler+0x8a>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f003 0320 	and.w	r3, r3, #32
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d011      	beq.n	8004c02 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f001 f9f6 	bl	8005fd4 <SDMMC_CmdStopTransfer>
 8004be8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d008      	beq.n	8004c02 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f92f 	bl	8004e60 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f240 523a 	movw	r2, #1338	; 0x53a
 8004c0a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d104      	bne.n	8004c2e <HAL_SD_IRQHandler+0xda>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f003 f9d6 	bl	8007fe0 <HAL_SD_RxCpltCallback>
 8004c34:	e10b      	b.n	8004e4e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f003 f9c8 	bl	8007fcc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c3c:	e107      	b.n	8004e4e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 8102 	beq.w	8004e4e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f003 0320 	and.w	r3, r3, #32
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d011      	beq.n	8004c78 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f001 f9bb 	bl	8005fd4 <SDMMC_CmdStopTransfer>
 8004c5e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d008      	beq.n	8004c78 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f8f4 	bl	8004e60 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f040 80e5 	bne.w	8004e4e <HAL_SD_IRQHandler+0x2fa>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f040 80df 	bne.w	8004e4e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0208 	bic.w	r2, r2, #8
 8004c9e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f003 f98f 	bl	8007fcc <HAL_SD_TxCpltCallback>
}
 8004cae:	e0ce      	b.n	8004e4e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d008      	beq.n	8004cd0 <HAL_SD_IRQHandler+0x17c>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 ffa7 	bl	8005c1c <SD_Write_IT>
 8004cce:	e0be      	b.n	8004e4e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cd6:	f240 233a 	movw	r3, #570	; 0x23a
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 80b6 	beq.w	8004e4e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	f043 0202 	orr.w	r2, r3, #2
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d005      	beq.n	8004d16 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	f043 0208 	orr.w	r2, r3, #8
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	f043 0220 	orr.w	r2, r3, #32
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d36:	f003 0310 	and.w	r3, r3, #16
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d005      	beq.n	8004d4a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	f043 0210 	orr.w	r2, r3, #16
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d005      	beq.n	8004d64 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	f043 0208 	orr.w	r2, r3, #8
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f240 723a 	movw	r2, #1850	; 0x73a
 8004d6c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6812      	ldr	r2, [r2, #0]
 8004d78:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004d7c:	f023 0302 	bic.w	r3, r3, #2
 8004d80:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f001 f924 	bl	8005fd4 <SDMMC_CmdStopTransfer>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f855 	bl	8004e60 <HAL_SD_ErrorCallback>
}
 8004db6:	e04a      	b.n	8004e4e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d045      	beq.n	8004e4e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f003 0310 	and.w	r3, r3, #16
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d104      	bne.n	8004dd6 <HAL_SD_IRQHandler+0x282>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f003 0320 	and.w	r3, r3, #32
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d011      	beq.n	8004dfa <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dda:	4a1f      	ldr	r2, [pc, #124]	; (8004e58 <HAL_SD_IRQHandler+0x304>)
 8004ddc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fc fa8e 	bl	8001304 <HAL_DMA_Abort_IT>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d02f      	beq.n	8004e4e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fb68 	bl	80054c8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004df8:	e029      	b.n	8004e4e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d104      	bne.n	8004e0e <HAL_SD_IRQHandler+0x2ba>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d011      	beq.n	8004e32 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	4a12      	ldr	r2, [pc, #72]	; (8004e5c <HAL_SD_IRQHandler+0x308>)
 8004e14:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fc fa72 	bl	8001304 <HAL_DMA_Abort_IT>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d013      	beq.n	8004e4e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fb83 	bl	8005536 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004e30:	e00d      	b.n	8004e4e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f003 f8b6 	bl	8007fb8 <HAL_SD_AbortCallback>
}
 8004e4c:	e7ff      	b.n	8004e4e <HAL_SD_IRQHandler+0x2fa>
 8004e4e:	bf00      	nop
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	080054c9 	.word	0x080054c9
 8004e5c:	08005537 	.word	0x08005537

08004e60 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e82:	0f9b      	lsrs	r3, r3, #30
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e8e:	0e9b      	lsrs	r3, r3, #26
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ea0:	0e1b      	lsrs	r3, r3, #24
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	f003 0303 	and.w	r3, r3, #3
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eb2:	0c1b      	lsrs	r3, r3, #16
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ebe:	0a1b      	lsrs	r3, r3, #8
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ed4:	0d1b      	lsrs	r3, r3, #20
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ee0:	0c1b      	lsrs	r3, r3, #16
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ef2:	0bdb      	lsrs	r3, r3, #15
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f04:	0b9b      	lsrs	r3, r3, #14
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f16:	0b5b      	lsrs	r3, r3, #13
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f28:	0b1b      	lsrs	r3, r3, #12
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d163      	bne.n	800500c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f48:	009a      	lsls	r2, r3, #2
 8004f4a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f4e:	4013      	ands	r3, r2
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004f54:	0f92      	lsrs	r2, r2, #30
 8004f56:	431a      	orrs	r2, r3
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f60:	0edb      	lsrs	r3, r3, #27
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f72:	0e1b      	lsrs	r3, r3, #24
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f84:	0d5b      	lsrs	r3, r3, #21
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f96:	0c9b      	lsrs	r3, r3, #18
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa8:	0bdb      	lsrs	r3, r3, #15
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	7e1b      	ldrb	r3, [r3, #24]
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	3302      	adds	r3, #2
 8004fcc:	2201      	movs	r2, #1
 8004fce:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004fd6:	fb02 f203 	mul.w	r2, r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	7a1b      	ldrb	r3, [r3, #8]
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	f003 030f 	and.w	r3, r3, #15
 8004fe8:	2201      	movs	r2, #1
 8004fea:	409a      	lsls	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004ff8:	0a52      	lsrs	r2, r2, #9
 8004ffa:	fb02 f203 	mul.w	r2, r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005008:	661a      	str	r2, [r3, #96]	; 0x60
 800500a:	e031      	b.n	8005070 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005010:	2b01      	cmp	r3, #1
 8005012:	d11d      	bne.n	8005050 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005018:	041b      	lsls	r3, r3, #16
 800501a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005022:	0c1b      	lsrs	r3, r3, #16
 8005024:	431a      	orrs	r2, r3
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	3301      	adds	r3, #1
 8005030:	029a      	lsls	r2, r3, #10
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005044:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	661a      	str	r2, [r3, #96]	; 0x60
 800504e:	e00f      	b.n	8005070 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a58      	ldr	r2, [pc, #352]	; (80051b8 <HAL_SD_GetCardCSD+0x344>)
 8005056:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e09d      	b.n	80051ac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005074:	0b9b      	lsrs	r3, r3, #14
 8005076:	b2db      	uxtb	r3, r3
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	b2da      	uxtb	r2, r3
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005086:	09db      	lsrs	r3, r3, #7
 8005088:	b2db      	uxtb	r3, r3
 800508a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800508e:	b2da      	uxtb	r2, r3
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005098:	b2db      	uxtb	r3, r3
 800509a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a8:	0fdb      	lsrs	r3, r3, #31
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b4:	0f5b      	lsrs	r3, r3, #29
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	f003 0303 	and.w	r3, r3, #3
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c6:	0e9b      	lsrs	r3, r3, #26
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d8:	0d9b      	lsrs	r3, r3, #22
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ea:	0d5b      	lsrs	r3, r3, #21
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005106:	0c1b      	lsrs	r3, r3, #16
 8005108:	b2db      	uxtb	r3, r3
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	b2da      	uxtb	r2, r3
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511a:	0bdb      	lsrs	r3, r3, #15
 800511c:	b2db      	uxtb	r3, r3
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	b2da      	uxtb	r2, r3
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512e:	0b9b      	lsrs	r3, r3, #14
 8005130:	b2db      	uxtb	r3, r3
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	b2da      	uxtb	r2, r3
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005142:	0b5b      	lsrs	r3, r3, #13
 8005144:	b2db      	uxtb	r3, r3
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	b2da      	uxtb	r2, r3
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005156:	0b1b      	lsrs	r3, r3, #12
 8005158:	b2db      	uxtb	r3, r3
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	b2da      	uxtb	r2, r3
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516a:	0a9b      	lsrs	r3, r3, #10
 800516c:	b2db      	uxtb	r3, r3
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	b2da      	uxtb	r2, r3
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517e:	0a1b      	lsrs	r3, r3, #8
 8005180:	b2db      	uxtb	r3, r3
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	b2da      	uxtb	r2, r3
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005192:	085b      	lsrs	r3, r3, #1
 8005194:	b2db      	uxtb	r3, r3
 8005196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800519a:	b2da      	uxtb	r2, r3
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	004005ff 	.word	0x004005ff

080051bc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005214:	b5b0      	push	{r4, r5, r7, lr}
 8005216:	b08e      	sub	sp, #56	; 0x38
 8005218:	af04      	add	r7, sp, #16
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2203      	movs	r2, #3
 8005228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005230:	2b03      	cmp	r3, #3
 8005232:	d02e      	beq.n	8005292 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800523a:	d106      	bne.n	800524a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	639a      	str	r2, [r3, #56]	; 0x38
 8005248:	e029      	b.n	800529e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005250:	d10a      	bne.n	8005268 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fb28 	bl	80058a8 <SD_WideBus_Enable>
 8005258:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	639a      	str	r2, [r3, #56]	; 0x38
 8005266:	e01a      	b.n	800529e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10a      	bne.n	8005284 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fb65 	bl	800593e <SD_WideBus_Disable>
 8005274:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	431a      	orrs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	639a      	str	r2, [r3, #56]	; 0x38
 8005282:	e00c      	b.n	800529e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005288:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	639a      	str	r2, [r3, #56]	; 0x38
 8005290:	e005      	b.n	800529e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005296:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00b      	beq.n	80052be <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a26      	ldr	r2, [pc, #152]	; (8005344 <HAL_SD_ConfigWideBusOperation+0x130>)
 80052ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80052bc:	e01f      	b.n	80052fe <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681d      	ldr	r5, [r3, #0]
 80052e4:	466c      	mov	r4, sp
 80052e6:	f107 0314 	add.w	r3, r7, #20
 80052ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80052ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80052f2:	f107 0308 	add.w	r3, r7, #8
 80052f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052f8:	4628      	mov	r0, r5
 80052fa:	f000 fce4 	bl	8005cc6 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fdb9 	bl	8005e7e <SDMMC_CmdBlockLength>
 800530c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00c      	beq.n	800532e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a0a      	ldr	r2, [pc, #40]	; (8005344 <HAL_SD_ConfigWideBusOperation+0x130>)
 800531a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005336:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800533a:	4618      	mov	r0, r3
 800533c:	3728      	adds	r7, #40	; 0x28
 800533e:	46bd      	mov	sp, r7
 8005340:	bdb0      	pop	{r4, r5, r7, pc}
 8005342:	bf00      	nop
 8005344:	004005ff 	.word	0x004005ff

08005348 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005354:	f107 030c 	add.w	r3, r7, #12
 8005358:	4619      	mov	r1, r3
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fa7c 	bl	8005858 <SD_SendStatus>
 8005360:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	0a5b      	lsrs	r3, r3, #9
 8005378:	f003 030f 	and.w	r3, r3, #15
 800537c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800537e:	693b      	ldr	r3, [r7, #16]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005394:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80053a6:	bf00      	nop
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053be:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c4:	2b82      	cmp	r3, #130	; 0x82
 80053c6:	d111      	bne.n	80053ec <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 fe01 	bl	8005fd4 <SDMMC_CmdStopTransfer>
 80053d2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d008      	beq.n	80053ec <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	431a      	orrs	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f7ff fd3a 	bl	8004e60 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0208 	bic.w	r2, r2, #8
 80053fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f240 523a 	movw	r2, #1338	; 0x53a
 8005404:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f002 fde3 	bl	8007fe0 <HAL_SD_RxCpltCallback>
#endif
}
 800541a:	bf00      	nop
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005430:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fc f912 	bl	800165c <HAL_DMA_GetError>
 8005438:	4603      	mov	r3, r0
 800543a:	2b02      	cmp	r3, #2
 800543c:	d03e      	beq.n	80054bc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005444:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d002      	beq.n	800545a <SD_DMAError+0x36>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d12d      	bne.n	80054b6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a19      	ldr	r2, [pc, #100]	; (80054c4 <SD_DMAError+0xa0>)
 8005460:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005470:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800547e:	6978      	ldr	r0, [r7, #20]
 8005480:	f7ff ff62 	bl	8005348 <HAL_SD_GetCardState>
 8005484:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2b06      	cmp	r3, #6
 800548a:	d002      	beq.n	8005492 <SD_DMAError+0x6e>
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b05      	cmp	r3, #5
 8005490:	d10a      	bne.n	80054a8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4618      	mov	r0, r3
 8005498:	f000 fd9c 	bl	8005fd4 <SDMMC_CmdStopTransfer>
 800549c:	4602      	mov	r2, r0
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	431a      	orrs	r2, r3
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	2200      	movs	r2, #0
 80054b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80054b6:	6978      	ldr	r0, [r7, #20]
 80054b8:	f7ff fcd2 	bl	8004e60 <HAL_SD_ErrorCallback>
#endif
  }
}
 80054bc:	bf00      	nop
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	004005ff 	.word	0x004005ff

080054c8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f240 523a 	movw	r2, #1338	; 0x53a
 80054de:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f7ff ff31 	bl	8005348 <HAL_SD_GetCardState>
 80054e6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b06      	cmp	r3, #6
 80054fa:	d002      	beq.n	8005502 <SD_DMATxAbort+0x3a>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b05      	cmp	r3, #5
 8005500:	d10a      	bne.n	8005518 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fd64 	bl	8005fd4 <SDMMC_CmdStopTransfer>
 800550c:	4602      	mov	r2, r0
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	431a      	orrs	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551c:	2b00      	cmp	r3, #0
 800551e:	d103      	bne.n	8005528 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f002 fd49 	bl	8007fb8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005526:	e002      	b.n	800552e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f7ff fc99 	bl	8004e60 <HAL_SD_ErrorCallback>
}
 800552e:	bf00      	nop
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005542:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f240 523a 	movw	r2, #1338	; 0x53a
 800554c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f7ff fefa 	bl	8005348 <HAL_SD_GetCardState>
 8005554:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b06      	cmp	r3, #6
 8005568:	d002      	beq.n	8005570 <SD_DMARxAbort+0x3a>
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b05      	cmp	r3, #5
 800556e:	d10a      	bne.n	8005586 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4618      	mov	r0, r3
 8005576:	f000 fd2d 	bl	8005fd4 <SDMMC_CmdStopTransfer>
 800557a:	4602      	mov	r2, r0
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	431a      	orrs	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558a:	2b00      	cmp	r3, #0
 800558c:	d103      	bne.n	8005596 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f002 fd12 	bl	8007fb8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005594:	e002      	b.n	800559c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f7ff fc62 	bl	8004e60 <HAL_SD_ErrorCallback>
}
 800559c:	bf00      	nop
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80055a4:	b5b0      	push	{r4, r5, r7, lr}
 80055a6:	b094      	sub	sp, #80	; 0x50
 80055a8:	af04      	add	r7, sp, #16
 80055aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80055ac:	2301      	movs	r3, #1
 80055ae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fbde 	bl	8005d76 <SDIO_GetPowerState>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d102      	bne.n	80055c6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80055c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80055c4:	e0b6      	b.n	8005734 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d02f      	beq.n	800562e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 fe08 	bl	80061e8 <SDMMC_CmdSendCID>
 80055d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80055da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <SD_InitCard+0x40>
    {
      return errorstate;
 80055e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055e2:	e0a7      	b.n	8005734 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2100      	movs	r1, #0
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fc08 	bl	8005e00 <SDIO_GetResponse>
 80055f0:	4602      	mov	r2, r0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2104      	movs	r1, #4
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 fbff 	bl	8005e00 <SDIO_GetResponse>
 8005602:	4602      	mov	r2, r0
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2108      	movs	r1, #8
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fbf6 	bl	8005e00 <SDIO_GetResponse>
 8005614:	4602      	mov	r2, r0
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	210c      	movs	r1, #12
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fbed 	bl	8005e00 <SDIO_GetResponse>
 8005626:	4602      	mov	r2, r0
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005632:	2b03      	cmp	r3, #3
 8005634:	d00d      	beq.n	8005652 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f107 020e 	add.w	r2, r7, #14
 800563e:	4611      	mov	r1, r2
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fe0e 	bl	8006262 <SDMMC_CmdSetRelAdd>
 8005646:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <SD_InitCard+0xae>
    {
      return errorstate;
 800564e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005650:	e070      	b.n	8005734 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005656:	2b03      	cmp	r3, #3
 8005658:	d036      	beq.n	80056c8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800565a:	89fb      	ldrh	r3, [r7, #14]
 800565c:	461a      	mov	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800566a:	041b      	lsls	r3, r3, #16
 800566c:	4619      	mov	r1, r3
 800566e:	4610      	mov	r0, r2
 8005670:	f000 fdd8 	bl	8006224 <SDMMC_CmdSendCSD>
 8005674:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <SD_InitCard+0xdc>
    {
      return errorstate;
 800567c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800567e:	e059      	b.n	8005734 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2100      	movs	r1, #0
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fbba 	bl	8005e00 <SDIO_GetResponse>
 800568c:	4602      	mov	r2, r0
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2104      	movs	r1, #4
 8005698:	4618      	mov	r0, r3
 800569a:	f000 fbb1 	bl	8005e00 <SDIO_GetResponse>
 800569e:	4602      	mov	r2, r0
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2108      	movs	r1, #8
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fba8 	bl	8005e00 <SDIO_GetResponse>
 80056b0:	4602      	mov	r2, r0
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	210c      	movs	r1, #12
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fb9f 	bl	8005e00 <SDIO_GetResponse>
 80056c2:	4602      	mov	r2, r0
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2104      	movs	r1, #4
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fb96 	bl	8005e00 <SDIO_GetResponse>
 80056d4:	4603      	mov	r3, r0
 80056d6:	0d1a      	lsrs	r2, r3, #20
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80056dc:	f107 0310 	add.w	r3, r7, #16
 80056e0:	4619      	mov	r1, r3
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7ff fbc6 	bl	8004e74 <HAL_SD_GetCardCSD>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d002      	beq.n	80056f4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80056f2:	e01f      	b.n	8005734 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6819      	ldr	r1, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056fc:	041b      	lsls	r3, r3, #16
 80056fe:	461a      	mov	r2, r3
 8005700:	f04f 0300 	mov.w	r3, #0
 8005704:	4608      	mov	r0, r1
 8005706:	f000 fc87 	bl	8006018 <SDMMC_CmdSelDesel>
 800570a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800570c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <SD_InitCard+0x172>
  {
    return errorstate;
 8005712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005714:	e00e      	b.n	8005734 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681d      	ldr	r5, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	466c      	mov	r4, sp
 800571e:	f103 0210 	add.w	r2, r3, #16
 8005722:	ca07      	ldmia	r2, {r0, r1, r2}
 8005724:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005728:	3304      	adds	r3, #4
 800572a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800572c:	4628      	mov	r0, r5
 800572e:	f000 faca 	bl	8005cc6 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3740      	adds	r7, #64	; 0x40
 8005738:	46bd      	mov	sp, r7
 800573a:	bdb0      	pop	{r4, r5, r7, pc}

0800573c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	617b      	str	r3, [r7, #20]
 800574c:	2300      	movs	r3, #0
 800574e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4618      	mov	r0, r3
 8005756:	f000 fc82 	bl	800605e <SDMMC_CmdGoIdleState>
 800575a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	e072      	b.n	800584c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fc95 	bl	800609a <SDMMC_CmdOperCond>
 8005770:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00d      	beq.n	8005794 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	f000 fc6b 	bl	800605e <SDMMC_CmdGoIdleState>
 8005788:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d004      	beq.n	800579a <SD_PowerON+0x5e>
    {
      return errorstate;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	e05b      	b.n	800584c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d137      	bne.n	8005812 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2100      	movs	r1, #0
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 fc95 	bl	80060d8 <SDMMC_CmdAppCommand>
 80057ae:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d02d      	beq.n	8005812 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80057b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80057ba:	e047      	b.n	800584c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2100      	movs	r1, #0
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fc88 	bl	80060d8 <SDMMC_CmdAppCommand>
 80057c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <SD_PowerON+0x98>
    {
      return errorstate;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	e03b      	b.n	800584c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	491e      	ldr	r1, [pc, #120]	; (8005854 <SD_PowerON+0x118>)
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fc9e 	bl	800611c <SDMMC_CmdAppOperCommand>
 80057e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80057e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80057ec:	e02e      	b.n	800584c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2100      	movs	r1, #0
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fb03 	bl	8005e00 <SDIO_GetResponse>
 80057fa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	0fdb      	lsrs	r3, r3, #31
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <SD_PowerON+0xcc>
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <SD_PowerON+0xce>
 8005808:	2300      	movs	r3, #0
 800580a:	613b      	str	r3, [r7, #16]

    count++;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	3301      	adds	r3, #1
 8005810:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005818:	4293      	cmp	r3, r2
 800581a:	d802      	bhi.n	8005822 <SD_PowerON+0xe6>
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0cc      	beq.n	80057bc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005828:	4293      	cmp	r3, r2
 800582a:	d902      	bls.n	8005832 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800582c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005830:	e00c      	b.n	800584c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	645a      	str	r2, [r3, #68]	; 0x44
 8005842:	e002      	b.n	800584a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	c1100000 	.word	0xc1100000

08005858 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d102      	bne.n	800586e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005868:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800586c:	e018      	b.n	80058a0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005876:	041b      	lsls	r3, r3, #16
 8005878:	4619      	mov	r1, r3
 800587a:	4610      	mov	r0, r2
 800587c:	f000 fd12 	bl	80062a4 <SDMMC_CmdSendStatus>
 8005880:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <SD_SendStatus+0x34>
  {
    return errorstate;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	e009      	b.n	80058a0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2100      	movs	r1, #0
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fab4 	bl	8005e00 <SDIO_GetResponse>
 8005898:	4602      	mov	r2, r0
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	2300      	movs	r3, #0
 80058b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2100      	movs	r1, #0
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fa9e 	bl	8005e00 <SDIO_GetResponse>
 80058c4:	4603      	mov	r3, r0
 80058c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058ce:	d102      	bne.n	80058d6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80058d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058d4:	e02f      	b.n	8005936 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80058d6:	f107 030c 	add.w	r3, r7, #12
 80058da:	4619      	mov	r1, r3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f879 	bl	80059d4 <SD_FindSCR>
 80058e2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	e023      	b.n	8005936 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d01c      	beq.n	8005932 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005900:	041b      	lsls	r3, r3, #16
 8005902:	4619      	mov	r1, r3
 8005904:	4610      	mov	r0, r2
 8005906:	f000 fbe7 	bl	80060d8 <SDMMC_CmdAppCommand>
 800590a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	e00f      	b.n	8005936 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2102      	movs	r1, #2
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fc20 	bl	8006162 <SDMMC_CmdBusWidth>
 8005922:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	e003      	b.n	8005936 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800592e:	2300      	movs	r3, #0
 8005930:	e001      	b.n	8005936 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005932:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b086      	sub	sp, #24
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005946:	2300      	movs	r3, #0
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	2300      	movs	r3, #0
 800594c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2100      	movs	r1, #0
 8005954:	4618      	mov	r0, r3
 8005956:	f000 fa53 	bl	8005e00 <SDIO_GetResponse>
 800595a:	4603      	mov	r3, r0
 800595c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005960:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005964:	d102      	bne.n	800596c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005966:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800596a:	e02f      	b.n	80059cc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800596c:	f107 030c 	add.w	r3, r7, #12
 8005970:	4619      	mov	r1, r3
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f82e 	bl	80059d4 <SD_FindSCR>
 8005978:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	e023      	b.n	80059cc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d01c      	beq.n	80059c8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005996:	041b      	lsls	r3, r3, #16
 8005998:	4619      	mov	r1, r3
 800599a:	4610      	mov	r0, r2
 800599c:	f000 fb9c 	bl	80060d8 <SDMMC_CmdAppCommand>
 80059a0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	e00f      	b.n	80059cc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2100      	movs	r1, #0
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fbd5 	bl	8006162 <SDMMC_CmdBusWidth>
 80059b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	e003      	b.n	80059cc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80059c4:	2300      	movs	r3, #0
 80059c6:	e001      	b.n	80059cc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80059c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3718      	adds	r7, #24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80059d4:	b590      	push	{r4, r7, lr}
 80059d6:	b08f      	sub	sp, #60	; 0x3c
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80059de:	f7fb fa49 	bl	8000e74 <HAL_GetTick>
 80059e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80059e8:	2300      	movs	r3, #0
 80059ea:	60bb      	str	r3, [r7, #8]
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2108      	movs	r1, #8
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 fa3f 	bl	8005e7e <SDMMC_CmdBlockLength>
 8005a00:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <SD_FindSCR+0x38>
  {
    return errorstate;
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	e0b2      	b.n	8005b72 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a14:	041b      	lsls	r3, r3, #16
 8005a16:	4619      	mov	r1, r3
 8005a18:	4610      	mov	r0, r2
 8005a1a:	f000 fb5d 	bl	80060d8 <SDMMC_CmdAppCommand>
 8005a1e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <SD_FindSCR+0x56>
  {
    return errorstate;
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	e0a3      	b.n	8005b72 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a2e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005a30:	2308      	movs	r3, #8
 8005a32:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005a34:	2330      	movs	r3, #48	; 0x30
 8005a36:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005a38:	2302      	movs	r3, #2
 8005a3a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005a40:	2301      	movs	r3, #1
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f107 0210 	add.w	r2, r7, #16
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 f9e9 	bl	8005e26 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fba4 	bl	80061a6 <SDMMC_CmdSendSCR>
 8005a5e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d02a      	beq.n	8005abc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	e083      	b.n	8005b72 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00f      	beq.n	8005a98 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6819      	ldr	r1, [r3, #0]
 8005a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	f107 0208 	add.w	r2, r7, #8
 8005a84:	18d4      	adds	r4, r2, r3
 8005a86:	4608      	mov	r0, r1
 8005a88:	f000 f948 	bl	8005d1c <SDIO_ReadFIFO>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	6023      	str	r3, [r4, #0]
      index++;
 8005a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a92:	3301      	adds	r3, #1
 8005a94:	637b      	str	r3, [r7, #52]	; 0x34
 8005a96:	e006      	b.n	8005aa6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d012      	beq.n	8005acc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005aa6:	f7fb f9e5 	bl	8000e74 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab4:	d102      	bne.n	8005abc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005ab6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005aba:	e05a      	b.n	8005b72 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d0cf      	beq.n	8005a6a <SD_FindSCR+0x96>
 8005aca:	e000      	b.n	8005ace <SD_FindSCR+0xfa>
      break;
 8005acc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d005      	beq.n	8005ae8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2208      	movs	r2, #8
 8005ae2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005ae4:	2308      	movs	r3, #8
 8005ae6:	e044      	b.n	8005b72 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2202      	movs	r2, #2
 8005afc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005afe:	2302      	movs	r3, #2
 8005b00:	e037      	b.n	8005b72 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d005      	beq.n	8005b1c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2220      	movs	r2, #32
 8005b16:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005b18:	2320      	movs	r3, #32
 8005b1a:	e02a      	b.n	8005b72 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f240 523a 	movw	r2, #1338	; 0x53a
 8005b24:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	061a      	lsls	r2, r3, #24
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	021b      	lsls	r3, r3, #8
 8005b2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b32:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	0a1b      	lsrs	r3, r3, #8
 8005b38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005b3c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	0e1b      	lsrs	r3, r3, #24
 8005b42:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b46:	601a      	str	r2, [r3, #0]
    scr++;
 8005b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	061a      	lsls	r2, r3, #24
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	021b      	lsls	r3, r3, #8
 8005b56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b5a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	0a1b      	lsrs	r3, r3, #8
 8005b60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005b64:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	0e1b      	lsrs	r3, r3, #24
 8005b6a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	373c      	adds	r7, #60	; 0x3c
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd90      	pop	{r4, r7, pc}

08005b7a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b086      	sub	sp, #24
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b86:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d03f      	beq.n	8005c14 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]
 8005b98:	e033      	b.n	8005c02 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 f8bc 	bl	8005d1c <SDIO_ReadFIFO>
 8005ba4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	0a1b      	lsrs	r3, r3, #8
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	0c1b      	lsrs	r3, r3, #16
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	0e1b      	lsrs	r3, r3, #24
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2b07      	cmp	r3, #7
 8005c06:	d9c8      	bls.n	8005b9a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005c14:	bf00      	nop
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d043      	beq.n	8005cbe <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005c36:	2300      	movs	r3, #0
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	e037      	b.n	8005cac <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	3301      	adds	r3, #1
 8005c46:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	021a      	lsls	r2, r3, #8
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	041a      	lsls	r2, r3, #16
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	3301      	adds	r3, #1
 8005c76:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	061a      	lsls	r2, r3, #24
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f107 0208 	add.w	r2, r7, #8
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 f848 	bl	8005d36 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	2b07      	cmp	r3, #7
 8005cb0:	d9c4      	bls.n	8005c3c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005cbe:	bf00      	nop
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	f107 001c 	add.w	r0, r7, #28
 8005cd4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005cdc:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005cde:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005ce0:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005ce4:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005ce8:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005cec:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005cf0:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005d00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	b004      	add	sp, #16
 8005d1a:	4770      	bx	lr

08005d1c <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005d36:	b480      	push	{r7}
 8005d38:	b083      	sub	sp, #12
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2203      	movs	r2, #3
 8005d64:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005d66:	2002      	movs	r0, #2
 8005d68:	f7fb f890 	bl	8000e8c <HAL_Delay>
  
  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0303 	and.w	r3, r3, #3
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b085      	sub	sp, #20
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
 8005d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005db0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005db6:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005dbc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005dcc:	f023 030f 	bic.w	r3, r3, #15
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b083      	sub	sp, #12
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	b2db      	uxtb	r3, r3
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	3314      	adds	r3, #20
 8005e0e:	461a      	mov	r2, r3
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	4413      	add	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
}  
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b085      	sub	sp, #20
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005e30:	2300      	movs	r3, #0
 8005e32:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e4c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005e52:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005e58:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0

}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b088      	sub	sp, #32
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005e8c:	2310      	movs	r3, #16
 8005e8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e90:	2340      	movs	r3, #64	; 0x40
 8005e92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e94:	2300      	movs	r3, #0
 8005e96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e9e:	f107 0308 	add.w	r3, r7, #8
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7ff ff74 	bl	8005d92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eae:	2110      	movs	r1, #16
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fa45 	bl	8006340 <SDMMC_GetCmdResp1>
 8005eb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eb8:	69fb      	ldr	r3, [r7, #28]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3720      	adds	r7, #32
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b088      	sub	sp, #32
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005ed0:	2311      	movs	r3, #17
 8005ed2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ed4:	2340      	movs	r3, #64	; 0x40
 8005ed6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ee0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ee2:	f107 0308 	add.w	r3, r7, #8
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7ff ff52 	bl	8005d92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef2:	2111      	movs	r1, #17
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fa23 	bl	8006340 <SDMMC_GetCmdResp1>
 8005efa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005efc:	69fb      	ldr	r3, [r7, #28]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3720      	adds	r7, #32
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b088      	sub	sp, #32
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005f14:	2312      	movs	r3, #18
 8005f16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f18:	2340      	movs	r3, #64	; 0x40
 8005f1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f26:	f107 0308 	add.w	r3, r7, #8
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff ff30 	bl	8005d92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f36:	2112      	movs	r1, #18
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fa01 	bl	8006340 <SDMMC_GetCmdResp1>
 8005f3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f40:	69fb      	ldr	r3, [r7, #28]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3720      	adds	r7, #32
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b088      	sub	sp, #32
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005f58:	2318      	movs	r3, #24
 8005f5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f5c:	2340      	movs	r3, #64	; 0x40
 8005f5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f60:	2300      	movs	r3, #0
 8005f62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f6a:	f107 0308 	add.w	r3, r7, #8
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7ff ff0e 	bl	8005d92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7a:	2118      	movs	r1, #24
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f9df 	bl	8006340 <SDMMC_GetCmdResp1>
 8005f82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f84:	69fb      	ldr	r3, [r7, #28]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3720      	adds	r7, #32
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b088      	sub	sp, #32
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005f9c:	2319      	movs	r3, #25
 8005f9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fa0:	2340      	movs	r3, #64	; 0x40
 8005fa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fae:	f107 0308 	add.w	r3, r7, #8
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7ff feec 	bl	8005d92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fbe:	2119      	movs	r1, #25
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f9bd 	bl	8006340 <SDMMC_GetCmdResp1>
 8005fc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fc8:	69fb      	ldr	r3, [r7, #28]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3720      	adds	r7, #32
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
	...

08005fd4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b088      	sub	sp, #32
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005fe0:	230c      	movs	r3, #12
 8005fe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fe4:	2340      	movs	r3, #64	; 0x40
 8005fe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ff0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ff2:	f107 0308 	add.w	r3, r7, #8
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f7ff feca 	bl	8005d92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005ffe:	4a05      	ldr	r2, [pc, #20]	; (8006014 <SDMMC_CmdStopTransfer+0x40>)
 8006000:	210c      	movs	r1, #12
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f99c 	bl	8006340 <SDMMC_GetCmdResp1>
 8006008:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800600a:	69fb      	ldr	r3, [r7, #28]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3720      	adds	r7, #32
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	05f5e100 	.word	0x05f5e100

08006018 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b08a      	sub	sp, #40	; 0x28
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006028:	2307      	movs	r3, #7
 800602a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800602c:	2340      	movs	r3, #64	; 0x40
 800602e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006030:	2300      	movs	r3, #0
 8006032:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006038:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800603a:	f107 0310 	add.w	r3, r7, #16
 800603e:	4619      	mov	r1, r3
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f7ff fea6 	bl	8005d92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006046:	f241 3288 	movw	r2, #5000	; 0x1388
 800604a:	2107      	movs	r1, #7
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 f977 	bl	8006340 <SDMMC_GetCmdResp1>
 8006052:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006056:	4618      	mov	r0, r3
 8006058:	3728      	adds	r7, #40	; 0x28
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b088      	sub	sp, #32
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800606e:	2300      	movs	r3, #0
 8006070:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006072:	2300      	movs	r3, #0
 8006074:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800607a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800607c:	f107 0308 	add.w	r3, r7, #8
 8006080:	4619      	mov	r1, r3
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff fe85 	bl	8005d92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f92d 	bl	80062e8 <SDMMC_GetCmdError>
 800608e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006090:	69fb      	ldr	r3, [r7, #28]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3720      	adds	r7, #32
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b088      	sub	sp, #32
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80060a2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80060a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80060a8:	2308      	movs	r3, #8
 80060aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060ac:	2340      	movs	r3, #64	; 0x40
 80060ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060b0:	2300      	movs	r3, #0
 80060b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060ba:	f107 0308 	add.w	r3, r7, #8
 80060be:	4619      	mov	r1, r3
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7ff fe66 	bl	8005d92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fb24 	bl	8006714 <SDMMC_GetCmdResp7>
 80060cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060ce:	69fb      	ldr	r3, [r7, #28]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3720      	adds	r7, #32
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80060e6:	2337      	movs	r3, #55	; 0x37
 80060e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060ea:	2340      	movs	r3, #64	; 0x40
 80060ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060f8:	f107 0308 	add.w	r3, r7, #8
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7ff fe47 	bl	8005d92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006104:	f241 3288 	movw	r2, #5000	; 0x1388
 8006108:	2137      	movs	r1, #55	; 0x37
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f918 	bl	8006340 <SDMMC_GetCmdResp1>
 8006110:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006112:	69fb      	ldr	r3, [r7, #28]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3720      	adds	r7, #32
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b088      	sub	sp, #32
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800612c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006130:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006132:	2329      	movs	r3, #41	; 0x29
 8006134:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006136:	2340      	movs	r3, #64	; 0x40
 8006138:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800613a:	2300      	movs	r3, #0
 800613c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800613e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006142:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006144:	f107 0308 	add.w	r3, r7, #8
 8006148:	4619      	mov	r1, r3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff fe21 	bl	8005d92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fa2b 	bl	80065ac <SDMMC_GetCmdResp3>
 8006156:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006158:	69fb      	ldr	r3, [r7, #28]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3720      	adds	r7, #32
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b088      	sub	sp, #32
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006170:	2306      	movs	r3, #6
 8006172:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006174:	2340      	movs	r3, #64	; 0x40
 8006176:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006178:	2300      	movs	r3, #0
 800617a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800617c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006180:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006182:	f107 0308 	add.w	r3, r7, #8
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff fe02 	bl	8005d92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800618e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006192:	2106      	movs	r1, #6
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 f8d3 	bl	8006340 <SDMMC_GetCmdResp1>
 800619a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800619c:	69fb      	ldr	r3, [r7, #28]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3720      	adds	r7, #32
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b088      	sub	sp, #32
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80061b2:	2333      	movs	r3, #51	; 0x33
 80061b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061b6:	2340      	movs	r3, #64	; 0x40
 80061b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061ba:	2300      	movs	r3, #0
 80061bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061c4:	f107 0308 	add.w	r3, r7, #8
 80061c8:	4619      	mov	r1, r3
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7ff fde1 	bl	8005d92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80061d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d4:	2133      	movs	r1, #51	; 0x33
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f8b2 	bl	8006340 <SDMMC_GetCmdResp1>
 80061dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061de:	69fb      	ldr	r3, [r7, #28]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3720      	adds	r7, #32
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b088      	sub	sp, #32
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80061f0:	2300      	movs	r3, #0
 80061f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80061f4:	2302      	movs	r3, #2
 80061f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80061f8:	23c0      	movs	r3, #192	; 0xc0
 80061fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061fc:	2300      	movs	r3, #0
 80061fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006204:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006206:	f107 0308 	add.w	r3, r7, #8
 800620a:	4619      	mov	r1, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7ff fdc0 	bl	8005d92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f982 	bl	800651c <SDMMC_GetCmdResp2>
 8006218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800621a:	69fb      	ldr	r3, [r7, #28]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3720      	adds	r7, #32
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006232:	2309      	movs	r3, #9
 8006234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006236:	23c0      	movs	r3, #192	; 0xc0
 8006238:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800623a:	2300      	movs	r3, #0
 800623c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800623e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006242:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006244:	f107 0308 	add.w	r3, r7, #8
 8006248:	4619      	mov	r1, r3
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7ff fda1 	bl	8005d92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f963 	bl	800651c <SDMMC_GetCmdResp2>
 8006256:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006258:	69fb      	ldr	r3, [r7, #28]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3720      	adds	r7, #32
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b088      	sub	sp, #32
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006270:	2303      	movs	r3, #3
 8006272:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006274:	2340      	movs	r3, #64	; 0x40
 8006276:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006278:	2300      	movs	r3, #0
 800627a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800627c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006280:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006282:	f107 0308 	add.w	r3, r7, #8
 8006286:	4619      	mov	r1, r3
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7ff fd82 	bl	8005d92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	2103      	movs	r1, #3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f9c8 	bl	8006628 <SDMMC_GetCmdResp6>
 8006298:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800629a:	69fb      	ldr	r3, [r7, #28]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3720      	adds	r7, #32
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80062b2:	230d      	movs	r3, #13
 80062b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062b6:	2340      	movs	r3, #64	; 0x40
 80062b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062ba:	2300      	movs	r3, #0
 80062bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062c4:	f107 0308 	add.w	r3, r7, #8
 80062c8:	4619      	mov	r1, r3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7ff fd61 	bl	8005d92 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80062d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d4:	210d      	movs	r1, #13
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f832 	bl	8006340 <SDMMC_GetCmdResp1>
 80062dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062de:	69fb      	ldr	r3, [r7, #28]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3720      	adds	r7, #32
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80062f0:	4b11      	ldr	r3, [pc, #68]	; (8006338 <SDMMC_GetCmdError+0x50>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a11      	ldr	r2, [pc, #68]	; (800633c <SDMMC_GetCmdError+0x54>)
 80062f6:	fba2 2303 	umull	r2, r3, r2, r3
 80062fa:	0a5b      	lsrs	r3, r3, #9
 80062fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006300:	fb02 f303 	mul.w	r3, r2, r3
 8006304:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	1e5a      	subs	r2, r3, #1
 800630a:	60fa      	str	r2, [r7, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d102      	bne.n	8006316 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006310:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006314:	e009      	b.n	800632a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0f1      	beq.n	8006306 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	22c5      	movs	r2, #197	; 0xc5
 8006326:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	20000000 	.word	0x20000000
 800633c:	10624dd3 	.word	0x10624dd3

08006340 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b088      	sub	sp, #32
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	460b      	mov	r3, r1
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800634e:	4b70      	ldr	r3, [pc, #448]	; (8006510 <SDMMC_GetCmdResp1+0x1d0>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a70      	ldr	r2, [pc, #448]	; (8006514 <SDMMC_GetCmdResp1+0x1d4>)
 8006354:	fba2 2303 	umull	r2, r3, r2, r3
 8006358:	0a5a      	lsrs	r2, r3, #9
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	fb02 f303 	mul.w	r3, r2, r3
 8006360:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	1e5a      	subs	r2, r3, #1
 8006366:	61fa      	str	r2, [r7, #28]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d102      	bne.n	8006372 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800636c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006370:	e0c9      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006376:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0ef      	beq.n	8006362 <SDMMC_GetCmdResp1+0x22>
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1ea      	bne.n	8006362 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2204      	movs	r2, #4
 800639c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800639e:	2304      	movs	r3, #4
 80063a0:	e0b1      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d004      	beq.n	80063b8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2201      	movs	r2, #1
 80063b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e0a6      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	22c5      	movs	r2, #197	; 0xc5
 80063bc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f7ff fd11 	bl	8005de6 <SDIO_GetCommandResponse>
 80063c4:	4603      	mov	r3, r0
 80063c6:	461a      	mov	r2, r3
 80063c8:	7afb      	ldrb	r3, [r7, #11]
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d001      	beq.n	80063d2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e099      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80063d2:	2100      	movs	r1, #0
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f7ff fd13 	bl	8005e00 <SDIO_GetResponse>
 80063da:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	4b4e      	ldr	r3, [pc, #312]	; (8006518 <SDMMC_GetCmdResp1+0x1d8>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80063e6:	2300      	movs	r3, #0
 80063e8:	e08d      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	da02      	bge.n	80063f6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80063f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063f4:	e087      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006400:	2340      	movs	r3, #64	; 0x40
 8006402:	e080      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800640e:	2380      	movs	r3, #128	; 0x80
 8006410:	e079      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800641c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006420:	e071      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800642c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006430:	e069      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800643c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006440:	e061      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800644c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006450:	e059      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800645c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006460:	e051      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800646c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006470:	e049      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800647c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006480:	e041      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800648c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006490:	e039      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800649c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064a0:	e031      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80064ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80064b0:	e029      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80064bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80064c0:	e021      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80064cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80064d0:	e019      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80064dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80064e0:	e011      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80064ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80064f0:	e009      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f003 0308 	and.w	r3, r3, #8
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80064fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006500:	e001      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006502:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006506:	4618      	mov	r0, r3
 8006508:	3720      	adds	r7, #32
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20000000 	.word	0x20000000
 8006514:	10624dd3 	.word	0x10624dd3
 8006518:	fdffe008 	.word	0xfdffe008

0800651c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006524:	4b1f      	ldr	r3, [pc, #124]	; (80065a4 <SDMMC_GetCmdResp2+0x88>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a1f      	ldr	r2, [pc, #124]	; (80065a8 <SDMMC_GetCmdResp2+0x8c>)
 800652a:	fba2 2303 	umull	r2, r3, r2, r3
 800652e:	0a5b      	lsrs	r3, r3, #9
 8006530:	f241 3288 	movw	r2, #5000	; 0x1388
 8006534:	fb02 f303 	mul.w	r3, r2, r3
 8006538:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	1e5a      	subs	r2, r3, #1
 800653e:	60fa      	str	r2, [r7, #12]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d102      	bne.n	800654a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006544:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006548:	e026      	b.n	8006598 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0ef      	beq.n	800653a <SDMMC_GetCmdResp2+0x1e>
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1ea      	bne.n	800653a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006568:	f003 0304 	and.w	r3, r3, #4
 800656c:	2b00      	cmp	r3, #0
 800656e:	d004      	beq.n	800657a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2204      	movs	r2, #4
 8006574:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006576:	2304      	movs	r3, #4
 8006578:	e00e      	b.n	8006598 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d004      	beq.n	8006590 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800658c:	2301      	movs	r3, #1
 800658e:	e003      	b.n	8006598 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	22c5      	movs	r2, #197	; 0xc5
 8006594:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	20000000 	.word	0x20000000
 80065a8:	10624dd3 	.word	0x10624dd3

080065ac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065b4:	4b1a      	ldr	r3, [pc, #104]	; (8006620 <SDMMC_GetCmdResp3+0x74>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1a      	ldr	r2, [pc, #104]	; (8006624 <SDMMC_GetCmdResp3+0x78>)
 80065ba:	fba2 2303 	umull	r2, r3, r2, r3
 80065be:	0a5b      	lsrs	r3, r3, #9
 80065c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80065c4:	fb02 f303 	mul.w	r3, r2, r3
 80065c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	1e5a      	subs	r2, r3, #1
 80065ce:	60fa      	str	r2, [r7, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d102      	bne.n	80065da <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80065d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065d8:	e01b      	b.n	8006612 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d0ef      	beq.n	80065ca <SDMMC_GetCmdResp3+0x1e>
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1ea      	bne.n	80065ca <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d004      	beq.n	800660a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2204      	movs	r2, #4
 8006604:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006606:	2304      	movs	r3, #4
 8006608:	e003      	b.n	8006612 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	22c5      	movs	r2, #197	; 0xc5
 800660e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	20000000 	.word	0x20000000
 8006624:	10624dd3 	.word	0x10624dd3

08006628 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b088      	sub	sp, #32
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	460b      	mov	r3, r1
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006636:	4b35      	ldr	r3, [pc, #212]	; (800670c <SDMMC_GetCmdResp6+0xe4>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a35      	ldr	r2, [pc, #212]	; (8006710 <SDMMC_GetCmdResp6+0xe8>)
 800663c:	fba2 2303 	umull	r2, r3, r2, r3
 8006640:	0a5b      	lsrs	r3, r3, #9
 8006642:	f241 3288 	movw	r2, #5000	; 0x1388
 8006646:	fb02 f303 	mul.w	r3, r2, r3
 800664a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	1e5a      	subs	r2, r3, #1
 8006650:	61fa      	str	r2, [r7, #28]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d102      	bne.n	800665c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006656:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800665a:	e052      	b.n	8006702 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006660:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0ef      	beq.n	800664c <SDMMC_GetCmdResp6+0x24>
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1ea      	bne.n	800664c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667a:	f003 0304 	and.w	r3, r3, #4
 800667e:	2b00      	cmp	r3, #0
 8006680:	d004      	beq.n	800668c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2204      	movs	r2, #4
 8006686:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006688:	2304      	movs	r3, #4
 800668a:	e03a      	b.n	8006702 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d004      	beq.n	80066a2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2201      	movs	r2, #1
 800669c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800669e:	2301      	movs	r3, #1
 80066a0:	e02f      	b.n	8006702 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f7ff fb9f 	bl	8005de6 <SDIO_GetCommandResponse>
 80066a8:	4603      	mov	r3, r0
 80066aa:	461a      	mov	r2, r3
 80066ac:	7afb      	ldrb	r3, [r7, #11]
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d001      	beq.n	80066b6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e025      	b.n	8006702 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	22c5      	movs	r2, #197	; 0xc5
 80066ba:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80066bc:	2100      	movs	r1, #0
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f7ff fb9e 	bl	8005e00 <SDIO_GetResponse>
 80066c4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d106      	bne.n	80066de <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	0c1b      	lsrs	r3, r3, #16
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80066da:	2300      	movs	r3, #0
 80066dc:	e011      	b.n	8006702 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80066e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80066ec:	e009      	b.n	8006702 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80066f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066fc:	e001      	b.n	8006702 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80066fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006702:	4618      	mov	r0, r3
 8006704:	3720      	adds	r7, #32
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20000000 	.word	0x20000000
 8006710:	10624dd3 	.word	0x10624dd3

08006714 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800671c:	4b22      	ldr	r3, [pc, #136]	; (80067a8 <SDMMC_GetCmdResp7+0x94>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a22      	ldr	r2, [pc, #136]	; (80067ac <SDMMC_GetCmdResp7+0x98>)
 8006722:	fba2 2303 	umull	r2, r3, r2, r3
 8006726:	0a5b      	lsrs	r3, r3, #9
 8006728:	f241 3288 	movw	r2, #5000	; 0x1388
 800672c:	fb02 f303 	mul.w	r3, r2, r3
 8006730:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	1e5a      	subs	r2, r3, #1
 8006736:	60fa      	str	r2, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d102      	bne.n	8006742 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800673c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006740:	e02c      	b.n	800679c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006746:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0ef      	beq.n	8006732 <SDMMC_GetCmdResp7+0x1e>
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1ea      	bne.n	8006732 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b00      	cmp	r3, #0
 8006766:	d004      	beq.n	8006772 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2204      	movs	r2, #4
 800676c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800676e:	2304      	movs	r3, #4
 8006770:	e014      	b.n	800679c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d004      	beq.n	8006788 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006784:	2301      	movs	r3, #1
 8006786:	e009      	b.n	800679c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2240      	movs	r2, #64	; 0x40
 8006798:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800679a:	2300      	movs	r3, #0
  
}
 800679c:	4618      	mov	r0, r3
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr
 80067a8:	20000000 	.word	0x20000000
 80067ac:	10624dd3 	.word	0x10624dd3

080067b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067b0:	b084      	sub	sp, #16
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	f107 001c 	add.w	r0, r7, #28
 80067be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d122      	bne.n	800680e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80067dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80067f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d105      	bne.n	8006802 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f001 fb1c 	bl	8007e40 <USB_CoreReset>
 8006808:	4603      	mov	r3, r0
 800680a:	73fb      	strb	r3, [r7, #15]
 800680c:	e01a      	b.n	8006844 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 fb10 	bl	8007e40 <USB_CoreReset>
 8006820:	4603      	mov	r3, r0
 8006822:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006826:	2b00      	cmp	r3, #0
 8006828:	d106      	bne.n	8006838 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	639a      	str	r2, [r3, #56]	; 0x38
 8006836:	e005      	b.n	8006844 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006846:	2b01      	cmp	r3, #1
 8006848:	d10b      	bne.n	8006862 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f043 0206 	orr.w	r2, r3, #6
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f043 0220 	orr.w	r2, r3, #32
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006862:	7bfb      	ldrb	r3, [r7, #15]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800686e:	b004      	add	sp, #16
 8006870:	4770      	bx	lr
	...

08006874 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	4613      	mov	r3, r2
 8006880:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006882:	79fb      	ldrb	r3, [r7, #7]
 8006884:	2b02      	cmp	r3, #2
 8006886:	d165      	bne.n	8006954 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	4a41      	ldr	r2, [pc, #260]	; (8006990 <USB_SetTurnaroundTime+0x11c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d906      	bls.n	800689e <USB_SetTurnaroundTime+0x2a>
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	4a40      	ldr	r2, [pc, #256]	; (8006994 <USB_SetTurnaroundTime+0x120>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d202      	bcs.n	800689e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006898:	230f      	movs	r3, #15
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	e062      	b.n	8006964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	4a3c      	ldr	r2, [pc, #240]	; (8006994 <USB_SetTurnaroundTime+0x120>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d306      	bcc.n	80068b4 <USB_SetTurnaroundTime+0x40>
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	4a3b      	ldr	r2, [pc, #236]	; (8006998 <USB_SetTurnaroundTime+0x124>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d202      	bcs.n	80068b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80068ae:	230e      	movs	r3, #14
 80068b0:	617b      	str	r3, [r7, #20]
 80068b2:	e057      	b.n	8006964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4a38      	ldr	r2, [pc, #224]	; (8006998 <USB_SetTurnaroundTime+0x124>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d306      	bcc.n	80068ca <USB_SetTurnaroundTime+0x56>
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	4a37      	ldr	r2, [pc, #220]	; (800699c <USB_SetTurnaroundTime+0x128>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d202      	bcs.n	80068ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80068c4:	230d      	movs	r3, #13
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	e04c      	b.n	8006964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	4a33      	ldr	r2, [pc, #204]	; (800699c <USB_SetTurnaroundTime+0x128>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d306      	bcc.n	80068e0 <USB_SetTurnaroundTime+0x6c>
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	4a32      	ldr	r2, [pc, #200]	; (80069a0 <USB_SetTurnaroundTime+0x12c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d802      	bhi.n	80068e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80068da:	230c      	movs	r3, #12
 80068dc:	617b      	str	r3, [r7, #20]
 80068de:	e041      	b.n	8006964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	4a2f      	ldr	r2, [pc, #188]	; (80069a0 <USB_SetTurnaroundTime+0x12c>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d906      	bls.n	80068f6 <USB_SetTurnaroundTime+0x82>
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	4a2e      	ldr	r2, [pc, #184]	; (80069a4 <USB_SetTurnaroundTime+0x130>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d802      	bhi.n	80068f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80068f0:	230b      	movs	r3, #11
 80068f2:	617b      	str	r3, [r7, #20]
 80068f4:	e036      	b.n	8006964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	4a2a      	ldr	r2, [pc, #168]	; (80069a4 <USB_SetTurnaroundTime+0x130>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d906      	bls.n	800690c <USB_SetTurnaroundTime+0x98>
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	4a29      	ldr	r2, [pc, #164]	; (80069a8 <USB_SetTurnaroundTime+0x134>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d802      	bhi.n	800690c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006906:	230a      	movs	r3, #10
 8006908:	617b      	str	r3, [r7, #20]
 800690a:	e02b      	b.n	8006964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	4a26      	ldr	r2, [pc, #152]	; (80069a8 <USB_SetTurnaroundTime+0x134>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d906      	bls.n	8006922 <USB_SetTurnaroundTime+0xae>
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	4a25      	ldr	r2, [pc, #148]	; (80069ac <USB_SetTurnaroundTime+0x138>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d202      	bcs.n	8006922 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800691c:	2309      	movs	r3, #9
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	e020      	b.n	8006964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	4a21      	ldr	r2, [pc, #132]	; (80069ac <USB_SetTurnaroundTime+0x138>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d306      	bcc.n	8006938 <USB_SetTurnaroundTime+0xc4>
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	4a20      	ldr	r2, [pc, #128]	; (80069b0 <USB_SetTurnaroundTime+0x13c>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d802      	bhi.n	8006938 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006932:	2308      	movs	r3, #8
 8006934:	617b      	str	r3, [r7, #20]
 8006936:	e015      	b.n	8006964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4a1d      	ldr	r2, [pc, #116]	; (80069b0 <USB_SetTurnaroundTime+0x13c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d906      	bls.n	800694e <USB_SetTurnaroundTime+0xda>
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4a1c      	ldr	r2, [pc, #112]	; (80069b4 <USB_SetTurnaroundTime+0x140>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d202      	bcs.n	800694e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006948:	2307      	movs	r3, #7
 800694a:	617b      	str	r3, [r7, #20]
 800694c:	e00a      	b.n	8006964 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800694e:	2306      	movs	r3, #6
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	e007      	b.n	8006964 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006954:	79fb      	ldrb	r3, [r7, #7]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d102      	bne.n	8006960 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800695a:	2309      	movs	r3, #9
 800695c:	617b      	str	r3, [r7, #20]
 800695e:	e001      	b.n	8006964 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006960:	2309      	movs	r3, #9
 8006962:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	029b      	lsls	r3, r3, #10
 8006978:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800697c:	431a      	orrs	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	371c      	adds	r7, #28
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	00d8acbf 	.word	0x00d8acbf
 8006994:	00e4e1c0 	.word	0x00e4e1c0
 8006998:	00f42400 	.word	0x00f42400
 800699c:	01067380 	.word	0x01067380
 80069a0:	011a499f 	.word	0x011a499f
 80069a4:	01312cff 	.word	0x01312cff
 80069a8:	014ca43f 	.word	0x014ca43f
 80069ac:	016e3600 	.word	0x016e3600
 80069b0:	01a6ab1f 	.word	0x01a6ab1f
 80069b4:	01e84800 	.word	0x01e84800

080069b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f043 0201 	orr.w	r2, r3, #1
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f023 0201 	bic.w	r2, r3, #1
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d115      	bne.n	8006a4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a2a:	2001      	movs	r0, #1
 8006a2c:	f7fa fa2e 	bl	8000e8c <HAL_Delay>
      ms++;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	3301      	adds	r3, #1
 8006a34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f001 f972 	bl	8007d20 <USB_GetMode>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d01e      	beq.n	8006a80 <USB_SetCurrentMode+0x84>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b31      	cmp	r3, #49	; 0x31
 8006a46:	d9f0      	bls.n	8006a2a <USB_SetCurrentMode+0x2e>
 8006a48:	e01a      	b.n	8006a80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a4a:	78fb      	ldrb	r3, [r7, #3]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d115      	bne.n	8006a7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a5c:	2001      	movs	r0, #1
 8006a5e:	f7fa fa15 	bl	8000e8c <HAL_Delay>
      ms++;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	3301      	adds	r3, #1
 8006a66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f001 f959 	bl	8007d20 <USB_GetMode>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d005      	beq.n	8006a80 <USB_SetCurrentMode+0x84>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2b31      	cmp	r3, #49	; 0x31
 8006a78:	d9f0      	bls.n	8006a5c <USB_SetCurrentMode+0x60>
 8006a7a:	e001      	b.n	8006a80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e005      	b.n	8006a8c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2b32      	cmp	r3, #50	; 0x32
 8006a84:	d101      	bne.n	8006a8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e000      	b.n	8006a8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a94:	b084      	sub	sp, #16
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b086      	sub	sp, #24
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006aae:	2300      	movs	r3, #0
 8006ab0:	613b      	str	r3, [r7, #16]
 8006ab2:	e009      	b.n	8006ac8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	3340      	adds	r3, #64	; 0x40
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	2200      	movs	r2, #0
 8006ac0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	613b      	str	r3, [r7, #16]
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	2b0e      	cmp	r3, #14
 8006acc:	d9f2      	bls.n	8006ab4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d11c      	bne.n	8006b0e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ae2:	f043 0302 	orr.w	r3, r3, #2
 8006ae6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b04:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	639a      	str	r2, [r3, #56]	; 0x38
 8006b0c:	e00b      	b.n	8006b26 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b12:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	2300      	movs	r3, #0
 8006b30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b38:	4619      	mov	r1, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b40:	461a      	mov	r2, r3
 8006b42:	680b      	ldr	r3, [r1, #0]
 8006b44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d10c      	bne.n	8006b66 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d104      	bne.n	8006b5c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b52:	2100      	movs	r1, #0
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f945 	bl	8006de4 <USB_SetDevSpeed>
 8006b5a:	e008      	b.n	8006b6e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f940 	bl	8006de4 <USB_SetDevSpeed>
 8006b64:	e003      	b.n	8006b6e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b66:	2103      	movs	r1, #3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f93b 	bl	8006de4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b6e:	2110      	movs	r1, #16
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f8f3 	bl	8006d5c <USB_FlushTxFifo>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 f90f 	bl	8006da4 <USB_FlushRxFifo>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b96:	461a      	mov	r2, r3
 8006b98:	2300      	movs	r3, #0
 8006b9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bae:	461a      	mov	r2, r3
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	613b      	str	r3, [r7, #16]
 8006bb8:	e043      	b.n	8006c42 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bd0:	d118      	bne.n	8006c04 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10a      	bne.n	8006bee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be4:	461a      	mov	r2, r3
 8006be6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006bea:	6013      	str	r3, [r2, #0]
 8006bec:	e013      	b.n	8006c16 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c00:	6013      	str	r3, [r2, #0]
 8006c02:	e008      	b.n	8006c16 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c10:	461a      	mov	r2, r3
 8006c12:	2300      	movs	r3, #0
 8006c14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c22:	461a      	mov	r2, r3
 8006c24:	2300      	movs	r3, #0
 8006c26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c34:	461a      	mov	r2, r3
 8006c36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	613b      	str	r3, [r7, #16]
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d3b7      	bcc.n	8006bba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	613b      	str	r3, [r7, #16]
 8006c4e:	e043      	b.n	8006cd8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c66:	d118      	bne.n	8006c9a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10a      	bne.n	8006c84 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c80:	6013      	str	r3, [r2, #0]
 8006c82:	e013      	b.n	8006cac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c90:	461a      	mov	r2, r3
 8006c92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c96:	6013      	str	r3, [r2, #0]
 8006c98:	e008      	b.n	8006cac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	2300      	movs	r3, #0
 8006caa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb8:	461a      	mov	r2, r3
 8006cba:	2300      	movs	r3, #0
 8006cbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cca:	461a      	mov	r2, r3
 8006ccc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	613b      	str	r3, [r7, #16]
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d3b7      	bcc.n	8006c50 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cf2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006d00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d105      	bne.n	8006d14 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	f043 0210 	orr.w	r2, r3, #16
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	699a      	ldr	r2, [r3, #24]
 8006d18:	4b0f      	ldr	r3, [pc, #60]	; (8006d58 <USB_DevInit+0x2c4>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d005      	beq.n	8006d32 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	f043 0208 	orr.w	r2, r3, #8
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d107      	bne.n	8006d48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d40:	f043 0304 	orr.w	r3, r3, #4
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d54:	b004      	add	sp, #16
 8006d56:	4770      	bx	lr
 8006d58:	803c3800 	.word	0x803c3800

08006d5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	019b      	lsls	r3, r3, #6
 8006d6e:	f043 0220 	orr.w	r2, r3, #32
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	4a08      	ldr	r2, [pc, #32]	; (8006da0 <USB_FlushTxFifo+0x44>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d901      	bls.n	8006d86 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e006      	b.n	8006d94 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f003 0320 	and.w	r3, r3, #32
 8006d8e:	2b20      	cmp	r3, #32
 8006d90:	d0f1      	beq.n	8006d76 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	00030d40 	.word	0x00030d40

08006da4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2210      	movs	r2, #16
 8006db4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	3301      	adds	r3, #1
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	4a08      	ldr	r2, [pc, #32]	; (8006de0 <USB_FlushRxFifo+0x3c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d901      	bls.n	8006dc6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e006      	b.n	8006dd4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f003 0310 	and.w	r3, r3, #16
 8006dce:	2b10      	cmp	r3, #16
 8006dd0:	d0f1      	beq.n	8006db6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	00030d40 	.word	0x00030d40

08006de4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	78fb      	ldrb	r3, [r7, #3]
 8006dfe:	68f9      	ldr	r1, [r7, #12]
 8006e00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e04:	4313      	orrs	r3, r2
 8006e06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b087      	sub	sp, #28
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f003 0306 	and.w	r3, r3, #6
 8006e2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d102      	bne.n	8006e3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006e36:	2300      	movs	r3, #0
 8006e38:	75fb      	strb	r3, [r7, #23]
 8006e3a:	e00a      	b.n	8006e52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d002      	beq.n	8006e48 <USB_GetDevSpeed+0x32>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b06      	cmp	r3, #6
 8006e46:	d102      	bne.n	8006e4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006e48:	2302      	movs	r3, #2
 8006e4a:	75fb      	strb	r3, [r7, #23]
 8006e4c:	e001      	b.n	8006e52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006e4e:	230f      	movs	r3, #15
 8006e50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	371c      	adds	r7, #28
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	785b      	ldrb	r3, [r3, #1]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d13a      	bne.n	8006ef2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e82:	69da      	ldr	r2, [r3, #28]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	f003 030f 	and.w	r3, r3, #15
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	68f9      	ldr	r1, [r7, #12]
 8006e96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d155      	bne.n	8006f60 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	78db      	ldrb	r3, [r3, #3]
 8006ece:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ed0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	059b      	lsls	r3, r3, #22
 8006ed6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	0151      	lsls	r1, r2, #5
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	440a      	add	r2, r1
 8006ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	e036      	b.n	8006f60 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef8:	69da      	ldr	r2, [r3, #28]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	f003 030f 	and.w	r3, r3, #15
 8006f02:	2101      	movs	r1, #1
 8006f04:	fa01 f303 	lsl.w	r3, r1, r3
 8006f08:	041b      	lsls	r3, r3, #16
 8006f0a:	68f9      	ldr	r1, [r7, #12]
 8006f0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f10:	4313      	orrs	r3, r2
 8006f12:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	015a      	lsls	r2, r3, #5
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d11a      	bne.n	8006f60 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	78db      	ldrb	r3, [r3, #3]
 8006f44:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f46:	430b      	orrs	r3, r1
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	0151      	lsls	r1, r2, #5
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	440a      	add	r2, r1
 8006f52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f5e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
	...

08006f70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	785b      	ldrb	r3, [r3, #1]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d161      	bne.n	8007050 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fa2:	d11f      	bne.n	8006fe4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	0151      	lsls	r1, r2, #5
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	440a      	add	r2, r1
 8006fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006fc2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	0151      	lsls	r1, r2, #5
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	440a      	add	r2, r1
 8006fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fe2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	f003 030f 	and.w	r3, r3, #15
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	43db      	mvns	r3, r3
 8006ffe:	68f9      	ldr	r1, [r7, #12]
 8007000:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007004:	4013      	ands	r3, r2
 8007006:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700e:	69da      	ldr	r2, [r3, #28]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	f003 030f 	and.w	r3, r3, #15
 8007018:	2101      	movs	r1, #1
 800701a:	fa01 f303 	lsl.w	r3, r1, r3
 800701e:	b29b      	uxth	r3, r3
 8007020:	43db      	mvns	r3, r3
 8007022:	68f9      	ldr	r1, [r7, #12]
 8007024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007028:	4013      	ands	r3, r2
 800702a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	0159      	lsls	r1, r3, #5
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	440b      	add	r3, r1
 8007042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007046:	4619      	mov	r1, r3
 8007048:	4b35      	ldr	r3, [pc, #212]	; (8007120 <USB_DeactivateEndpoint+0x1b0>)
 800704a:	4013      	ands	r3, r2
 800704c:	600b      	str	r3, [r1, #0]
 800704e:	e060      	b.n	8007112 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007062:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007066:	d11f      	bne.n	80070a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	0151      	lsls	r1, r2, #5
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	440a      	add	r2, r1
 800707e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007082:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007086:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	0151      	lsls	r1, r2, #5
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	440a      	add	r2, r1
 800709e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	f003 030f 	and.w	r3, r3, #15
 80070b8:	2101      	movs	r1, #1
 80070ba:	fa01 f303 	lsl.w	r3, r1, r3
 80070be:	041b      	lsls	r3, r3, #16
 80070c0:	43db      	mvns	r3, r3
 80070c2:	68f9      	ldr	r1, [r7, #12]
 80070c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070c8:	4013      	ands	r3, r2
 80070ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d2:	69da      	ldr	r2, [r3, #28]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	f003 030f 	and.w	r3, r3, #15
 80070dc:	2101      	movs	r1, #1
 80070de:	fa01 f303 	lsl.w	r3, r1, r3
 80070e2:	041b      	lsls	r3, r3, #16
 80070e4:	43db      	mvns	r3, r3
 80070e6:	68f9      	ldr	r1, [r7, #12]
 80070e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070ec:	4013      	ands	r3, r2
 80070ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	0159      	lsls	r1, r3, #5
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	440b      	add	r3, r1
 8007106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710a:	4619      	mov	r1, r3
 800710c:	4b05      	ldr	r3, [pc, #20]	; (8007124 <USB_DeactivateEndpoint+0x1b4>)
 800710e:	4013      	ands	r3, r2
 8007110:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	ec337800 	.word	0xec337800
 8007124:	eff37800 	.word	0xeff37800

08007128 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b08a      	sub	sp, #40	; 0x28
 800712c:	af02      	add	r7, sp, #8
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	4613      	mov	r3, r2
 8007134:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	785b      	ldrb	r3, [r3, #1]
 8007144:	2b01      	cmp	r3, #1
 8007146:	f040 815c 	bne.w	8007402 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d132      	bne.n	80071b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	4413      	add	r3, r2
 800715a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	0151      	lsls	r1, r2, #5
 8007164:	69fa      	ldr	r2, [r7, #28]
 8007166:	440a      	add	r2, r1
 8007168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800716c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007170:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007174:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	4413      	add	r3, r2
 800717e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	69ba      	ldr	r2, [r7, #24]
 8007186:	0151      	lsls	r1, r2, #5
 8007188:	69fa      	ldr	r2, [r7, #28]
 800718a:	440a      	add	r2, r1
 800718c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007190:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007194:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	4413      	add	r3, r2
 800719e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	69ba      	ldr	r2, [r7, #24]
 80071a6:	0151      	lsls	r1, r2, #5
 80071a8:	69fa      	ldr	r2, [r7, #28]
 80071aa:	440a      	add	r2, r1
 80071ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071b0:	0cdb      	lsrs	r3, r3, #19
 80071b2:	04db      	lsls	r3, r3, #19
 80071b4:	6113      	str	r3, [r2, #16]
 80071b6:	e074      	b.n	80072a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	015a      	lsls	r2, r3, #5
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	4413      	add	r3, r2
 80071c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	69ba      	ldr	r2, [r7, #24]
 80071c8:	0151      	lsls	r1, r2, #5
 80071ca:	69fa      	ldr	r2, [r7, #28]
 80071cc:	440a      	add	r2, r1
 80071ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071d2:	0cdb      	lsrs	r3, r3, #19
 80071d4:	04db      	lsls	r3, r3, #19
 80071d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	0151      	lsls	r1, r2, #5
 80071ea:	69fa      	ldr	r2, [r7, #28]
 80071ec:	440a      	add	r2, r1
 80071ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007208:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	6959      	ldr	r1, [r3, #20]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	440b      	add	r3, r1
 8007214:	1e59      	subs	r1, r3, #1
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	fbb1 f3f3 	udiv	r3, r1, r3
 800721e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007220:	4b9d      	ldr	r3, [pc, #628]	; (8007498 <USB_EPStartXfer+0x370>)
 8007222:	400b      	ands	r3, r1
 8007224:	69b9      	ldr	r1, [r7, #24]
 8007226:	0148      	lsls	r0, r1, #5
 8007228:	69f9      	ldr	r1, [r7, #28]
 800722a:	4401      	add	r1, r0
 800722c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007230:	4313      	orrs	r3, r2
 8007232:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007240:	691a      	ldr	r2, [r3, #16]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800724a:	69b9      	ldr	r1, [r7, #24]
 800724c:	0148      	lsls	r0, r1, #5
 800724e:	69f9      	ldr	r1, [r7, #28]
 8007250:	4401      	add	r1, r0
 8007252:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007256:	4313      	orrs	r3, r2
 8007258:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	78db      	ldrb	r3, [r3, #3]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d11f      	bne.n	80072a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	015a      	lsls	r2, r3, #5
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	4413      	add	r3, r2
 800726a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	69ba      	ldr	r2, [r7, #24]
 8007272:	0151      	lsls	r1, r2, #5
 8007274:	69fa      	ldr	r2, [r7, #28]
 8007276:	440a      	add	r2, r1
 8007278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800727c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007280:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	4413      	add	r3, r2
 800728a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	69ba      	ldr	r2, [r7, #24]
 8007292:	0151      	lsls	r1, r2, #5
 8007294:	69fa      	ldr	r2, [r7, #28]
 8007296:	440a      	add	r2, r1
 8007298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800729c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80072a2:	79fb      	ldrb	r3, [r7, #7]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d14b      	bne.n	8007340 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d009      	beq.n	80072c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072bc:	461a      	mov	r2, r3
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	78db      	ldrb	r3, [r3, #3]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d128      	bne.n	800731e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d110      	bne.n	80072fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69ba      	ldr	r2, [r7, #24]
 80072ec:	0151      	lsls	r1, r2, #5
 80072ee:	69fa      	ldr	r2, [r7, #28]
 80072f0:	440a      	add	r2, r1
 80072f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072fa:	6013      	str	r3, [r2, #0]
 80072fc:	e00f      	b.n	800731e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	4413      	add	r3, r2
 8007306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	69ba      	ldr	r2, [r7, #24]
 800730e:	0151      	lsls	r1, r2, #5
 8007310:	69fa      	ldr	r2, [r7, #28]
 8007312:	440a      	add	r2, r1
 8007314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800731c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	4413      	add	r3, r2
 8007326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	0151      	lsls	r1, r2, #5
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	440a      	add	r2, r1
 8007334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007338:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800733c:	6013      	str	r3, [r2, #0]
 800733e:	e12f      	b.n	80075a0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	69ba      	ldr	r2, [r7, #24]
 8007350:	0151      	lsls	r1, r2, #5
 8007352:	69fa      	ldr	r2, [r7, #28]
 8007354:	440a      	add	r2, r1
 8007356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800735a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800735e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	78db      	ldrb	r3, [r3, #3]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d015      	beq.n	8007394 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 8117 	beq.w	80075a0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	f003 030f 	and.w	r3, r3, #15
 8007382:	2101      	movs	r1, #1
 8007384:	fa01 f303 	lsl.w	r3, r1, r3
 8007388:	69f9      	ldr	r1, [r7, #28]
 800738a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800738e:	4313      	orrs	r3, r2
 8007390:	634b      	str	r3, [r1, #52]	; 0x34
 8007392:	e105      	b.n	80075a0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d110      	bne.n	80073c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	69ba      	ldr	r2, [r7, #24]
 80073b4:	0151      	lsls	r1, r2, #5
 80073b6:	69fa      	ldr	r2, [r7, #28]
 80073b8:	440a      	add	r2, r1
 80073ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073c2:	6013      	str	r3, [r2, #0]
 80073c4:	e00f      	b.n	80073e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	0151      	lsls	r1, r2, #5
 80073d8:	69fa      	ldr	r2, [r7, #28]
 80073da:	440a      	add	r2, r1
 80073dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	68d9      	ldr	r1, [r3, #12]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	781a      	ldrb	r2, [r3, #0]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	b298      	uxth	r0, r3
 80073f4:	79fb      	ldrb	r3, [r7, #7]
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	4603      	mov	r3, r0
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 fa2b 	bl	8007856 <USB_WritePacket>
 8007400:	e0ce      	b.n	80075a0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	0151      	lsls	r1, r2, #5
 8007414:	69fa      	ldr	r2, [r7, #28]
 8007416:	440a      	add	r2, r1
 8007418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800741c:	0cdb      	lsrs	r3, r3, #19
 800741e:	04db      	lsls	r3, r3, #19
 8007420:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	4413      	add	r3, r2
 800742a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	69ba      	ldr	r2, [r7, #24]
 8007432:	0151      	lsls	r1, r2, #5
 8007434:	69fa      	ldr	r2, [r7, #28]
 8007436:	440a      	add	r2, r1
 8007438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800743c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007440:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007444:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d126      	bne.n	800749c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	4413      	add	r3, r2
 8007456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800745a:	691a      	ldr	r2, [r3, #16]
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007464:	69b9      	ldr	r1, [r7, #24]
 8007466:	0148      	lsls	r0, r1, #5
 8007468:	69f9      	ldr	r1, [r7, #28]
 800746a:	4401      	add	r1, r0
 800746c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007470:	4313      	orrs	r3, r2
 8007472:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	69ba      	ldr	r2, [r7, #24]
 8007484:	0151      	lsls	r1, r2, #5
 8007486:	69fa      	ldr	r2, [r7, #28]
 8007488:	440a      	add	r2, r1
 800748a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800748e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007492:	6113      	str	r3, [r2, #16]
 8007494:	e036      	b.n	8007504 <USB_EPStartXfer+0x3dc>
 8007496:	bf00      	nop
 8007498:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	695a      	ldr	r2, [r3, #20]
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	4413      	add	r3, r2
 80074a6:	1e5a      	subs	r2, r3, #1
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074be:	691a      	ldr	r2, [r3, #16]
 80074c0:	8afb      	ldrh	r3, [r7, #22]
 80074c2:	04d9      	lsls	r1, r3, #19
 80074c4:	4b39      	ldr	r3, [pc, #228]	; (80075ac <USB_EPStartXfer+0x484>)
 80074c6:	400b      	ands	r3, r1
 80074c8:	69b9      	ldr	r1, [r7, #24]
 80074ca:	0148      	lsls	r0, r1, #5
 80074cc:	69f9      	ldr	r1, [r7, #28]
 80074ce:	4401      	add	r1, r0
 80074d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074d4:	4313      	orrs	r3, r2
 80074d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e4:	691a      	ldr	r2, [r3, #16]
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	8af9      	ldrh	r1, [r7, #22]
 80074ec:	fb01 f303 	mul.w	r3, r1, r3
 80074f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074f4:	69b9      	ldr	r1, [r7, #24]
 80074f6:	0148      	lsls	r0, r1, #5
 80074f8:	69f9      	ldr	r1, [r7, #28]
 80074fa:	4401      	add	r1, r0
 80074fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007500:	4313      	orrs	r3, r2
 8007502:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007504:	79fb      	ldrb	r3, [r7, #7]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d10d      	bne.n	8007526 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d009      	beq.n	8007526 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	68d9      	ldr	r1, [r3, #12]
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	015a      	lsls	r2, r3, #5
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	4413      	add	r3, r2
 800751e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007522:	460a      	mov	r2, r1
 8007524:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	78db      	ldrb	r3, [r3, #3]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d128      	bne.n	8007580 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800753a:	2b00      	cmp	r3, #0
 800753c:	d110      	bne.n	8007560 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	4413      	add	r3, r2
 8007546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	69ba      	ldr	r2, [r7, #24]
 800754e:	0151      	lsls	r1, r2, #5
 8007550:	69fa      	ldr	r2, [r7, #28]
 8007552:	440a      	add	r2, r1
 8007554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007558:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800755c:	6013      	str	r3, [r2, #0]
 800755e:	e00f      	b.n	8007580 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	015a      	lsls	r2, r3, #5
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	4413      	add	r3, r2
 8007568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	69ba      	ldr	r2, [r7, #24]
 8007570:	0151      	lsls	r1, r2, #5
 8007572:	69fa      	ldr	r2, [r7, #28]
 8007574:	440a      	add	r2, r1
 8007576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800757a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800757e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	4413      	add	r3, r2
 8007588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	0151      	lsls	r1, r2, #5
 8007592:	69fa      	ldr	r2, [r7, #28]
 8007594:	440a      	add	r2, r1
 8007596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800759a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800759e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3720      	adds	r7, #32
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	1ff80000 	.word	0x1ff80000

080075b0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b087      	sub	sp, #28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	4613      	mov	r3, r2
 80075bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	785b      	ldrb	r3, [r3, #1]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	f040 80cd 	bne.w	800776c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d132      	bne.n	8007640 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	015a      	lsls	r2, r3, #5
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	4413      	add	r3, r2
 80075e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	0151      	lsls	r1, r2, #5
 80075ec:	697a      	ldr	r2, [r7, #20]
 80075ee:	440a      	add	r2, r1
 80075f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	015a      	lsls	r2, r3, #5
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	4413      	add	r3, r2
 8007606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	0151      	lsls	r1, r2, #5
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	440a      	add	r2, r1
 8007614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007618:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800761c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	015a      	lsls	r2, r3, #5
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	4413      	add	r3, r2
 8007626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	0151      	lsls	r1, r2, #5
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	440a      	add	r2, r1
 8007634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007638:	0cdb      	lsrs	r3, r3, #19
 800763a:	04db      	lsls	r3, r3, #19
 800763c:	6113      	str	r3, [r2, #16]
 800763e:	e04e      	b.n	80076de <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	4413      	add	r3, r2
 8007648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	0151      	lsls	r1, r2, #5
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	440a      	add	r2, r1
 8007656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800765a:	0cdb      	lsrs	r3, r3, #19
 800765c:	04db      	lsls	r3, r3, #19
 800765e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	015a      	lsls	r2, r3, #5
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	4413      	add	r3, r2
 8007668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	0151      	lsls	r1, r2, #5
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	440a      	add	r2, r1
 8007676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800767a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800767e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007682:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	695a      	ldr	r2, [r3, #20]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	429a      	cmp	r2, r3
 800768e:	d903      	bls.n	8007698 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	689a      	ldr	r2, [r3, #8]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	015a      	lsls	r2, r3, #5
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	4413      	add	r3, r2
 80076a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	0151      	lsls	r1, r2, #5
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	440a      	add	r2, r1
 80076ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c4:	691a      	ldr	r2, [r3, #16]
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076ce:	6939      	ldr	r1, [r7, #16]
 80076d0:	0148      	lsls	r0, r1, #5
 80076d2:	6979      	ldr	r1, [r7, #20]
 80076d4:	4401      	add	r1, r0
 80076d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80076da:	4313      	orrs	r3, r2
 80076dc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80076de:	79fb      	ldrb	r3, [r7, #7]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d11e      	bne.n	8007722 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d009      	beq.n	8007700 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	015a      	lsls	r2, r3, #5
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	4413      	add	r3, r2
 80076f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f8:	461a      	mov	r2, r3
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	4413      	add	r3, r2
 8007708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	0151      	lsls	r1, r2, #5
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	440a      	add	r2, r1
 8007716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800771a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	e092      	b.n	8007848 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	4413      	add	r3, r2
 800772a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	0151      	lsls	r1, r2, #5
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	440a      	add	r2, r1
 8007738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800773c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007740:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d07e      	beq.n	8007848 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	f003 030f 	and.w	r3, r3, #15
 800775a:	2101      	movs	r1, #1
 800775c:	fa01 f303 	lsl.w	r3, r1, r3
 8007760:	6979      	ldr	r1, [r7, #20]
 8007762:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007766:	4313      	orrs	r3, r2
 8007768:	634b      	str	r3, [r1, #52]	; 0x34
 800776a:	e06d      	b.n	8007848 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	015a      	lsls	r2, r3, #5
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	4413      	add	r3, r2
 8007774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	0151      	lsls	r1, r2, #5
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	440a      	add	r2, r1
 8007782:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007786:	0cdb      	lsrs	r3, r3, #19
 8007788:	04db      	lsls	r3, r3, #19
 800778a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	693a      	ldr	r2, [r7, #16]
 800779c:	0151      	lsls	r1, r2, #5
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	440a      	add	r2, r1
 80077a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80077aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80077ae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d003      	beq.n	80077c0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	689a      	ldr	r2, [r3, #8]
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	0151      	lsls	r1, r2, #5
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	440a      	add	r2, r1
 80077d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ec:	691a      	ldr	r2, [r3, #16]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077f6:	6939      	ldr	r1, [r7, #16]
 80077f8:	0148      	lsls	r0, r1, #5
 80077fa:	6979      	ldr	r1, [r7, #20]
 80077fc:	4401      	add	r1, r0
 80077fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007802:	4313      	orrs	r3, r2
 8007804:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007806:	79fb      	ldrb	r3, [r7, #7]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d10d      	bne.n	8007828 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d009      	beq.n	8007828 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	68d9      	ldr	r1, [r3, #12]
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	015a      	lsls	r2, r3, #5
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	4413      	add	r3, r2
 8007820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007824:	460a      	mov	r2, r1
 8007826:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	0151      	lsls	r1, r2, #5
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	440a      	add	r2, r1
 800783e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007842:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007846:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	371c      	adds	r7, #28
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007856:	b480      	push	{r7}
 8007858:	b089      	sub	sp, #36	; 0x24
 800785a:	af00      	add	r7, sp, #0
 800785c:	60f8      	str	r0, [r7, #12]
 800785e:	60b9      	str	r1, [r7, #8]
 8007860:	4611      	mov	r1, r2
 8007862:	461a      	mov	r2, r3
 8007864:	460b      	mov	r3, r1
 8007866:	71fb      	strb	r3, [r7, #7]
 8007868:	4613      	mov	r3, r2
 800786a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007874:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007878:	2b00      	cmp	r3, #0
 800787a:	d123      	bne.n	80078c4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800787c:	88bb      	ldrh	r3, [r7, #4]
 800787e:	3303      	adds	r3, #3
 8007880:	089b      	lsrs	r3, r3, #2
 8007882:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007884:	2300      	movs	r3, #0
 8007886:	61bb      	str	r3, [r7, #24]
 8007888:	e018      	b.n	80078bc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800788a:	79fb      	ldrb	r3, [r7, #7]
 800788c:	031a      	lsls	r2, r3, #12
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	4413      	add	r3, r2
 8007892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007896:	461a      	mov	r2, r3
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	3301      	adds	r3, #1
 80078a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	3301      	adds	r3, #1
 80078a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	3301      	adds	r3, #1
 80078ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	3301      	adds	r3, #1
 80078b4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	3301      	adds	r3, #1
 80078ba:	61bb      	str	r3, [r7, #24]
 80078bc:	69ba      	ldr	r2, [r7, #24]
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d3e2      	bcc.n	800788a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3724      	adds	r7, #36	; 0x24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b08b      	sub	sp, #44	; 0x2c
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	4613      	mov	r3, r2
 80078de:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80078e8:	88fb      	ldrh	r3, [r7, #6]
 80078ea:	089b      	lsrs	r3, r3, #2
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80078f0:	88fb      	ldrh	r3, [r7, #6]
 80078f2:	f003 0303 	and.w	r3, r3, #3
 80078f6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80078f8:	2300      	movs	r3, #0
 80078fa:	623b      	str	r3, [r7, #32]
 80078fc:	e014      	b.n	8007928 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	601a      	str	r2, [r3, #0]
    pDest++;
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	3301      	adds	r3, #1
 800790e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	3301      	adds	r3, #1
 8007914:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	3301      	adds	r3, #1
 800791a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	3301      	adds	r3, #1
 8007920:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	3301      	adds	r3, #1
 8007926:	623b      	str	r3, [r7, #32]
 8007928:	6a3a      	ldr	r2, [r7, #32]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	429a      	cmp	r2, r3
 800792e:	d3e6      	bcc.n	80078fe <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007930:	8bfb      	ldrh	r3, [r7, #30]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d01e      	beq.n	8007974 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007936:	2300      	movs	r3, #0
 8007938:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007940:	461a      	mov	r2, r3
 8007942:	f107 0310 	add.w	r3, r7, #16
 8007946:	6812      	ldr	r2, [r2, #0]
 8007948:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	b2db      	uxtb	r3, r3
 8007950:	00db      	lsls	r3, r3, #3
 8007952:	fa22 f303 	lsr.w	r3, r2, r3
 8007956:	b2da      	uxtb	r2, r3
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	701a      	strb	r2, [r3, #0]
      i++;
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	3301      	adds	r3, #1
 8007960:	623b      	str	r3, [r7, #32]
      pDest++;
 8007962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007964:	3301      	adds	r3, #1
 8007966:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007968:	8bfb      	ldrh	r3, [r7, #30]
 800796a:	3b01      	subs	r3, #1
 800796c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800796e:	8bfb      	ldrh	r3, [r7, #30]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1ea      	bne.n	800794a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007976:	4618      	mov	r0, r3
 8007978:	372c      	adds	r7, #44	; 0x2c
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007982:	b480      	push	{r7}
 8007984:	b085      	sub	sp, #20
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	785b      	ldrb	r3, [r3, #1]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d12c      	bne.n	80079f8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	db12      	blt.n	80079d6 <USB_EPSetStall+0x54>
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00f      	beq.n	80079d6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	0151      	lsls	r1, r2, #5
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	440a      	add	r2, r1
 80079cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079d4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	0151      	lsls	r1, r2, #5
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	440a      	add	r2, r1
 80079ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	e02b      	b.n	8007a50 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	db12      	blt.n	8007a30 <USB_EPSetStall+0xae>
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00f      	beq.n	8007a30 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	0151      	lsls	r1, r2, #5
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	440a      	add	r2, r1
 8007a26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a2e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	0151      	lsls	r1, r2, #5
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	440a      	add	r2, r1
 8007a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3714      	adds	r7, #20
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b085      	sub	sp, #20
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	785b      	ldrb	r3, [r3, #1]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d128      	bne.n	8007acc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	0151      	lsls	r1, r2, #5
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	440a      	add	r2, r1
 8007a90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	78db      	ldrb	r3, [r3, #3]
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d003      	beq.n	8007aaa <USB_EPClearStall+0x4c>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	78db      	ldrb	r3, [r3, #3]
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d138      	bne.n	8007b1c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	015a      	lsls	r2, r3, #5
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	0151      	lsls	r1, r2, #5
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	440a      	add	r2, r1
 8007ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ac8:	6013      	str	r3, [r2, #0]
 8007aca:	e027      	b.n	8007b1c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	0151      	lsls	r1, r2, #5
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	440a      	add	r2, r1
 8007ae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ae6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007aea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	78db      	ldrb	r3, [r3, #3]
 8007af0:	2b03      	cmp	r3, #3
 8007af2:	d003      	beq.n	8007afc <USB_EPClearStall+0x9e>
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	78db      	ldrb	r3, [r3, #3]
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d10f      	bne.n	8007b1c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	0151      	lsls	r1, r2, #5
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	440a      	add	r2, r1
 8007b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b1a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b085      	sub	sp, #20
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b48:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007b4c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	78fb      	ldrb	r3, [r7, #3]
 8007b58:	011b      	lsls	r3, r3, #4
 8007b5a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007b5e:	68f9      	ldr	r1, [r7, #12]
 8007b60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b64:	4313      	orrs	r3, r2
 8007b66:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b085      	sub	sp, #20
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b90:	f023 0303 	bic.w	r3, r3, #3
 8007b94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ba4:	f023 0302 	bic.w	r3, r3, #2
 8007ba8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bd2:	f023 0303 	bic.w	r3, r3, #3
 8007bd6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007be6:	f043 0302 	orr.w	r3, r3, #2
 8007bea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b085      	sub	sp, #20
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	4013      	ands	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c12:	68fb      	ldr	r3, [r7, #12]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	4013      	ands	r3, r2
 8007c42:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	0c1b      	lsrs	r3, r3, #16
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	4013      	ands	r3, r2
 8007c76:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	b29b      	uxth	r3, r3
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	015a      	lsls	r2, r3, #5
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007cb6:	68bb      	ldr	r3, [r7, #8]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b087      	sub	sp, #28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007ce8:	78fb      	ldrb	r3, [r7, #3]
 8007cea:	f003 030f 	and.w	r3, r3, #15
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8007cf4:	01db      	lsls	r3, r3, #7
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007cfe:	78fb      	ldrb	r3, [r7, #3]
 8007d00:	015a      	lsls	r2, r3, #5
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	4413      	add	r3, r2
 8007d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	4013      	ands	r3, r2
 8007d10:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d12:	68bb      	ldr	r3, [r7, #8]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	371c      	adds	r7, #28
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	f003 0301 	and.w	r3, r3, #1
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d56:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007d5a:	f023 0307 	bic.w	r3, r3, #7
 8007d5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
	...

08007d84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b087      	sub	sp, #28
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	607a      	str	r2, [r7, #4]
 8007d90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	333c      	adds	r3, #60	; 0x3c
 8007d9a:	3304      	adds	r3, #4
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	4a26      	ldr	r2, [pc, #152]	; (8007e3c <USB_EP0_OutStart+0xb8>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d90a      	bls.n	8007dbe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007db4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007db8:	d101      	bne.n	8007dbe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	e037      	b.n	8007e2e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ddc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dec:	f043 0318 	orr.w	r3, r3, #24
 8007df0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e00:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007e04:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007e06:	7afb      	ldrb	r3, [r7, #11]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d10f      	bne.n	8007e2c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e12:	461a      	mov	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e26:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007e2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	371c      	adds	r7, #28
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	4f54300a 	.word	0x4f54300a

08007e40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	4a13      	ldr	r2, [pc, #76]	; (8007ea0 <USB_CoreReset+0x60>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d901      	bls.n	8007e5c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e01a      	b.n	8007e92 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	daf3      	bge.n	8007e4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e64:	2300      	movs	r3, #0
 8007e66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	f043 0201 	orr.w	r2, r3, #1
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	3301      	adds	r3, #1
 8007e78:	60fb      	str	r3, [r7, #12]
 8007e7a:	4a09      	ldr	r2, [pc, #36]	; (8007ea0 <USB_CoreReset+0x60>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d901      	bls.n	8007e84 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e006      	b.n	8007e92 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	f003 0301 	and.w	r3, r3, #1
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d0f1      	beq.n	8007e74 <USB_CoreReset+0x34>

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	00030d40 	.word	0x00030d40

08007ea4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007ea8:	4904      	ldr	r1, [pc, #16]	; (8007ebc <MX_FATFS_Init+0x18>)
 8007eaa:	4805      	ldr	r0, [pc, #20]	; (8007ec0 <MX_FATFS_Init+0x1c>)
 8007eac:	f001 ff30 	bl	8009d10 <FATFS_LinkDriver>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	4b03      	ldr	r3, [pc, #12]	; (8007ec4 <MX_FATFS_Init+0x20>)
 8007eb6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007eb8:	bf00      	nop
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	200005e4 	.word	0x200005e4
 8007ec0:	0800b18c 	.word	0x0800b18c
 8007ec4:	200005e0 	.word	0x200005e0

08007ec8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007ed2:	f000 f896 	bl	8008002 <BSP_SD_IsDetected>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d001      	beq.n	8007ee0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e012      	b.n	8007f06 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007ee0:	480b      	ldr	r0, [pc, #44]	; (8007f10 <BSP_SD_Init+0x48>)
 8007ee2:	f7fc fbc1 	bl	8004668 <HAL_SD_Init>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007eea:	79fb      	ldrb	r3, [r7, #7]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d109      	bne.n	8007f04 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007ef0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ef4:	4806      	ldr	r0, [pc, #24]	; (8007f10 <BSP_SD_Init+0x48>)
 8007ef6:	f7fd f98d 	bl	8005214 <HAL_SD_ConfigWideBusOperation>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007f04:	79fb      	ldrb	r3, [r7, #7]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	20000558 	.word	0x20000558

08007f14 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	68f9      	ldr	r1, [r7, #12]
 8007f2a:	4806      	ldr	r0, [pc, #24]	; (8007f44 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007f2c:	f7fc fc4a 	bl	80047c4 <HAL_SD_ReadBlocks_DMA>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3718      	adds	r7, #24
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	20000558 	.word	0x20000558

08007f48 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b086      	sub	sp, #24
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	68f9      	ldr	r1, [r7, #12]
 8007f5e:	4806      	ldr	r0, [pc, #24]	; (8007f78 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007f60:	f7fc fd12 	bl	8004988 <HAL_SD_WriteBlocks_DMA>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3718      	adds	r7, #24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	20000558 	.word	0x20000558

08007f7c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007f80:	4805      	ldr	r0, [pc, #20]	; (8007f98 <BSP_SD_GetCardState+0x1c>)
 8007f82:	f7fd f9e1 	bl	8005348 <HAL_SD_GetCardState>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b04      	cmp	r3, #4
 8007f8a:	bf14      	ite	ne
 8007f8c:	2301      	movne	r3, #1
 8007f8e:	2300      	moveq	r3, #0
 8007f90:	b2db      	uxtb	r3, r3
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20000558 	.word	0x20000558

08007f9c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007fa4:	6879      	ldr	r1, [r7, #4]
 8007fa6:	4803      	ldr	r0, [pc, #12]	; (8007fb4 <BSP_SD_GetCardInfo+0x18>)
 8007fa8:	f7fd f908 	bl	80051bc <HAL_SD_GetCardInfo>
}
 8007fac:	bf00      	nop
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	20000558 	.word	0x20000558

08007fb8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007fc0:	f000 f818 	bl	8007ff4 <BSP_SD_AbortCallback>
}
 8007fc4:	bf00      	nop
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007fd4:	f000 f9a8 	bl	8008328 <BSP_SD_WriteCpltCallback>
}
 8007fd8:	bf00      	nop
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007fe8:	f000 f9aa 	bl	8008340 <BSP_SD_ReadCpltCallback>
}
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	af00      	add	r7, sp, #0

}
 8007ff8:	bf00      	nop
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b082      	sub	sp, #8
 8008006:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008008:	2301      	movs	r3, #1
 800800a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800800c:	f000 f80c 	bl	8008028 <BSP_PlatformIsDetected>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008016:	2300      	movs	r3, #0
 8008018:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800801a:	79fb      	ldrb	r3, [r7, #7]
 800801c:	b2db      	uxtb	r3, r3
}
 800801e:	4618      	mov	r0, r3
 8008020:	3708      	adds	r7, #8
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
	...

08008028 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800802e:	2301      	movs	r3, #1
 8008030:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008032:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008036:	4806      	ldr	r0, [pc, #24]	; (8008050 <BSP_PlatformIsDetected+0x28>)
 8008038:	f7f9 fd98 	bl	8001b6c <HAL_GPIO_ReadPin>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d001      	beq.n	8008046 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8008042:	2300      	movs	r3, #0
 8008044:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008046:	79fb      	ldrb	r3, [r7, #7]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	40020400 	.word	0x40020400

08008054 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800805c:	f7f8 ff0a 	bl	8000e74 <HAL_GetTick>
 8008060:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8008062:	e006      	b.n	8008072 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008064:	f7ff ff8a 	bl	8007f7c <BSP_SD_GetCardState>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800806e:	2300      	movs	r3, #0
 8008070:	e009      	b.n	8008086 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8008072:	f7f8 feff 	bl	8000e74 <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	429a      	cmp	r2, r3
 8008080:	d8f0      	bhi.n	8008064 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008082:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	4603      	mov	r3, r0
 8008098:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800809a:	4b0b      	ldr	r3, [pc, #44]	; (80080c8 <SD_CheckStatus+0x38>)
 800809c:	2201      	movs	r2, #1
 800809e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80080a0:	f7ff ff6c 	bl	8007f7c <BSP_SD_GetCardState>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d107      	bne.n	80080ba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80080aa:	4b07      	ldr	r3, [pc, #28]	; (80080c8 <SD_CheckStatus+0x38>)
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	f023 0301 	bic.w	r3, r3, #1
 80080b4:	b2da      	uxtb	r2, r3
 80080b6:	4b04      	ldr	r3, [pc, #16]	; (80080c8 <SD_CheckStatus+0x38>)
 80080b8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80080ba:	4b03      	ldr	r3, [pc, #12]	; (80080c8 <SD_CheckStatus+0x38>)
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	b2db      	uxtb	r3, r3
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	20000009 	.word	0x20000009

080080cc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	4603      	mov	r3, r0
 80080d4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80080d6:	f7ff fef7 	bl	8007ec8 <BSP_SD_Init>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d107      	bne.n	80080f0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80080e0:	79fb      	ldrb	r3, [r7, #7]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7ff ffd4 	bl	8008090 <SD_CheckStatus>
 80080e8:	4603      	mov	r3, r0
 80080ea:	461a      	mov	r2, r3
 80080ec:	4b04      	ldr	r3, [pc, #16]	; (8008100 <SD_initialize+0x34>)
 80080ee:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80080f0:	4b03      	ldr	r3, [pc, #12]	; (8008100 <SD_initialize+0x34>)
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	b2db      	uxtb	r3, r3
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	20000009 	.word	0x20000009

08008104 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	4603      	mov	r3, r0
 800810c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800810e:	79fb      	ldrb	r3, [r7, #7]
 8008110:	4618      	mov	r0, r3
 8008112:	f7ff ffbd 	bl	8008090 <SD_CheckStatus>
 8008116:	4603      	mov	r3, r0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	60b9      	str	r1, [r7, #8]
 8008128:	607a      	str	r2, [r7, #4]
 800812a:	603b      	str	r3, [r7, #0]
 800812c:	4603      	mov	r3, r0
 800812e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008134:	f247 5030 	movw	r0, #30000	; 0x7530
 8008138:	f7ff ff8c 	bl	8008054 <SD_CheckStatusWithTimeout>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	da01      	bge.n	8008146 <SD_read+0x26>
  {
    return res;
 8008142:	7dfb      	ldrb	r3, [r7, #23]
 8008144:	e03b      	b.n	80081be <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	6879      	ldr	r1, [r7, #4]
 800814a:	68b8      	ldr	r0, [r7, #8]
 800814c:	f7ff fee2 	bl	8007f14 <BSP_SD_ReadBlocks_DMA>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d132      	bne.n	80081bc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8008156:	4b1c      	ldr	r3, [pc, #112]	; (80081c8 <SD_read+0xa8>)
 8008158:	2200      	movs	r2, #0
 800815a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800815c:	f7f8 fe8a 	bl	8000e74 <HAL_GetTick>
 8008160:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008162:	bf00      	nop
 8008164:	4b18      	ldr	r3, [pc, #96]	; (80081c8 <SD_read+0xa8>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d108      	bne.n	800817e <SD_read+0x5e>
 800816c:	f7f8 fe82 	bl	8000e74 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	f247 522f 	movw	r2, #29999	; 0x752f
 800817a:	4293      	cmp	r3, r2
 800817c:	d9f2      	bls.n	8008164 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800817e:	4b12      	ldr	r3, [pc, #72]	; (80081c8 <SD_read+0xa8>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d102      	bne.n	800818c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	75fb      	strb	r3, [r7, #23]
 800818a:	e017      	b.n	80081bc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800818c:	4b0e      	ldr	r3, [pc, #56]	; (80081c8 <SD_read+0xa8>)
 800818e:	2200      	movs	r2, #0
 8008190:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008192:	f7f8 fe6f 	bl	8000e74 <HAL_GetTick>
 8008196:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008198:	e007      	b.n	80081aa <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800819a:	f7ff feef 	bl	8007f7c <BSP_SD_GetCardState>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d102      	bne.n	80081aa <SD_read+0x8a>
          {
            res = RES_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80081a8:	e008      	b.n	80081bc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80081aa:	f7f8 fe63 	bl	8000e74 <HAL_GetTick>
 80081ae:	4602      	mov	r2, r0
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	f247 522f 	movw	r2, #29999	; 0x752f
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d9ee      	bls.n	800819a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80081bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3718      	adds	r7, #24
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	20000208 	.word	0x20000208

080081cc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60b9      	str	r1, [r7, #8]
 80081d4:	607a      	str	r2, [r7, #4]
 80081d6:	603b      	str	r3, [r7, #0]
 80081d8:	4603      	mov	r3, r0
 80081da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80081e0:	4b24      	ldr	r3, [pc, #144]	; (8008274 <SD_write+0xa8>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80081e6:	f247 5030 	movw	r0, #30000	; 0x7530
 80081ea:	f7ff ff33 	bl	8008054 <SD_CheckStatusWithTimeout>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	da01      	bge.n	80081f8 <SD_write+0x2c>
  {
    return res;
 80081f4:	7dfb      	ldrb	r3, [r7, #23]
 80081f6:	e038      	b.n	800826a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	68b8      	ldr	r0, [r7, #8]
 80081fe:	f7ff fea3 	bl	8007f48 <BSP_SD_WriteBlocks_DMA>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d12f      	bne.n	8008268 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8008208:	f7f8 fe34 	bl	8000e74 <HAL_GetTick>
 800820c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800820e:	bf00      	nop
 8008210:	4b18      	ldr	r3, [pc, #96]	; (8008274 <SD_write+0xa8>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d108      	bne.n	800822a <SD_write+0x5e>
 8008218:	f7f8 fe2c 	bl	8000e74 <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	f247 522f 	movw	r2, #29999	; 0x752f
 8008226:	4293      	cmp	r3, r2
 8008228:	d9f2      	bls.n	8008210 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800822a:	4b12      	ldr	r3, [pc, #72]	; (8008274 <SD_write+0xa8>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d102      	bne.n	8008238 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	75fb      	strb	r3, [r7, #23]
 8008236:	e017      	b.n	8008268 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8008238:	4b0e      	ldr	r3, [pc, #56]	; (8008274 <SD_write+0xa8>)
 800823a:	2200      	movs	r2, #0
 800823c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800823e:	f7f8 fe19 	bl	8000e74 <HAL_GetTick>
 8008242:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008244:	e007      	b.n	8008256 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008246:	f7ff fe99 	bl	8007f7c <BSP_SD_GetCardState>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d102      	bne.n	8008256 <SD_write+0x8a>
          {
            res = RES_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	75fb      	strb	r3, [r7, #23]
            break;
 8008254:	e008      	b.n	8008268 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008256:	f7f8 fe0d 	bl	8000e74 <HAL_GetTick>
 800825a:	4602      	mov	r2, r0
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	f247 522f 	movw	r2, #29999	; 0x752f
 8008264:	4293      	cmp	r3, r2
 8008266:	d9ee      	bls.n	8008246 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8008268:	7dfb      	ldrb	r3, [r7, #23]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3718      	adds	r7, #24
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	20000204 	.word	0x20000204

08008278 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b08c      	sub	sp, #48	; 0x30
 800827c:	af00      	add	r7, sp, #0
 800827e:	4603      	mov	r3, r0
 8008280:	603a      	str	r2, [r7, #0]
 8008282:	71fb      	strb	r3, [r7, #7]
 8008284:	460b      	mov	r3, r1
 8008286:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800828e:	4b25      	ldr	r3, [pc, #148]	; (8008324 <SD_ioctl+0xac>)
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	b2db      	uxtb	r3, r3
 8008294:	f003 0301 	and.w	r3, r3, #1
 8008298:	2b00      	cmp	r3, #0
 800829a:	d001      	beq.n	80082a0 <SD_ioctl+0x28>
 800829c:	2303      	movs	r3, #3
 800829e:	e03c      	b.n	800831a <SD_ioctl+0xa2>

  switch (cmd)
 80082a0:	79bb      	ldrb	r3, [r7, #6]
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	d834      	bhi.n	8008310 <SD_ioctl+0x98>
 80082a6:	a201      	add	r2, pc, #4	; (adr r2, 80082ac <SD_ioctl+0x34>)
 80082a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ac:	080082bd 	.word	0x080082bd
 80082b0:	080082c5 	.word	0x080082c5
 80082b4:	080082dd 	.word	0x080082dd
 80082b8:	080082f7 	.word	0x080082f7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80082c2:	e028      	b.n	8008316 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80082c4:	f107 030c 	add.w	r3, r7, #12
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7ff fe67 	bl	8007f9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80082ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80082d4:	2300      	movs	r3, #0
 80082d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80082da:	e01c      	b.n	8008316 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80082dc:	f107 030c 	add.w	r3, r7, #12
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7ff fe5b 	bl	8007f9c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80082e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80082f4:	e00f      	b.n	8008316 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80082f6:	f107 030c 	add.w	r3, r7, #12
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7ff fe4e 	bl	8007f9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008302:	0a5a      	lsrs	r2, r3, #9
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800830e:	e002      	b.n	8008316 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008310:	2304      	movs	r3, #4
 8008312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008316:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800831a:	4618      	mov	r0, r3
 800831c:	3730      	adds	r7, #48	; 0x30
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	20000009 	.word	0x20000009

08008328 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8008328:	b480      	push	{r7}
 800832a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800832c:	4b03      	ldr	r3, [pc, #12]	; (800833c <BSP_SD_WriteCpltCallback+0x14>)
 800832e:	2201      	movs	r2, #1
 8008330:	601a      	str	r2, [r3, #0]
}
 8008332:	bf00      	nop
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	20000204 	.word	0x20000204

08008340 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008340:	b480      	push	{r7}
 8008342:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8008344:	4b03      	ldr	r3, [pc, #12]	; (8008354 <BSP_SD_ReadCpltCallback+0x14>)
 8008346:	2201      	movs	r2, #1
 8008348:	601a      	str	r2, [r3, #0]
}
 800834a:	bf00      	nop
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	20000208 	.word	0x20000208

08008358 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	460b      	mov	r3, r1
 8008362:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008364:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008368:	f002 f9f8 	bl	800a75c <USBD_static_malloc>
 800836c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d105      	bne.n	8008380 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800837c:	2302      	movs	r3, #2
 800837e:	e066      	b.n	800844e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	7c1b      	ldrb	r3, [r3, #16]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d119      	bne.n	80083c4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008394:	2202      	movs	r2, #2
 8008396:	2181      	movs	r1, #129	; 0x81
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f002 f8bc 	bl	800a516 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80083a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083a8:	2202      	movs	r2, #2
 80083aa:	2101      	movs	r1, #1
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f002 f8b2 	bl	800a516 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2210      	movs	r2, #16
 80083be:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80083c2:	e016      	b.n	80083f2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80083c4:	2340      	movs	r3, #64	; 0x40
 80083c6:	2202      	movs	r2, #2
 80083c8:	2181      	movs	r1, #129	; 0x81
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f002 f8a3 	bl	800a516 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80083d6:	2340      	movs	r3, #64	; 0x40
 80083d8:	2202      	movs	r2, #2
 80083da:	2101      	movs	r1, #1
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f002 f89a 	bl	800a516 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2210      	movs	r2, #16
 80083ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80083f2:	2308      	movs	r3, #8
 80083f4:	2203      	movs	r2, #3
 80083f6:	2182      	movs	r1, #130	; 0x82
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f002 f88c 	bl	800a516 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	7c1b      	ldrb	r3, [r3, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d109      	bne.n	800843c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800842e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008432:	2101      	movs	r1, #1
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f002 f95d 	bl	800a6f4 <USBD_LL_PrepareReceive>
 800843a:	e007      	b.n	800844c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008442:	2340      	movs	r3, #64	; 0x40
 8008444:	2101      	movs	r1, #1
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f002 f954 	bl	800a6f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b082      	sub	sp, #8
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
 800845e:	460b      	mov	r3, r1
 8008460:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008462:	2181      	movs	r1, #129	; 0x81
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f002 f87c 	bl	800a562 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008470:	2101      	movs	r1, #1
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f002 f875 	bl	800a562 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008480:	2182      	movs	r1, #130	; 0x82
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f002 f86d 	bl	800a562 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00e      	beq.n	80084c0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084b2:	4618      	mov	r0, r3
 80084b4:	f002 f960 	bl	800a778 <USBD_static_free>
    pdev->pClassData = NULL;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
	...

080084cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80084de:	2300      	movs	r3, #0
 80084e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80084e2:	2300      	movs	r3, #0
 80084e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e0af      	b.n	8008654 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d03f      	beq.n	8008580 <USBD_CDC_Setup+0xb4>
 8008500:	2b20      	cmp	r3, #32
 8008502:	f040 809f 	bne.w	8008644 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	88db      	ldrh	r3, [r3, #6]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d02e      	beq.n	800856c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	b25b      	sxtb	r3, r3
 8008514:	2b00      	cmp	r3, #0
 8008516:	da16      	bge.n	8008546 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008524:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	88d2      	ldrh	r2, [r2, #6]
 800852a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	88db      	ldrh	r3, [r3, #6]
 8008530:	2b07      	cmp	r3, #7
 8008532:	bf28      	it	cs
 8008534:	2307      	movcs	r3, #7
 8008536:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	89fa      	ldrh	r2, [r7, #14]
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f001 fb19 	bl	8009b76 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008544:	e085      	b.n	8008652 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	785a      	ldrb	r2, [r3, #1]
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	88db      	ldrh	r3, [r3, #6]
 8008554:	b2da      	uxtb	r2, r3
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800855c:	6939      	ldr	r1, [r7, #16]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	88db      	ldrh	r3, [r3, #6]
 8008562:	461a      	mov	r2, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f001 fb32 	bl	8009bce <USBD_CtlPrepareRx>
      break;
 800856a:	e072      	b.n	8008652 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	7850      	ldrb	r0, [r2, #1]
 8008578:	2200      	movs	r2, #0
 800857a:	6839      	ldr	r1, [r7, #0]
 800857c:	4798      	blx	r3
      break;
 800857e:	e068      	b.n	8008652 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	785b      	ldrb	r3, [r3, #1]
 8008584:	2b0b      	cmp	r3, #11
 8008586:	d852      	bhi.n	800862e <USBD_CDC_Setup+0x162>
 8008588:	a201      	add	r2, pc, #4	; (adr r2, 8008590 <USBD_CDC_Setup+0xc4>)
 800858a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858e:	bf00      	nop
 8008590:	080085c1 	.word	0x080085c1
 8008594:	0800863d 	.word	0x0800863d
 8008598:	0800862f 	.word	0x0800862f
 800859c:	0800862f 	.word	0x0800862f
 80085a0:	0800862f 	.word	0x0800862f
 80085a4:	0800862f 	.word	0x0800862f
 80085a8:	0800862f 	.word	0x0800862f
 80085ac:	0800862f 	.word	0x0800862f
 80085b0:	0800862f 	.word	0x0800862f
 80085b4:	0800862f 	.word	0x0800862f
 80085b8:	080085eb 	.word	0x080085eb
 80085bc:	08008615 	.word	0x08008615
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b03      	cmp	r3, #3
 80085ca:	d107      	bne.n	80085dc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80085cc:	f107 030a 	add.w	r3, r7, #10
 80085d0:	2202      	movs	r2, #2
 80085d2:	4619      	mov	r1, r3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f001 face 	bl	8009b76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80085da:	e032      	b.n	8008642 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f001 fa58 	bl	8009a94 <USBD_CtlError>
            ret = USBD_FAIL;
 80085e4:	2303      	movs	r3, #3
 80085e6:	75fb      	strb	r3, [r7, #23]
          break;
 80085e8:	e02b      	b.n	8008642 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d107      	bne.n	8008606 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80085f6:	f107 030d 	add.w	r3, r7, #13
 80085fa:	2201      	movs	r2, #1
 80085fc:	4619      	mov	r1, r3
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f001 fab9 	bl	8009b76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008604:	e01d      	b.n	8008642 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f001 fa43 	bl	8009a94 <USBD_CtlError>
            ret = USBD_FAIL;
 800860e:	2303      	movs	r3, #3
 8008610:	75fb      	strb	r3, [r7, #23]
          break;
 8008612:	e016      	b.n	8008642 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800861a:	b2db      	uxtb	r3, r3
 800861c:	2b03      	cmp	r3, #3
 800861e:	d00f      	beq.n	8008640 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f001 fa36 	bl	8009a94 <USBD_CtlError>
            ret = USBD_FAIL;
 8008628:	2303      	movs	r3, #3
 800862a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800862c:	e008      	b.n	8008640 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f001 fa2f 	bl	8009a94 <USBD_CtlError>
          ret = USBD_FAIL;
 8008636:	2303      	movs	r3, #3
 8008638:	75fb      	strb	r3, [r7, #23]
          break;
 800863a:	e002      	b.n	8008642 <USBD_CDC_Setup+0x176>
          break;
 800863c:	bf00      	nop
 800863e:	e008      	b.n	8008652 <USBD_CDC_Setup+0x186>
          break;
 8008640:	bf00      	nop
      }
      break;
 8008642:	e006      	b.n	8008652 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f001 fa24 	bl	8009a94 <USBD_CtlError>
      ret = USBD_FAIL;
 800864c:	2303      	movs	r3, #3
 800864e:	75fb      	strb	r3, [r7, #23]
      break;
 8008650:	bf00      	nop
  }

  return (uint8_t)ret;
 8008652:	7dfb      	ldrb	r3, [r7, #23]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3718      	adds	r7, #24
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	460b      	mov	r3, r1
 8008666:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800866e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008676:	2b00      	cmp	r3, #0
 8008678:	d101      	bne.n	800867e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800867a:	2303      	movs	r3, #3
 800867c:	e04f      	b.n	800871e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008684:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008686:	78fa      	ldrb	r2, [r7, #3]
 8008688:	6879      	ldr	r1, [r7, #4]
 800868a:	4613      	mov	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	440b      	add	r3, r1
 8008694:	3318      	adds	r3, #24
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d029      	beq.n	80086f0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800869c:	78fa      	ldrb	r2, [r7, #3]
 800869e:	6879      	ldr	r1, [r7, #4]
 80086a0:	4613      	mov	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	440b      	add	r3, r1
 80086aa:	3318      	adds	r3, #24
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	78f9      	ldrb	r1, [r7, #3]
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	460b      	mov	r3, r1
 80086b4:	00db      	lsls	r3, r3, #3
 80086b6:	1a5b      	subs	r3, r3, r1
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4403      	add	r3, r0
 80086bc:	3344      	adds	r3, #68	; 0x44
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80086c4:	fb03 f301 	mul.w	r3, r3, r1
 80086c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d110      	bne.n	80086f0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80086ce:	78fa      	ldrb	r2, [r7, #3]
 80086d0:	6879      	ldr	r1, [r7, #4]
 80086d2:	4613      	mov	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4413      	add	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	440b      	add	r3, r1
 80086dc:	3318      	adds	r3, #24
 80086de:	2200      	movs	r2, #0
 80086e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80086e2:	78f9      	ldrb	r1, [r7, #3]
 80086e4:	2300      	movs	r3, #0
 80086e6:	2200      	movs	r2, #0
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f001 ffe2 	bl	800a6b2 <USBD_LL_Transmit>
 80086ee:	e015      	b.n	800871c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00b      	beq.n	800871c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008718:	78fa      	ldrb	r2, [r7, #3]
 800871a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b084      	sub	sp, #16
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	460b      	mov	r3, r1
 8008730:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008738:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008740:	2b00      	cmp	r3, #0
 8008742:	d101      	bne.n	8008748 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008744:	2303      	movs	r3, #3
 8008746:	e015      	b.n	8008774 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008748:	78fb      	ldrb	r3, [r7, #3]
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f001 fff2 	bl	800a736 <USBD_LL_GetRxDataSize>
 8008752:	4602      	mov	r2, r0
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800876e:	4611      	mov	r1, r2
 8008770:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800878a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008792:	2303      	movs	r3, #3
 8008794:	e01b      	b.n	80087ce <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d015      	beq.n	80087cc <USBD_CDC_EP0_RxReady+0x50>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80087a6:	2bff      	cmp	r3, #255	; 0xff
 80087a8:	d010      	beq.n	80087cc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80087b8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80087c0:	b292      	uxth	r2, r2
 80087c2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	22ff      	movs	r2, #255	; 0xff
 80087c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
	...

080087d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2243      	movs	r2, #67	; 0x43
 80087e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80087e6:	4b03      	ldr	r3, [pc, #12]	; (80087f4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr
 80087f4:	20000094 	.word	0x20000094

080087f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2243      	movs	r2, #67	; 0x43
 8008804:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008806:	4b03      	ldr	r3, [pc, #12]	; (8008814 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008808:	4618      	mov	r0, r3
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr
 8008814:	20000050 	.word	0x20000050

08008818 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2243      	movs	r2, #67	; 0x43
 8008824:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008826:	4b03      	ldr	r3, [pc, #12]	; (8008834 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008828:	4618      	mov	r0, r3
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr
 8008834:	200000d8 	.word	0x200000d8

08008838 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	220a      	movs	r2, #10
 8008844:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008846:	4b03      	ldr	r3, [pc, #12]	; (8008854 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008848:	4618      	mov	r0, r3
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr
 8008854:	2000000c 	.word	0x2000000c

08008858 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d101      	bne.n	800886c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008868:	2303      	movs	r3, #3
 800886a:	e004      	b.n	8008876 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008882:	b480      	push	{r7}
 8008884:	b087      	sub	sp, #28
 8008886:	af00      	add	r7, sp, #0
 8008888:	60f8      	str	r0, [r7, #12]
 800888a:	60b9      	str	r1, [r7, #8]
 800888c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008894:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800889c:	2303      	movs	r3, #3
 800889e:	e008      	b.n	80088b2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	371c      	adds	r7, #28
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80088be:	b480      	push	{r7}
 80088c0:	b085      	sub	sp, #20
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088ce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80088d6:	2303      	movs	r3, #3
 80088d8:	e004      	b.n	80088e4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	683a      	ldr	r2, [r7, #0]
 80088de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088fe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008900:	2301      	movs	r3, #1
 8008902:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800890e:	2303      	movs	r3, #3
 8008910:	e01a      	b.n	8008948 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008918:	2b00      	cmp	r3, #0
 800891a:	d114      	bne.n	8008946 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2201      	movs	r2, #1
 8008920:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800893a:	2181      	movs	r1, #129	; 0x81
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f001 feb8 	bl	800a6b2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008942:	2300      	movs	r3, #0
 8008944:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008946:	7bfb      	ldrb	r3, [r7, #15]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800895e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008966:	2b00      	cmp	r3, #0
 8008968:	d101      	bne.n	800896e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800896a:	2303      	movs	r3, #3
 800896c:	e016      	b.n	800899c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	7c1b      	ldrb	r3, [r3, #16]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d109      	bne.n	800898a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800897c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008980:	2101      	movs	r1, #1
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f001 feb6 	bl	800a6f4 <USBD_LL_PrepareReceive>
 8008988:	e007      	b.n	800899a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008990:	2340      	movs	r3, #64	; 0x40
 8008992:	2101      	movs	r1, #1
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f001 fead 	bl	800a6f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b086      	sub	sp, #24
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	4613      	mov	r3, r2
 80089b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d101      	bne.n	80089bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e01f      	b.n	80089fc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	79fa      	ldrb	r2, [r7, #7]
 80089ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f001 fd29 	bl	800a448 <USBD_LL_Init>
 80089f6:	4603      	mov	r3, r0
 80089f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80089fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3718      	adds	r7, #24
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d101      	bne.n	8008a1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	e016      	b.n	8008a4a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00b      	beq.n	8008a48 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a38:	f107 020e 	add.w	r2, r7, #14
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	4798      	blx	r3
 8008a40:	4602      	mov	r2, r0
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b082      	sub	sp, #8
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f001 fd40 	bl	800a4e0 <USBD_LL_Start>
 8008a60:	4603      	mov	r3, r0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	b083      	sub	sp, #12
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d009      	beq.n	8008aae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	78fa      	ldrb	r2, [r7, #3]
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	4798      	blx	r3
 8008aaa:	4603      	mov	r3, r0
 8008aac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d007      	beq.n	8008ade <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	78fa      	ldrb	r2, [r7, #3]
 8008ad8:	4611      	mov	r1, r2
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	4798      	blx	r3
  }

  return USBD_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 ff90 	bl	8009a20 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008b0e:	461a      	mov	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b1c:	f003 031f 	and.w	r3, r3, #31
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d01a      	beq.n	8008b5a <USBD_LL_SetupStage+0x72>
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d822      	bhi.n	8008b6e <USBD_LL_SetupStage+0x86>
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d002      	beq.n	8008b32 <USBD_LL_SetupStage+0x4a>
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d00a      	beq.n	8008b46 <USBD_LL_SetupStage+0x5e>
 8008b30:	e01d      	b.n	8008b6e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fa62 	bl	8009004 <USBD_StdDevReq>
 8008b40:	4603      	mov	r3, r0
 8008b42:	73fb      	strb	r3, [r7, #15]
      break;
 8008b44:	e020      	b.n	8008b88 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fac6 	bl	80090e0 <USBD_StdItfReq>
 8008b54:	4603      	mov	r3, r0
 8008b56:	73fb      	strb	r3, [r7, #15]
      break;
 8008b58:	e016      	b.n	8008b88 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b60:	4619      	mov	r1, r3
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fb05 	bl	8009172 <USBD_StdEPReq>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b6c:	e00c      	b.n	8008b88 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f001 fd0f 	bl	800a5a0 <USBD_LL_StallEP>
 8008b82:	4603      	mov	r3, r0
 8008b84:	73fb      	strb	r3, [r7, #15]
      break;
 8008b86:	bf00      	nop
  }

  return ret;
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b086      	sub	sp, #24
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	60f8      	str	r0, [r7, #12]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	607a      	str	r2, [r7, #4]
 8008b9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008ba0:	7afb      	ldrb	r3, [r7, #11]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d138      	bne.n	8008c18 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008bac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008bb4:	2b03      	cmp	r3, #3
 8008bb6:	d14a      	bne.n	8008c4e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	689a      	ldr	r2, [r3, #8]
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d913      	bls.n	8008bec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	689a      	ldr	r2, [r3, #8]
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	1ad2      	subs	r2, r2, r3
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	68da      	ldr	r2, [r3, #12]
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	bf28      	it	cs
 8008bde:	4613      	movcs	r3, r2
 8008be0:	461a      	mov	r2, r3
 8008be2:	6879      	ldr	r1, [r7, #4]
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f001 f80f 	bl	8009c08 <USBD_CtlContinueRx>
 8008bea:	e030      	b.n	8008c4e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b03      	cmp	r3, #3
 8008bf6:	d10b      	bne.n	8008c10 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d005      	beq.n	8008c10 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f001 f80a 	bl	8009c2a <USBD_CtlSendStatus>
 8008c16:	e01a      	b.n	8008c4e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d114      	bne.n	8008c4e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c2a:	699b      	ldr	r3, [r3, #24]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00e      	beq.n	8008c4e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c36:	699b      	ldr	r3, [r3, #24]
 8008c38:	7afa      	ldrb	r2, [r7, #11]
 8008c3a:	4611      	mov	r1, r2
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	4798      	blx	r3
 8008c40:	4603      	mov	r3, r0
 8008c42:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008c44:	7dfb      	ldrb	r3, [r7, #23]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008c4a:	7dfb      	ldrb	r3, [r7, #23]
 8008c4c:	e000      	b.n	8008c50 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3718      	adds	r7, #24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	460b      	mov	r3, r1
 8008c62:	607a      	str	r2, [r7, #4]
 8008c64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008c66:	7afb      	ldrb	r3, [r7, #11]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d16b      	bne.n	8008d44 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	3314      	adds	r3, #20
 8008c70:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	d156      	bne.n	8008d2a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	689a      	ldr	r2, [r3, #8]
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d914      	bls.n	8008cb2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	689a      	ldr	r2, [r3, #8]
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	1ad2      	subs	r2, r2, r3
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	6879      	ldr	r1, [r7, #4]
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f000 ff84 	bl	8009bac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	2100      	movs	r1, #0
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f001 fd22 	bl	800a6f4 <USBD_LL_PrepareReceive>
 8008cb0:	e03b      	b.n	8008d2a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	68da      	ldr	r2, [r3, #12]
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d11c      	bne.n	8008cf8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	685a      	ldr	r2, [r3, #4]
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d316      	bcc.n	8008cf8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d20f      	bcs.n	8008cf8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008cd8:	2200      	movs	r2, #0
 8008cda:	2100      	movs	r1, #0
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f000 ff65 	bl	8009bac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cea:	2300      	movs	r3, #0
 8008cec:	2200      	movs	r2, #0
 8008cee:	2100      	movs	r1, #0
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f001 fcff 	bl	800a6f4 <USBD_LL_PrepareReceive>
 8008cf6:	e018      	b.n	8008d2a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d10b      	bne.n	8008d1c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d005      	beq.n	8008d1c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d1c:	2180      	movs	r1, #128	; 0x80
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f001 fc3e 	bl	800a5a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f000 ff93 	bl	8009c50 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d122      	bne.n	8008d7a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f7ff fe98 	bl	8008a6a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008d42:	e01a      	b.n	8008d7a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	2b03      	cmp	r3, #3
 8008d4e:	d114      	bne.n	8008d7a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d56:	695b      	ldr	r3, [r3, #20]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00e      	beq.n	8008d7a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d62:	695b      	ldr	r3, [r3, #20]
 8008d64:	7afa      	ldrb	r2, [r7, #11]
 8008d66:	4611      	mov	r1, r2
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	4798      	blx	r3
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008d70:	7dfb      	ldrb	r3, [r7, #23]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d001      	beq.n	8008d7a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008d76:	7dfb      	ldrb	r3, [r7, #23]
 8008d78:	e000      	b.n	8008d7c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3718      	adds	r7, #24
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008db4:	2303      	movs	r3, #3
 8008db6:	e02f      	b.n	8008e18 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00f      	beq.n	8008de2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d009      	beq.n	8008de2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	6852      	ldr	r2, [r2, #4]
 8008dda:	b2d2      	uxtb	r2, r2
 8008ddc:	4611      	mov	r1, r2
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008de2:	2340      	movs	r3, #64	; 0x40
 8008de4:	2200      	movs	r2, #0
 8008de6:	2100      	movs	r1, #0
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f001 fb94 	bl	800a516 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2240      	movs	r2, #64	; 0x40
 8008dfa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dfe:	2340      	movs	r3, #64	; 0x40
 8008e00:	2200      	movs	r2, #0
 8008e02:	2180      	movs	r1, #128	; 0x80
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f001 fb86 	bl	800a516 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2240      	movs	r2, #64	; 0x40
 8008e14:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	78fa      	ldrb	r2, [r7, #3]
 8008e30:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e4e:	b2da      	uxtb	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2204      	movs	r2, #4
 8008e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	2b04      	cmp	r3, #4
 8008e7e:	d106      	bne.n	8008e8e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d101      	bne.n	8008eb2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e012      	b.n	8008ed8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d10b      	bne.n	8008ed6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ec4:	69db      	ldr	r3, [r3, #28]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d005      	beq.n	8008ed6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed0:	69db      	ldr	r3, [r3, #28]
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	e014      	b.n	8008f24 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b03      	cmp	r3, #3
 8008f04:	d10d      	bne.n	8008f22 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d007      	beq.n	8008f22 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f18:	6a1b      	ldr	r3, [r3, #32]
 8008f1a:	78fa      	ldrb	r2, [r7, #3]
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	460b      	mov	r3, r1
 8008f36:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d101      	bne.n	8008f46 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e014      	b.n	8008f70 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2b03      	cmp	r3, #3
 8008f50:	d10d      	bne.n	8008f6e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d007      	beq.n	8008f6e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f66:	78fa      	ldrb	r2, [r7, #3]
 8008f68:	4611      	mov	r1, r2
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	370c      	adds	r7, #12
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr

08008f8e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b082      	sub	sp, #8
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d009      	beq.n	8008fbc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	6852      	ldr	r2, [r2, #4]
 8008fb4:	b2d2      	uxtb	r2, r2
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	4798      	blx	r3
  }

  return USBD_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008fc6:	b480      	push	{r7}
 8008fc8:	b087      	sub	sp, #28
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008fe4:	8a3b      	ldrh	r3, [r7, #16]
 8008fe6:	021b      	lsls	r3, r3, #8
 8008fe8:	b21a      	sxth	r2, r3
 8008fea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	b21b      	sxth	r3, r3
 8008ff2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008ff4:	89fb      	ldrh	r3, [r7, #14]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	371c      	adds	r7, #28
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
	...

08009004 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800901a:	2b40      	cmp	r3, #64	; 0x40
 800901c:	d005      	beq.n	800902a <USBD_StdDevReq+0x26>
 800901e:	2b40      	cmp	r3, #64	; 0x40
 8009020:	d853      	bhi.n	80090ca <USBD_StdDevReq+0xc6>
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00b      	beq.n	800903e <USBD_StdDevReq+0x3a>
 8009026:	2b20      	cmp	r3, #32
 8009028:	d14f      	bne.n	80090ca <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	6839      	ldr	r1, [r7, #0]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	4798      	blx	r3
 8009038:	4603      	mov	r3, r0
 800903a:	73fb      	strb	r3, [r7, #15]
      break;
 800903c:	e04a      	b.n	80090d4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	785b      	ldrb	r3, [r3, #1]
 8009042:	2b09      	cmp	r3, #9
 8009044:	d83b      	bhi.n	80090be <USBD_StdDevReq+0xba>
 8009046:	a201      	add	r2, pc, #4	; (adr r2, 800904c <USBD_StdDevReq+0x48>)
 8009048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904c:	080090a1 	.word	0x080090a1
 8009050:	080090b5 	.word	0x080090b5
 8009054:	080090bf 	.word	0x080090bf
 8009058:	080090ab 	.word	0x080090ab
 800905c:	080090bf 	.word	0x080090bf
 8009060:	0800907f 	.word	0x0800907f
 8009064:	08009075 	.word	0x08009075
 8009068:	080090bf 	.word	0x080090bf
 800906c:	08009097 	.word	0x08009097
 8009070:	08009089 	.word	0x08009089
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f9de 	bl	8009438 <USBD_GetDescriptor>
          break;
 800907c:	e024      	b.n	80090c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fb43 	bl	800970c <USBD_SetAddress>
          break;
 8009086:	e01f      	b.n	80090c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009088:	6839      	ldr	r1, [r7, #0]
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fb82 	bl	8009794 <USBD_SetConfig>
 8009090:	4603      	mov	r3, r0
 8009092:	73fb      	strb	r3, [r7, #15]
          break;
 8009094:	e018      	b.n	80090c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fc21 	bl	80098e0 <USBD_GetConfig>
          break;
 800909e:	e013      	b.n	80090c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fc52 	bl	800994c <USBD_GetStatus>
          break;
 80090a8:	e00e      	b.n	80090c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80090aa:	6839      	ldr	r1, [r7, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fc81 	bl	80099b4 <USBD_SetFeature>
          break;
 80090b2:	e009      	b.n	80090c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fc90 	bl	80099dc <USBD_ClrFeature>
          break;
 80090bc:	e004      	b.n	80090c8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80090be:	6839      	ldr	r1, [r7, #0]
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 fce7 	bl	8009a94 <USBD_CtlError>
          break;
 80090c6:	bf00      	nop
      }
      break;
 80090c8:	e004      	b.n	80090d4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fce1 	bl	8009a94 <USBD_CtlError>
      break;
 80090d2:	bf00      	nop
  }

  return ret;
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop

080090e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090ea:	2300      	movs	r3, #0
 80090ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090f6:	2b40      	cmp	r3, #64	; 0x40
 80090f8:	d005      	beq.n	8009106 <USBD_StdItfReq+0x26>
 80090fa:	2b40      	cmp	r3, #64	; 0x40
 80090fc:	d82f      	bhi.n	800915e <USBD_StdItfReq+0x7e>
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d001      	beq.n	8009106 <USBD_StdItfReq+0x26>
 8009102:	2b20      	cmp	r3, #32
 8009104:	d12b      	bne.n	800915e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800910c:	b2db      	uxtb	r3, r3
 800910e:	3b01      	subs	r3, #1
 8009110:	2b02      	cmp	r3, #2
 8009112:	d81d      	bhi.n	8009150 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	889b      	ldrh	r3, [r3, #4]
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b01      	cmp	r3, #1
 800911c:	d813      	bhi.n	8009146 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	6839      	ldr	r1, [r7, #0]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	4798      	blx	r3
 800912c:	4603      	mov	r3, r0
 800912e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	88db      	ldrh	r3, [r3, #6]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d110      	bne.n	800915a <USBD_StdItfReq+0x7a>
 8009138:	7bfb      	ldrb	r3, [r7, #15]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10d      	bne.n	800915a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fd73 	bl	8009c2a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009144:	e009      	b.n	800915a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 fca3 	bl	8009a94 <USBD_CtlError>
          break;
 800914e:	e004      	b.n	800915a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009150:	6839      	ldr	r1, [r7, #0]
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fc9e 	bl	8009a94 <USBD_CtlError>
          break;
 8009158:	e000      	b.n	800915c <USBD_StdItfReq+0x7c>
          break;
 800915a:	bf00      	nop
      }
      break;
 800915c:	e004      	b.n	8009168 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800915e:	6839      	ldr	r1, [r7, #0]
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 fc97 	bl	8009a94 <USBD_CtlError>
      break;
 8009166:	bf00      	nop
  }

  return ret;
 8009168:	7bfb      	ldrb	r3, [r7, #15]
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b084      	sub	sp, #16
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800917c:	2300      	movs	r3, #0
 800917e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	889b      	ldrh	r3, [r3, #4]
 8009184:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800918e:	2b40      	cmp	r3, #64	; 0x40
 8009190:	d007      	beq.n	80091a2 <USBD_StdEPReq+0x30>
 8009192:	2b40      	cmp	r3, #64	; 0x40
 8009194:	f200 8145 	bhi.w	8009422 <USBD_StdEPReq+0x2b0>
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00c      	beq.n	80091b6 <USBD_StdEPReq+0x44>
 800919c:	2b20      	cmp	r3, #32
 800919e:	f040 8140 	bne.w	8009422 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	6839      	ldr	r1, [r7, #0]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	4798      	blx	r3
 80091b0:	4603      	mov	r3, r0
 80091b2:	73fb      	strb	r3, [r7, #15]
      break;
 80091b4:	e13a      	b.n	800942c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	785b      	ldrb	r3, [r3, #1]
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d007      	beq.n	80091ce <USBD_StdEPReq+0x5c>
 80091be:	2b03      	cmp	r3, #3
 80091c0:	f300 8129 	bgt.w	8009416 <USBD_StdEPReq+0x2a4>
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d07f      	beq.n	80092c8 <USBD_StdEPReq+0x156>
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d03c      	beq.n	8009246 <USBD_StdEPReq+0xd4>
 80091cc:	e123      	b.n	8009416 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d002      	beq.n	80091e0 <USBD_StdEPReq+0x6e>
 80091da:	2b03      	cmp	r3, #3
 80091dc:	d016      	beq.n	800920c <USBD_StdEPReq+0x9a>
 80091de:	e02c      	b.n	800923a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091e0:	7bbb      	ldrb	r3, [r7, #14]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00d      	beq.n	8009202 <USBD_StdEPReq+0x90>
 80091e6:	7bbb      	ldrb	r3, [r7, #14]
 80091e8:	2b80      	cmp	r3, #128	; 0x80
 80091ea:	d00a      	beq.n	8009202 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80091ec:	7bbb      	ldrb	r3, [r7, #14]
 80091ee:	4619      	mov	r1, r3
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f001 f9d5 	bl	800a5a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80091f6:	2180      	movs	r1, #128	; 0x80
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f001 f9d1 	bl	800a5a0 <USBD_LL_StallEP>
 80091fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009200:	e020      	b.n	8009244 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fc45 	bl	8009a94 <USBD_CtlError>
              break;
 800920a:	e01b      	b.n	8009244 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	885b      	ldrh	r3, [r3, #2]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d10e      	bne.n	8009232 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009214:	7bbb      	ldrb	r3, [r7, #14]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00b      	beq.n	8009232 <USBD_StdEPReq+0xc0>
 800921a:	7bbb      	ldrb	r3, [r7, #14]
 800921c:	2b80      	cmp	r3, #128	; 0x80
 800921e:	d008      	beq.n	8009232 <USBD_StdEPReq+0xc0>
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	88db      	ldrh	r3, [r3, #6]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d104      	bne.n	8009232 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009228:	7bbb      	ldrb	r3, [r7, #14]
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f001 f9b7 	bl	800a5a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fcf9 	bl	8009c2a <USBD_CtlSendStatus>

              break;
 8009238:	e004      	b.n	8009244 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800923a:	6839      	ldr	r1, [r7, #0]
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fc29 	bl	8009a94 <USBD_CtlError>
              break;
 8009242:	bf00      	nop
          }
          break;
 8009244:	e0ec      	b.n	8009420 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b02      	cmp	r3, #2
 8009250:	d002      	beq.n	8009258 <USBD_StdEPReq+0xe6>
 8009252:	2b03      	cmp	r3, #3
 8009254:	d016      	beq.n	8009284 <USBD_StdEPReq+0x112>
 8009256:	e030      	b.n	80092ba <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009258:	7bbb      	ldrb	r3, [r7, #14]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00d      	beq.n	800927a <USBD_StdEPReq+0x108>
 800925e:	7bbb      	ldrb	r3, [r7, #14]
 8009260:	2b80      	cmp	r3, #128	; 0x80
 8009262:	d00a      	beq.n	800927a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009264:	7bbb      	ldrb	r3, [r7, #14]
 8009266:	4619      	mov	r1, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f001 f999 	bl	800a5a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800926e:	2180      	movs	r1, #128	; 0x80
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f001 f995 	bl	800a5a0 <USBD_LL_StallEP>
 8009276:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009278:	e025      	b.n	80092c6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800927a:	6839      	ldr	r1, [r7, #0]
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fc09 	bl	8009a94 <USBD_CtlError>
              break;
 8009282:	e020      	b.n	80092c6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	885b      	ldrh	r3, [r3, #2]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d11b      	bne.n	80092c4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800928c:	7bbb      	ldrb	r3, [r7, #14]
 800928e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009292:	2b00      	cmp	r3, #0
 8009294:	d004      	beq.n	80092a0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009296:	7bbb      	ldrb	r3, [r7, #14]
 8009298:	4619      	mov	r1, r3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f001 f99f 	bl	800a5de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fcc2 	bl	8009c2a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	4798      	blx	r3
 80092b4:	4603      	mov	r3, r0
 80092b6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80092b8:	e004      	b.n	80092c4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80092ba:	6839      	ldr	r1, [r7, #0]
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 fbe9 	bl	8009a94 <USBD_CtlError>
              break;
 80092c2:	e000      	b.n	80092c6 <USBD_StdEPReq+0x154>
              break;
 80092c4:	bf00      	nop
          }
          break;
 80092c6:	e0ab      	b.n	8009420 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d002      	beq.n	80092da <USBD_StdEPReq+0x168>
 80092d4:	2b03      	cmp	r3, #3
 80092d6:	d032      	beq.n	800933e <USBD_StdEPReq+0x1cc>
 80092d8:	e097      	b.n	800940a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092da:	7bbb      	ldrb	r3, [r7, #14]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d007      	beq.n	80092f0 <USBD_StdEPReq+0x17e>
 80092e0:	7bbb      	ldrb	r3, [r7, #14]
 80092e2:	2b80      	cmp	r3, #128	; 0x80
 80092e4:	d004      	beq.n	80092f0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 fbd3 	bl	8009a94 <USBD_CtlError>
                break;
 80092ee:	e091      	b.n	8009414 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	da0b      	bge.n	8009310 <USBD_StdEPReq+0x19e>
 80092f8:	7bbb      	ldrb	r3, [r7, #14]
 80092fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092fe:	4613      	mov	r3, r2
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	4413      	add	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	3310      	adds	r3, #16
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	4413      	add	r3, r2
 800930c:	3304      	adds	r3, #4
 800930e:	e00b      	b.n	8009328 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009310:	7bbb      	ldrb	r3, [r7, #14]
 8009312:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009316:	4613      	mov	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4413      	add	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	4413      	add	r3, r2
 8009326:	3304      	adds	r3, #4
 8009328:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	2200      	movs	r2, #0
 800932e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	2202      	movs	r2, #2
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fc1d 	bl	8009b76 <USBD_CtlSendData>
              break;
 800933c:	e06a      	b.n	8009414 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800933e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009342:	2b00      	cmp	r3, #0
 8009344:	da11      	bge.n	800936a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009346:	7bbb      	ldrb	r3, [r7, #14]
 8009348:	f003 020f 	and.w	r2, r3, #15
 800934c:	6879      	ldr	r1, [r7, #4]
 800934e:	4613      	mov	r3, r2
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	4413      	add	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	440b      	add	r3, r1
 8009358:	3324      	adds	r3, #36	; 0x24
 800935a:	881b      	ldrh	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d117      	bne.n	8009390 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fb96 	bl	8009a94 <USBD_CtlError>
                  break;
 8009368:	e054      	b.n	8009414 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800936a:	7bbb      	ldrb	r3, [r7, #14]
 800936c:	f003 020f 	and.w	r2, r3, #15
 8009370:	6879      	ldr	r1, [r7, #4]
 8009372:	4613      	mov	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4413      	add	r3, r2
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	440b      	add	r3, r1
 800937c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009380:	881b      	ldrh	r3, [r3, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d104      	bne.n	8009390 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009386:	6839      	ldr	r1, [r7, #0]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fb83 	bl	8009a94 <USBD_CtlError>
                  break;
 800938e:	e041      	b.n	8009414 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009394:	2b00      	cmp	r3, #0
 8009396:	da0b      	bge.n	80093b0 <USBD_StdEPReq+0x23e>
 8009398:	7bbb      	ldrb	r3, [r7, #14]
 800939a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800939e:	4613      	mov	r3, r2
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	4413      	add	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	3310      	adds	r3, #16
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	4413      	add	r3, r2
 80093ac:	3304      	adds	r3, #4
 80093ae:	e00b      	b.n	80093c8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093b0:	7bbb      	ldrb	r3, [r7, #14]
 80093b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093b6:	4613      	mov	r3, r2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4413      	add	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	4413      	add	r3, r2
 80093c6:	3304      	adds	r3, #4
 80093c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80093ca:	7bbb      	ldrb	r3, [r7, #14]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d002      	beq.n	80093d6 <USBD_StdEPReq+0x264>
 80093d0:	7bbb      	ldrb	r3, [r7, #14]
 80093d2:	2b80      	cmp	r3, #128	; 0x80
 80093d4:	d103      	bne.n	80093de <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	2200      	movs	r2, #0
 80093da:	601a      	str	r2, [r3, #0]
 80093dc:	e00e      	b.n	80093fc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80093de:	7bbb      	ldrb	r3, [r7, #14]
 80093e0:	4619      	mov	r1, r3
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f001 f91a 	bl	800a61c <USBD_LL_IsStallEP>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d003      	beq.n	80093f6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	2201      	movs	r2, #1
 80093f2:	601a      	str	r2, [r3, #0]
 80093f4:	e002      	b.n	80093fc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	2200      	movs	r2, #0
 80093fa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	2202      	movs	r2, #2
 8009400:	4619      	mov	r1, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fbb7 	bl	8009b76 <USBD_CtlSendData>
              break;
 8009408:	e004      	b.n	8009414 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800940a:	6839      	ldr	r1, [r7, #0]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 fb41 	bl	8009a94 <USBD_CtlError>
              break;
 8009412:	bf00      	nop
          }
          break;
 8009414:	e004      	b.n	8009420 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009416:	6839      	ldr	r1, [r7, #0]
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fb3b 	bl	8009a94 <USBD_CtlError>
          break;
 800941e:	bf00      	nop
      }
      break;
 8009420:	e004      	b.n	800942c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009422:	6839      	ldr	r1, [r7, #0]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 fb35 	bl	8009a94 <USBD_CtlError>
      break;
 800942a:	bf00      	nop
  }

  return ret;
 800942c:	7bfb      	ldrb	r3, [r7, #15]
}
 800942e:	4618      	mov	r0, r3
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
	...

08009438 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009442:	2300      	movs	r3, #0
 8009444:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009446:	2300      	movs	r3, #0
 8009448:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800944a:	2300      	movs	r3, #0
 800944c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	885b      	ldrh	r3, [r3, #2]
 8009452:	0a1b      	lsrs	r3, r3, #8
 8009454:	b29b      	uxth	r3, r3
 8009456:	3b01      	subs	r3, #1
 8009458:	2b06      	cmp	r3, #6
 800945a:	f200 8128 	bhi.w	80096ae <USBD_GetDescriptor+0x276>
 800945e:	a201      	add	r2, pc, #4	; (adr r2, 8009464 <USBD_GetDescriptor+0x2c>)
 8009460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009464:	08009481 	.word	0x08009481
 8009468:	08009499 	.word	0x08009499
 800946c:	080094d9 	.word	0x080094d9
 8009470:	080096af 	.word	0x080096af
 8009474:	080096af 	.word	0x080096af
 8009478:	0800964f 	.word	0x0800964f
 800947c:	0800967b 	.word	0x0800967b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	7c12      	ldrb	r2, [r2, #16]
 800948c:	f107 0108 	add.w	r1, r7, #8
 8009490:	4610      	mov	r0, r2
 8009492:	4798      	blx	r3
 8009494:	60f8      	str	r0, [r7, #12]
      break;
 8009496:	e112      	b.n	80096be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	7c1b      	ldrb	r3, [r3, #16]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10d      	bne.n	80094bc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a8:	f107 0208 	add.w	r2, r7, #8
 80094ac:	4610      	mov	r0, r2
 80094ae:	4798      	blx	r3
 80094b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3301      	adds	r3, #1
 80094b6:	2202      	movs	r2, #2
 80094b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80094ba:	e100      	b.n	80096be <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c4:	f107 0208 	add.w	r2, r7, #8
 80094c8:	4610      	mov	r0, r2
 80094ca:	4798      	blx	r3
 80094cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	3301      	adds	r3, #1
 80094d2:	2202      	movs	r2, #2
 80094d4:	701a      	strb	r2, [r3, #0]
      break;
 80094d6:	e0f2      	b.n	80096be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	885b      	ldrh	r3, [r3, #2]
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	2b05      	cmp	r3, #5
 80094e0:	f200 80ac 	bhi.w	800963c <USBD_GetDescriptor+0x204>
 80094e4:	a201      	add	r2, pc, #4	; (adr r2, 80094ec <USBD_GetDescriptor+0xb4>)
 80094e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ea:	bf00      	nop
 80094ec:	08009505 	.word	0x08009505
 80094f0:	08009539 	.word	0x08009539
 80094f4:	0800956d 	.word	0x0800956d
 80094f8:	080095a1 	.word	0x080095a1
 80094fc:	080095d5 	.word	0x080095d5
 8009500:	08009609 	.word	0x08009609
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00b      	beq.n	8009528 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	7c12      	ldrb	r2, [r2, #16]
 800951c:	f107 0108 	add.w	r1, r7, #8
 8009520:	4610      	mov	r0, r2
 8009522:	4798      	blx	r3
 8009524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009526:	e091      	b.n	800964c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009528:	6839      	ldr	r1, [r7, #0]
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fab2 	bl	8009a94 <USBD_CtlError>
            err++;
 8009530:	7afb      	ldrb	r3, [r7, #11]
 8009532:	3301      	adds	r3, #1
 8009534:	72fb      	strb	r3, [r7, #11]
          break;
 8009536:	e089      	b.n	800964c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00b      	beq.n	800955c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	7c12      	ldrb	r2, [r2, #16]
 8009550:	f107 0108 	add.w	r1, r7, #8
 8009554:	4610      	mov	r0, r2
 8009556:	4798      	blx	r3
 8009558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800955a:	e077      	b.n	800964c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800955c:	6839      	ldr	r1, [r7, #0]
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fa98 	bl	8009a94 <USBD_CtlError>
            err++;
 8009564:	7afb      	ldrb	r3, [r7, #11]
 8009566:	3301      	adds	r3, #1
 8009568:	72fb      	strb	r3, [r7, #11]
          break;
 800956a:	e06f      	b.n	800964c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d00b      	beq.n	8009590 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	7c12      	ldrb	r2, [r2, #16]
 8009584:	f107 0108 	add.w	r1, r7, #8
 8009588:	4610      	mov	r0, r2
 800958a:	4798      	blx	r3
 800958c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800958e:	e05d      	b.n	800964c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009590:	6839      	ldr	r1, [r7, #0]
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 fa7e 	bl	8009a94 <USBD_CtlError>
            err++;
 8009598:	7afb      	ldrb	r3, [r7, #11]
 800959a:	3301      	adds	r3, #1
 800959c:	72fb      	strb	r3, [r7, #11]
          break;
 800959e:	e055      	b.n	800964c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00b      	beq.n	80095c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	7c12      	ldrb	r2, [r2, #16]
 80095b8:	f107 0108 	add.w	r1, r7, #8
 80095bc:	4610      	mov	r0, r2
 80095be:	4798      	blx	r3
 80095c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095c2:	e043      	b.n	800964c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095c4:	6839      	ldr	r1, [r7, #0]
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 fa64 	bl	8009a94 <USBD_CtlError>
            err++;
 80095cc:	7afb      	ldrb	r3, [r7, #11]
 80095ce:	3301      	adds	r3, #1
 80095d0:	72fb      	strb	r3, [r7, #11]
          break;
 80095d2:	e03b      	b.n	800964c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095da:	695b      	ldr	r3, [r3, #20]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00b      	beq.n	80095f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095e6:	695b      	ldr	r3, [r3, #20]
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	7c12      	ldrb	r2, [r2, #16]
 80095ec:	f107 0108 	add.w	r1, r7, #8
 80095f0:	4610      	mov	r0, r2
 80095f2:	4798      	blx	r3
 80095f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095f6:	e029      	b.n	800964c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 fa4a 	bl	8009a94 <USBD_CtlError>
            err++;
 8009600:	7afb      	ldrb	r3, [r7, #11]
 8009602:	3301      	adds	r3, #1
 8009604:	72fb      	strb	r3, [r7, #11]
          break;
 8009606:	e021      	b.n	800964c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d00b      	beq.n	800962c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800961a:	699b      	ldr	r3, [r3, #24]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	7c12      	ldrb	r2, [r2, #16]
 8009620:	f107 0108 	add.w	r1, r7, #8
 8009624:	4610      	mov	r0, r2
 8009626:	4798      	blx	r3
 8009628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800962a:	e00f      	b.n	800964c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800962c:	6839      	ldr	r1, [r7, #0]
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fa30 	bl	8009a94 <USBD_CtlError>
            err++;
 8009634:	7afb      	ldrb	r3, [r7, #11]
 8009636:	3301      	adds	r3, #1
 8009638:	72fb      	strb	r3, [r7, #11]
          break;
 800963a:	e007      	b.n	800964c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fa28 	bl	8009a94 <USBD_CtlError>
          err++;
 8009644:	7afb      	ldrb	r3, [r7, #11]
 8009646:	3301      	adds	r3, #1
 8009648:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800964a:	bf00      	nop
      }
      break;
 800964c:	e037      	b.n	80096be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	7c1b      	ldrb	r3, [r3, #16]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d109      	bne.n	800966a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800965c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800965e:	f107 0208 	add.w	r2, r7, #8
 8009662:	4610      	mov	r0, r2
 8009664:	4798      	blx	r3
 8009666:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009668:	e029      	b.n	80096be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 fa11 	bl	8009a94 <USBD_CtlError>
        err++;
 8009672:	7afb      	ldrb	r3, [r7, #11]
 8009674:	3301      	adds	r3, #1
 8009676:	72fb      	strb	r3, [r7, #11]
      break;
 8009678:	e021      	b.n	80096be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	7c1b      	ldrb	r3, [r3, #16]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10d      	bne.n	800969e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800968a:	f107 0208 	add.w	r2, r7, #8
 800968e:	4610      	mov	r0, r2
 8009690:	4798      	blx	r3
 8009692:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	3301      	adds	r3, #1
 8009698:	2207      	movs	r2, #7
 800969a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800969c:	e00f      	b.n	80096be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800969e:	6839      	ldr	r1, [r7, #0]
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 f9f7 	bl	8009a94 <USBD_CtlError>
        err++;
 80096a6:	7afb      	ldrb	r3, [r7, #11]
 80096a8:	3301      	adds	r3, #1
 80096aa:	72fb      	strb	r3, [r7, #11]
      break;
 80096ac:	e007      	b.n	80096be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80096ae:	6839      	ldr	r1, [r7, #0]
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 f9ef 	bl	8009a94 <USBD_CtlError>
      err++;
 80096b6:	7afb      	ldrb	r3, [r7, #11]
 80096b8:	3301      	adds	r3, #1
 80096ba:	72fb      	strb	r3, [r7, #11]
      break;
 80096bc:	bf00      	nop
  }

  if (err != 0U)
 80096be:	7afb      	ldrb	r3, [r7, #11]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d11e      	bne.n	8009702 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	88db      	ldrh	r3, [r3, #6]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d016      	beq.n	80096fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80096cc:	893b      	ldrh	r3, [r7, #8]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00e      	beq.n	80096f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	88da      	ldrh	r2, [r3, #6]
 80096d6:	893b      	ldrh	r3, [r7, #8]
 80096d8:	4293      	cmp	r3, r2
 80096da:	bf28      	it	cs
 80096dc:	4613      	movcs	r3, r2
 80096de:	b29b      	uxth	r3, r3
 80096e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80096e2:	893b      	ldrh	r3, [r7, #8]
 80096e4:	461a      	mov	r2, r3
 80096e6:	68f9      	ldr	r1, [r7, #12]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fa44 	bl	8009b76 <USBD_CtlSendData>
 80096ee:	e009      	b.n	8009704 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f9ce 	bl	8009a94 <USBD_CtlError>
 80096f8:	e004      	b.n	8009704 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fa95 	bl	8009c2a <USBD_CtlSendStatus>
 8009700:	e000      	b.n	8009704 <USBD_GetDescriptor+0x2cc>
    return;
 8009702:	bf00      	nop
  }
}
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop

0800970c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	889b      	ldrh	r3, [r3, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d131      	bne.n	8009782 <USBD_SetAddress+0x76>
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	88db      	ldrh	r3, [r3, #6]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d12d      	bne.n	8009782 <USBD_SetAddress+0x76>
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	885b      	ldrh	r3, [r3, #2]
 800972a:	2b7f      	cmp	r3, #127	; 0x7f
 800972c:	d829      	bhi.n	8009782 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	885b      	ldrh	r3, [r3, #2]
 8009732:	b2db      	uxtb	r3, r3
 8009734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009738:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009740:	b2db      	uxtb	r3, r3
 8009742:	2b03      	cmp	r3, #3
 8009744:	d104      	bne.n	8009750 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009746:	6839      	ldr	r1, [r7, #0]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 f9a3 	bl	8009a94 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800974e:	e01d      	b.n	800978c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	7bfa      	ldrb	r2, [r7, #15]
 8009754:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009758:	7bfb      	ldrb	r3, [r7, #15]
 800975a:	4619      	mov	r1, r3
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 ff89 	bl	800a674 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 fa61 	bl	8009c2a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009768:	7bfb      	ldrb	r3, [r7, #15]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d004      	beq.n	8009778 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2202      	movs	r2, #2
 8009772:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009776:	e009      	b.n	800978c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009780:	e004      	b.n	800978c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009782:	6839      	ldr	r1, [r7, #0]
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 f985 	bl	8009a94 <USBD_CtlError>
  }
}
 800978a:	bf00      	nop
 800978c:	bf00      	nop
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800979e:	2300      	movs	r3, #0
 80097a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	885b      	ldrh	r3, [r3, #2]
 80097a6:	b2da      	uxtb	r2, r3
 80097a8:	4b4c      	ldr	r3, [pc, #304]	; (80098dc <USBD_SetConfig+0x148>)
 80097aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80097ac:	4b4b      	ldr	r3, [pc, #300]	; (80098dc <USBD_SetConfig+0x148>)
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d905      	bls.n	80097c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80097b4:	6839      	ldr	r1, [r7, #0]
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 f96c 	bl	8009a94 <USBD_CtlError>
    return USBD_FAIL;
 80097bc:	2303      	movs	r3, #3
 80097be:	e088      	b.n	80098d2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d002      	beq.n	80097d2 <USBD_SetConfig+0x3e>
 80097cc:	2b03      	cmp	r3, #3
 80097ce:	d025      	beq.n	800981c <USBD_SetConfig+0x88>
 80097d0:	e071      	b.n	80098b6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80097d2:	4b42      	ldr	r3, [pc, #264]	; (80098dc <USBD_SetConfig+0x148>)
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d01c      	beq.n	8009814 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80097da:	4b40      	ldr	r3, [pc, #256]	; (80098dc <USBD_SetConfig+0x148>)
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	461a      	mov	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80097e4:	4b3d      	ldr	r3, [pc, #244]	; (80098dc <USBD_SetConfig+0x148>)
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	4619      	mov	r1, r3
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7ff f948 	bl	8008a80 <USBD_SetClassConfig>
 80097f0:	4603      	mov	r3, r0
 80097f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80097f4:	7bfb      	ldrb	r3, [r7, #15]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d004      	beq.n	8009804 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80097fa:	6839      	ldr	r1, [r7, #0]
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 f949 	bl	8009a94 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009802:	e065      	b.n	80098d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 fa10 	bl	8009c2a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2203      	movs	r2, #3
 800980e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009812:	e05d      	b.n	80098d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 fa08 	bl	8009c2a <USBD_CtlSendStatus>
      break;
 800981a:	e059      	b.n	80098d0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800981c:	4b2f      	ldr	r3, [pc, #188]	; (80098dc <USBD_SetConfig+0x148>)
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d112      	bne.n	800984a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2202      	movs	r2, #2
 8009828:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800982c:	4b2b      	ldr	r3, [pc, #172]	; (80098dc <USBD_SetConfig+0x148>)
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	461a      	mov	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009836:	4b29      	ldr	r3, [pc, #164]	; (80098dc <USBD_SetConfig+0x148>)
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	4619      	mov	r1, r3
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f7ff f93b 	bl	8008ab8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f9f1 	bl	8009c2a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009848:	e042      	b.n	80098d0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800984a:	4b24      	ldr	r3, [pc, #144]	; (80098dc <USBD_SetConfig+0x148>)
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	461a      	mov	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	429a      	cmp	r2, r3
 8009856:	d02a      	beq.n	80098ae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	b2db      	uxtb	r3, r3
 800985e:	4619      	mov	r1, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f7ff f929 	bl	8008ab8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009866:	4b1d      	ldr	r3, [pc, #116]	; (80098dc <USBD_SetConfig+0x148>)
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	461a      	mov	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009870:	4b1a      	ldr	r3, [pc, #104]	; (80098dc <USBD_SetConfig+0x148>)
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	4619      	mov	r1, r3
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f7ff f902 	bl	8008a80 <USBD_SetClassConfig>
 800987c:	4603      	mov	r3, r0
 800987e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009880:	7bfb      	ldrb	r3, [r7, #15]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00f      	beq.n	80098a6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f903 	bl	8009a94 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	b2db      	uxtb	r3, r3
 8009894:	4619      	mov	r1, r3
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f7ff f90e 	bl	8008ab8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2202      	movs	r2, #2
 80098a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80098a4:	e014      	b.n	80098d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f9bf 	bl	8009c2a <USBD_CtlSendStatus>
      break;
 80098ac:	e010      	b.n	80098d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 f9bb 	bl	8009c2a <USBD_CtlSendStatus>
      break;
 80098b4:	e00c      	b.n	80098d0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80098b6:	6839      	ldr	r1, [r7, #0]
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 f8eb 	bl	8009a94 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80098be:	4b07      	ldr	r3, [pc, #28]	; (80098dc <USBD_SetConfig+0x148>)
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	4619      	mov	r1, r3
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f7ff f8f7 	bl	8008ab8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80098ca:	2303      	movs	r3, #3
 80098cc:	73fb      	strb	r3, [r7, #15]
      break;
 80098ce:	bf00      	nop
  }

  return ret;
 80098d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	2000020c 	.word	0x2000020c

080098e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	88db      	ldrh	r3, [r3, #6]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d004      	beq.n	80098fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80098f2:	6839      	ldr	r1, [r7, #0]
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 f8cd 	bl	8009a94 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80098fa:	e023      	b.n	8009944 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009902:	b2db      	uxtb	r3, r3
 8009904:	2b02      	cmp	r3, #2
 8009906:	dc02      	bgt.n	800990e <USBD_GetConfig+0x2e>
 8009908:	2b00      	cmp	r3, #0
 800990a:	dc03      	bgt.n	8009914 <USBD_GetConfig+0x34>
 800990c:	e015      	b.n	800993a <USBD_GetConfig+0x5a>
 800990e:	2b03      	cmp	r3, #3
 8009910:	d00b      	beq.n	800992a <USBD_GetConfig+0x4a>
 8009912:	e012      	b.n	800993a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	3308      	adds	r3, #8
 800991e:	2201      	movs	r2, #1
 8009920:	4619      	mov	r1, r3
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 f927 	bl	8009b76 <USBD_CtlSendData>
        break;
 8009928:	e00c      	b.n	8009944 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	3304      	adds	r3, #4
 800992e:	2201      	movs	r2, #1
 8009930:	4619      	mov	r1, r3
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 f91f 	bl	8009b76 <USBD_CtlSendData>
        break;
 8009938:	e004      	b.n	8009944 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800993a:	6839      	ldr	r1, [r7, #0]
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f8a9 	bl	8009a94 <USBD_CtlError>
        break;
 8009942:	bf00      	nop
}
 8009944:	bf00      	nop
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800995c:	b2db      	uxtb	r3, r3
 800995e:	3b01      	subs	r3, #1
 8009960:	2b02      	cmp	r3, #2
 8009962:	d81e      	bhi.n	80099a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	88db      	ldrh	r3, [r3, #6]
 8009968:	2b02      	cmp	r3, #2
 800996a:	d004      	beq.n	8009976 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800996c:	6839      	ldr	r1, [r7, #0]
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f890 	bl	8009a94 <USBD_CtlError>
        break;
 8009974:	e01a      	b.n	80099ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2201      	movs	r2, #1
 800997a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009982:	2b00      	cmp	r3, #0
 8009984:	d005      	beq.n	8009992 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	f043 0202 	orr.w	r2, r3, #2
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	330c      	adds	r3, #12
 8009996:	2202      	movs	r2, #2
 8009998:	4619      	mov	r1, r3
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 f8eb 	bl	8009b76 <USBD_CtlSendData>
      break;
 80099a0:	e004      	b.n	80099ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80099a2:	6839      	ldr	r1, [r7, #0]
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f875 	bl	8009a94 <USBD_CtlError>
      break;
 80099aa:	bf00      	nop
  }
}
 80099ac:	bf00      	nop
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	885b      	ldrh	r3, [r3, #2]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d106      	bne.n	80099d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2201      	movs	r2, #1
 80099ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f92b 	bl	8009c2a <USBD_CtlSendStatus>
  }
}
 80099d4:	bf00      	nop
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	3b01      	subs	r3, #1
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	d80b      	bhi.n	8009a0c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	885b      	ldrh	r3, [r3, #2]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d10c      	bne.n	8009a16 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f910 	bl	8009c2a <USBD_CtlSendStatus>
      }
      break;
 8009a0a:	e004      	b.n	8009a16 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009a0c:	6839      	ldr	r1, [r7, #0]
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f840 	bl	8009a94 <USBD_CtlError>
      break;
 8009a14:	e000      	b.n	8009a18 <USBD_ClrFeature+0x3c>
      break;
 8009a16:	bf00      	nop
  }
}
 8009a18:	bf00      	nop
 8009a1a:	3708      	adds	r7, #8
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	781a      	ldrb	r2, [r3, #0]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	781a      	ldrb	r2, [r3, #0]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	3301      	adds	r3, #1
 8009a48:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f7ff fabb 	bl	8008fc6 <SWAPBYTE>
 8009a50:	4603      	mov	r3, r0
 8009a52:	461a      	mov	r2, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	3301      	adds	r3, #1
 8009a62:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	f7ff faae 	bl	8008fc6 <SWAPBYTE>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	3301      	adds	r3, #1
 8009a76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	f7ff faa1 	bl	8008fc6 <SWAPBYTE>
 8009a84:	4603      	mov	r3, r0
 8009a86:	461a      	mov	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	80da      	strh	r2, [r3, #6]
}
 8009a8c:	bf00      	nop
 8009a8e:	3710      	adds	r7, #16
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a9e:	2180      	movs	r1, #128	; 0x80
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fd7d 	bl	800a5a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fd79 	bl	800a5a0 <USBD_LL_StallEP>
}
 8009aae:	bf00      	nop
 8009ab0:	3708      	adds	r7, #8
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ab6:	b580      	push	{r7, lr}
 8009ab8:	b086      	sub	sp, #24
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	60f8      	str	r0, [r7, #12]
 8009abe:	60b9      	str	r1, [r7, #8]
 8009ac0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d036      	beq.n	8009b3a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009ad0:	6938      	ldr	r0, [r7, #16]
 8009ad2:	f000 f836 	bl	8009b42 <USBD_GetLen>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	3301      	adds	r3, #1
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	005b      	lsls	r3, r3, #1
 8009ade:	b29a      	uxth	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009ae4:	7dfb      	ldrb	r3, [r7, #23]
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	4413      	add	r3, r2
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	7812      	ldrb	r2, [r2, #0]
 8009aee:	701a      	strb	r2, [r3, #0]
  idx++;
 8009af0:	7dfb      	ldrb	r3, [r7, #23]
 8009af2:	3301      	adds	r3, #1
 8009af4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
 8009af8:	68ba      	ldr	r2, [r7, #8]
 8009afa:	4413      	add	r3, r2
 8009afc:	2203      	movs	r2, #3
 8009afe:	701a      	strb	r2, [r3, #0]
  idx++;
 8009b00:	7dfb      	ldrb	r3, [r7, #23]
 8009b02:	3301      	adds	r3, #1
 8009b04:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009b06:	e013      	b.n	8009b30 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009b08:	7dfb      	ldrb	r3, [r7, #23]
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	693a      	ldr	r2, [r7, #16]
 8009b10:	7812      	ldrb	r2, [r2, #0]
 8009b12:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	3301      	adds	r3, #1
 8009b18:	613b      	str	r3, [r7, #16]
    idx++;
 8009b1a:	7dfb      	ldrb	r3, [r7, #23]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009b20:	7dfb      	ldrb	r3, [r7, #23]
 8009b22:	68ba      	ldr	r2, [r7, #8]
 8009b24:	4413      	add	r3, r2
 8009b26:	2200      	movs	r2, #0
 8009b28:	701a      	strb	r2, [r3, #0]
    idx++;
 8009b2a:	7dfb      	ldrb	r3, [r7, #23]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d1e7      	bne.n	8009b08 <USBD_GetString+0x52>
 8009b38:	e000      	b.n	8009b3c <USBD_GetString+0x86>
    return;
 8009b3a:	bf00      	nop
  }
}
 8009b3c:	3718      	adds	r7, #24
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009b42:	b480      	push	{r7}
 8009b44:	b085      	sub	sp, #20
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009b52:	e005      	b.n	8009b60 <USBD_GetLen+0x1e>
  {
    len++;
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
 8009b56:	3301      	adds	r3, #1
 8009b58:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1f5      	bne.n	8009b54 <USBD_GetLen+0x12>
  }

  return len;
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3714      	adds	r7, #20
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b084      	sub	sp, #16
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	60f8      	str	r0, [r7, #12]
 8009b7e:	60b9      	str	r1, [r7, #8]
 8009b80:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2202      	movs	r2, #2
 8009b86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f000 fd88 	bl	800a6b2 <USBD_LL_Transmit>

  return USBD_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f000 fd77 	bl	800a6b2 <USBD_LL_Transmit>

  return USBD_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b084      	sub	sp, #16
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	60f8      	str	r0, [r7, #12]
 8009bd6:	60b9      	str	r1, [r7, #8]
 8009bd8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2203      	movs	r2, #3
 8009bde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	68f8      	ldr	r0, [r7, #12]
 8009bfa:	f000 fd7b 	bl	800a6f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	68ba      	ldr	r2, [r7, #8]
 8009c18:	2100      	movs	r1, #0
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f000 fd6a 	bl	800a6f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b082      	sub	sp, #8
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2204      	movs	r2, #4
 8009c36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	2100      	movs	r1, #0
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 fd36 	bl	800a6b2 <USBD_LL_Transmit>

  return USBD_OK;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2205      	movs	r2, #5
 8009c5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c60:	2300      	movs	r3, #0
 8009c62:	2200      	movs	r2, #0
 8009c64:	2100      	movs	r1, #0
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fd44 	bl	800a6f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3708      	adds	r7, #8
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
	...

08009c78 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b087      	sub	sp, #28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	4613      	mov	r3, r2
 8009c84:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009c86:	2301      	movs	r3, #1
 8009c88:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009c8e:	4b1f      	ldr	r3, [pc, #124]	; (8009d0c <FATFS_LinkDriverEx+0x94>)
 8009c90:	7a5b      	ldrb	r3, [r3, #9]
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d131      	bne.n	8009cfc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009c98:	4b1c      	ldr	r3, [pc, #112]	; (8009d0c <FATFS_LinkDriverEx+0x94>)
 8009c9a:	7a5b      	ldrb	r3, [r3, #9]
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	4b1a      	ldr	r3, [pc, #104]	; (8009d0c <FATFS_LinkDriverEx+0x94>)
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009ca6:	4b19      	ldr	r3, [pc, #100]	; (8009d0c <FATFS_LinkDriverEx+0x94>)
 8009ca8:	7a5b      	ldrb	r3, [r3, #9]
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	4a17      	ldr	r2, [pc, #92]	; (8009d0c <FATFS_LinkDriverEx+0x94>)
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	4413      	add	r3, r2
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009cb6:	4b15      	ldr	r3, [pc, #84]	; (8009d0c <FATFS_LinkDriverEx+0x94>)
 8009cb8:	7a5b      	ldrb	r3, [r3, #9]
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	4b13      	ldr	r3, [pc, #76]	; (8009d0c <FATFS_LinkDriverEx+0x94>)
 8009cc0:	4413      	add	r3, r2
 8009cc2:	79fa      	ldrb	r2, [r7, #7]
 8009cc4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009cc6:	4b11      	ldr	r3, [pc, #68]	; (8009d0c <FATFS_LinkDriverEx+0x94>)
 8009cc8:	7a5b      	ldrb	r3, [r3, #9]
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	1c5a      	adds	r2, r3, #1
 8009cce:	b2d1      	uxtb	r1, r2
 8009cd0:	4a0e      	ldr	r2, [pc, #56]	; (8009d0c <FATFS_LinkDriverEx+0x94>)
 8009cd2:	7251      	strb	r1, [r2, #9]
 8009cd4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009cd6:	7dbb      	ldrb	r3, [r7, #22]
 8009cd8:	3330      	adds	r3, #48	; 0x30
 8009cda:	b2da      	uxtb	r2, r3
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	223a      	movs	r2, #58	; 0x3a
 8009ce6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	3302      	adds	r3, #2
 8009cec:	222f      	movs	r2, #47	; 0x2f
 8009cee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	3303      	adds	r3, #3
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	371c      	adds	r7, #28
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	20000210 	.word	0x20000210

08009d10 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	6839      	ldr	r1, [r7, #0]
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7ff ffaa 	bl	8009c78 <FATFS_LinkDriverEx>
 8009d24:	4603      	mov	r3, r0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
	...

08009d30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009d34:	2200      	movs	r2, #0
 8009d36:	4912      	ldr	r1, [pc, #72]	; (8009d80 <MX_USB_DEVICE_Init+0x50>)
 8009d38:	4812      	ldr	r0, [pc, #72]	; (8009d84 <MX_USB_DEVICE_Init+0x54>)
 8009d3a:	f7fe fe33 	bl	80089a4 <USBD_Init>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d001      	beq.n	8009d48 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d44:	f7f6 fdf6 	bl	8000934 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009d48:	490f      	ldr	r1, [pc, #60]	; (8009d88 <MX_USB_DEVICE_Init+0x58>)
 8009d4a:	480e      	ldr	r0, [pc, #56]	; (8009d84 <MX_USB_DEVICE_Init+0x54>)
 8009d4c:	f7fe fe5a 	bl	8008a04 <USBD_RegisterClass>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d001      	beq.n	8009d5a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009d56:	f7f6 fded 	bl	8000934 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009d5a:	490c      	ldr	r1, [pc, #48]	; (8009d8c <MX_USB_DEVICE_Init+0x5c>)
 8009d5c:	4809      	ldr	r0, [pc, #36]	; (8009d84 <MX_USB_DEVICE_Init+0x54>)
 8009d5e:	f7fe fd7b 	bl	8008858 <USBD_CDC_RegisterInterface>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d001      	beq.n	8009d6c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009d68:	f7f6 fde4 	bl	8000934 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009d6c:	4805      	ldr	r0, [pc, #20]	; (8009d84 <MX_USB_DEVICE_Init+0x54>)
 8009d6e:	f7fe fe70 	bl	8008a52 <USBD_Start>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d001      	beq.n	8009d7c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009d78:	f7f6 fddc 	bl	8000934 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009d7c:	bf00      	nop
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	20000130 	.word	0x20000130
 8009d84:	20000a48 	.word	0x20000a48
 8009d88:	20000018 	.word	0x20000018
 8009d8c:	2000011c 	.word	0x2000011c

08009d90 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009d94:	2200      	movs	r2, #0
 8009d96:	4905      	ldr	r1, [pc, #20]	; (8009dac <CDC_Init_FS+0x1c>)
 8009d98:	4805      	ldr	r0, [pc, #20]	; (8009db0 <CDC_Init_FS+0x20>)
 8009d9a:	f7fe fd72 	bl	8008882 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009d9e:	4905      	ldr	r1, [pc, #20]	; (8009db4 <CDC_Init_FS+0x24>)
 8009da0:	4803      	ldr	r0, [pc, #12]	; (8009db0 <CDC_Init_FS+0x20>)
 8009da2:	f7fe fd8c 	bl	80088be <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009da6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	20001518 	.word	0x20001518
 8009db0:	20000a48 	.word	0x20000a48
 8009db4:	20000d18 	.word	0x20000d18

08009db8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009db8:	b480      	push	{r7}
 8009dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009dbc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	4603      	mov	r3, r0
 8009dd0:	6039      	str	r1, [r7, #0]
 8009dd2:	71fb      	strb	r3, [r7, #7]
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 8009dd8:	4a49      	ldr	r2, [pc, #292]	; (8009f00 <CDC_Control_FS+0x138>)
 8009dda:	f107 0308 	add.w	r3, r7, #8
 8009dde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009de2:	6018      	str	r0, [r3, #0]
 8009de4:	3304      	adds	r3, #4
 8009de6:	8019      	strh	r1, [r3, #0]
 8009de8:	3302      	adds	r3, #2
 8009dea:	0c0a      	lsrs	r2, r1, #16
 8009dec:	701a      	strb	r2, [r3, #0]
  switch(cmd)
 8009dee:	79fb      	ldrb	r3, [r7, #7]
 8009df0:	2b23      	cmp	r3, #35	; 0x23
 8009df2:	d87d      	bhi.n	8009ef0 <CDC_Control_FS+0x128>
 8009df4:	a201      	add	r2, pc, #4	; (adr r2, 8009dfc <CDC_Control_FS+0x34>)
 8009df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfa:	bf00      	nop
 8009dfc:	08009ef1 	.word	0x08009ef1
 8009e00:	08009ef1 	.word	0x08009ef1
 8009e04:	08009ef1 	.word	0x08009ef1
 8009e08:	08009ef1 	.word	0x08009ef1
 8009e0c:	08009ef1 	.word	0x08009ef1
 8009e10:	08009ef1 	.word	0x08009ef1
 8009e14:	08009ef1 	.word	0x08009ef1
 8009e18:	08009ef1 	.word	0x08009ef1
 8009e1c:	08009ef1 	.word	0x08009ef1
 8009e20:	08009ef1 	.word	0x08009ef1
 8009e24:	08009ef1 	.word	0x08009ef1
 8009e28:	08009ef1 	.word	0x08009ef1
 8009e2c:	08009ef1 	.word	0x08009ef1
 8009e30:	08009ef1 	.word	0x08009ef1
 8009e34:	08009ef1 	.word	0x08009ef1
 8009e38:	08009ef1 	.word	0x08009ef1
 8009e3c:	08009ef1 	.word	0x08009ef1
 8009e40:	08009ef1 	.word	0x08009ef1
 8009e44:	08009ef1 	.word	0x08009ef1
 8009e48:	08009ef1 	.word	0x08009ef1
 8009e4c:	08009ef1 	.word	0x08009ef1
 8009e50:	08009ef1 	.word	0x08009ef1
 8009e54:	08009ef1 	.word	0x08009ef1
 8009e58:	08009ef1 	.word	0x08009ef1
 8009e5c:	08009ef1 	.word	0x08009ef1
 8009e60:	08009ef1 	.word	0x08009ef1
 8009e64:	08009ef1 	.word	0x08009ef1
 8009e68:	08009ef1 	.word	0x08009ef1
 8009e6c:	08009ef1 	.word	0x08009ef1
 8009e70:	08009ef1 	.word	0x08009ef1
 8009e74:	08009ef1 	.word	0x08009ef1
 8009e78:	08009ef1 	.word	0x08009ef1
 8009e7c:	08009e8d 	.word	0x08009e8d
 8009e80:	08009eb9 	.word	0x08009eb9
 8009e84:	08009ef1 	.word	0x08009ef1
 8009e88:	08009ef1 	.word	0x08009ef1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
       tempbuf[0] = pbuf[0];
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	723b      	strb	r3, [r7, #8]
       tempbuf[1] = pbuf[1];
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	785b      	ldrb	r3, [r3, #1]
 8009e96:	727b      	strb	r3, [r7, #9]
       tempbuf[2] = pbuf[2];
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	789b      	ldrb	r3, [r3, #2]
 8009e9c:	72bb      	strb	r3, [r7, #10]
       tempbuf[3] = pbuf[3];
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	78db      	ldrb	r3, [r3, #3]
 8009ea2:	72fb      	strb	r3, [r7, #11]
       tempbuf[4] = pbuf[4];
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	791b      	ldrb	r3, [r3, #4]
 8009ea8:	733b      	strb	r3, [r7, #12]
       tempbuf[5] = pbuf[5];
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	795b      	ldrb	r3, [r3, #5]
 8009eae:	737b      	strb	r3, [r7, #13]
       tempbuf[6] = pbuf[6];
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	799b      	ldrb	r3, [r3, #6]
 8009eb4:	73bb      	strb	r3, [r7, #14]
       break;
 8009eb6:	e01c      	b.n	8009ef2 <CDC_Control_FS+0x12a>

     case CDC_GET_LINE_CODING:
       pbuf[0] = tempbuf[0];
 8009eb8:	7a3a      	ldrb	r2, [r7, #8]
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	701a      	strb	r2, [r3, #0]
       pbuf[1] = tempbuf[1];
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	7a7a      	ldrb	r2, [r7, #9]
 8009ec4:	701a      	strb	r2, [r3, #0]
       pbuf[2] = tempbuf[2];
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	3302      	adds	r3, #2
 8009eca:	7aba      	ldrb	r2, [r7, #10]
 8009ecc:	701a      	strb	r2, [r3, #0]
       pbuf[3] = tempbuf[3];
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	3303      	adds	r3, #3
 8009ed2:	7afa      	ldrb	r2, [r7, #11]
 8009ed4:	701a      	strb	r2, [r3, #0]
       pbuf[4] = tempbuf[4];
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	3304      	adds	r3, #4
 8009eda:	7b3a      	ldrb	r2, [r7, #12]
 8009edc:	701a      	strb	r2, [r3, #0]
       pbuf[5] = tempbuf[5];
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	3305      	adds	r3, #5
 8009ee2:	7b7a      	ldrb	r2, [r7, #13]
 8009ee4:	701a      	strb	r2, [r3, #0]
       pbuf[6] = tempbuf[6];
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	3306      	adds	r3, #6
 8009eea:	7bba      	ldrb	r2, [r7, #14]
 8009eec:	701a      	strb	r2, [r3, #0]
       break;
 8009eee:	e000      	b.n	8009ef2 <CDC_Control_FS+0x12a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009ef0:	bf00      	nop
  }

  return (USBD_OK);
 8009ef2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3714      	adds	r7, #20
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr
 8009f00:	0800b11c 	.word	0x0800b11c

08009f04 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009f0e:	6879      	ldr	r1, [r7, #4]
 8009f10:	4805      	ldr	r0, [pc, #20]	; (8009f28 <CDC_Receive_FS+0x24>)
 8009f12:	f7fe fcd4 	bl	80088be <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009f16:	4804      	ldr	r0, [pc, #16]	; (8009f28 <CDC_Receive_FS+0x24>)
 8009f18:	f7fe fd1a 	bl	8008950 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009f1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3708      	adds	r7, #8
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	20000a48 	.word	0x20000a48

08009f2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	460b      	mov	r3, r1
 8009f36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009f3c:	4b0d      	ldr	r3, [pc, #52]	; (8009f74 <CDC_Transmit_FS+0x48>)
 8009f3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d001      	beq.n	8009f52 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e00b      	b.n	8009f6a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009f52:	887b      	ldrh	r3, [r7, #2]
 8009f54:	461a      	mov	r2, r3
 8009f56:	6879      	ldr	r1, [r7, #4]
 8009f58:	4806      	ldr	r0, [pc, #24]	; (8009f74 <CDC_Transmit_FS+0x48>)
 8009f5a:	f7fe fc92 	bl	8008882 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009f5e:	4805      	ldr	r0, [pc, #20]	; (8009f74 <CDC_Transmit_FS+0x48>)
 8009f60:	f7fe fcc6 	bl	80088f0 <USBD_CDC_TransmitPacket>
 8009f64:	4603      	mov	r3, r0
 8009f66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	20000a48 	.word	0x20000a48

08009f78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b087      	sub	sp, #28
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	4613      	mov	r3, r2
 8009f84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009f8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	371c      	adds	r7, #28
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr
	...

08009f9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	6039      	str	r1, [r7, #0]
 8009fa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	2212      	movs	r2, #18
 8009fac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009fae:	4b03      	ldr	r3, [pc, #12]	; (8009fbc <USBD_FS_DeviceDescriptor+0x20>)
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	2000014c 	.word	0x2000014c

08009fc0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	6039      	str	r1, [r7, #0]
 8009fca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	2204      	movs	r2, #4
 8009fd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009fd2:	4b03      	ldr	r3, [pc, #12]	; (8009fe0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr
 8009fe0:	20000160 	.word	0x20000160

08009fe4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	4603      	mov	r3, r0
 8009fec:	6039      	str	r1, [r7, #0]
 8009fee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ff0:	79fb      	ldrb	r3, [r7, #7]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d105      	bne.n	800a002 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ff6:	683a      	ldr	r2, [r7, #0]
 8009ff8:	4907      	ldr	r1, [pc, #28]	; (800a018 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ffa:	4808      	ldr	r0, [pc, #32]	; (800a01c <USBD_FS_ProductStrDescriptor+0x38>)
 8009ffc:	f7ff fd5b 	bl	8009ab6 <USBD_GetString>
 800a000:	e004      	b.n	800a00c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	4904      	ldr	r1, [pc, #16]	; (800a018 <USBD_FS_ProductStrDescriptor+0x34>)
 800a006:	4805      	ldr	r0, [pc, #20]	; (800a01c <USBD_FS_ProductStrDescriptor+0x38>)
 800a008:	f7ff fd55 	bl	8009ab6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a00c:	4b02      	ldr	r3, [pc, #8]	; (800a018 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3708      	adds	r7, #8
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	20001d18 	.word	0x20001d18
 800a01c:	0800b124 	.word	0x0800b124

0800a020 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	4603      	mov	r3, r0
 800a028:	6039      	str	r1, [r7, #0]
 800a02a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a02c:	683a      	ldr	r2, [r7, #0]
 800a02e:	4904      	ldr	r1, [pc, #16]	; (800a040 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a030:	4804      	ldr	r0, [pc, #16]	; (800a044 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a032:	f7ff fd40 	bl	8009ab6 <USBD_GetString>
  return USBD_StrDesc;
 800a036:	4b02      	ldr	r3, [pc, #8]	; (800a040 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	20001d18 	.word	0x20001d18
 800a044:	0800b13c 	.word	0x0800b13c

0800a048 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	4603      	mov	r3, r0
 800a050:	6039      	str	r1, [r7, #0]
 800a052:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	221a      	movs	r2, #26
 800a058:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a05a:	f000 f843 	bl	800a0e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a05e:	4b02      	ldr	r3, [pc, #8]	; (800a068 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a060:	4618      	mov	r0, r3
 800a062:	3708      	adds	r7, #8
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	20000164 	.word	0x20000164

0800a06c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	4603      	mov	r3, r0
 800a074:	6039      	str	r1, [r7, #0]
 800a076:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a078:	79fb      	ldrb	r3, [r7, #7]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d105      	bne.n	800a08a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a07e:	683a      	ldr	r2, [r7, #0]
 800a080:	4907      	ldr	r1, [pc, #28]	; (800a0a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a082:	4808      	ldr	r0, [pc, #32]	; (800a0a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a084:	f7ff fd17 	bl	8009ab6 <USBD_GetString>
 800a088:	e004      	b.n	800a094 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a08a:	683a      	ldr	r2, [r7, #0]
 800a08c:	4904      	ldr	r1, [pc, #16]	; (800a0a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a08e:	4805      	ldr	r0, [pc, #20]	; (800a0a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a090:	f7ff fd11 	bl	8009ab6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a094:	4b02      	ldr	r3, [pc, #8]	; (800a0a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a096:	4618      	mov	r0, r3
 800a098:	3708      	adds	r7, #8
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	20001d18 	.word	0x20001d18
 800a0a4:	0800b150 	.word	0x0800b150

0800a0a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	6039      	str	r1, [r7, #0]
 800a0b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a0b4:	79fb      	ldrb	r3, [r7, #7]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d105      	bne.n	800a0c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a0ba:	683a      	ldr	r2, [r7, #0]
 800a0bc:	4907      	ldr	r1, [pc, #28]	; (800a0dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a0be:	4808      	ldr	r0, [pc, #32]	; (800a0e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a0c0:	f7ff fcf9 	bl	8009ab6 <USBD_GetString>
 800a0c4:	e004      	b.n	800a0d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a0c6:	683a      	ldr	r2, [r7, #0]
 800a0c8:	4904      	ldr	r1, [pc, #16]	; (800a0dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a0ca:	4805      	ldr	r0, [pc, #20]	; (800a0e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a0cc:	f7ff fcf3 	bl	8009ab6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0d0:	4b02      	ldr	r3, [pc, #8]	; (800a0dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20001d18 	.word	0x20001d18
 800a0e0:	0800b15c 	.word	0x0800b15c

0800a0e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a0ea:	4b0f      	ldr	r3, [pc, #60]	; (800a128 <Get_SerialNum+0x44>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a0f0:	4b0e      	ldr	r3, [pc, #56]	; (800a12c <Get_SerialNum+0x48>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a0f6:	4b0e      	ldr	r3, [pc, #56]	; (800a130 <Get_SerialNum+0x4c>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	4413      	add	r3, r2
 800a102:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d009      	beq.n	800a11e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a10a:	2208      	movs	r2, #8
 800a10c:	4909      	ldr	r1, [pc, #36]	; (800a134 <Get_SerialNum+0x50>)
 800a10e:	68f8      	ldr	r0, [r7, #12]
 800a110:	f000 f814 	bl	800a13c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a114:	2204      	movs	r2, #4
 800a116:	4908      	ldr	r1, [pc, #32]	; (800a138 <Get_SerialNum+0x54>)
 800a118:	68b8      	ldr	r0, [r7, #8]
 800a11a:	f000 f80f 	bl	800a13c <IntToUnicode>
  }
}
 800a11e:	bf00      	nop
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	1fff7a10 	.word	0x1fff7a10
 800a12c:	1fff7a14 	.word	0x1fff7a14
 800a130:	1fff7a18 	.word	0x1fff7a18
 800a134:	20000166 	.word	0x20000166
 800a138:	20000176 	.word	0x20000176

0800a13c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b087      	sub	sp, #28
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	4613      	mov	r3, r2
 800a148:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a14a:	2300      	movs	r3, #0
 800a14c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a14e:	2300      	movs	r3, #0
 800a150:	75fb      	strb	r3, [r7, #23]
 800a152:	e027      	b.n	800a1a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	0f1b      	lsrs	r3, r3, #28
 800a158:	2b09      	cmp	r3, #9
 800a15a:	d80b      	bhi.n	800a174 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	0f1b      	lsrs	r3, r3, #28
 800a160:	b2da      	uxtb	r2, r3
 800a162:	7dfb      	ldrb	r3, [r7, #23]
 800a164:	005b      	lsls	r3, r3, #1
 800a166:	4619      	mov	r1, r3
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	440b      	add	r3, r1
 800a16c:	3230      	adds	r2, #48	; 0x30
 800a16e:	b2d2      	uxtb	r2, r2
 800a170:	701a      	strb	r2, [r3, #0]
 800a172:	e00a      	b.n	800a18a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	0f1b      	lsrs	r3, r3, #28
 800a178:	b2da      	uxtb	r2, r3
 800a17a:	7dfb      	ldrb	r3, [r7, #23]
 800a17c:	005b      	lsls	r3, r3, #1
 800a17e:	4619      	mov	r1, r3
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	440b      	add	r3, r1
 800a184:	3237      	adds	r2, #55	; 0x37
 800a186:	b2d2      	uxtb	r2, r2
 800a188:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	011b      	lsls	r3, r3, #4
 800a18e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a190:	7dfb      	ldrb	r3, [r7, #23]
 800a192:	005b      	lsls	r3, r3, #1
 800a194:	3301      	adds	r3, #1
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	4413      	add	r3, r2
 800a19a:	2200      	movs	r2, #0
 800a19c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a19e:	7dfb      	ldrb	r3, [r7, #23]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	75fb      	strb	r3, [r7, #23]
 800a1a4:	7dfa      	ldrb	r2, [r7, #23]
 800a1a6:	79fb      	ldrb	r3, [r7, #7]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d3d3      	bcc.n	800a154 <IntToUnicode+0x18>
  }
}
 800a1ac:	bf00      	nop
 800a1ae:	bf00      	nop
 800a1b0:	371c      	adds	r7, #28
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
	...

0800a1bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b08a      	sub	sp, #40	; 0x28
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1c4:	f107 0314 	add.w	r3, r7, #20
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	601a      	str	r2, [r3, #0]
 800a1cc:	605a      	str	r2, [r3, #4]
 800a1ce:	609a      	str	r2, [r3, #8]
 800a1d0:	60da      	str	r2, [r3, #12]
 800a1d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1dc:	d13a      	bne.n	800a254 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1de:	2300      	movs	r3, #0
 800a1e0:	613b      	str	r3, [r7, #16]
 800a1e2:	4b1e      	ldr	r3, [pc, #120]	; (800a25c <HAL_PCD_MspInit+0xa0>)
 800a1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e6:	4a1d      	ldr	r2, [pc, #116]	; (800a25c <HAL_PCD_MspInit+0xa0>)
 800a1e8:	f043 0301 	orr.w	r3, r3, #1
 800a1ec:	6313      	str	r3, [r2, #48]	; 0x30
 800a1ee:	4b1b      	ldr	r3, [pc, #108]	; (800a25c <HAL_PCD_MspInit+0xa0>)
 800a1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f2:	f003 0301 	and.w	r3, r3, #1
 800a1f6:	613b      	str	r3, [r7, #16]
 800a1f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a1fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a1fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a200:	2302      	movs	r3, #2
 800a202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a204:	2300      	movs	r3, #0
 800a206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a208:	2303      	movs	r3, #3
 800a20a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a20c:	230a      	movs	r3, #10
 800a20e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a210:	f107 0314 	add.w	r3, r7, #20
 800a214:	4619      	mov	r1, r3
 800a216:	4812      	ldr	r0, [pc, #72]	; (800a260 <HAL_PCD_MspInit+0xa4>)
 800a218:	f7f7 fb0c 	bl	8001834 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a21c:	4b0f      	ldr	r3, [pc, #60]	; (800a25c <HAL_PCD_MspInit+0xa0>)
 800a21e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a220:	4a0e      	ldr	r2, [pc, #56]	; (800a25c <HAL_PCD_MspInit+0xa0>)
 800a222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a226:	6353      	str	r3, [r2, #52]	; 0x34
 800a228:	2300      	movs	r3, #0
 800a22a:	60fb      	str	r3, [r7, #12]
 800a22c:	4b0b      	ldr	r3, [pc, #44]	; (800a25c <HAL_PCD_MspInit+0xa0>)
 800a22e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a230:	4a0a      	ldr	r2, [pc, #40]	; (800a25c <HAL_PCD_MspInit+0xa0>)
 800a232:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a236:	6453      	str	r3, [r2, #68]	; 0x44
 800a238:	4b08      	ldr	r3, [pc, #32]	; (800a25c <HAL_PCD_MspInit+0xa0>)
 800a23a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a23c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a240:	60fb      	str	r3, [r7, #12]
 800a242:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a244:	2200      	movs	r2, #0
 800a246:	2100      	movs	r1, #0
 800a248:	2043      	movs	r0, #67	; 0x43
 800a24a:	f7f6 ff1e 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a24e:	2043      	movs	r0, #67	; 0x43
 800a250:	f7f6 ff37 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a254:	bf00      	nop
 800a256:	3728      	adds	r7, #40	; 0x28
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	40023800 	.word	0x40023800
 800a260:	40020000 	.word	0x40020000

0800a264 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a278:	4619      	mov	r1, r3
 800a27a:	4610      	mov	r0, r2
 800a27c:	f7fe fc34 	bl	8008ae8 <USBD_LL_SetupStage>
}
 800a280:	bf00      	nop
 800a282:	3708      	adds	r7, #8
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	460b      	mov	r3, r1
 800a292:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a29a:	78fa      	ldrb	r2, [r7, #3]
 800a29c:	6879      	ldr	r1, [r7, #4]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	00db      	lsls	r3, r3, #3
 800a2a2:	1a9b      	subs	r3, r3, r2
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	440b      	add	r3, r1
 800a2a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	78fb      	ldrb	r3, [r7, #3]
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	f7fe fc6e 	bl	8008b92 <USBD_LL_DataOutStage>
}
 800a2b6:	bf00      	nop
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b082      	sub	sp, #8
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a2d0:	78fa      	ldrb	r2, [r7, #3]
 800a2d2:	6879      	ldr	r1, [r7, #4]
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	00db      	lsls	r3, r3, #3
 800a2d8:	1a9b      	subs	r3, r3, r2
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	440b      	add	r3, r1
 800a2de:	3348      	adds	r3, #72	; 0x48
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	78fb      	ldrb	r3, [r7, #3]
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	f7fe fcb7 	bl	8008c58 <USBD_LL_DataInStage>
}
 800a2ea:	bf00      	nop
 800a2ec:	3708      	adds	r7, #8
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b082      	sub	sp, #8
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a300:	4618      	mov	r0, r3
 800a302:	f7fe fdcb 	bl	8008e9c <USBD_LL_SOF>
}
 800a306:	bf00      	nop
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b084      	sub	sp, #16
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a316:	2301      	movs	r3, #1
 800a318:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d102      	bne.n	800a328 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a322:	2300      	movs	r3, #0
 800a324:	73fb      	strb	r3, [r7, #15]
 800a326:	e008      	b.n	800a33a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	2b02      	cmp	r3, #2
 800a32e:	d102      	bne.n	800a336 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a330:	2301      	movs	r3, #1
 800a332:	73fb      	strb	r3, [r7, #15]
 800a334:	e001      	b.n	800a33a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a336:	f7f6 fafd 	bl	8000934 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a340:	7bfa      	ldrb	r2, [r7, #15]
 800a342:	4611      	mov	r1, r2
 800a344:	4618      	mov	r0, r3
 800a346:	f7fe fd6b 	bl	8008e20 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a350:	4618      	mov	r0, r3
 800a352:	f7fe fd17 	bl	8008d84 <USBD_LL_Reset>
}
 800a356:	bf00      	nop
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
	...

0800a360 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a36e:	4618      	mov	r0, r3
 800a370:	f7fe fd66 	bl	8008e40 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	6812      	ldr	r2, [r2, #0]
 800a382:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a386:	f043 0301 	orr.w	r3, r3, #1
 800a38a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6a1b      	ldr	r3, [r3, #32]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d005      	beq.n	800a3a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a394:	4b04      	ldr	r3, [pc, #16]	; (800a3a8 <HAL_PCD_SuspendCallback+0x48>)
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	4a03      	ldr	r2, [pc, #12]	; (800a3a8 <HAL_PCD_SuspendCallback+0x48>)
 800a39a:	f043 0306 	orr.w	r3, r3, #6
 800a39e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a3a0:	bf00      	nop
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	e000ed00 	.word	0xe000ed00

0800a3ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7fe fd56 	bl	8008e6c <USBD_LL_Resume>
}
 800a3c0:	bf00      	nop
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a3da:	78fa      	ldrb	r2, [r7, #3]
 800a3dc:	4611      	mov	r1, r2
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fe fda4 	bl	8008f2c <USBD_LL_IsoOUTIncomplete>
}
 800a3e4:	bf00      	nop
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a3fe:	78fa      	ldrb	r2, [r7, #3]
 800a400:	4611      	mov	r1, r2
 800a402:	4618      	mov	r0, r3
 800a404:	f7fe fd6c 	bl	8008ee0 <USBD_LL_IsoINIncomplete>
}
 800a408:	bf00      	nop
 800a40a:	3708      	adds	r7, #8
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a41e:	4618      	mov	r0, r3
 800a420:	f7fe fdaa 	bl	8008f78 <USBD_LL_DevConnected>
}
 800a424:	bf00      	nop
 800a426:	3708      	adds	r7, #8
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fe fda7 	bl	8008f8e <USBD_LL_DevDisconnected>
}
 800a440:	bf00      	nop
 800a442:	3708      	adds	r7, #8
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d13c      	bne.n	800a4d2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a458:	4a20      	ldr	r2, [pc, #128]	; (800a4dc <USBD_LL_Init+0x94>)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	4a1e      	ldr	r2, [pc, #120]	; (800a4dc <USBD_LL_Init+0x94>)
 800a464:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a468:	4b1c      	ldr	r3, [pc, #112]	; (800a4dc <USBD_LL_Init+0x94>)
 800a46a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a46e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a470:	4b1a      	ldr	r3, [pc, #104]	; (800a4dc <USBD_LL_Init+0x94>)
 800a472:	2204      	movs	r2, #4
 800a474:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a476:	4b19      	ldr	r3, [pc, #100]	; (800a4dc <USBD_LL_Init+0x94>)
 800a478:	2202      	movs	r2, #2
 800a47a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a47c:	4b17      	ldr	r3, [pc, #92]	; (800a4dc <USBD_LL_Init+0x94>)
 800a47e:	2200      	movs	r2, #0
 800a480:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a482:	4b16      	ldr	r3, [pc, #88]	; (800a4dc <USBD_LL_Init+0x94>)
 800a484:	2202      	movs	r2, #2
 800a486:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a488:	4b14      	ldr	r3, [pc, #80]	; (800a4dc <USBD_LL_Init+0x94>)
 800a48a:	2200      	movs	r2, #0
 800a48c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a48e:	4b13      	ldr	r3, [pc, #76]	; (800a4dc <USBD_LL_Init+0x94>)
 800a490:	2200      	movs	r2, #0
 800a492:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a494:	4b11      	ldr	r3, [pc, #68]	; (800a4dc <USBD_LL_Init+0x94>)
 800a496:	2200      	movs	r2, #0
 800a498:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a49a:	4b10      	ldr	r3, [pc, #64]	; (800a4dc <USBD_LL_Init+0x94>)
 800a49c:	2200      	movs	r2, #0
 800a49e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a4a0:	4b0e      	ldr	r3, [pc, #56]	; (800a4dc <USBD_LL_Init+0x94>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a4a6:	480d      	ldr	r0, [pc, #52]	; (800a4dc <USBD_LL_Init+0x94>)
 800a4a8:	f7f8 fb27 	bl	8002afa <HAL_PCD_Init>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d001      	beq.n	800a4b6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a4b2:	f7f6 fa3f 	bl	8000934 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a4b6:	2180      	movs	r1, #128	; 0x80
 800a4b8:	4808      	ldr	r0, [pc, #32]	; (800a4dc <USBD_LL_Init+0x94>)
 800a4ba:	f7f9 fc84 	bl	8003dc6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a4be:	2240      	movs	r2, #64	; 0x40
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	4806      	ldr	r0, [pc, #24]	; (800a4dc <USBD_LL_Init+0x94>)
 800a4c4:	f7f9 fc38 	bl	8003d38 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a4c8:	2280      	movs	r2, #128	; 0x80
 800a4ca:	2101      	movs	r1, #1
 800a4cc:	4803      	ldr	r0, [pc, #12]	; (800a4dc <USBD_LL_Init+0x94>)
 800a4ce:	f7f9 fc33 	bl	8003d38 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	20001f18 	.word	0x20001f18

0800a4e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7f8 fc1c 	bl	8002d34 <HAL_PCD_Start>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a500:	7bfb      	ldrb	r3, [r7, #15]
 800a502:	4618      	mov	r0, r3
 800a504:	f000 f942 	bl	800a78c <USBD_Get_USB_Status>
 800a508:	4603      	mov	r3, r0
 800a50a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a50c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b084      	sub	sp, #16
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	4608      	mov	r0, r1
 800a520:	4611      	mov	r1, r2
 800a522:	461a      	mov	r2, r3
 800a524:	4603      	mov	r3, r0
 800a526:	70fb      	strb	r3, [r7, #3]
 800a528:	460b      	mov	r3, r1
 800a52a:	70bb      	strb	r3, [r7, #2]
 800a52c:	4613      	mov	r3, r2
 800a52e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a530:	2300      	movs	r3, #0
 800a532:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a534:	2300      	movs	r3, #0
 800a536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a53e:	78bb      	ldrb	r3, [r7, #2]
 800a540:	883a      	ldrh	r2, [r7, #0]
 800a542:	78f9      	ldrb	r1, [r7, #3]
 800a544:	f7f9 f800 	bl	8003548 <HAL_PCD_EP_Open>
 800a548:	4603      	mov	r3, r0
 800a54a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a54c:	7bfb      	ldrb	r3, [r7, #15]
 800a54e:	4618      	mov	r0, r3
 800a550:	f000 f91c 	bl	800a78c <USBD_Get_USB_Status>
 800a554:	4603      	mov	r3, r0
 800a556:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a558:	7bbb      	ldrb	r3, [r7, #14]
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b084      	sub	sp, #16
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	460b      	mov	r3, r1
 800a56c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a56e:	2300      	movs	r3, #0
 800a570:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a572:	2300      	movs	r3, #0
 800a574:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a57c:	78fa      	ldrb	r2, [r7, #3]
 800a57e:	4611      	mov	r1, r2
 800a580:	4618      	mov	r0, r3
 800a582:	f7f9 f849 	bl	8003618 <HAL_PCD_EP_Close>
 800a586:	4603      	mov	r3, r0
 800a588:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a58a:	7bfb      	ldrb	r3, [r7, #15]
 800a58c:	4618      	mov	r0, r3
 800a58e:	f000 f8fd 	bl	800a78c <USBD_Get_USB_Status>
 800a592:	4603      	mov	r3, r0
 800a594:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a596:	7bbb      	ldrb	r3, [r7, #14]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3710      	adds	r7, #16
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a5ba:	78fa      	ldrb	r2, [r7, #3]
 800a5bc:	4611      	mov	r1, r2
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7f9 f921 	bl	8003806 <HAL_PCD_EP_SetStall>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5c8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f000 f8de 	bl	800a78c <USBD_Get_USB_Status>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}

0800a5de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5de:	b580      	push	{r7, lr}
 800a5e0:	b084      	sub	sp, #16
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a5f8:	78fa      	ldrb	r2, [r7, #3]
 800a5fa:	4611      	mov	r1, r2
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7f9 f966 	bl	80038ce <HAL_PCD_EP_ClrStall>
 800a602:	4603      	mov	r3, r0
 800a604:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a606:	7bfb      	ldrb	r3, [r7, #15]
 800a608:	4618      	mov	r0, r3
 800a60a:	f000 f8bf 	bl	800a78c <USBD_Get_USB_Status>
 800a60e:	4603      	mov	r3, r0
 800a610:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a612:	7bbb      	ldrb	r3, [r7, #14]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3710      	adds	r7, #16
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	460b      	mov	r3, r1
 800a626:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a62e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a630:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a634:	2b00      	cmp	r3, #0
 800a636:	da0b      	bge.n	800a650 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a638:	78fb      	ldrb	r3, [r7, #3]
 800a63a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a63e:	68f9      	ldr	r1, [r7, #12]
 800a640:	4613      	mov	r3, r2
 800a642:	00db      	lsls	r3, r3, #3
 800a644:	1a9b      	subs	r3, r3, r2
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	440b      	add	r3, r1
 800a64a:	333e      	adds	r3, #62	; 0x3e
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	e00b      	b.n	800a668 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a650:	78fb      	ldrb	r3, [r7, #3]
 800a652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a656:	68f9      	ldr	r1, [r7, #12]
 800a658:	4613      	mov	r3, r2
 800a65a:	00db      	lsls	r3, r3, #3
 800a65c:	1a9b      	subs	r3, r3, r2
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	440b      	add	r3, r1
 800a662:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a666:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	460b      	mov	r3, r1
 800a67e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a680:	2300      	movs	r3, #0
 800a682:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a684:	2300      	movs	r3, #0
 800a686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a68e:	78fa      	ldrb	r2, [r7, #3]
 800a690:	4611      	mov	r1, r2
 800a692:	4618      	mov	r0, r3
 800a694:	f7f8 ff33 	bl	80034fe <HAL_PCD_SetAddress>
 800a698:	4603      	mov	r3, r0
 800a69a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f000 f874 	bl	800a78c <USBD_Get_USB_Status>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b086      	sub	sp, #24
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	60f8      	str	r0, [r7, #12]
 800a6ba:	607a      	str	r2, [r7, #4]
 800a6bc:	603b      	str	r3, [r7, #0]
 800a6be:	460b      	mov	r3, r1
 800a6c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a6d0:	7af9      	ldrb	r1, [r7, #11]
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	f7f9 f84c 	bl	8003772 <HAL_PCD_EP_Transmit>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6de:	7dfb      	ldrb	r3, [r7, #23]
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f000 f853 	bl	800a78c <USBD_Get_USB_Status>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a6ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3718      	adds	r7, #24
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	607a      	str	r2, [r7, #4]
 800a6fe:	603b      	str	r3, [r7, #0]
 800a700:	460b      	mov	r3, r1
 800a702:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a704:	2300      	movs	r3, #0
 800a706:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a708:	2300      	movs	r3, #0
 800a70a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a712:	7af9      	ldrb	r1, [r7, #11]
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	f7f8 ffc8 	bl	80036ac <HAL_PCD_EP_Receive>
 800a71c:	4603      	mov	r3, r0
 800a71e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a720:	7dfb      	ldrb	r3, [r7, #23]
 800a722:	4618      	mov	r0, r3
 800a724:	f000 f832 	bl	800a78c <USBD_Get_USB_Status>
 800a728:	4603      	mov	r3, r0
 800a72a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a72c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3718      	adds	r7, #24
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b082      	sub	sp, #8
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
 800a73e:	460b      	mov	r3, r1
 800a740:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a748:	78fa      	ldrb	r2, [r7, #3]
 800a74a:	4611      	mov	r1, r2
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7f8 fff8 	bl	8003742 <HAL_PCD_EP_GetRxCount>
 800a752:	4603      	mov	r3, r0
}
 800a754:	4618      	mov	r0, r3
 800a756:	3708      	adds	r7, #8
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a764:	4b03      	ldr	r3, [pc, #12]	; (800a774 <USBD_static_malloc+0x18>)
}
 800a766:	4618      	mov	r0, r3
 800a768:	370c      	adds	r7, #12
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	2000021c 	.word	0x2000021c

0800a778 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]

}
 800a780:	bf00      	nop
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	4603      	mov	r3, r0
 800a794:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a796:	2300      	movs	r3, #0
 800a798:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a79a:	79fb      	ldrb	r3, [r7, #7]
 800a79c:	2b03      	cmp	r3, #3
 800a79e:	d817      	bhi.n	800a7d0 <USBD_Get_USB_Status+0x44>
 800a7a0:	a201      	add	r2, pc, #4	; (adr r2, 800a7a8 <USBD_Get_USB_Status+0x1c>)
 800a7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a6:	bf00      	nop
 800a7a8:	0800a7b9 	.word	0x0800a7b9
 800a7ac:	0800a7bf 	.word	0x0800a7bf
 800a7b0:	0800a7c5 	.word	0x0800a7c5
 800a7b4:	0800a7cb 	.word	0x0800a7cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a7bc:	e00b      	b.n	800a7d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a7be:	2303      	movs	r3, #3
 800a7c0:	73fb      	strb	r3, [r7, #15]
    break;
 800a7c2:	e008      	b.n	800a7d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a7c8:	e005      	b.n	800a7d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a7ce:	e002      	b.n	800a7d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a7d4:	bf00      	nop
  }
  return usb_status;
 800a7d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3714      	adds	r7, #20
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <__errno>:
 800a7e4:	4b01      	ldr	r3, [pc, #4]	; (800a7ec <__errno+0x8>)
 800a7e6:	6818      	ldr	r0, [r3, #0]
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	20000180 	.word	0x20000180

0800a7f0 <__libc_init_array>:
 800a7f0:	b570      	push	{r4, r5, r6, lr}
 800a7f2:	4d0d      	ldr	r5, [pc, #52]	; (800a828 <__libc_init_array+0x38>)
 800a7f4:	4c0d      	ldr	r4, [pc, #52]	; (800a82c <__libc_init_array+0x3c>)
 800a7f6:	1b64      	subs	r4, r4, r5
 800a7f8:	10a4      	asrs	r4, r4, #2
 800a7fa:	2600      	movs	r6, #0
 800a7fc:	42a6      	cmp	r6, r4
 800a7fe:	d109      	bne.n	800a814 <__libc_init_array+0x24>
 800a800:	4d0b      	ldr	r5, [pc, #44]	; (800a830 <__libc_init_array+0x40>)
 800a802:	4c0c      	ldr	r4, [pc, #48]	; (800a834 <__libc_init_array+0x44>)
 800a804:	f000 fc5c 	bl	800b0c0 <_init>
 800a808:	1b64      	subs	r4, r4, r5
 800a80a:	10a4      	asrs	r4, r4, #2
 800a80c:	2600      	movs	r6, #0
 800a80e:	42a6      	cmp	r6, r4
 800a810:	d105      	bne.n	800a81e <__libc_init_array+0x2e>
 800a812:	bd70      	pop	{r4, r5, r6, pc}
 800a814:	f855 3b04 	ldr.w	r3, [r5], #4
 800a818:	4798      	blx	r3
 800a81a:	3601      	adds	r6, #1
 800a81c:	e7ee      	b.n	800a7fc <__libc_init_array+0xc>
 800a81e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a822:	4798      	blx	r3
 800a824:	3601      	adds	r6, #1
 800a826:	e7f2      	b.n	800a80e <__libc_init_array+0x1e>
 800a828:	0800b1dc 	.word	0x0800b1dc
 800a82c:	0800b1dc 	.word	0x0800b1dc
 800a830:	0800b1dc 	.word	0x0800b1dc
 800a834:	0800b1e0 	.word	0x0800b1e0

0800a838 <memset>:
 800a838:	4402      	add	r2, r0
 800a83a:	4603      	mov	r3, r0
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d100      	bne.n	800a842 <memset+0xa>
 800a840:	4770      	bx	lr
 800a842:	f803 1b01 	strb.w	r1, [r3], #1
 800a846:	e7f9      	b.n	800a83c <memset+0x4>

0800a848 <siprintf>:
 800a848:	b40e      	push	{r1, r2, r3}
 800a84a:	b500      	push	{lr}
 800a84c:	b09c      	sub	sp, #112	; 0x70
 800a84e:	ab1d      	add	r3, sp, #116	; 0x74
 800a850:	9002      	str	r0, [sp, #8]
 800a852:	9006      	str	r0, [sp, #24]
 800a854:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a858:	4809      	ldr	r0, [pc, #36]	; (800a880 <siprintf+0x38>)
 800a85a:	9107      	str	r1, [sp, #28]
 800a85c:	9104      	str	r1, [sp, #16]
 800a85e:	4909      	ldr	r1, [pc, #36]	; (800a884 <siprintf+0x3c>)
 800a860:	f853 2b04 	ldr.w	r2, [r3], #4
 800a864:	9105      	str	r1, [sp, #20]
 800a866:	6800      	ldr	r0, [r0, #0]
 800a868:	9301      	str	r3, [sp, #4]
 800a86a:	a902      	add	r1, sp, #8
 800a86c:	f000 f876 	bl	800a95c <_svfiprintf_r>
 800a870:	9b02      	ldr	r3, [sp, #8]
 800a872:	2200      	movs	r2, #0
 800a874:	701a      	strb	r2, [r3, #0]
 800a876:	b01c      	add	sp, #112	; 0x70
 800a878:	f85d eb04 	ldr.w	lr, [sp], #4
 800a87c:	b003      	add	sp, #12
 800a87e:	4770      	bx	lr
 800a880:	20000180 	.word	0x20000180
 800a884:	ffff0208 	.word	0xffff0208

0800a888 <strcat>:
 800a888:	b510      	push	{r4, lr}
 800a88a:	4602      	mov	r2, r0
 800a88c:	7814      	ldrb	r4, [r2, #0]
 800a88e:	4613      	mov	r3, r2
 800a890:	3201      	adds	r2, #1
 800a892:	2c00      	cmp	r4, #0
 800a894:	d1fa      	bne.n	800a88c <strcat+0x4>
 800a896:	3b01      	subs	r3, #1
 800a898:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a89c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8a0:	2a00      	cmp	r2, #0
 800a8a2:	d1f9      	bne.n	800a898 <strcat+0x10>
 800a8a4:	bd10      	pop	{r4, pc}

0800a8a6 <__ssputs_r>:
 800a8a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8aa:	688e      	ldr	r6, [r1, #8]
 800a8ac:	429e      	cmp	r6, r3
 800a8ae:	4682      	mov	sl, r0
 800a8b0:	460c      	mov	r4, r1
 800a8b2:	4690      	mov	r8, r2
 800a8b4:	461f      	mov	r7, r3
 800a8b6:	d838      	bhi.n	800a92a <__ssputs_r+0x84>
 800a8b8:	898a      	ldrh	r2, [r1, #12]
 800a8ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a8be:	d032      	beq.n	800a926 <__ssputs_r+0x80>
 800a8c0:	6825      	ldr	r5, [r4, #0]
 800a8c2:	6909      	ldr	r1, [r1, #16]
 800a8c4:	eba5 0901 	sub.w	r9, r5, r1
 800a8c8:	6965      	ldr	r5, [r4, #20]
 800a8ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	444b      	add	r3, r9
 800a8d6:	106d      	asrs	r5, r5, #1
 800a8d8:	429d      	cmp	r5, r3
 800a8da:	bf38      	it	cc
 800a8dc:	461d      	movcc	r5, r3
 800a8de:	0553      	lsls	r3, r2, #21
 800a8e0:	d531      	bpl.n	800a946 <__ssputs_r+0xa0>
 800a8e2:	4629      	mov	r1, r5
 800a8e4:	f000 fb46 	bl	800af74 <_malloc_r>
 800a8e8:	4606      	mov	r6, r0
 800a8ea:	b950      	cbnz	r0, 800a902 <__ssputs_r+0x5c>
 800a8ec:	230c      	movs	r3, #12
 800a8ee:	f8ca 3000 	str.w	r3, [sl]
 800a8f2:	89a3      	ldrh	r3, [r4, #12]
 800a8f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8f8:	81a3      	strh	r3, [r4, #12]
 800a8fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a902:	6921      	ldr	r1, [r4, #16]
 800a904:	464a      	mov	r2, r9
 800a906:	f000 fabd 	bl	800ae84 <memcpy>
 800a90a:	89a3      	ldrh	r3, [r4, #12]
 800a90c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a914:	81a3      	strh	r3, [r4, #12]
 800a916:	6126      	str	r6, [r4, #16]
 800a918:	6165      	str	r5, [r4, #20]
 800a91a:	444e      	add	r6, r9
 800a91c:	eba5 0509 	sub.w	r5, r5, r9
 800a920:	6026      	str	r6, [r4, #0]
 800a922:	60a5      	str	r5, [r4, #8]
 800a924:	463e      	mov	r6, r7
 800a926:	42be      	cmp	r6, r7
 800a928:	d900      	bls.n	800a92c <__ssputs_r+0x86>
 800a92a:	463e      	mov	r6, r7
 800a92c:	4632      	mov	r2, r6
 800a92e:	6820      	ldr	r0, [r4, #0]
 800a930:	4641      	mov	r1, r8
 800a932:	f000 fab5 	bl	800aea0 <memmove>
 800a936:	68a3      	ldr	r3, [r4, #8]
 800a938:	6822      	ldr	r2, [r4, #0]
 800a93a:	1b9b      	subs	r3, r3, r6
 800a93c:	4432      	add	r2, r6
 800a93e:	60a3      	str	r3, [r4, #8]
 800a940:	6022      	str	r2, [r4, #0]
 800a942:	2000      	movs	r0, #0
 800a944:	e7db      	b.n	800a8fe <__ssputs_r+0x58>
 800a946:	462a      	mov	r2, r5
 800a948:	f000 fb6e 	bl	800b028 <_realloc_r>
 800a94c:	4606      	mov	r6, r0
 800a94e:	2800      	cmp	r0, #0
 800a950:	d1e1      	bne.n	800a916 <__ssputs_r+0x70>
 800a952:	6921      	ldr	r1, [r4, #16]
 800a954:	4650      	mov	r0, sl
 800a956:	f000 fabd 	bl	800aed4 <_free_r>
 800a95a:	e7c7      	b.n	800a8ec <__ssputs_r+0x46>

0800a95c <_svfiprintf_r>:
 800a95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a960:	4698      	mov	r8, r3
 800a962:	898b      	ldrh	r3, [r1, #12]
 800a964:	061b      	lsls	r3, r3, #24
 800a966:	b09d      	sub	sp, #116	; 0x74
 800a968:	4607      	mov	r7, r0
 800a96a:	460d      	mov	r5, r1
 800a96c:	4614      	mov	r4, r2
 800a96e:	d50e      	bpl.n	800a98e <_svfiprintf_r+0x32>
 800a970:	690b      	ldr	r3, [r1, #16]
 800a972:	b963      	cbnz	r3, 800a98e <_svfiprintf_r+0x32>
 800a974:	2140      	movs	r1, #64	; 0x40
 800a976:	f000 fafd 	bl	800af74 <_malloc_r>
 800a97a:	6028      	str	r0, [r5, #0]
 800a97c:	6128      	str	r0, [r5, #16]
 800a97e:	b920      	cbnz	r0, 800a98a <_svfiprintf_r+0x2e>
 800a980:	230c      	movs	r3, #12
 800a982:	603b      	str	r3, [r7, #0]
 800a984:	f04f 30ff 	mov.w	r0, #4294967295
 800a988:	e0d1      	b.n	800ab2e <_svfiprintf_r+0x1d2>
 800a98a:	2340      	movs	r3, #64	; 0x40
 800a98c:	616b      	str	r3, [r5, #20]
 800a98e:	2300      	movs	r3, #0
 800a990:	9309      	str	r3, [sp, #36]	; 0x24
 800a992:	2320      	movs	r3, #32
 800a994:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a998:	f8cd 800c 	str.w	r8, [sp, #12]
 800a99c:	2330      	movs	r3, #48	; 0x30
 800a99e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ab48 <_svfiprintf_r+0x1ec>
 800a9a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9a6:	f04f 0901 	mov.w	r9, #1
 800a9aa:	4623      	mov	r3, r4
 800a9ac:	469a      	mov	sl, r3
 800a9ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9b2:	b10a      	cbz	r2, 800a9b8 <_svfiprintf_r+0x5c>
 800a9b4:	2a25      	cmp	r2, #37	; 0x25
 800a9b6:	d1f9      	bne.n	800a9ac <_svfiprintf_r+0x50>
 800a9b8:	ebba 0b04 	subs.w	fp, sl, r4
 800a9bc:	d00b      	beq.n	800a9d6 <_svfiprintf_r+0x7a>
 800a9be:	465b      	mov	r3, fp
 800a9c0:	4622      	mov	r2, r4
 800a9c2:	4629      	mov	r1, r5
 800a9c4:	4638      	mov	r0, r7
 800a9c6:	f7ff ff6e 	bl	800a8a6 <__ssputs_r>
 800a9ca:	3001      	adds	r0, #1
 800a9cc:	f000 80aa 	beq.w	800ab24 <_svfiprintf_r+0x1c8>
 800a9d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9d2:	445a      	add	r2, fp
 800a9d4:	9209      	str	r2, [sp, #36]	; 0x24
 800a9d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f000 80a2 	beq.w	800ab24 <_svfiprintf_r+0x1c8>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9ea:	f10a 0a01 	add.w	sl, sl, #1
 800a9ee:	9304      	str	r3, [sp, #16]
 800a9f0:	9307      	str	r3, [sp, #28]
 800a9f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9f6:	931a      	str	r3, [sp, #104]	; 0x68
 800a9f8:	4654      	mov	r4, sl
 800a9fa:	2205      	movs	r2, #5
 800a9fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa00:	4851      	ldr	r0, [pc, #324]	; (800ab48 <_svfiprintf_r+0x1ec>)
 800aa02:	f7f5 fbed 	bl	80001e0 <memchr>
 800aa06:	9a04      	ldr	r2, [sp, #16]
 800aa08:	b9d8      	cbnz	r0, 800aa42 <_svfiprintf_r+0xe6>
 800aa0a:	06d0      	lsls	r0, r2, #27
 800aa0c:	bf44      	itt	mi
 800aa0e:	2320      	movmi	r3, #32
 800aa10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa14:	0711      	lsls	r1, r2, #28
 800aa16:	bf44      	itt	mi
 800aa18:	232b      	movmi	r3, #43	; 0x2b
 800aa1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa1e:	f89a 3000 	ldrb.w	r3, [sl]
 800aa22:	2b2a      	cmp	r3, #42	; 0x2a
 800aa24:	d015      	beq.n	800aa52 <_svfiprintf_r+0xf6>
 800aa26:	9a07      	ldr	r2, [sp, #28]
 800aa28:	4654      	mov	r4, sl
 800aa2a:	2000      	movs	r0, #0
 800aa2c:	f04f 0c0a 	mov.w	ip, #10
 800aa30:	4621      	mov	r1, r4
 800aa32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa36:	3b30      	subs	r3, #48	; 0x30
 800aa38:	2b09      	cmp	r3, #9
 800aa3a:	d94e      	bls.n	800aada <_svfiprintf_r+0x17e>
 800aa3c:	b1b0      	cbz	r0, 800aa6c <_svfiprintf_r+0x110>
 800aa3e:	9207      	str	r2, [sp, #28]
 800aa40:	e014      	b.n	800aa6c <_svfiprintf_r+0x110>
 800aa42:	eba0 0308 	sub.w	r3, r0, r8
 800aa46:	fa09 f303 	lsl.w	r3, r9, r3
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	9304      	str	r3, [sp, #16]
 800aa4e:	46a2      	mov	sl, r4
 800aa50:	e7d2      	b.n	800a9f8 <_svfiprintf_r+0x9c>
 800aa52:	9b03      	ldr	r3, [sp, #12]
 800aa54:	1d19      	adds	r1, r3, #4
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	9103      	str	r1, [sp, #12]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	bfbb      	ittet	lt
 800aa5e:	425b      	neglt	r3, r3
 800aa60:	f042 0202 	orrlt.w	r2, r2, #2
 800aa64:	9307      	strge	r3, [sp, #28]
 800aa66:	9307      	strlt	r3, [sp, #28]
 800aa68:	bfb8      	it	lt
 800aa6a:	9204      	strlt	r2, [sp, #16]
 800aa6c:	7823      	ldrb	r3, [r4, #0]
 800aa6e:	2b2e      	cmp	r3, #46	; 0x2e
 800aa70:	d10c      	bne.n	800aa8c <_svfiprintf_r+0x130>
 800aa72:	7863      	ldrb	r3, [r4, #1]
 800aa74:	2b2a      	cmp	r3, #42	; 0x2a
 800aa76:	d135      	bne.n	800aae4 <_svfiprintf_r+0x188>
 800aa78:	9b03      	ldr	r3, [sp, #12]
 800aa7a:	1d1a      	adds	r2, r3, #4
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	9203      	str	r2, [sp, #12]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	bfb8      	it	lt
 800aa84:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa88:	3402      	adds	r4, #2
 800aa8a:	9305      	str	r3, [sp, #20]
 800aa8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ab58 <_svfiprintf_r+0x1fc>
 800aa90:	7821      	ldrb	r1, [r4, #0]
 800aa92:	2203      	movs	r2, #3
 800aa94:	4650      	mov	r0, sl
 800aa96:	f7f5 fba3 	bl	80001e0 <memchr>
 800aa9a:	b140      	cbz	r0, 800aaae <_svfiprintf_r+0x152>
 800aa9c:	2340      	movs	r3, #64	; 0x40
 800aa9e:	eba0 000a 	sub.w	r0, r0, sl
 800aaa2:	fa03 f000 	lsl.w	r0, r3, r0
 800aaa6:	9b04      	ldr	r3, [sp, #16]
 800aaa8:	4303      	orrs	r3, r0
 800aaaa:	3401      	adds	r4, #1
 800aaac:	9304      	str	r3, [sp, #16]
 800aaae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aab2:	4826      	ldr	r0, [pc, #152]	; (800ab4c <_svfiprintf_r+0x1f0>)
 800aab4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aab8:	2206      	movs	r2, #6
 800aaba:	f7f5 fb91 	bl	80001e0 <memchr>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d038      	beq.n	800ab34 <_svfiprintf_r+0x1d8>
 800aac2:	4b23      	ldr	r3, [pc, #140]	; (800ab50 <_svfiprintf_r+0x1f4>)
 800aac4:	bb1b      	cbnz	r3, 800ab0e <_svfiprintf_r+0x1b2>
 800aac6:	9b03      	ldr	r3, [sp, #12]
 800aac8:	3307      	adds	r3, #7
 800aaca:	f023 0307 	bic.w	r3, r3, #7
 800aace:	3308      	adds	r3, #8
 800aad0:	9303      	str	r3, [sp, #12]
 800aad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aad4:	4433      	add	r3, r6
 800aad6:	9309      	str	r3, [sp, #36]	; 0x24
 800aad8:	e767      	b.n	800a9aa <_svfiprintf_r+0x4e>
 800aada:	fb0c 3202 	mla	r2, ip, r2, r3
 800aade:	460c      	mov	r4, r1
 800aae0:	2001      	movs	r0, #1
 800aae2:	e7a5      	b.n	800aa30 <_svfiprintf_r+0xd4>
 800aae4:	2300      	movs	r3, #0
 800aae6:	3401      	adds	r4, #1
 800aae8:	9305      	str	r3, [sp, #20]
 800aaea:	4619      	mov	r1, r3
 800aaec:	f04f 0c0a 	mov.w	ip, #10
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaf6:	3a30      	subs	r2, #48	; 0x30
 800aaf8:	2a09      	cmp	r2, #9
 800aafa:	d903      	bls.n	800ab04 <_svfiprintf_r+0x1a8>
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d0c5      	beq.n	800aa8c <_svfiprintf_r+0x130>
 800ab00:	9105      	str	r1, [sp, #20]
 800ab02:	e7c3      	b.n	800aa8c <_svfiprintf_r+0x130>
 800ab04:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab08:	4604      	mov	r4, r0
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e7f0      	b.n	800aaf0 <_svfiprintf_r+0x194>
 800ab0e:	ab03      	add	r3, sp, #12
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	462a      	mov	r2, r5
 800ab14:	4b0f      	ldr	r3, [pc, #60]	; (800ab54 <_svfiprintf_r+0x1f8>)
 800ab16:	a904      	add	r1, sp, #16
 800ab18:	4638      	mov	r0, r7
 800ab1a:	f3af 8000 	nop.w
 800ab1e:	1c42      	adds	r2, r0, #1
 800ab20:	4606      	mov	r6, r0
 800ab22:	d1d6      	bne.n	800aad2 <_svfiprintf_r+0x176>
 800ab24:	89ab      	ldrh	r3, [r5, #12]
 800ab26:	065b      	lsls	r3, r3, #25
 800ab28:	f53f af2c 	bmi.w	800a984 <_svfiprintf_r+0x28>
 800ab2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab2e:	b01d      	add	sp, #116	; 0x74
 800ab30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab34:	ab03      	add	r3, sp, #12
 800ab36:	9300      	str	r3, [sp, #0]
 800ab38:	462a      	mov	r2, r5
 800ab3a:	4b06      	ldr	r3, [pc, #24]	; (800ab54 <_svfiprintf_r+0x1f8>)
 800ab3c:	a904      	add	r1, sp, #16
 800ab3e:	4638      	mov	r0, r7
 800ab40:	f000 f87a 	bl	800ac38 <_printf_i>
 800ab44:	e7eb      	b.n	800ab1e <_svfiprintf_r+0x1c2>
 800ab46:	bf00      	nop
 800ab48:	0800b1a0 	.word	0x0800b1a0
 800ab4c:	0800b1aa 	.word	0x0800b1aa
 800ab50:	00000000 	.word	0x00000000
 800ab54:	0800a8a7 	.word	0x0800a8a7
 800ab58:	0800b1a6 	.word	0x0800b1a6

0800ab5c <_printf_common>:
 800ab5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab60:	4616      	mov	r6, r2
 800ab62:	4699      	mov	r9, r3
 800ab64:	688a      	ldr	r2, [r1, #8]
 800ab66:	690b      	ldr	r3, [r1, #16]
 800ab68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	bfb8      	it	lt
 800ab70:	4613      	movlt	r3, r2
 800ab72:	6033      	str	r3, [r6, #0]
 800ab74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab78:	4607      	mov	r7, r0
 800ab7a:	460c      	mov	r4, r1
 800ab7c:	b10a      	cbz	r2, 800ab82 <_printf_common+0x26>
 800ab7e:	3301      	adds	r3, #1
 800ab80:	6033      	str	r3, [r6, #0]
 800ab82:	6823      	ldr	r3, [r4, #0]
 800ab84:	0699      	lsls	r1, r3, #26
 800ab86:	bf42      	ittt	mi
 800ab88:	6833      	ldrmi	r3, [r6, #0]
 800ab8a:	3302      	addmi	r3, #2
 800ab8c:	6033      	strmi	r3, [r6, #0]
 800ab8e:	6825      	ldr	r5, [r4, #0]
 800ab90:	f015 0506 	ands.w	r5, r5, #6
 800ab94:	d106      	bne.n	800aba4 <_printf_common+0x48>
 800ab96:	f104 0a19 	add.w	sl, r4, #25
 800ab9a:	68e3      	ldr	r3, [r4, #12]
 800ab9c:	6832      	ldr	r2, [r6, #0]
 800ab9e:	1a9b      	subs	r3, r3, r2
 800aba0:	42ab      	cmp	r3, r5
 800aba2:	dc26      	bgt.n	800abf2 <_printf_common+0x96>
 800aba4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aba8:	1e13      	subs	r3, r2, #0
 800abaa:	6822      	ldr	r2, [r4, #0]
 800abac:	bf18      	it	ne
 800abae:	2301      	movne	r3, #1
 800abb0:	0692      	lsls	r2, r2, #26
 800abb2:	d42b      	bmi.n	800ac0c <_printf_common+0xb0>
 800abb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abb8:	4649      	mov	r1, r9
 800abba:	4638      	mov	r0, r7
 800abbc:	47c0      	blx	r8
 800abbe:	3001      	adds	r0, #1
 800abc0:	d01e      	beq.n	800ac00 <_printf_common+0xa4>
 800abc2:	6823      	ldr	r3, [r4, #0]
 800abc4:	68e5      	ldr	r5, [r4, #12]
 800abc6:	6832      	ldr	r2, [r6, #0]
 800abc8:	f003 0306 	and.w	r3, r3, #6
 800abcc:	2b04      	cmp	r3, #4
 800abce:	bf08      	it	eq
 800abd0:	1aad      	subeq	r5, r5, r2
 800abd2:	68a3      	ldr	r3, [r4, #8]
 800abd4:	6922      	ldr	r2, [r4, #16]
 800abd6:	bf0c      	ite	eq
 800abd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abdc:	2500      	movne	r5, #0
 800abde:	4293      	cmp	r3, r2
 800abe0:	bfc4      	itt	gt
 800abe2:	1a9b      	subgt	r3, r3, r2
 800abe4:	18ed      	addgt	r5, r5, r3
 800abe6:	2600      	movs	r6, #0
 800abe8:	341a      	adds	r4, #26
 800abea:	42b5      	cmp	r5, r6
 800abec:	d11a      	bne.n	800ac24 <_printf_common+0xc8>
 800abee:	2000      	movs	r0, #0
 800abf0:	e008      	b.n	800ac04 <_printf_common+0xa8>
 800abf2:	2301      	movs	r3, #1
 800abf4:	4652      	mov	r2, sl
 800abf6:	4649      	mov	r1, r9
 800abf8:	4638      	mov	r0, r7
 800abfa:	47c0      	blx	r8
 800abfc:	3001      	adds	r0, #1
 800abfe:	d103      	bne.n	800ac08 <_printf_common+0xac>
 800ac00:	f04f 30ff 	mov.w	r0, #4294967295
 800ac04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac08:	3501      	adds	r5, #1
 800ac0a:	e7c6      	b.n	800ab9a <_printf_common+0x3e>
 800ac0c:	18e1      	adds	r1, r4, r3
 800ac0e:	1c5a      	adds	r2, r3, #1
 800ac10:	2030      	movs	r0, #48	; 0x30
 800ac12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac16:	4422      	add	r2, r4
 800ac18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac20:	3302      	adds	r3, #2
 800ac22:	e7c7      	b.n	800abb4 <_printf_common+0x58>
 800ac24:	2301      	movs	r3, #1
 800ac26:	4622      	mov	r2, r4
 800ac28:	4649      	mov	r1, r9
 800ac2a:	4638      	mov	r0, r7
 800ac2c:	47c0      	blx	r8
 800ac2e:	3001      	adds	r0, #1
 800ac30:	d0e6      	beq.n	800ac00 <_printf_common+0xa4>
 800ac32:	3601      	adds	r6, #1
 800ac34:	e7d9      	b.n	800abea <_printf_common+0x8e>
	...

0800ac38 <_printf_i>:
 800ac38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac3c:	460c      	mov	r4, r1
 800ac3e:	4691      	mov	r9, r2
 800ac40:	7e27      	ldrb	r7, [r4, #24]
 800ac42:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ac44:	2f78      	cmp	r7, #120	; 0x78
 800ac46:	4680      	mov	r8, r0
 800ac48:	469a      	mov	sl, r3
 800ac4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac4e:	d807      	bhi.n	800ac60 <_printf_i+0x28>
 800ac50:	2f62      	cmp	r7, #98	; 0x62
 800ac52:	d80a      	bhi.n	800ac6a <_printf_i+0x32>
 800ac54:	2f00      	cmp	r7, #0
 800ac56:	f000 80d8 	beq.w	800ae0a <_printf_i+0x1d2>
 800ac5a:	2f58      	cmp	r7, #88	; 0x58
 800ac5c:	f000 80a3 	beq.w	800ada6 <_printf_i+0x16e>
 800ac60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ac64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac68:	e03a      	b.n	800ace0 <_printf_i+0xa8>
 800ac6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac6e:	2b15      	cmp	r3, #21
 800ac70:	d8f6      	bhi.n	800ac60 <_printf_i+0x28>
 800ac72:	a001      	add	r0, pc, #4	; (adr r0, 800ac78 <_printf_i+0x40>)
 800ac74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ac78:	0800acd1 	.word	0x0800acd1
 800ac7c:	0800ace5 	.word	0x0800ace5
 800ac80:	0800ac61 	.word	0x0800ac61
 800ac84:	0800ac61 	.word	0x0800ac61
 800ac88:	0800ac61 	.word	0x0800ac61
 800ac8c:	0800ac61 	.word	0x0800ac61
 800ac90:	0800ace5 	.word	0x0800ace5
 800ac94:	0800ac61 	.word	0x0800ac61
 800ac98:	0800ac61 	.word	0x0800ac61
 800ac9c:	0800ac61 	.word	0x0800ac61
 800aca0:	0800ac61 	.word	0x0800ac61
 800aca4:	0800adf1 	.word	0x0800adf1
 800aca8:	0800ad15 	.word	0x0800ad15
 800acac:	0800add3 	.word	0x0800add3
 800acb0:	0800ac61 	.word	0x0800ac61
 800acb4:	0800ac61 	.word	0x0800ac61
 800acb8:	0800ae13 	.word	0x0800ae13
 800acbc:	0800ac61 	.word	0x0800ac61
 800acc0:	0800ad15 	.word	0x0800ad15
 800acc4:	0800ac61 	.word	0x0800ac61
 800acc8:	0800ac61 	.word	0x0800ac61
 800accc:	0800addb 	.word	0x0800addb
 800acd0:	680b      	ldr	r3, [r1, #0]
 800acd2:	1d1a      	adds	r2, r3, #4
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	600a      	str	r2, [r1, #0]
 800acd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800acdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ace0:	2301      	movs	r3, #1
 800ace2:	e0a3      	b.n	800ae2c <_printf_i+0x1f4>
 800ace4:	6825      	ldr	r5, [r4, #0]
 800ace6:	6808      	ldr	r0, [r1, #0]
 800ace8:	062e      	lsls	r6, r5, #24
 800acea:	f100 0304 	add.w	r3, r0, #4
 800acee:	d50a      	bpl.n	800ad06 <_printf_i+0xce>
 800acf0:	6805      	ldr	r5, [r0, #0]
 800acf2:	600b      	str	r3, [r1, #0]
 800acf4:	2d00      	cmp	r5, #0
 800acf6:	da03      	bge.n	800ad00 <_printf_i+0xc8>
 800acf8:	232d      	movs	r3, #45	; 0x2d
 800acfa:	426d      	negs	r5, r5
 800acfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad00:	485e      	ldr	r0, [pc, #376]	; (800ae7c <_printf_i+0x244>)
 800ad02:	230a      	movs	r3, #10
 800ad04:	e019      	b.n	800ad3a <_printf_i+0x102>
 800ad06:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ad0a:	6805      	ldr	r5, [r0, #0]
 800ad0c:	600b      	str	r3, [r1, #0]
 800ad0e:	bf18      	it	ne
 800ad10:	b22d      	sxthne	r5, r5
 800ad12:	e7ef      	b.n	800acf4 <_printf_i+0xbc>
 800ad14:	680b      	ldr	r3, [r1, #0]
 800ad16:	6825      	ldr	r5, [r4, #0]
 800ad18:	1d18      	adds	r0, r3, #4
 800ad1a:	6008      	str	r0, [r1, #0]
 800ad1c:	0628      	lsls	r0, r5, #24
 800ad1e:	d501      	bpl.n	800ad24 <_printf_i+0xec>
 800ad20:	681d      	ldr	r5, [r3, #0]
 800ad22:	e002      	b.n	800ad2a <_printf_i+0xf2>
 800ad24:	0669      	lsls	r1, r5, #25
 800ad26:	d5fb      	bpl.n	800ad20 <_printf_i+0xe8>
 800ad28:	881d      	ldrh	r5, [r3, #0]
 800ad2a:	4854      	ldr	r0, [pc, #336]	; (800ae7c <_printf_i+0x244>)
 800ad2c:	2f6f      	cmp	r7, #111	; 0x6f
 800ad2e:	bf0c      	ite	eq
 800ad30:	2308      	moveq	r3, #8
 800ad32:	230a      	movne	r3, #10
 800ad34:	2100      	movs	r1, #0
 800ad36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad3a:	6866      	ldr	r6, [r4, #4]
 800ad3c:	60a6      	str	r6, [r4, #8]
 800ad3e:	2e00      	cmp	r6, #0
 800ad40:	bfa2      	ittt	ge
 800ad42:	6821      	ldrge	r1, [r4, #0]
 800ad44:	f021 0104 	bicge.w	r1, r1, #4
 800ad48:	6021      	strge	r1, [r4, #0]
 800ad4a:	b90d      	cbnz	r5, 800ad50 <_printf_i+0x118>
 800ad4c:	2e00      	cmp	r6, #0
 800ad4e:	d04d      	beq.n	800adec <_printf_i+0x1b4>
 800ad50:	4616      	mov	r6, r2
 800ad52:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad56:	fb03 5711 	mls	r7, r3, r1, r5
 800ad5a:	5dc7      	ldrb	r7, [r0, r7]
 800ad5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad60:	462f      	mov	r7, r5
 800ad62:	42bb      	cmp	r3, r7
 800ad64:	460d      	mov	r5, r1
 800ad66:	d9f4      	bls.n	800ad52 <_printf_i+0x11a>
 800ad68:	2b08      	cmp	r3, #8
 800ad6a:	d10b      	bne.n	800ad84 <_printf_i+0x14c>
 800ad6c:	6823      	ldr	r3, [r4, #0]
 800ad6e:	07df      	lsls	r7, r3, #31
 800ad70:	d508      	bpl.n	800ad84 <_printf_i+0x14c>
 800ad72:	6923      	ldr	r3, [r4, #16]
 800ad74:	6861      	ldr	r1, [r4, #4]
 800ad76:	4299      	cmp	r1, r3
 800ad78:	bfde      	ittt	le
 800ad7a:	2330      	movle	r3, #48	; 0x30
 800ad7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad80:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad84:	1b92      	subs	r2, r2, r6
 800ad86:	6122      	str	r2, [r4, #16]
 800ad88:	f8cd a000 	str.w	sl, [sp]
 800ad8c:	464b      	mov	r3, r9
 800ad8e:	aa03      	add	r2, sp, #12
 800ad90:	4621      	mov	r1, r4
 800ad92:	4640      	mov	r0, r8
 800ad94:	f7ff fee2 	bl	800ab5c <_printf_common>
 800ad98:	3001      	adds	r0, #1
 800ad9a:	d14c      	bne.n	800ae36 <_printf_i+0x1fe>
 800ad9c:	f04f 30ff 	mov.w	r0, #4294967295
 800ada0:	b004      	add	sp, #16
 800ada2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ada6:	4835      	ldr	r0, [pc, #212]	; (800ae7c <_printf_i+0x244>)
 800ada8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800adac:	6823      	ldr	r3, [r4, #0]
 800adae:	680e      	ldr	r6, [r1, #0]
 800adb0:	061f      	lsls	r7, r3, #24
 800adb2:	f856 5b04 	ldr.w	r5, [r6], #4
 800adb6:	600e      	str	r6, [r1, #0]
 800adb8:	d514      	bpl.n	800ade4 <_printf_i+0x1ac>
 800adba:	07d9      	lsls	r1, r3, #31
 800adbc:	bf44      	itt	mi
 800adbe:	f043 0320 	orrmi.w	r3, r3, #32
 800adc2:	6023      	strmi	r3, [r4, #0]
 800adc4:	b91d      	cbnz	r5, 800adce <_printf_i+0x196>
 800adc6:	6823      	ldr	r3, [r4, #0]
 800adc8:	f023 0320 	bic.w	r3, r3, #32
 800adcc:	6023      	str	r3, [r4, #0]
 800adce:	2310      	movs	r3, #16
 800add0:	e7b0      	b.n	800ad34 <_printf_i+0xfc>
 800add2:	6823      	ldr	r3, [r4, #0]
 800add4:	f043 0320 	orr.w	r3, r3, #32
 800add8:	6023      	str	r3, [r4, #0]
 800adda:	2378      	movs	r3, #120	; 0x78
 800addc:	4828      	ldr	r0, [pc, #160]	; (800ae80 <_printf_i+0x248>)
 800adde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ade2:	e7e3      	b.n	800adac <_printf_i+0x174>
 800ade4:	065e      	lsls	r6, r3, #25
 800ade6:	bf48      	it	mi
 800ade8:	b2ad      	uxthmi	r5, r5
 800adea:	e7e6      	b.n	800adba <_printf_i+0x182>
 800adec:	4616      	mov	r6, r2
 800adee:	e7bb      	b.n	800ad68 <_printf_i+0x130>
 800adf0:	680b      	ldr	r3, [r1, #0]
 800adf2:	6826      	ldr	r6, [r4, #0]
 800adf4:	6960      	ldr	r0, [r4, #20]
 800adf6:	1d1d      	adds	r5, r3, #4
 800adf8:	600d      	str	r5, [r1, #0]
 800adfa:	0635      	lsls	r5, r6, #24
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	d501      	bpl.n	800ae04 <_printf_i+0x1cc>
 800ae00:	6018      	str	r0, [r3, #0]
 800ae02:	e002      	b.n	800ae0a <_printf_i+0x1d2>
 800ae04:	0671      	lsls	r1, r6, #25
 800ae06:	d5fb      	bpl.n	800ae00 <_printf_i+0x1c8>
 800ae08:	8018      	strh	r0, [r3, #0]
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	6123      	str	r3, [r4, #16]
 800ae0e:	4616      	mov	r6, r2
 800ae10:	e7ba      	b.n	800ad88 <_printf_i+0x150>
 800ae12:	680b      	ldr	r3, [r1, #0]
 800ae14:	1d1a      	adds	r2, r3, #4
 800ae16:	600a      	str	r2, [r1, #0]
 800ae18:	681e      	ldr	r6, [r3, #0]
 800ae1a:	6862      	ldr	r2, [r4, #4]
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	4630      	mov	r0, r6
 800ae20:	f7f5 f9de 	bl	80001e0 <memchr>
 800ae24:	b108      	cbz	r0, 800ae2a <_printf_i+0x1f2>
 800ae26:	1b80      	subs	r0, r0, r6
 800ae28:	6060      	str	r0, [r4, #4]
 800ae2a:	6863      	ldr	r3, [r4, #4]
 800ae2c:	6123      	str	r3, [r4, #16]
 800ae2e:	2300      	movs	r3, #0
 800ae30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae34:	e7a8      	b.n	800ad88 <_printf_i+0x150>
 800ae36:	6923      	ldr	r3, [r4, #16]
 800ae38:	4632      	mov	r2, r6
 800ae3a:	4649      	mov	r1, r9
 800ae3c:	4640      	mov	r0, r8
 800ae3e:	47d0      	blx	sl
 800ae40:	3001      	adds	r0, #1
 800ae42:	d0ab      	beq.n	800ad9c <_printf_i+0x164>
 800ae44:	6823      	ldr	r3, [r4, #0]
 800ae46:	079b      	lsls	r3, r3, #30
 800ae48:	d413      	bmi.n	800ae72 <_printf_i+0x23a>
 800ae4a:	68e0      	ldr	r0, [r4, #12]
 800ae4c:	9b03      	ldr	r3, [sp, #12]
 800ae4e:	4298      	cmp	r0, r3
 800ae50:	bfb8      	it	lt
 800ae52:	4618      	movlt	r0, r3
 800ae54:	e7a4      	b.n	800ada0 <_printf_i+0x168>
 800ae56:	2301      	movs	r3, #1
 800ae58:	4632      	mov	r2, r6
 800ae5a:	4649      	mov	r1, r9
 800ae5c:	4640      	mov	r0, r8
 800ae5e:	47d0      	blx	sl
 800ae60:	3001      	adds	r0, #1
 800ae62:	d09b      	beq.n	800ad9c <_printf_i+0x164>
 800ae64:	3501      	adds	r5, #1
 800ae66:	68e3      	ldr	r3, [r4, #12]
 800ae68:	9903      	ldr	r1, [sp, #12]
 800ae6a:	1a5b      	subs	r3, r3, r1
 800ae6c:	42ab      	cmp	r3, r5
 800ae6e:	dcf2      	bgt.n	800ae56 <_printf_i+0x21e>
 800ae70:	e7eb      	b.n	800ae4a <_printf_i+0x212>
 800ae72:	2500      	movs	r5, #0
 800ae74:	f104 0619 	add.w	r6, r4, #25
 800ae78:	e7f5      	b.n	800ae66 <_printf_i+0x22e>
 800ae7a:	bf00      	nop
 800ae7c:	0800b1b1 	.word	0x0800b1b1
 800ae80:	0800b1c2 	.word	0x0800b1c2

0800ae84 <memcpy>:
 800ae84:	440a      	add	r2, r1
 800ae86:	4291      	cmp	r1, r2
 800ae88:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae8c:	d100      	bne.n	800ae90 <memcpy+0xc>
 800ae8e:	4770      	bx	lr
 800ae90:	b510      	push	{r4, lr}
 800ae92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae9a:	4291      	cmp	r1, r2
 800ae9c:	d1f9      	bne.n	800ae92 <memcpy+0xe>
 800ae9e:	bd10      	pop	{r4, pc}

0800aea0 <memmove>:
 800aea0:	4288      	cmp	r0, r1
 800aea2:	b510      	push	{r4, lr}
 800aea4:	eb01 0402 	add.w	r4, r1, r2
 800aea8:	d902      	bls.n	800aeb0 <memmove+0x10>
 800aeaa:	4284      	cmp	r4, r0
 800aeac:	4623      	mov	r3, r4
 800aeae:	d807      	bhi.n	800aec0 <memmove+0x20>
 800aeb0:	1e43      	subs	r3, r0, #1
 800aeb2:	42a1      	cmp	r1, r4
 800aeb4:	d008      	beq.n	800aec8 <memmove+0x28>
 800aeb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aeba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aebe:	e7f8      	b.n	800aeb2 <memmove+0x12>
 800aec0:	4402      	add	r2, r0
 800aec2:	4601      	mov	r1, r0
 800aec4:	428a      	cmp	r2, r1
 800aec6:	d100      	bne.n	800aeca <memmove+0x2a>
 800aec8:	bd10      	pop	{r4, pc}
 800aeca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aece:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aed2:	e7f7      	b.n	800aec4 <memmove+0x24>

0800aed4 <_free_r>:
 800aed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aed6:	2900      	cmp	r1, #0
 800aed8:	d048      	beq.n	800af6c <_free_r+0x98>
 800aeda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aede:	9001      	str	r0, [sp, #4]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f1a1 0404 	sub.w	r4, r1, #4
 800aee6:	bfb8      	it	lt
 800aee8:	18e4      	addlt	r4, r4, r3
 800aeea:	f000 f8d3 	bl	800b094 <__malloc_lock>
 800aeee:	4a20      	ldr	r2, [pc, #128]	; (800af70 <_free_r+0x9c>)
 800aef0:	9801      	ldr	r0, [sp, #4]
 800aef2:	6813      	ldr	r3, [r2, #0]
 800aef4:	4615      	mov	r5, r2
 800aef6:	b933      	cbnz	r3, 800af06 <_free_r+0x32>
 800aef8:	6063      	str	r3, [r4, #4]
 800aefa:	6014      	str	r4, [r2, #0]
 800aefc:	b003      	add	sp, #12
 800aefe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af02:	f000 b8cd 	b.w	800b0a0 <__malloc_unlock>
 800af06:	42a3      	cmp	r3, r4
 800af08:	d90b      	bls.n	800af22 <_free_r+0x4e>
 800af0a:	6821      	ldr	r1, [r4, #0]
 800af0c:	1862      	adds	r2, r4, r1
 800af0e:	4293      	cmp	r3, r2
 800af10:	bf04      	itt	eq
 800af12:	681a      	ldreq	r2, [r3, #0]
 800af14:	685b      	ldreq	r3, [r3, #4]
 800af16:	6063      	str	r3, [r4, #4]
 800af18:	bf04      	itt	eq
 800af1a:	1852      	addeq	r2, r2, r1
 800af1c:	6022      	streq	r2, [r4, #0]
 800af1e:	602c      	str	r4, [r5, #0]
 800af20:	e7ec      	b.n	800aefc <_free_r+0x28>
 800af22:	461a      	mov	r2, r3
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	b10b      	cbz	r3, 800af2c <_free_r+0x58>
 800af28:	42a3      	cmp	r3, r4
 800af2a:	d9fa      	bls.n	800af22 <_free_r+0x4e>
 800af2c:	6811      	ldr	r1, [r2, #0]
 800af2e:	1855      	adds	r5, r2, r1
 800af30:	42a5      	cmp	r5, r4
 800af32:	d10b      	bne.n	800af4c <_free_r+0x78>
 800af34:	6824      	ldr	r4, [r4, #0]
 800af36:	4421      	add	r1, r4
 800af38:	1854      	adds	r4, r2, r1
 800af3a:	42a3      	cmp	r3, r4
 800af3c:	6011      	str	r1, [r2, #0]
 800af3e:	d1dd      	bne.n	800aefc <_free_r+0x28>
 800af40:	681c      	ldr	r4, [r3, #0]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	6053      	str	r3, [r2, #4]
 800af46:	4421      	add	r1, r4
 800af48:	6011      	str	r1, [r2, #0]
 800af4a:	e7d7      	b.n	800aefc <_free_r+0x28>
 800af4c:	d902      	bls.n	800af54 <_free_r+0x80>
 800af4e:	230c      	movs	r3, #12
 800af50:	6003      	str	r3, [r0, #0]
 800af52:	e7d3      	b.n	800aefc <_free_r+0x28>
 800af54:	6825      	ldr	r5, [r4, #0]
 800af56:	1961      	adds	r1, r4, r5
 800af58:	428b      	cmp	r3, r1
 800af5a:	bf04      	itt	eq
 800af5c:	6819      	ldreq	r1, [r3, #0]
 800af5e:	685b      	ldreq	r3, [r3, #4]
 800af60:	6063      	str	r3, [r4, #4]
 800af62:	bf04      	itt	eq
 800af64:	1949      	addeq	r1, r1, r5
 800af66:	6021      	streq	r1, [r4, #0]
 800af68:	6054      	str	r4, [r2, #4]
 800af6a:	e7c7      	b.n	800aefc <_free_r+0x28>
 800af6c:	b003      	add	sp, #12
 800af6e:	bd30      	pop	{r4, r5, pc}
 800af70:	2000043c 	.word	0x2000043c

0800af74 <_malloc_r>:
 800af74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af76:	1ccd      	adds	r5, r1, #3
 800af78:	f025 0503 	bic.w	r5, r5, #3
 800af7c:	3508      	adds	r5, #8
 800af7e:	2d0c      	cmp	r5, #12
 800af80:	bf38      	it	cc
 800af82:	250c      	movcc	r5, #12
 800af84:	2d00      	cmp	r5, #0
 800af86:	4606      	mov	r6, r0
 800af88:	db01      	blt.n	800af8e <_malloc_r+0x1a>
 800af8a:	42a9      	cmp	r1, r5
 800af8c:	d903      	bls.n	800af96 <_malloc_r+0x22>
 800af8e:	230c      	movs	r3, #12
 800af90:	6033      	str	r3, [r6, #0]
 800af92:	2000      	movs	r0, #0
 800af94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af96:	f000 f87d 	bl	800b094 <__malloc_lock>
 800af9a:	4921      	ldr	r1, [pc, #132]	; (800b020 <_malloc_r+0xac>)
 800af9c:	680a      	ldr	r2, [r1, #0]
 800af9e:	4614      	mov	r4, r2
 800afa0:	b99c      	cbnz	r4, 800afca <_malloc_r+0x56>
 800afa2:	4f20      	ldr	r7, [pc, #128]	; (800b024 <_malloc_r+0xb0>)
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	b923      	cbnz	r3, 800afb2 <_malloc_r+0x3e>
 800afa8:	4621      	mov	r1, r4
 800afaa:	4630      	mov	r0, r6
 800afac:	f000 f862 	bl	800b074 <_sbrk_r>
 800afb0:	6038      	str	r0, [r7, #0]
 800afb2:	4629      	mov	r1, r5
 800afb4:	4630      	mov	r0, r6
 800afb6:	f000 f85d 	bl	800b074 <_sbrk_r>
 800afba:	1c43      	adds	r3, r0, #1
 800afbc:	d123      	bne.n	800b006 <_malloc_r+0x92>
 800afbe:	230c      	movs	r3, #12
 800afc0:	6033      	str	r3, [r6, #0]
 800afc2:	4630      	mov	r0, r6
 800afc4:	f000 f86c 	bl	800b0a0 <__malloc_unlock>
 800afc8:	e7e3      	b.n	800af92 <_malloc_r+0x1e>
 800afca:	6823      	ldr	r3, [r4, #0]
 800afcc:	1b5b      	subs	r3, r3, r5
 800afce:	d417      	bmi.n	800b000 <_malloc_r+0x8c>
 800afd0:	2b0b      	cmp	r3, #11
 800afd2:	d903      	bls.n	800afdc <_malloc_r+0x68>
 800afd4:	6023      	str	r3, [r4, #0]
 800afd6:	441c      	add	r4, r3
 800afd8:	6025      	str	r5, [r4, #0]
 800afda:	e004      	b.n	800afe6 <_malloc_r+0x72>
 800afdc:	6863      	ldr	r3, [r4, #4]
 800afde:	42a2      	cmp	r2, r4
 800afe0:	bf0c      	ite	eq
 800afe2:	600b      	streq	r3, [r1, #0]
 800afe4:	6053      	strne	r3, [r2, #4]
 800afe6:	4630      	mov	r0, r6
 800afe8:	f000 f85a 	bl	800b0a0 <__malloc_unlock>
 800afec:	f104 000b 	add.w	r0, r4, #11
 800aff0:	1d23      	adds	r3, r4, #4
 800aff2:	f020 0007 	bic.w	r0, r0, #7
 800aff6:	1ac2      	subs	r2, r0, r3
 800aff8:	d0cc      	beq.n	800af94 <_malloc_r+0x20>
 800affa:	1a1b      	subs	r3, r3, r0
 800affc:	50a3      	str	r3, [r4, r2]
 800affe:	e7c9      	b.n	800af94 <_malloc_r+0x20>
 800b000:	4622      	mov	r2, r4
 800b002:	6864      	ldr	r4, [r4, #4]
 800b004:	e7cc      	b.n	800afa0 <_malloc_r+0x2c>
 800b006:	1cc4      	adds	r4, r0, #3
 800b008:	f024 0403 	bic.w	r4, r4, #3
 800b00c:	42a0      	cmp	r0, r4
 800b00e:	d0e3      	beq.n	800afd8 <_malloc_r+0x64>
 800b010:	1a21      	subs	r1, r4, r0
 800b012:	4630      	mov	r0, r6
 800b014:	f000 f82e 	bl	800b074 <_sbrk_r>
 800b018:	3001      	adds	r0, #1
 800b01a:	d1dd      	bne.n	800afd8 <_malloc_r+0x64>
 800b01c:	e7cf      	b.n	800afbe <_malloc_r+0x4a>
 800b01e:	bf00      	nop
 800b020:	2000043c 	.word	0x2000043c
 800b024:	20000440 	.word	0x20000440

0800b028 <_realloc_r>:
 800b028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02a:	4607      	mov	r7, r0
 800b02c:	4614      	mov	r4, r2
 800b02e:	460e      	mov	r6, r1
 800b030:	b921      	cbnz	r1, 800b03c <_realloc_r+0x14>
 800b032:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b036:	4611      	mov	r1, r2
 800b038:	f7ff bf9c 	b.w	800af74 <_malloc_r>
 800b03c:	b922      	cbnz	r2, 800b048 <_realloc_r+0x20>
 800b03e:	f7ff ff49 	bl	800aed4 <_free_r>
 800b042:	4625      	mov	r5, r4
 800b044:	4628      	mov	r0, r5
 800b046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b048:	f000 f830 	bl	800b0ac <_malloc_usable_size_r>
 800b04c:	42a0      	cmp	r0, r4
 800b04e:	d20f      	bcs.n	800b070 <_realloc_r+0x48>
 800b050:	4621      	mov	r1, r4
 800b052:	4638      	mov	r0, r7
 800b054:	f7ff ff8e 	bl	800af74 <_malloc_r>
 800b058:	4605      	mov	r5, r0
 800b05a:	2800      	cmp	r0, #0
 800b05c:	d0f2      	beq.n	800b044 <_realloc_r+0x1c>
 800b05e:	4631      	mov	r1, r6
 800b060:	4622      	mov	r2, r4
 800b062:	f7ff ff0f 	bl	800ae84 <memcpy>
 800b066:	4631      	mov	r1, r6
 800b068:	4638      	mov	r0, r7
 800b06a:	f7ff ff33 	bl	800aed4 <_free_r>
 800b06e:	e7e9      	b.n	800b044 <_realloc_r+0x1c>
 800b070:	4635      	mov	r5, r6
 800b072:	e7e7      	b.n	800b044 <_realloc_r+0x1c>

0800b074 <_sbrk_r>:
 800b074:	b538      	push	{r3, r4, r5, lr}
 800b076:	4d06      	ldr	r5, [pc, #24]	; (800b090 <_sbrk_r+0x1c>)
 800b078:	2300      	movs	r3, #0
 800b07a:	4604      	mov	r4, r0
 800b07c:	4608      	mov	r0, r1
 800b07e:	602b      	str	r3, [r5, #0]
 800b080:	f7f5 fe20 	bl	8000cc4 <_sbrk>
 800b084:	1c43      	adds	r3, r0, #1
 800b086:	d102      	bne.n	800b08e <_sbrk_r+0x1a>
 800b088:	682b      	ldr	r3, [r5, #0]
 800b08a:	b103      	cbz	r3, 800b08e <_sbrk_r+0x1a>
 800b08c:	6023      	str	r3, [r4, #0]
 800b08e:	bd38      	pop	{r3, r4, r5, pc}
 800b090:	20002320 	.word	0x20002320

0800b094 <__malloc_lock>:
 800b094:	4801      	ldr	r0, [pc, #4]	; (800b09c <__malloc_lock+0x8>)
 800b096:	f000 b811 	b.w	800b0bc <__retarget_lock_acquire_recursive>
 800b09a:	bf00      	nop
 800b09c:	20002328 	.word	0x20002328

0800b0a0 <__malloc_unlock>:
 800b0a0:	4801      	ldr	r0, [pc, #4]	; (800b0a8 <__malloc_unlock+0x8>)
 800b0a2:	f000 b80c 	b.w	800b0be <__retarget_lock_release_recursive>
 800b0a6:	bf00      	nop
 800b0a8:	20002328 	.word	0x20002328

0800b0ac <_malloc_usable_size_r>:
 800b0ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0b0:	1f18      	subs	r0, r3, #4
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	bfbc      	itt	lt
 800b0b6:	580b      	ldrlt	r3, [r1, r0]
 800b0b8:	18c0      	addlt	r0, r0, r3
 800b0ba:	4770      	bx	lr

0800b0bc <__retarget_lock_acquire_recursive>:
 800b0bc:	4770      	bx	lr

0800b0be <__retarget_lock_release_recursive>:
 800b0be:	4770      	bx	lr

0800b0c0 <_init>:
 800b0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c2:	bf00      	nop
 800b0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0c6:	bc08      	pop	{r3}
 800b0c8:	469e      	mov	lr, r3
 800b0ca:	4770      	bx	lr

0800b0cc <_fini>:
 800b0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ce:	bf00      	nop
 800b0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0d2:	bc08      	pop	{r3}
 800b0d4:	469e      	mov	lr, r3
 800b0d6:	4770      	bx	lr
