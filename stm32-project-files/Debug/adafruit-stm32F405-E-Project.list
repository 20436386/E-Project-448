
adafruit-stm32F405-E-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d7c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003f04  08003f04  00013f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f64  08003f64  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08003f64  08003f64  00013f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f6c  08003f6c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f6c  08003f6c  00013f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f70  08003f70  00013f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08003f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b18  20000180  080040f4  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c98  080040f4  00021c98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012100  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c6c  00000000  00000000  000322b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  00034f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  00035a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f14  00000000  00000000  000363d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e435  00000000  00000000  000572ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b91c4  00000000  00000000  00065721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011e8e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b44  00000000  00000000  0011e938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003eec 	.word	0x08003eec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	08003eec 	.word	0x08003eec

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 f945 	bl	8000764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f81d 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f885 	bl	80005ec <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004e2:	f003 f921 	bl	8003728 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char buf[] = "hello";
 80004e6:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <main+0x44>)
 80004e8:	463b      	mov	r3, r7
 80004ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004ee:	6018      	str	r0, [r3, #0]
 80004f0:	3304      	adds	r3, #4
 80004f2:	8019      	strh	r1, [r3, #0]
	  CDC_Transmit_FS((uint8_t*)buf, strlen(buf));
 80004f4:	463b      	mov	r3, r7
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff fe66 	bl	80001c8 <strlen>
 80004fc:	4603      	mov	r3, r0
 80004fe:	b29a      	uxth	r2, r3
 8000500:	463b      	mov	r3, r7
 8000502:	4611      	mov	r1, r2
 8000504:	4618      	mov	r0, r3
 8000506:	f003 f9cd 	bl	80038a4 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 800050a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800050e:	f000 f99b 	bl	8000848 <HAL_Delay>
  {
 8000512:	e7e8      	b.n	80004e6 <main+0x16>
 8000514:	08003f04 	.word	0x08003f04

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	; 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	; 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f003 fcd8 	bl	8003edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <SystemClock_Config+0xcc>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	; 0x40
 800054c:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <SystemClock_Config+0xd0>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000574:	2301      	movs	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000588:	2306      	movs	r3, #6
 800058a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800058c:	23a8      	movs	r3, #168	; 0xa8
 800058e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000594:	2307      	movs	r3, #7
 8000596:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	4618      	mov	r0, r3
 800059e:	f000 ff65 	bl	800146c <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005a8:	f000 f848 	bl	800063c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	2302      	movs	r3, #2
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2105      	movs	r1, #5
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 f9c6 	bl	800195c <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005d6:	f000 f831 	bl	800063c <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	; 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <MX_GPIO_Init+0x4c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a0f      	ldr	r2, [pc, #60]	; (8000638 <MX_GPIO_Init+0x4c>)
 80005fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <MX_GPIO_Init+0x4c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_GPIO_Init+0x4c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a08      	ldr	r2, [pc, #32]	; (8000638 <MX_GPIO_Init+0x4c>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_GPIO_Init+0x4c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]

}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
}
 8000642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000644:	e7fe      	b.n	8000644 <Error_Handler+0x8>
	...

08000648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <HAL_MspInit+0x4c>)
 8000654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000656:	4a0f      	ldr	r2, [pc, #60]	; (8000694 <HAL_MspInit+0x4c>)
 8000658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065c:	6453      	str	r3, [r2, #68]	; 0x44
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <HAL_MspInit+0x4c>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_MspInit+0x4c>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000672:	4a08      	ldr	r2, [pc, #32]	; (8000694 <HAL_MspInit+0x4c>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000678:	6413      	str	r3, [r2, #64]	; 0x40
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_MspInit+0x4c>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800

08000698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800069c:	e7fe      	b.n	800069c <NMI_Handler+0x4>

0800069e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <HardFault_Handler+0x4>

080006a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <MemManage_Handler+0x4>

080006aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <BusFault_Handler+0x4>

080006b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <UsageFault_Handler+0x4>

080006b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e4:	f000 f890 	bl	8000808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <SystemInit+0x20>)
 80006f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006f6:	4a05      	ldr	r2, [pc, #20]	; (800070c <SystemInit+0x20>)
 80006f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000748 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000714:	480d      	ldr	r0, [pc, #52]	; (800074c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000716:	490e      	ldr	r1, [pc, #56]	; (8000750 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000718:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800071c:	e002      	b.n	8000724 <LoopCopyDataInit>

0800071e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000722:	3304      	adds	r3, #4

08000724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000728:	d3f9      	bcc.n	800071e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072a:	4a0b      	ldr	r2, [pc, #44]	; (8000758 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800072c:	4c0b      	ldr	r4, [pc, #44]	; (800075c <LoopFillZerobss+0x26>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000730:	e001      	b.n	8000736 <LoopFillZerobss>

08000732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000734:	3204      	adds	r2, #4

08000736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000738:	d3fb      	bcc.n	8000732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800073a:	f7ff ffd7 	bl	80006ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800073e:	f003 fba9 	bl	8003e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000742:	f7ff fec5 	bl	80004d0 <main>
  bx  lr    
 8000746:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000748:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800074c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000750:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000754:	08003f74 	.word	0x08003f74
  ldr r2, =_sbss
 8000758:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800075c:	20001c98 	.word	0x20001c98

08000760 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC_IRQHandler>
	...

08000764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <HAL_Init+0x40>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <HAL_Init+0x40>)
 800076e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000772:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <HAL_Init+0x40>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <HAL_Init+0x40>)
 800077a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800077e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <HAL_Init+0x40>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a07      	ldr	r2, [pc, #28]	; (80007a4 <HAL_Init+0x40>)
 8000786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800078a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800078c:	2003      	movs	r0, #3
 800078e:	f000 f931 	bl	80009f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000792:	2000      	movs	r0, #0
 8000794:	f000 f808 	bl	80007a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000798:	f7ff ff56 	bl	8000648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023c00 	.word	0x40023c00

080007a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <HAL_InitTick+0x54>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_InitTick+0x58>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4619      	mov	r1, r3
 80007ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007be:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f93b 	bl	8000a42 <HAL_SYSTICK_Config>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
 80007d4:	e00e      	b.n	80007f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b0f      	cmp	r3, #15
 80007da:	d80a      	bhi.n	80007f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007dc:	2200      	movs	r2, #0
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007e4:	f000 f911 	bl	8000a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e8:	4a06      	ldr	r2, [pc, #24]	; (8000804 <HAL_InitTick+0x5c>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ee:	2300      	movs	r3, #0
 80007f0:	e000      	b.n	80007f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000000 	.word	0x20000000
 8000800:	20000008 	.word	0x20000008
 8000804:	20000004 	.word	0x20000004

08000808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_IncTick+0x20>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_IncTick+0x24>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4413      	add	r3, r2
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_IncTick+0x24>)
 800081a:	6013      	str	r3, [r2, #0]
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	20000008 	.word	0x20000008
 800082c:	200003bc 	.word	0x200003bc

08000830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return uwTick;
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <HAL_GetTick+0x14>)
 8000836:	681b      	ldr	r3, [r3, #0]
}
 8000838:	4618      	mov	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	200003bc 	.word	0x200003bc

08000848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000850:	f7ff ffee 	bl	8000830 <HAL_GetTick>
 8000854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000860:	d005      	beq.n	800086e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <HAL_Delay+0x44>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	4413      	add	r3, r2
 800086c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800086e:	bf00      	nop
 8000870:	f7ff ffde 	bl	8000830 <HAL_GetTick>
 8000874:	4602      	mov	r2, r0
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	429a      	cmp	r2, r3
 800087e:	d8f7      	bhi.n	8000870 <HAL_Delay+0x28>
  {
  }
}
 8000880:	bf00      	nop
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000008 	.word	0x20000008

08000890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ac:	4013      	ands	r3, r2
 80008ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c2:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	60d3      	str	r3, [r2, #12]
}
 80008c8:	bf00      	nop
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <__NVIC_GetPriorityGrouping+0x18>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	0a1b      	lsrs	r3, r3, #8
 80008e2:	f003 0307 	and.w	r3, r3, #7
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	6039      	str	r1, [r7, #0]
 80008fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000904:	2b00      	cmp	r3, #0
 8000906:	db0a      	blt.n	800091e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	b2da      	uxtb	r2, r3
 800090c:	490c      	ldr	r1, [pc, #48]	; (8000940 <__NVIC_SetPriority+0x4c>)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	0112      	lsls	r2, r2, #4
 8000914:	b2d2      	uxtb	r2, r2
 8000916:	440b      	add	r3, r1
 8000918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800091c:	e00a      	b.n	8000934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4908      	ldr	r1, [pc, #32]	; (8000944 <__NVIC_SetPriority+0x50>)
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f003 030f 	and.w	r3, r3, #15
 800092a:	3b04      	subs	r3, #4
 800092c:	0112      	lsls	r2, r2, #4
 800092e:	b2d2      	uxtb	r2, r2
 8000930:	440b      	add	r3, r1
 8000932:	761a      	strb	r2, [r3, #24]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000e100 	.word	0xe000e100
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000948:	b480      	push	{r7}
 800094a:	b089      	sub	sp, #36	; 0x24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	f1c3 0307 	rsb	r3, r3, #7
 8000962:	2b04      	cmp	r3, #4
 8000964:	bf28      	it	cs
 8000966:	2304      	movcs	r3, #4
 8000968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3304      	adds	r3, #4
 800096e:	2b06      	cmp	r3, #6
 8000970:	d902      	bls.n	8000978 <NVIC_EncodePriority+0x30>
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3b03      	subs	r3, #3
 8000976:	e000      	b.n	800097a <NVIC_EncodePriority+0x32>
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43da      	mvns	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	401a      	ands	r2, r3
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000990:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	43d9      	mvns	r1, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a0:	4313      	orrs	r3, r2
         );
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3724      	adds	r7, #36	; 0x24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
	...

080009b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009c0:	d301      	bcc.n	80009c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00f      	b.n	80009e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <SysTick_Config+0x40>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ce:	210f      	movs	r1, #15
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009d4:	f7ff ff8e 	bl	80008f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <SysTick_Config+0x40>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009de:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <SysTick_Config+0x40>)
 80009e0:	2207      	movs	r2, #7
 80009e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	e000e010 	.word	0xe000e010

080009f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ff47 	bl	8000890 <__NVIC_SetPriorityGrouping>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a1c:	f7ff ff5c 	bl	80008d8 <__NVIC_GetPriorityGrouping>
 8000a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	68b9      	ldr	r1, [r7, #8]
 8000a26:	6978      	ldr	r0, [r7, #20]
 8000a28:	f7ff ff8e 	bl	8000948 <NVIC_EncodePriority>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff5d 	bl	80008f4 <__NVIC_SetPriority>
}
 8000a3a:	bf00      	nop
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff ffb0 	bl	80009b0 <SysTick_Config>
 8000a50:	4603      	mov	r3, r0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b089      	sub	sp, #36	; 0x24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
 8000a76:	e16b      	b.n	8000d50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000a78:	2201      	movs	r2, #1
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	697a      	ldr	r2, [r7, #20]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	f040 815a 	bne.w	8000d4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f003 0303 	and.w	r3, r3, #3
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d005      	beq.n	8000aae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d130      	bne.n	8000b10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	2203      	movs	r2, #3
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	68da      	ldr	r2, [r3, #12]
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	4013      	ands	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	091b      	lsrs	r3, r3, #4
 8000afa:	f003 0201 	and.w	r2, r3, #1
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f003 0303 	and.w	r3, r3, #3
 8000b18:	2b03      	cmp	r3, #3
 8000b1a:	d017      	beq.n	8000b4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	2203      	movs	r2, #3
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	4013      	ands	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	689a      	ldr	r2, [r3, #8]
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f003 0303 	and.w	r3, r3, #3
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d123      	bne.n	8000ba0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	08da      	lsrs	r2, r3, #3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3208      	adds	r2, #8
 8000b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	f003 0307 	and.w	r3, r3, #7
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	220f      	movs	r2, #15
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	43db      	mvns	r3, r3
 8000b76:	69ba      	ldr	r2, [r7, #24]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	691a      	ldr	r2, [r3, #16]
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	08da      	lsrs	r2, r3, #3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3208      	adds	r2, #8
 8000b9a:	69b9      	ldr	r1, [r7, #24]
 8000b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	2203      	movs	r2, #3
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 0203 	and.w	r2, r3, #3
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	f000 80b4 	beq.w	8000d4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	4b60      	ldr	r3, [pc, #384]	; (8000d68 <HAL_GPIO_Init+0x30c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a5f      	ldr	r2, [pc, #380]	; (8000d68 <HAL_GPIO_Init+0x30c>)
 8000bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b5d      	ldr	r3, [pc, #372]	; (8000d68 <HAL_GPIO_Init+0x30c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bfe:	4a5b      	ldr	r2, [pc, #364]	; (8000d6c <HAL_GPIO_Init+0x310>)
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	089b      	lsrs	r3, r3, #2
 8000c04:	3302      	adds	r3, #2
 8000c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f003 0303 	and.w	r3, r3, #3
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	220f      	movs	r2, #15
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a52      	ldr	r2, [pc, #328]	; (8000d70 <HAL_GPIO_Init+0x314>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d02b      	beq.n	8000c82 <HAL_GPIO_Init+0x226>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a51      	ldr	r2, [pc, #324]	; (8000d74 <HAL_GPIO_Init+0x318>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d025      	beq.n	8000c7e <HAL_GPIO_Init+0x222>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a50      	ldr	r2, [pc, #320]	; (8000d78 <HAL_GPIO_Init+0x31c>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d01f      	beq.n	8000c7a <HAL_GPIO_Init+0x21e>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a4f      	ldr	r2, [pc, #316]	; (8000d7c <HAL_GPIO_Init+0x320>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d019      	beq.n	8000c76 <HAL_GPIO_Init+0x21a>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a4e      	ldr	r2, [pc, #312]	; (8000d80 <HAL_GPIO_Init+0x324>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d013      	beq.n	8000c72 <HAL_GPIO_Init+0x216>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a4d      	ldr	r2, [pc, #308]	; (8000d84 <HAL_GPIO_Init+0x328>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d00d      	beq.n	8000c6e <HAL_GPIO_Init+0x212>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a4c      	ldr	r2, [pc, #304]	; (8000d88 <HAL_GPIO_Init+0x32c>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d007      	beq.n	8000c6a <HAL_GPIO_Init+0x20e>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a4b      	ldr	r2, [pc, #300]	; (8000d8c <HAL_GPIO_Init+0x330>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d101      	bne.n	8000c66 <HAL_GPIO_Init+0x20a>
 8000c62:	2307      	movs	r3, #7
 8000c64:	e00e      	b.n	8000c84 <HAL_GPIO_Init+0x228>
 8000c66:	2308      	movs	r3, #8
 8000c68:	e00c      	b.n	8000c84 <HAL_GPIO_Init+0x228>
 8000c6a:	2306      	movs	r3, #6
 8000c6c:	e00a      	b.n	8000c84 <HAL_GPIO_Init+0x228>
 8000c6e:	2305      	movs	r3, #5
 8000c70:	e008      	b.n	8000c84 <HAL_GPIO_Init+0x228>
 8000c72:	2304      	movs	r3, #4
 8000c74:	e006      	b.n	8000c84 <HAL_GPIO_Init+0x228>
 8000c76:	2303      	movs	r3, #3
 8000c78:	e004      	b.n	8000c84 <HAL_GPIO_Init+0x228>
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	e002      	b.n	8000c84 <HAL_GPIO_Init+0x228>
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e000      	b.n	8000c84 <HAL_GPIO_Init+0x228>
 8000c82:	2300      	movs	r3, #0
 8000c84:	69fa      	ldr	r2, [r7, #28]
 8000c86:	f002 0203 	and.w	r2, r2, #3
 8000c8a:	0092      	lsls	r2, r2, #2
 8000c8c:	4093      	lsls	r3, r2
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c94:	4935      	ldr	r1, [pc, #212]	; (8000d6c <HAL_GPIO_Init+0x310>)
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	089b      	lsrs	r3, r3, #2
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ca2:	4b3b      	ldr	r3, [pc, #236]	; (8000d90 <HAL_GPIO_Init+0x334>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	43db      	mvns	r3, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d003      	beq.n	8000cc6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000cc6:	4a32      	ldr	r2, [pc, #200]	; (8000d90 <HAL_GPIO_Init+0x334>)
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ccc:	4b30      	ldr	r3, [pc, #192]	; (8000d90 <HAL_GPIO_Init+0x334>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d003      	beq.n	8000cf0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000cf0:	4a27      	ldr	r2, [pc, #156]	; (8000d90 <HAL_GPIO_Init+0x334>)
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cf6:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <HAL_GPIO_Init+0x334>)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4013      	ands	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d003      	beq.n	8000d1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d1a:	4a1d      	ldr	r2, [pc, #116]	; (8000d90 <HAL_GPIO_Init+0x334>)
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <HAL_GPIO_Init+0x334>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d003      	beq.n	8000d44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d44:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <HAL_GPIO_Init+0x334>)
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	61fb      	str	r3, [r7, #28]
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	2b0f      	cmp	r3, #15
 8000d54:	f67f ae90 	bls.w	8000a78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	3724      	adds	r7, #36	; 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40013800 	.word	0x40013800
 8000d70:	40020000 	.word	0x40020000
 8000d74:	40020400 	.word	0x40020400
 8000d78:	40020800 	.word	0x40020800
 8000d7c:	40020c00 	.word	0x40020c00
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40021400 	.word	0x40021400
 8000d88:	40021800 	.word	0x40021800
 8000d8c:	40021c00 	.word	0x40021c00
 8000d90:	40013c00 	.word	0x40013c00

08000d94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d96:	b08f      	sub	sp, #60	; 0x3c
 8000d98:	af0a      	add	r7, sp, #40	; 0x28
 8000d9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e10f      	b.n	8000fc6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d106      	bne.n	8000dc6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f002 feb7 	bl	8003b34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2203      	movs	r2, #3
 8000dca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d102      	bne.n	8000de0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 ffc7 	bl	8001d78 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	687e      	ldr	r6, [r7, #4]
 8000df2:	466d      	mov	r5, sp
 8000df4:	f106 0410 	add.w	r4, r6, #16
 8000df8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e04:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e08:	1d33      	adds	r3, r6, #4
 8000e0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e0c:	6838      	ldr	r0, [r7, #0]
 8000e0e:	f000 ff41 	bl	8001c94 <USB_CoreInit>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d005      	beq.n	8000e24 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e0d0      	b.n	8000fc6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 ffb5 	bl	8001d9a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	73fb      	strb	r3, [r7, #15]
 8000e34:	e04a      	b.n	8000ecc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e36:	7bfa      	ldrb	r2, [r7, #15]
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	1a9b      	subs	r3, r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	440b      	add	r3, r1
 8000e44:	333d      	adds	r3, #61	; 0x3d
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e4a:	7bfa      	ldrb	r2, [r7, #15]
 8000e4c:	6879      	ldr	r1, [r7, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	440b      	add	r3, r1
 8000e58:	333c      	adds	r3, #60	; 0x3c
 8000e5a:	7bfa      	ldrb	r2, [r7, #15]
 8000e5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e5e:	7bfa      	ldrb	r2, [r7, #15]
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	b298      	uxth	r0, r3
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	4613      	mov	r3, r2
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	1a9b      	subs	r3, r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	440b      	add	r3, r1
 8000e70:	3342      	adds	r3, #66	; 0x42
 8000e72:	4602      	mov	r2, r0
 8000e74:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e76:	7bfa      	ldrb	r2, [r7, #15]
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	1a9b      	subs	r3, r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	440b      	add	r3, r1
 8000e84:	333f      	adds	r3, #63	; 0x3f
 8000e86:	2200      	movs	r2, #0
 8000e88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e8a:	7bfa      	ldrb	r2, [r7, #15]
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	440b      	add	r3, r1
 8000e98:	3344      	adds	r3, #68	; 0x44
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ea0:	6879      	ldr	r1, [r7, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	1a9b      	subs	r3, r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	440b      	add	r3, r1
 8000eac:	3348      	adds	r3, #72	; 0x48
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000eb2:	7bfa      	ldrb	r2, [r7, #15]
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	1a9b      	subs	r3, r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	3350      	adds	r3, #80	; 0x50
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
 8000ecc:	7bfa      	ldrb	r2, [r7, #15]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d3af      	bcc.n	8000e36 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73fb      	strb	r3, [r7, #15]
 8000eda:	e044      	b.n	8000f66 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000edc:	7bfa      	ldrb	r2, [r7, #15]
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	1a9b      	subs	r3, r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	440b      	add	r3, r1
 8000eea:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	440b      	add	r3, r1
 8000f00:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000f04:	7bfa      	ldrb	r2, [r7, #15]
 8000f06:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f08:	7bfa      	ldrb	r2, [r7, #15]
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	1a9b      	subs	r3, r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	440b      	add	r3, r1
 8000f16:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	4613      	mov	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	1a9b      	subs	r3, r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	1a9b      	subs	r3, r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	440b      	add	r3, r1
 8000f42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f4a:	7bfa      	ldrb	r2, [r7, #15]
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	1a9b      	subs	r3, r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	440b      	add	r3, r1
 8000f58:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	3301      	adds	r3, #1
 8000f64:	73fb      	strb	r3, [r7, #15]
 8000f66:	7bfa      	ldrb	r2, [r7, #15]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d3b5      	bcc.n	8000edc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	687e      	ldr	r6, [r7, #4]
 8000f78:	466d      	mov	r5, sp
 8000f7a:	f106 0410 	add.w	r4, r6, #16
 8000f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f8e:	1d33      	adds	r3, r6, #4
 8000f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f92:	6838      	ldr	r0, [r7, #0]
 8000f94:	f000 ff4e 	bl	8001e34 <USB_DevInit>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d005      	beq.n	8000faa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00d      	b.n	8000fc6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 fec0 	bl	8002d44 <USB_DevDisconnect>

  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d101      	bne.n	8000fea <HAL_PCD_Start+0x1c>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e020      	b.n	800102c <HAL_PCD_Start+0x5e>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d109      	bne.n	800100e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d005      	beq.n	800100e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001006:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fe9f 	bl	8001d56 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f001 fe70 	bl	8002d02 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	4608      	mov	r0, r1
 800103e:	4611      	mov	r1, r2
 8001040:	461a      	mov	r2, r3
 8001042:	4603      	mov	r3, r0
 8001044:	70fb      	strb	r3, [r7, #3]
 8001046:	460b      	mov	r3, r1
 8001048:	803b      	strh	r3, [r7, #0]
 800104a:	4613      	mov	r3, r2
 800104c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001052:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001056:	2b00      	cmp	r3, #0
 8001058:	da0f      	bge.n	800107a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800105a:	78fb      	ldrb	r3, [r7, #3]
 800105c:	f003 020f 	and.w	r2, r3, #15
 8001060:	4613      	mov	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	1a9b      	subs	r3, r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	3338      	adds	r3, #56	; 0x38
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	3304      	adds	r3, #4
 8001070:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2201      	movs	r2, #1
 8001076:	705a      	strb	r2, [r3, #1]
 8001078:	e00f      	b.n	800109a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	f003 020f 	and.w	r2, r3, #15
 8001080:	4613      	mov	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	1a9b      	subs	r3, r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	4413      	add	r3, r2
 8001090:	3304      	adds	r3, #4
 8001092:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2200      	movs	r2, #0
 8001098:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800109a:	78fb      	ldrb	r3, [r7, #3]
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80010a6:	883a      	ldrh	r2, [r7, #0]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	78ba      	ldrb	r2, [r7, #2]
 80010b0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	785b      	ldrb	r3, [r3, #1]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d004      	beq.n	80010c4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b29a      	uxth	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80010c4:	78bb      	ldrb	r3, [r7, #2]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d102      	bne.n	80010d0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2200      	movs	r2, #0
 80010ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d101      	bne.n	80010de <HAL_PCD_EP_Open+0xaa>
 80010da:	2302      	movs	r3, #2
 80010dc:	e00e      	b.n	80010fc <HAL_PCD_EP_Open+0xc8>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2201      	movs	r2, #1
 80010e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	68f9      	ldr	r1, [r7, #12]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 f862 	bl	80021b6 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80010fa:	7afb      	ldrb	r3, [r7, #11]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001114:	2b00      	cmp	r3, #0
 8001116:	da0f      	bge.n	8001138 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	f003 020f 	and.w	r2, r3, #15
 800111e:	4613      	mov	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	1a9b      	subs	r3, r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	3338      	adds	r3, #56	; 0x38
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	4413      	add	r3, r2
 800112c:	3304      	adds	r3, #4
 800112e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2201      	movs	r2, #1
 8001134:	705a      	strb	r2, [r3, #1]
 8001136:	e00f      	b.n	8001158 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001138:	78fb      	ldrb	r3, [r7, #3]
 800113a:	f003 020f 	and.w	r2, r3, #15
 800113e:	4613      	mov	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	1a9b      	subs	r3, r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	3304      	adds	r3, #4
 8001150:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2200      	movs	r2, #0
 8001156:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	b2da      	uxtb	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <HAL_PCD_EP_Close+0x6e>
 800116e:	2302      	movs	r3, #2
 8001170:	e00e      	b.n	8001190 <HAL_PCD_EP_Close+0x8c>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68f9      	ldr	r1, [r7, #12]
 8001180:	4618      	mov	r0, r3
 8001182:	f001 f89f 	bl	80022c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	460b      	mov	r3, r1
 80011a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011a8:	7afb      	ldrb	r3, [r7, #11]
 80011aa:	f003 020f 	and.w	r2, r3, #15
 80011ae:	4613      	mov	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	1a9b      	subs	r3, r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	4413      	add	r3, r2
 80011be:	3304      	adds	r3, #4
 80011c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	2200      	movs	r2, #0
 80011d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011da:	7afb      	ldrb	r3, [r7, #11]
 80011dc:	f003 030f 	and.w	r3, r3, #15
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d102      	bne.n	80011f4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80011f4:	7afb      	ldrb	r3, [r7, #11]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d109      	bne.n	8001212 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	461a      	mov	r2, r3
 800120a:	6979      	ldr	r1, [r7, #20]
 800120c:	f001 fb7a 	bl	8002904 <USB_EP0StartXfer>
 8001210:	e008      	b.n	8001224 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6818      	ldr	r0, [r3, #0]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	461a      	mov	r2, r3
 800121e:	6979      	ldr	r1, [r7, #20]
 8001220:	f001 f92c 	bl	800247c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	460b      	mov	r3, r1
 8001238:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	f003 020f 	and.w	r2, r3, #15
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	4613      	mov	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	1a9b      	subs	r3, r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	440b      	add	r3, r1
 800124c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001250:	681b      	ldr	r3, [r3, #0]
}
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	460b      	mov	r3, r1
 800126c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800126e:	7afb      	ldrb	r3, [r7, #11]
 8001270:	f003 020f 	and.w	r2, r3, #15
 8001274:	4613      	mov	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	1a9b      	subs	r3, r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	3338      	adds	r3, #56	; 0x38
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	4413      	add	r3, r2
 8001282:	3304      	adds	r3, #4
 8001284:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	2201      	movs	r2, #1
 800129c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800129e:	7afb      	ldrb	r3, [r7, #11]
 80012a0:	f003 030f 	and.w	r3, r3, #15
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d102      	bne.n	80012b8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012b8:	7afb      	ldrb	r3, [r7, #11]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d109      	bne.n	80012d6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6818      	ldr	r0, [r3, #0]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	6979      	ldr	r1, [r7, #20]
 80012d0:	f001 fb18 	bl	8002904 <USB_EP0StartXfer>
 80012d4:	e008      	b.n	80012e8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6818      	ldr	r0, [r3, #0]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	461a      	mov	r2, r3
 80012e2:	6979      	ldr	r1, [r7, #20]
 80012e4:	f001 f8ca 	bl	800247c <USB_EPStartXfer>
  }

  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b084      	sub	sp, #16
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	460b      	mov	r3, r1
 80012fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80012fe:	78fb      	ldrb	r3, [r7, #3]
 8001300:	f003 020f 	and.w	r2, r3, #15
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	429a      	cmp	r2, r3
 800130a:	d901      	bls.n	8001310 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e050      	b.n	80013b2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001314:	2b00      	cmp	r3, #0
 8001316:	da0f      	bge.n	8001338 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	f003 020f 	and.w	r2, r3, #15
 800131e:	4613      	mov	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	1a9b      	subs	r3, r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	3338      	adds	r3, #56	; 0x38
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	4413      	add	r3, r2
 800132c:	3304      	adds	r3, #4
 800132e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2201      	movs	r2, #1
 8001334:	705a      	strb	r2, [r3, #1]
 8001336:	e00d      	b.n	8001354 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001338:	78fa      	ldrb	r2, [r7, #3]
 800133a:	4613      	mov	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	1a9b      	subs	r3, r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	3304      	adds	r3, #4
 800134c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2200      	movs	r2, #0
 8001352:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2201      	movs	r2, #1
 8001358:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	f003 030f 	and.w	r3, r3, #15
 8001360:	b2da      	uxtb	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800136c:	2b01      	cmp	r3, #1
 800136e:	d101      	bne.n	8001374 <HAL_PCD_EP_SetStall+0x82>
 8001370:	2302      	movs	r3, #2
 8001372:	e01e      	b.n	80013b2 <HAL_PCD_EP_SetStall+0xc0>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68f9      	ldr	r1, [r7, #12]
 8001382:	4618      	mov	r0, r3
 8001384:	f001 fc4f 	bl	8002c26 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	2b00      	cmp	r3, #0
 8001390:	d10a      	bne.n	80013a8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	b2d9      	uxtb	r1, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80013a2:	461a      	mov	r2, r3
 80013a4:	f001 fcfe 	bl	8002da4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b085      	sub	sp, #20
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	70fb      	strb	r3, [r7, #3]
 80013c6:	4613      	mov	r3, r2
 80013c8:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d107      	bne.n	80013e8 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80013d8:	883b      	ldrh	r3, [r7, #0]
 80013da:	0419      	lsls	r1, r3, #16
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	629a      	str	r2, [r3, #40]	; 0x28
 80013e6:	e028      	b.n	800143a <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ee:	0c1b      	lsrs	r3, r3, #16
 80013f0:	68ba      	ldr	r2, [r7, #8]
 80013f2:	4413      	add	r3, r2
 80013f4:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	73fb      	strb	r3, [r7, #15]
 80013fa:	e00d      	b.n	8001418 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	3340      	adds	r3, #64	; 0x40
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	0c1b      	lsrs	r3, r3, #16
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	4413      	add	r3, r2
 8001410:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	3301      	adds	r3, #1
 8001416:	73fb      	strb	r3, [r7, #15]
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	3b01      	subs	r3, #1
 800141e:	429a      	cmp	r2, r3
 8001420:	d3ec      	bcc.n	80013fc <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001422:	883b      	ldrh	r3, [r7, #0]
 8001424:	0418      	lsls	r0, r3, #16
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6819      	ldr	r1, [r3, #0]
 800142a:	78fb      	ldrb	r3, [r7, #3]
 800142c:	3b01      	subs	r3, #1
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	4302      	orrs	r2, r0
 8001432:	3340      	adds	r3, #64	; 0x40
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	440b      	add	r3, r1
 8001438:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	887a      	ldrh	r2, [r7, #2]
 800145a:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e264      	b.n	8001948 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d075      	beq.n	8001576 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800148a:	4ba3      	ldr	r3, [pc, #652]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b04      	cmp	r3, #4
 8001494:	d00c      	beq.n	80014b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001496:	4ba0      	ldr	r3, [pc, #640]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d112      	bne.n	80014c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014a2:	4b9d      	ldr	r3, [pc, #628]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014ae:	d10b      	bne.n	80014c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b0:	4b99      	ldr	r3, [pc, #612]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d05b      	beq.n	8001574 <HAL_RCC_OscConfig+0x108>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d157      	bne.n	8001574 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e23f      	b.n	8001948 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d0:	d106      	bne.n	80014e0 <HAL_RCC_OscConfig+0x74>
 80014d2:	4b91      	ldr	r3, [pc, #580]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a90      	ldr	r2, [pc, #576]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 80014d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	e01d      	b.n	800151c <HAL_RCC_OscConfig+0xb0>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014e8:	d10c      	bne.n	8001504 <HAL_RCC_OscConfig+0x98>
 80014ea:	4b8b      	ldr	r3, [pc, #556]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a8a      	ldr	r2, [pc, #552]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	4b88      	ldr	r3, [pc, #544]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a87      	ldr	r2, [pc, #540]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e00b      	b.n	800151c <HAL_RCC_OscConfig+0xb0>
 8001504:	4b84      	ldr	r3, [pc, #528]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a83      	ldr	r2, [pc, #524]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 800150a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b81      	ldr	r3, [pc, #516]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a80      	ldr	r2, [pc, #512]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 8001516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d013      	beq.n	800154c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff f984 	bl	8000830 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800152c:	f7ff f980 	bl	8000830 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b64      	cmp	r3, #100	; 0x64
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e204      	b.n	8001948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153e:	4b76      	ldr	r3, [pc, #472]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0xc0>
 800154a:	e014      	b.n	8001576 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff f970 	bl	8000830 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001554:	f7ff f96c 	bl	8000830 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b64      	cmp	r3, #100	; 0x64
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e1f0      	b.n	8001948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001566:	4b6c      	ldr	r3, [pc, #432]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0xe8>
 8001572:	e000      	b.n	8001576 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d063      	beq.n	800164a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001582:	4b65      	ldr	r3, [pc, #404]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00b      	beq.n	80015a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800158e:	4b62      	ldr	r3, [pc, #392]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001596:	2b08      	cmp	r3, #8
 8001598:	d11c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159a:	4b5f      	ldr	r3, [pc, #380]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d116      	bne.n	80015d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a6:	4b5c      	ldr	r3, [pc, #368]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d005      	beq.n	80015be <HAL_RCC_OscConfig+0x152>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d001      	beq.n	80015be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e1c4      	b.n	8001948 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015be:	4b56      	ldr	r3, [pc, #344]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	4952      	ldr	r1, [pc, #328]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d2:	e03a      	b.n	800164a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d020      	beq.n	800161e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015dc:	4b4f      	ldr	r3, [pc, #316]	; (800171c <HAL_RCC_OscConfig+0x2b0>)
 80015de:	2201      	movs	r2, #1
 80015e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff f925 	bl	8000830 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ea:	f7ff f921 	bl	8000830 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e1a5      	b.n	8001948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fc:	4b46      	ldr	r3, [pc, #280]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f0      	beq.n	80015ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001608:	4b43      	ldr	r3, [pc, #268]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	4940      	ldr	r1, [pc, #256]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 8001618:	4313      	orrs	r3, r2
 800161a:	600b      	str	r3, [r1, #0]
 800161c:	e015      	b.n	800164a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800161e:	4b3f      	ldr	r3, [pc, #252]	; (800171c <HAL_RCC_OscConfig+0x2b0>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff f904 	bl	8000830 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800162c:	f7ff f900 	bl	8000830 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e184      	b.n	8001948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163e:	4b36      	ldr	r3, [pc, #216]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	2b00      	cmp	r3, #0
 8001654:	d030      	beq.n	80016b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d016      	beq.n	800168c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800165e:	4b30      	ldr	r3, [pc, #192]	; (8001720 <HAL_RCC_OscConfig+0x2b4>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001664:	f7ff f8e4 	bl	8000830 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800166c:	f7ff f8e0 	bl	8000830 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e164      	b.n	8001948 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167e:	4b26      	ldr	r3, [pc, #152]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 8001680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0x200>
 800168a:	e015      	b.n	80016b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800168c:	4b24      	ldr	r3, [pc, #144]	; (8001720 <HAL_RCC_OscConfig+0x2b4>)
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001692:	f7ff f8cd 	bl	8000830 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800169a:	f7ff f8c9 	bl	8000830 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e14d      	b.n	8001948 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 80016ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f0      	bne.n	800169a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 80a0 	beq.w	8001806 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10f      	bne.n	80016f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	4a0e      	ldr	r2, [pc, #56]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e4:	6413      	str	r3, [r2, #64]	; 0x40
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <HAL_RCC_OscConfig+0x2ac>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016f2:	2301      	movs	r3, #1
 80016f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_RCC_OscConfig+0x2b8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d121      	bne.n	8001746 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_RCC_OscConfig+0x2b8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a07      	ldr	r2, [pc, #28]	; (8001724 <HAL_RCC_OscConfig+0x2b8>)
 8001708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170e:	f7ff f88f 	bl	8000830 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001714:	e011      	b.n	800173a <HAL_RCC_OscConfig+0x2ce>
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800
 800171c:	42470000 	.word	0x42470000
 8001720:	42470e80 	.word	0x42470e80
 8001724:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001728:	f7ff f882 	bl	8000830 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e106      	b.n	8001948 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173a:	4b85      	ldr	r3, [pc, #532]	; (8001950 <HAL_RCC_OscConfig+0x4e4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d106      	bne.n	800175c <HAL_RCC_OscConfig+0x2f0>
 800174e:	4b81      	ldr	r3, [pc, #516]	; (8001954 <HAL_RCC_OscConfig+0x4e8>)
 8001750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001752:	4a80      	ldr	r2, [pc, #512]	; (8001954 <HAL_RCC_OscConfig+0x4e8>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6713      	str	r3, [r2, #112]	; 0x70
 800175a:	e01c      	b.n	8001796 <HAL_RCC_OscConfig+0x32a>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2b05      	cmp	r3, #5
 8001762:	d10c      	bne.n	800177e <HAL_RCC_OscConfig+0x312>
 8001764:	4b7b      	ldr	r3, [pc, #492]	; (8001954 <HAL_RCC_OscConfig+0x4e8>)
 8001766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001768:	4a7a      	ldr	r2, [pc, #488]	; (8001954 <HAL_RCC_OscConfig+0x4e8>)
 800176a:	f043 0304 	orr.w	r3, r3, #4
 800176e:	6713      	str	r3, [r2, #112]	; 0x70
 8001770:	4b78      	ldr	r3, [pc, #480]	; (8001954 <HAL_RCC_OscConfig+0x4e8>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001774:	4a77      	ldr	r2, [pc, #476]	; (8001954 <HAL_RCC_OscConfig+0x4e8>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6713      	str	r3, [r2, #112]	; 0x70
 800177c:	e00b      	b.n	8001796 <HAL_RCC_OscConfig+0x32a>
 800177e:	4b75      	ldr	r3, [pc, #468]	; (8001954 <HAL_RCC_OscConfig+0x4e8>)
 8001780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001782:	4a74      	ldr	r2, [pc, #464]	; (8001954 <HAL_RCC_OscConfig+0x4e8>)
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	6713      	str	r3, [r2, #112]	; 0x70
 800178a:	4b72      	ldr	r3, [pc, #456]	; (8001954 <HAL_RCC_OscConfig+0x4e8>)
 800178c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178e:	4a71      	ldr	r2, [pc, #452]	; (8001954 <HAL_RCC_OscConfig+0x4e8>)
 8001790:	f023 0304 	bic.w	r3, r3, #4
 8001794:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d015      	beq.n	80017ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179e:	f7ff f847 	bl	8000830 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a4:	e00a      	b.n	80017bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a6:	f7ff f843 	bl	8000830 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e0c5      	b.n	8001948 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017bc:	4b65      	ldr	r3, [pc, #404]	; (8001954 <HAL_RCC_OscConfig+0x4e8>)
 80017be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0ee      	beq.n	80017a6 <HAL_RCC_OscConfig+0x33a>
 80017c8:	e014      	b.n	80017f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ca:	f7ff f831 	bl	8000830 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d0:	e00a      	b.n	80017e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d2:	f7ff f82d 	bl	8000830 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e0af      	b.n	8001948 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e8:	4b5a      	ldr	r3, [pc, #360]	; (8001954 <HAL_RCC_OscConfig+0x4e8>)
 80017ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1ee      	bne.n	80017d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d105      	bne.n	8001806 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017fa:	4b56      	ldr	r3, [pc, #344]	; (8001954 <HAL_RCC_OscConfig+0x4e8>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a55      	ldr	r2, [pc, #340]	; (8001954 <HAL_RCC_OscConfig+0x4e8>)
 8001800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 809b 	beq.w	8001946 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001810:	4b50      	ldr	r3, [pc, #320]	; (8001954 <HAL_RCC_OscConfig+0x4e8>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b08      	cmp	r3, #8
 800181a:	d05c      	beq.n	80018d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d141      	bne.n	80018a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001824:	4b4c      	ldr	r3, [pc, #304]	; (8001958 <HAL_RCC_OscConfig+0x4ec>)
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff f801 	bl	8000830 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001832:	f7fe fffd 	bl	8000830 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e081      	b.n	8001948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001844:	4b43      	ldr	r3, [pc, #268]	; (8001954 <HAL_RCC_OscConfig+0x4e8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f0      	bne.n	8001832 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69da      	ldr	r2, [r3, #28]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	431a      	orrs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	019b      	lsls	r3, r3, #6
 8001860:	431a      	orrs	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	085b      	lsrs	r3, r3, #1
 8001868:	3b01      	subs	r3, #1
 800186a:	041b      	lsls	r3, r3, #16
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	061b      	lsls	r3, r3, #24
 8001874:	4937      	ldr	r1, [pc, #220]	; (8001954 <HAL_RCC_OscConfig+0x4e8>)
 8001876:	4313      	orrs	r3, r2
 8001878:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800187a:	4b37      	ldr	r3, [pc, #220]	; (8001958 <HAL_RCC_OscConfig+0x4ec>)
 800187c:	2201      	movs	r2, #1
 800187e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7fe ffd6 	bl	8000830 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001888:	f7fe ffd2 	bl	8000830 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e056      	b.n	8001948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189a:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <HAL_RCC_OscConfig+0x4e8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0x41c>
 80018a6:	e04e      	b.n	8001946 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a8:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <HAL_RCC_OscConfig+0x4ec>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7fe ffbf 	bl	8000830 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b6:	f7fe ffbb 	bl	8000830 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e03f      	b.n	8001948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c8:	4b22      	ldr	r3, [pc, #136]	; (8001954 <HAL_RCC_OscConfig+0x4e8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f0      	bne.n	80018b6 <HAL_RCC_OscConfig+0x44a>
 80018d4:	e037      	b.n	8001946 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e032      	b.n	8001948 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018e2:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <HAL_RCC_OscConfig+0x4e8>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d028      	beq.n	8001942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d121      	bne.n	8001942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d11a      	bne.n	8001942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001912:	4013      	ands	r3, r2
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001918:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800191a:	4293      	cmp	r3, r2
 800191c:	d111      	bne.n	8001942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001928:	085b      	lsrs	r3, r3, #1
 800192a:	3b01      	subs	r3, #1
 800192c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800192e:	429a      	cmp	r2, r3
 8001930:	d107      	bne.n	8001942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800193e:	429a      	cmp	r2, r3
 8001940:	d001      	beq.n	8001946 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40007000 	.word	0x40007000
 8001954:	40023800 	.word	0x40023800
 8001958:	42470060 	.word	0x42470060

0800195c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0cc      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001970:	4b68      	ldr	r3, [pc, #416]	; (8001b14 <HAL_RCC_ClockConfig+0x1b8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d90c      	bls.n	8001998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197e:	4b65      	ldr	r3, [pc, #404]	; (8001b14 <HAL_RCC_ClockConfig+0x1b8>)
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001986:	4b63      	ldr	r3, [pc, #396]	; (8001b14 <HAL_RCC_ClockConfig+0x1b8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d001      	beq.n	8001998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0b8      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d020      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b0:	4b59      	ldr	r3, [pc, #356]	; (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	4a58      	ldr	r2, [pc, #352]	; (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019c8:	4b53      	ldr	r3, [pc, #332]	; (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	4a52      	ldr	r2, [pc, #328]	; (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d4:	4b50      	ldr	r3, [pc, #320]	; (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	494d      	ldr	r1, [pc, #308]	; (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d044      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d107      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fa:	4b47      	ldr	r3, [pc, #284]	; (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d119      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e07f      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d003      	beq.n	8001a1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d107      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1a:	4b3f      	ldr	r3, [pc, #252]	; (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d109      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e06f      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2a:	4b3b      	ldr	r3, [pc, #236]	; (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e067      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a3a:	4b37      	ldr	r3, [pc, #220]	; (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f023 0203 	bic.w	r2, r3, #3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4934      	ldr	r1, [pc, #208]	; (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a4c:	f7fe fef0 	bl	8000830 <HAL_GetTick>
 8001a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a52:	e00a      	b.n	8001a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a54:	f7fe feec 	bl	8000830 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e04f      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6a:	4b2b      	ldr	r3, [pc, #172]	; (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 020c 	and.w	r2, r3, #12
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d1eb      	bne.n	8001a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d20c      	bcs.n	8001aa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a92:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <HAL_RCC_ClockConfig+0x1b8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e032      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d008      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab0:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4916      	ldr	r1, [pc, #88]	; (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d009      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ace:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	490e      	ldr	r1, [pc, #56]	; (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ae2:	f000 f821 	bl	8001b28 <HAL_RCC_GetSysClockFreq>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	490a      	ldr	r1, [pc, #40]	; (8001b1c <HAL_RCC_ClockConfig+0x1c0>)
 8001af4:	5ccb      	ldrb	r3, [r1, r3]
 8001af6:	fa22 f303 	lsr.w	r3, r2, r3
 8001afa:	4a09      	ldr	r2, [pc, #36]	; (8001b20 <HAL_RCC_ClockConfig+0x1c4>)
 8001afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_RCC_ClockConfig+0x1c8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fe50 	bl	80007a8 <HAL_InitTick>

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023c00 	.word	0x40023c00
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	08003f54 	.word	0x08003f54
 8001b20:	20000000 	.word	0x20000000
 8001b24:	20000004 	.word	0x20000004

08001b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b28:	b5b0      	push	{r4, r5, r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b2e:	2100      	movs	r1, #0
 8001b30:	6079      	str	r1, [r7, #4]
 8001b32:	2100      	movs	r1, #0
 8001b34:	60f9      	str	r1, [r7, #12]
 8001b36:	2100      	movs	r1, #0
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b3e:	4952      	ldr	r1, [pc, #328]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b40:	6889      	ldr	r1, [r1, #8]
 8001b42:	f001 010c 	and.w	r1, r1, #12
 8001b46:	2908      	cmp	r1, #8
 8001b48:	d00d      	beq.n	8001b66 <HAL_RCC_GetSysClockFreq+0x3e>
 8001b4a:	2908      	cmp	r1, #8
 8001b4c:	f200 8094 	bhi.w	8001c78 <HAL_RCC_GetSysClockFreq+0x150>
 8001b50:	2900      	cmp	r1, #0
 8001b52:	d002      	beq.n	8001b5a <HAL_RCC_GetSysClockFreq+0x32>
 8001b54:	2904      	cmp	r1, #4
 8001b56:	d003      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x38>
 8001b58:	e08e      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b5a:	4b4c      	ldr	r3, [pc, #304]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x164>)
 8001b5c:	60bb      	str	r3, [r7, #8]
       break;
 8001b5e:	e08e      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b60:	4b4b      	ldr	r3, [pc, #300]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x168>)
 8001b62:	60bb      	str	r3, [r7, #8]
      break;
 8001b64:	e08b      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b66:	4948      	ldr	r1, [pc, #288]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b68:	6849      	ldr	r1, [r1, #4]
 8001b6a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001b6e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b70:	4945      	ldr	r1, [pc, #276]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b72:	6849      	ldr	r1, [r1, #4]
 8001b74:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001b78:	2900      	cmp	r1, #0
 8001b7a:	d024      	beq.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b7c:	4942      	ldr	r1, [pc, #264]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b7e:	6849      	ldr	r1, [r1, #4]
 8001b80:	0989      	lsrs	r1, r1, #6
 8001b82:	4608      	mov	r0, r1
 8001b84:	f04f 0100 	mov.w	r1, #0
 8001b88:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001b8c:	f04f 0500 	mov.w	r5, #0
 8001b90:	ea00 0204 	and.w	r2, r0, r4
 8001b94:	ea01 0305 	and.w	r3, r1, r5
 8001b98:	493d      	ldr	r1, [pc, #244]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x168>)
 8001b9a:	fb01 f003 	mul.w	r0, r1, r3
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	fb01 f102 	mul.w	r1, r1, r2
 8001ba4:	1844      	adds	r4, r0, r1
 8001ba6:	493a      	ldr	r1, [pc, #232]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x168>)
 8001ba8:	fba2 0101 	umull	r0, r1, r2, r1
 8001bac:	1863      	adds	r3, r4, r1
 8001bae:	4619      	mov	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	f7fe fb0e 	bl	80001d8 <__aeabi_uldivmod>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	e04a      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc6:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	099b      	lsrs	r3, r3, #6
 8001bcc:	461a      	mov	r2, r3
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bd6:	f04f 0100 	mov.w	r1, #0
 8001bda:	ea02 0400 	and.w	r4, r2, r0
 8001bde:	ea03 0501 	and.w	r5, r3, r1
 8001be2:	4620      	mov	r0, r4
 8001be4:	4629      	mov	r1, r5
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	014b      	lsls	r3, r1, #5
 8001bf0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bf4:	0142      	lsls	r2, r0, #5
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	1b00      	subs	r0, r0, r4
 8001bfc:	eb61 0105 	sbc.w	r1, r1, r5
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	018b      	lsls	r3, r1, #6
 8001c0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c0e:	0182      	lsls	r2, r0, #6
 8001c10:	1a12      	subs	r2, r2, r0
 8001c12:	eb63 0301 	sbc.w	r3, r3, r1
 8001c16:	f04f 0000 	mov.w	r0, #0
 8001c1a:	f04f 0100 	mov.w	r1, #0
 8001c1e:	00d9      	lsls	r1, r3, #3
 8001c20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c24:	00d0      	lsls	r0, r2, #3
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	1912      	adds	r2, r2, r4
 8001c2c:	eb45 0303 	adc.w	r3, r5, r3
 8001c30:	f04f 0000 	mov.w	r0, #0
 8001c34:	f04f 0100 	mov.w	r1, #0
 8001c38:	0299      	lsls	r1, r3, #10
 8001c3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c3e:	0290      	lsls	r0, r2, #10
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	f7fe fac2 	bl	80001d8 <__aeabi_uldivmod>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4613      	mov	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	0c1b      	lsrs	r3, r3, #16
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	3301      	adds	r3, #1
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c74:	60bb      	str	r3, [r7, #8]
      break;
 8001c76:	e002      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x164>)
 8001c7a:	60bb      	str	r3, [r7, #8]
      break;
 8001c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c7e:	68bb      	ldr	r3, [r7, #8]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bdb0      	pop	{r4, r5, r7, pc}
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	00f42400 	.word	0x00f42400
 8001c90:	00b71b00 	.word	0x00b71b00

08001c94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001c94:	b084      	sub	sp, #16
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b084      	sub	sp, #16
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	f107 001c 	add.w	r0, r7, #28
 8001ca2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d122      	bne.n	8001cf2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8001cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d105      	bne.n	8001ce6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f001 f8ba 	bl	8002e60 <USB_CoreReset>
 8001cec:	4603      	mov	r3, r0
 8001cee:	73fb      	strb	r3, [r7, #15]
 8001cf0:	e01a      	b.n	8001d28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f001 f8ae 	bl	8002e60 <USB_CoreReset>
 8001d04:	4603      	mov	r3, r0
 8001d06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8001d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	639a      	str	r2, [r3, #56]	; 0x38
 8001d1a:	e005      	b.n	8001d28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8001d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d10b      	bne.n	8001d46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f043 0206 	orr.w	r2, r3, #6
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f043 0220 	orr.w	r2, r3, #32
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d52:	b004      	add	sp, #16
 8001d54:	4770      	bx	lr

08001d56 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f043 0201 	orr.w	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f023 0201 	bic.w	r2, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d115      	bne.n	8001de8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8001dc8:	2001      	movs	r0, #1
 8001dca:	f7fe fd3d 	bl	8000848 <HAL_Delay>
      ms++;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 ffd6 	bl	8002d86 <USB_GetMode>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d01e      	beq.n	8001e1e <USB_SetCurrentMode+0x84>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b31      	cmp	r3, #49	; 0x31
 8001de4:	d9f0      	bls.n	8001dc8 <USB_SetCurrentMode+0x2e>
 8001de6:	e01a      	b.n	8001e1e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d115      	bne.n	8001e1a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	f7fe fd24 	bl	8000848 <HAL_Delay>
      ms++;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	3301      	adds	r3, #1
 8001e04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 ffbd 	bl	8002d86 <USB_GetMode>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d005      	beq.n	8001e1e <USB_SetCurrentMode+0x84>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b31      	cmp	r3, #49	; 0x31
 8001e16:	d9f0      	bls.n	8001dfa <USB_SetCurrentMode+0x60>
 8001e18:	e001      	b.n	8001e1e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e005      	b.n	8001e2a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b32      	cmp	r3, #50	; 0x32
 8001e22:	d101      	bne.n	8001e28 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001e34:	b084      	sub	sp, #16
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001e42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	e009      	b.n	8001e68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	3340      	adds	r3, #64	; 0x40
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	2200      	movs	r2, #0
 8001e60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	3301      	adds	r3, #1
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	2b0e      	cmp	r3, #14
 8001e6c:	d9f2      	bls.n	8001e54 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8001e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d11c      	bne.n	8001eae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e82:	f043 0302 	orr.w	r3, r3, #2
 8001e86:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e98:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	639a      	str	r2, [r3, #56]	; 0x38
 8001eac:	e00b      	b.n	8001ec6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2300      	movs	r3, #0
 8001ed0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ed8:	4619      	mov	r1, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	680b      	ldr	r3, [r1, #0]
 8001ee4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d10c      	bne.n	8001f06 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8001eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d104      	bne.n	8001efc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f945 	bl	8002184 <USB_SetDevSpeed>
 8001efa:	e008      	b.n	8001f0e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8001efc:	2101      	movs	r1, #1
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f940 	bl	8002184 <USB_SetDevSpeed>
 8001f04:	e003      	b.n	8001f0e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8001f06:	2103      	movs	r1, #3
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f93b 	bl	8002184 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001f0e:	2110      	movs	r1, #16
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f8f3 	bl	80020fc <USB_FlushTxFifo>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f90f 	bl	8002144 <USB_FlushRxFifo>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f36:	461a      	mov	r2, r3
 8001f38:	2300      	movs	r3, #0
 8001f3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f42:	461a      	mov	r2, r3
 8001f44:	2300      	movs	r3, #0
 8001f46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f4e:	461a      	mov	r2, r3
 8001f50:	2300      	movs	r3, #0
 8001f52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001f54:	2300      	movs	r3, #0
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	e043      	b.n	8001fe2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f70:	d118      	bne.n	8001fa4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10a      	bne.n	8001f8e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f84:	461a      	mov	r2, r3
 8001f86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	e013      	b.n	8001fb6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	015a      	lsls	r2, r3, #5
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4413      	add	r3, r2
 8001f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	e008      	b.n	8001fb6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	015a      	lsls	r2, r3, #5
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	015a      	lsls	r2, r3, #5
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	015a      	lsls	r2, r3, #5
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001fda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d3b7      	bcc.n	8001f5a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	e043      	b.n	8002078 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002002:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002006:	d118      	bne.n	800203a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10a      	bne.n	8002024 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4413      	add	r3, r2
 8002016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800201a:	461a      	mov	r2, r3
 800201c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	e013      	b.n	800204c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	015a      	lsls	r2, r3, #5
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4413      	add	r3, r2
 800202c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002030:	461a      	mov	r2, r3
 8002032:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	e008      	b.n	800204c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4413      	add	r3, r2
 8002042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002046:	461a      	mov	r2, r3
 8002048:	2300      	movs	r3, #0
 800204a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	015a      	lsls	r2, r3, #5
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4413      	add	r3, r2
 8002054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002058:	461a      	mov	r2, r3
 800205a:	2300      	movs	r3, #0
 800205c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4413      	add	r3, r2
 8002066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800206a:	461a      	mov	r2, r3
 800206c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002070:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	3301      	adds	r3, #1
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	429a      	cmp	r2, r3
 800207e:	d3b7      	bcc.n	8001ff0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800208e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002092:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80020a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80020a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d105      	bne.n	80020b4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f043 0210 	orr.w	r2, r3, #16
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	699a      	ldr	r2, [r3, #24]
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <USB_DevInit+0x2c4>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80020c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	f043 0208 	orr.w	r2, r3, #8
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80020d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d107      	bne.n	80020e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020e0:	f043 0304 	orr.w	r3, r3, #4
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80020e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020f4:	b004      	add	sp, #16
 80020f6:	4770      	bx	lr
 80020f8:	803c3800 	.word	0x803c3800

080020fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	019b      	lsls	r3, r3, #6
 800210e:	f043 0220 	orr.w	r2, r3, #32
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	3301      	adds	r3, #1
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	4a08      	ldr	r2, [pc, #32]	; (8002140 <USB_FlushTxFifo+0x44>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e006      	b.n	8002134 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	2b20      	cmp	r3, #32
 8002130:	d0f1      	beq.n	8002116 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	00030d40 	.word	0x00030d40

08002144 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2210      	movs	r2, #16
 8002154:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	3301      	adds	r3, #1
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	4a08      	ldr	r2, [pc, #32]	; (8002180 <USB_FlushRxFifo+0x3c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e006      	b.n	8002174 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	2b10      	cmp	r3, #16
 8002170:	d0f1      	beq.n	8002156 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	00030d40 	.word	0x00030d40

08002184 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	68f9      	ldr	r1, [r7, #12]
 80021a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021a4:	4313      	orrs	r3, r2
 80021a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b085      	sub	sp, #20
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	785b      	ldrb	r3, [r3, #1]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d13a      	bne.n	8002248 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021d8:	69da      	ldr	r2, [r3, #28]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	2101      	movs	r1, #1
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	68f9      	ldr	r1, [r7, #12]
 80021ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d155      	bne.n	80022b6 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4413      	add	r3, r2
 8002212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	78db      	ldrb	r3, [r3, #3]
 8002224:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002226:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	059b      	lsls	r3, r3, #22
 800222c:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800222e:	4313      	orrs	r3, r2
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	0151      	lsls	r1, r2, #5
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	440a      	add	r2, r1
 8002238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800223c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	e036      	b.n	80022b6 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800224e:	69da      	ldr	r2, [r3, #28]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	2101      	movs	r1, #1
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	041b      	lsls	r3, r3, #16
 8002260:	68f9      	ldr	r1, [r7, #12]
 8002262:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002266:	4313      	orrs	r3, r2
 8002268:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d11a      	bne.n	80022b6 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4413      	add	r3, r2
 8002288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	78db      	ldrb	r3, [r3, #3]
 800229a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800229c:	430b      	orrs	r3, r1
 800229e:	4313      	orrs	r3, r2
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	0151      	lsls	r1, r2, #5
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	440a      	add	r2, r1
 80022a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022b4:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	785b      	ldrb	r3, [r3, #1]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d161      	bne.n	80023a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022f6:	d11f      	bne.n	8002338 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	0151      	lsls	r1, r2, #5
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	440a      	add	r2, r1
 800230e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002312:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002316:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	0151      	lsls	r1, r2, #5
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	440a      	add	r2, r1
 800232e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002332:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002336:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800233e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	f003 030f 	and.w	r3, r3, #15
 8002348:	2101      	movs	r1, #1
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	b29b      	uxth	r3, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	68f9      	ldr	r1, [r7, #12]
 8002354:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002358:	4013      	ands	r3, r2
 800235a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002362:	69da      	ldr	r2, [r3, #28]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	f003 030f 	and.w	r3, r3, #15
 800236c:	2101      	movs	r1, #1
 800236e:	fa01 f303 	lsl.w	r3, r1, r3
 8002372:	b29b      	uxth	r3, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	68f9      	ldr	r1, [r7, #12]
 8002378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800237c:	4013      	ands	r3, r2
 800237e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4413      	add	r3, r2
 8002388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	0159      	lsls	r1, r3, #5
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	440b      	add	r3, r1
 8002396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800239a:	4619      	mov	r1, r3
 800239c:	4b35      	ldr	r3, [pc, #212]	; (8002474 <USB_DeactivateEndpoint+0x1b0>)
 800239e:	4013      	ands	r3, r2
 80023a0:	600b      	str	r3, [r1, #0]
 80023a2:	e060      	b.n	8002466 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023ba:	d11f      	bne.n	80023fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	015a      	lsls	r2, r3, #5
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	0151      	lsls	r1, r2, #5
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	440a      	add	r2, r1
 80023d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	0151      	lsls	r1, r2, #5
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	440a      	add	r2, r1
 80023f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	2101      	movs	r1, #1
 800240e:	fa01 f303 	lsl.w	r3, r1, r3
 8002412:	041b      	lsls	r3, r3, #16
 8002414:	43db      	mvns	r3, r3
 8002416:	68f9      	ldr	r1, [r7, #12]
 8002418:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800241c:	4013      	ands	r3, r2
 800241e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002426:	69da      	ldr	r2, [r3, #28]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	2101      	movs	r1, #1
 8002432:	fa01 f303 	lsl.w	r3, r1, r3
 8002436:	041b      	lsls	r3, r3, #16
 8002438:	43db      	mvns	r3, r3
 800243a:	68f9      	ldr	r1, [r7, #12]
 800243c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002440:	4013      	ands	r3, r2
 8002442:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4413      	add	r3, r2
 800244c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	0159      	lsls	r1, r3, #5
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	440b      	add	r3, r1
 800245a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800245e:	4619      	mov	r1, r3
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <USB_DeactivateEndpoint+0x1b4>)
 8002462:	4013      	ands	r3, r2
 8002464:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	ec337800 	.word	0xec337800
 8002478:	eff37800 	.word	0xeff37800

0800247c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af02      	add	r7, sp, #8
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	4613      	mov	r3, r2
 8002488:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	785b      	ldrb	r3, [r3, #1]
 8002498:	2b01      	cmp	r3, #1
 800249a:	f040 815c 	bne.w	8002756 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d132      	bne.n	800250c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	0151      	lsls	r1, r2, #5
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	440a      	add	r2, r1
 80024bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80024c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80024c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	0151      	lsls	r1, r2, #5
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	440a      	add	r2, r1
 80024e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	0151      	lsls	r1, r2, #5
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	440a      	add	r2, r1
 8002500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002504:	0cdb      	lsrs	r3, r3, #19
 8002506:	04db      	lsls	r3, r3, #19
 8002508:	6113      	str	r3, [r2, #16]
 800250a:	e074      	b.n	80025f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	4413      	add	r3, r2
 8002514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	0151      	lsls	r1, r2, #5
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	440a      	add	r2, r1
 8002522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002526:	0cdb      	lsrs	r3, r3, #19
 8002528:	04db      	lsls	r3, r3, #19
 800252a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	4413      	add	r3, r2
 8002534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	0151      	lsls	r1, r2, #5
 800253e:	69fa      	ldr	r2, [r7, #28]
 8002540:	440a      	add	r2, r1
 8002542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002546:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800254a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800254e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	4413      	add	r3, r2
 8002558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800255c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	6959      	ldr	r1, [r3, #20]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	440b      	add	r3, r1
 8002568:	1e59      	subs	r1, r3, #1
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002572:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8002574:	4b9d      	ldr	r3, [pc, #628]	; (80027ec <USB_EPStartXfer+0x370>)
 8002576:	400b      	ands	r3, r1
 8002578:	69b9      	ldr	r1, [r7, #24]
 800257a:	0148      	lsls	r0, r1, #5
 800257c:	69f9      	ldr	r1, [r7, #28]
 800257e:	4401      	add	r1, r0
 8002580:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8002584:	4313      	orrs	r3, r2
 8002586:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	4413      	add	r3, r2
 8002590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002594:	691a      	ldr	r2, [r3, #16]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259e:	69b9      	ldr	r1, [r7, #24]
 80025a0:	0148      	lsls	r0, r1, #5
 80025a2:	69f9      	ldr	r1, [r7, #28]
 80025a4:	4401      	add	r1, r0
 80025a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80025aa:	4313      	orrs	r3, r2
 80025ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	78db      	ldrb	r3, [r3, #3]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d11f      	bne.n	80025f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	0151      	lsls	r1, r2, #5
 80025c8:	69fa      	ldr	r2, [r7, #28]
 80025ca:	440a      	add	r2, r1
 80025cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80025d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80025d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	0151      	lsls	r1, r2, #5
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	440a      	add	r2, r1
 80025ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80025f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d14b      	bne.n	8002694 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d009      	beq.n	8002618 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	4413      	add	r3, r2
 800260c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002610:	461a      	mov	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	78db      	ldrb	r3, [r3, #3]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d128      	bne.n	8002672 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d110      	bne.n	8002652 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	4413      	add	r3, r2
 8002638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	0151      	lsls	r1, r2, #5
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	440a      	add	r2, r1
 8002646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800264a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	e00f      	b.n	8002672 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	4413      	add	r3, r2
 800265a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	0151      	lsls	r1, r2, #5
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	440a      	add	r2, r1
 8002668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002670:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	4413      	add	r3, r2
 800267a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	0151      	lsls	r1, r2, #5
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	440a      	add	r2, r1
 8002688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800268c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	e12f      	b.n	80028f4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	4413      	add	r3, r2
 800269c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	0151      	lsls	r1, r2, #5
 80026a6:	69fa      	ldr	r2, [r7, #28]
 80026a8:	440a      	add	r2, r1
 80026aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80026b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	78db      	ldrb	r3, [r3, #3]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d015      	beq.n	80026e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 8117 	beq.w	80028f4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	2101      	movs	r1, #1
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	69f9      	ldr	r1, [r7, #28]
 80026de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026e2:	4313      	orrs	r3, r2
 80026e4:	634b      	str	r3, [r1, #52]	; 0x34
 80026e6:	e105      	b.n	80028f4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d110      	bne.n	800271a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	0151      	lsls	r1, r2, #5
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	440a      	add	r2, r1
 800270e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002712:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	e00f      	b.n	800273a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	4413      	add	r3, r2
 8002722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	0151      	lsls	r1, r2, #5
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	440a      	add	r2, r1
 8002730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002738:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	68d9      	ldr	r1, [r3, #12]
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	781a      	ldrb	r2, [r3, #0]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	b298      	uxth	r0, r3
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	4603      	mov	r3, r0
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fa2b 	bl	8002baa <USB_WritePacket>
 8002754:	e0ce      	b.n	80028f4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	4413      	add	r3, r2
 800275e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	0151      	lsls	r1, r2, #5
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	440a      	add	r2, r1
 800276c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002770:	0cdb      	lsrs	r3, r3, #19
 8002772:	04db      	lsls	r3, r3, #19
 8002774:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	4413      	add	r3, r2
 800277e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	0151      	lsls	r1, r2, #5
 8002788:	69fa      	ldr	r2, [r7, #28]
 800278a:	440a      	add	r2, r1
 800278c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002790:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002794:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002798:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d126      	bne.n	80027f0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b8:	69b9      	ldr	r1, [r7, #24]
 80027ba:	0148      	lsls	r0, r1, #5
 80027bc:	69f9      	ldr	r1, [r7, #28]
 80027be:	4401      	add	r1, r0
 80027c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80027c4:	4313      	orrs	r3, r2
 80027c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	0151      	lsls	r1, r2, #5
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	440a      	add	r2, r1
 80027de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027e6:	6113      	str	r3, [r2, #16]
 80027e8:	e036      	b.n	8002858 <USB_EPStartXfer+0x3dc>
 80027ea:	bf00      	nop
 80027ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	695a      	ldr	r2, [r3, #20]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4413      	add	r3, r2
 80027fa:	1e5a      	subs	r2, r3, #1
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	fbb2 f3f3 	udiv	r3, r2, r3
 8002804:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	4413      	add	r3, r2
 800280e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	8afb      	ldrh	r3, [r7, #22]
 8002816:	04d9      	lsls	r1, r3, #19
 8002818:	4b39      	ldr	r3, [pc, #228]	; (8002900 <USB_EPStartXfer+0x484>)
 800281a:	400b      	ands	r3, r1
 800281c:	69b9      	ldr	r1, [r7, #24]
 800281e:	0148      	lsls	r0, r1, #5
 8002820:	69f9      	ldr	r1, [r7, #28]
 8002822:	4401      	add	r1, r0
 8002824:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8002828:	4313      	orrs	r3, r2
 800282a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	4413      	add	r3, r2
 8002834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002838:	691a      	ldr	r2, [r3, #16]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	8af9      	ldrh	r1, [r7, #22]
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002848:	69b9      	ldr	r1, [r7, #24]
 800284a:	0148      	lsls	r0, r1, #5
 800284c:	69f9      	ldr	r1, [r7, #28]
 800284e:	4401      	add	r1, r0
 8002850:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8002854:	4313      	orrs	r3, r2
 8002856:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d10d      	bne.n	800287a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	68d9      	ldr	r1, [r3, #12]
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	4413      	add	r3, r2
 8002872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002876:	460a      	mov	r2, r1
 8002878:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	78db      	ldrb	r3, [r3, #3]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d128      	bne.n	80028d4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d110      	bne.n	80028b4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	4413      	add	r3, r2
 800289a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	0151      	lsls	r1, r2, #5
 80028a4:	69fa      	ldr	r2, [r7, #28]
 80028a6:	440a      	add	r2, r1
 80028a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	e00f      	b.n	80028d4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	0151      	lsls	r1, r2, #5
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	440a      	add	r2, r1
 80028ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	0151      	lsls	r1, r2, #5
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	440a      	add	r2, r1
 80028ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80028f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3720      	adds	r7, #32
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	1ff80000 	.word	0x1ff80000

08002904 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	4613      	mov	r3, r2
 8002910:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	785b      	ldrb	r3, [r3, #1]
 8002920:	2b01      	cmp	r3, #1
 8002922:	f040 80cd 	bne.w	8002ac0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d132      	bne.n	8002994 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	4413      	add	r3, r2
 8002936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	0151      	lsls	r1, r2, #5
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	440a      	add	r2, r1
 8002944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002948:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800294c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002950:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	4413      	add	r3, r2
 800295a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	0151      	lsls	r1, r2, #5
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	440a      	add	r2, r1
 8002968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800296c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002970:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	4413      	add	r3, r2
 800297a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	0151      	lsls	r1, r2, #5
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	440a      	add	r2, r1
 8002988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800298c:	0cdb      	lsrs	r3, r3, #19
 800298e:	04db      	lsls	r3, r3, #19
 8002990:	6113      	str	r3, [r2, #16]
 8002992:	e04e      	b.n	8002a32 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	4413      	add	r3, r2
 800299c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	0151      	lsls	r1, r2, #5
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	440a      	add	r2, r1
 80029aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029ae:	0cdb      	lsrs	r3, r3, #19
 80029b0:	04db      	lsls	r3, r3, #19
 80029b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	0151      	lsls	r1, r2, #5
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	440a      	add	r2, r1
 80029ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80029d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80029d6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	695a      	ldr	r2, [r3, #20]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d903      	bls.n	80029ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	0151      	lsls	r1, r2, #5
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	440a      	add	r2, r1
 8002a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a22:	6939      	ldr	r1, [r7, #16]
 8002a24:	0148      	lsls	r0, r1, #5
 8002a26:	6979      	ldr	r1, [r7, #20]
 8002a28:	4401      	add	r1, r0
 8002a2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d11e      	bne.n	8002a76 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d009      	beq.n	8002a54 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	0151      	lsls	r1, r2, #5
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	440a      	add	r2, r1
 8002a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	e092      	b.n	8002b9c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	0151      	lsls	r1, r2, #5
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	440a      	add	r2, r1
 8002a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002a94:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d07e      	beq.n	8002b9c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	2101      	movs	r1, #1
 8002ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab4:	6979      	ldr	r1, [r7, #20]
 8002ab6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002aba:	4313      	orrs	r3, r2
 8002abc:	634b      	str	r3, [r1, #52]	; 0x34
 8002abe:	e06d      	b.n	8002b9c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	0151      	lsls	r1, r2, #5
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	440a      	add	r2, r1
 8002ad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ada:	0cdb      	lsrs	r3, r3, #19
 8002adc:	04db      	lsls	r3, r3, #19
 8002ade:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	0151      	lsls	r1, r2, #5
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	440a      	add	r2, r1
 8002af6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002afa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002afe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002b02:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	0151      	lsls	r1, r2, #5
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	440a      	add	r2, r1
 8002b2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b32:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b40:	691a      	ldr	r2, [r3, #16]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4a:	6939      	ldr	r1, [r7, #16]
 8002b4c:	0148      	lsls	r0, r1, #5
 8002b4e:	6979      	ldr	r1, [r7, #20]
 8002b50:	4401      	add	r1, r0
 8002b52:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8002b56:	4313      	orrs	r3, r2
 8002b58:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d10d      	bne.n	8002b7c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d009      	beq.n	8002b7c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	68d9      	ldr	r1, [r3, #12]
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b78:	460a      	mov	r2, r1
 8002b7a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	0151      	lsls	r1, r2, #5
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	440a      	add	r2, r1
 8002b92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002b9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	371c      	adds	r7, #28
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b089      	sub	sp, #36	; 0x24
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	460b      	mov	r3, r1
 8002bba:	71fb      	strb	r3, [r7, #7]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8002bc8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d123      	bne.n	8002c18 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8002bd0:	88bb      	ldrh	r3, [r7, #4]
 8002bd2:	3303      	adds	r3, #3
 8002bd4:	089b      	lsrs	r3, r3, #2
 8002bd6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61bb      	str	r3, [r7, #24]
 8002bdc:	e018      	b.n	8002c10 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	031a      	lsls	r2, r3, #12
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bea:	461a      	mov	r2, r3
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3301      	adds	r3, #1
 8002c02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	3301      	adds	r3, #1
 8002c08:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	61bb      	str	r3, [r7, #24]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d3e2      	bcc.n	8002bde <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3724      	adds	r7, #36	; 0x24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b085      	sub	sp, #20
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	785b      	ldrb	r3, [r3, #1]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d12c      	bne.n	8002c9c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	db12      	blt.n	8002c7a <USB_EPSetStall+0x54>
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00f      	beq.n	8002c7a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	0151      	lsls	r1, r2, #5
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	440a      	add	r2, r1
 8002c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c78:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	0151      	lsls	r1, r2, #5
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	440a      	add	r2, r1
 8002c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	e02b      	b.n	8002cf4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	db12      	blt.n	8002cd4 <USB_EPSetStall+0xae>
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00f      	beq.n	8002cd4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	015a      	lsls	r2, r3, #5
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	0151      	lsls	r1, r2, #5
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	440a      	add	r2, r1
 8002cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cd2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	0151      	lsls	r1, r2, #5
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	440a      	add	r2, r1
 8002cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b085      	sub	sp, #20
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8002d1c:	f023 0303 	bic.w	r3, r3, #3
 8002d20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d30:	f023 0302 	bic.w	r3, r3, #2
 8002d34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8002d5e:	f023 0303 	bic.w	r3, r3, #3
 8002d62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d72:	f043 0302 	orr.w	r3, r3, #2
 8002d76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f003 0301 	and.w	r3, r3, #1
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
	...

08002da4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	460b      	mov	r3, r1
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	333c      	adds	r3, #60	; 0x3c
 8002dba:	3304      	adds	r3, #4
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4a26      	ldr	r2, [pc, #152]	; (8002e5c <USB_EP0_OutStart+0xb8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d90a      	bls.n	8002dde <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dd8:	d101      	bne.n	8002dde <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e037      	b.n	8002e4e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de4:	461a      	mov	r2, r3
 8002de6:	2300      	movs	r3, #0
 8002de8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002df8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002dfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e0c:	f043 0318 	orr.w	r3, r3, #24
 8002e10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e20:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8002e24:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8002e26:	7afb      	ldrb	r3, [r7, #11]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d10f      	bne.n	8002e4c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e32:	461a      	mov	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e46:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8002e4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	371c      	adds	r7, #28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	4f54300a 	.word	0x4f54300a

08002e60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	4a13      	ldr	r2, [pc, #76]	; (8002ec0 <USB_CoreReset+0x60>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d901      	bls.n	8002e7c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e01a      	b.n	8002eb2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	daf3      	bge.n	8002e6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f043 0201 	orr.w	r2, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	3301      	adds	r3, #1
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	4a09      	ldr	r2, [pc, #36]	; (8002ec0 <USB_CoreReset+0x60>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d901      	bls.n	8002ea4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e006      	b.n	8002eb2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d0f1      	beq.n	8002e94 <USB_CoreReset+0x34>

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	00030d40 	.word	0x00030d40

08002ec4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8002ed0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002ed4:	f000 ff9a 	bl	8003e0c <USBD_static_malloc>
 8002ed8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d105      	bne.n	8002eec <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e066      	b.n	8002fba <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	7c1b      	ldrb	r3, [r3, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d119      	bne.n	8002f30 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f00:	2202      	movs	r2, #2
 8002f02:	2181      	movs	r1, #129	; 0x81
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fec8 	bl	8003c9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002f10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f14:	2202      	movs	r2, #2
 8002f16:	2101      	movs	r1, #1
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 febe 	bl	8003c9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2210      	movs	r2, #16
 8002f2a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8002f2e:	e016      	b.n	8002f5e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002f30:	2340      	movs	r3, #64	; 0x40
 8002f32:	2202      	movs	r2, #2
 8002f34:	2181      	movs	r1, #129	; 0x81
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 feaf 	bl	8003c9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002f42:	2340      	movs	r3, #64	; 0x40
 8002f44:	2202      	movs	r2, #2
 8002f46:	2101      	movs	r1, #1
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fea6 	bl	8003c9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2210      	movs	r2, #16
 8002f5a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002f5e:	2308      	movs	r3, #8
 8002f60:	2203      	movs	r2, #3
 8002f62:	2182      	movs	r1, #130	; 0x82
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fe98 	bl	8003c9a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7c1b      	ldrb	r3, [r3, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d109      	bne.n	8002fa8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 feff 	bl	8003da4 <USBD_LL_PrepareReceive>
 8002fa6:	e007      	b.n	8002fb8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002fae:	2340      	movs	r3, #64	; 0x40
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 fef6 	bl	8003da4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8002fce:	2181      	movs	r1, #129	; 0x81
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fe88 	bl	8003ce6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002fdc:	2101      	movs	r1, #1
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fe81 	bl	8003ce6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8002fec:	2182      	movs	r1, #130	; 0x82
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fe79 	bl	8003ce6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00e      	beq.n	800302c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800301e:	4618      	mov	r0, r3
 8003020:	f000 ff02 	bl	8003e28 <USBD_static_free>
    pdev->pClassData = NULL;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003048:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800304a:	2300      	movs	r3, #0
 800304c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800305c:	2303      	movs	r3, #3
 800305e:	e0af      	b.n	80031c0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003068:	2b00      	cmp	r3, #0
 800306a:	d03f      	beq.n	80030ec <USBD_CDC_Setup+0xb4>
 800306c:	2b20      	cmp	r3, #32
 800306e:	f040 809f 	bne.w	80031b0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	88db      	ldrh	r3, [r3, #6]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d02e      	beq.n	80030d8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	b25b      	sxtb	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	da16      	bge.n	80030b2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8003090:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	88d2      	ldrh	r2, [r2, #6]
 8003096:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	88db      	ldrh	r3, [r3, #6]
 800309c:	2b07      	cmp	r3, #7
 800309e:	bf28      	it	cs
 80030a0:	2307      	movcs	r3, #7
 80030a2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	89fa      	ldrh	r2, [r7, #14]
 80030a8:	4619      	mov	r1, r3
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fb04 	bl	80036b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80030b0:	e085      	b.n	80031be <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	785a      	ldrb	r2, [r3, #1]
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	88db      	ldrh	r3, [r3, #6]
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80030c8:	6939      	ldr	r1, [r7, #16]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	88db      	ldrh	r3, [r3, #6]
 80030ce:	461a      	mov	r2, r3
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fb0c 	bl	80036ee <USBD_CtlPrepareRx>
      break;
 80030d6:	e072      	b.n	80031be <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	7850      	ldrb	r0, [r2, #1]
 80030e4:	2200      	movs	r2, #0
 80030e6:	6839      	ldr	r1, [r7, #0]
 80030e8:	4798      	blx	r3
      break;
 80030ea:	e068      	b.n	80031be <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	785b      	ldrb	r3, [r3, #1]
 80030f0:	2b0b      	cmp	r3, #11
 80030f2:	d852      	bhi.n	800319a <USBD_CDC_Setup+0x162>
 80030f4:	a201      	add	r2, pc, #4	; (adr r2, 80030fc <USBD_CDC_Setup+0xc4>)
 80030f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fa:	bf00      	nop
 80030fc:	0800312d 	.word	0x0800312d
 8003100:	080031a9 	.word	0x080031a9
 8003104:	0800319b 	.word	0x0800319b
 8003108:	0800319b 	.word	0x0800319b
 800310c:	0800319b 	.word	0x0800319b
 8003110:	0800319b 	.word	0x0800319b
 8003114:	0800319b 	.word	0x0800319b
 8003118:	0800319b 	.word	0x0800319b
 800311c:	0800319b 	.word	0x0800319b
 8003120:	0800319b 	.word	0x0800319b
 8003124:	08003157 	.word	0x08003157
 8003128:	08003181 	.word	0x08003181
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b03      	cmp	r3, #3
 8003136:	d107      	bne.n	8003148 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8003138:	f107 030a 	add.w	r3, r7, #10
 800313c:	2202      	movs	r2, #2
 800313e:	4619      	mov	r1, r3
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fab9 	bl	80036b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003146:	e032      	b.n	80031ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8003148:	6839      	ldr	r1, [r7, #0]
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fa43 	bl	80035d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8003150:	2303      	movs	r3, #3
 8003152:	75fb      	strb	r3, [r7, #23]
          break;
 8003154:	e02b      	b.n	80031ae <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b03      	cmp	r3, #3
 8003160:	d107      	bne.n	8003172 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8003162:	f107 030d 	add.w	r3, r7, #13
 8003166:	2201      	movs	r2, #1
 8003168:	4619      	mov	r1, r3
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 faa4 	bl	80036b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003170:	e01d      	b.n	80031ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8003172:	6839      	ldr	r1, [r7, #0]
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 fa2e 	bl	80035d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800317a:	2303      	movs	r3, #3
 800317c:	75fb      	strb	r3, [r7, #23]
          break;
 800317e:	e016      	b.n	80031ae <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b03      	cmp	r3, #3
 800318a:	d00f      	beq.n	80031ac <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800318c:	6839      	ldr	r1, [r7, #0]
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fa21 	bl	80035d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8003194:	2303      	movs	r3, #3
 8003196:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8003198:	e008      	b.n	80031ac <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800319a:	6839      	ldr	r1, [r7, #0]
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 fa1a 	bl	80035d6 <USBD_CtlError>
          ret = USBD_FAIL;
 80031a2:	2303      	movs	r3, #3
 80031a4:	75fb      	strb	r3, [r7, #23]
          break;
 80031a6:	e002      	b.n	80031ae <USBD_CDC_Setup+0x176>
          break;
 80031a8:	bf00      	nop
 80031aa:	e008      	b.n	80031be <USBD_CDC_Setup+0x186>
          break;
 80031ac:	bf00      	nop
      }
      break;
 80031ae:	e006      	b.n	80031be <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80031b0:	6839      	ldr	r1, [r7, #0]
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fa0f 	bl	80035d6 <USBD_CtlError>
      ret = USBD_FAIL;
 80031b8:	2303      	movs	r3, #3
 80031ba:	75fb      	strb	r3, [r7, #23]
      break;
 80031bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80031be:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80031da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e04f      	b.n	800328a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80031f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	3318      	adds	r3, #24
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d029      	beq.n	800325c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	3318      	adds	r3, #24
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	78f9      	ldrb	r1, [r7, #3]
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	460b      	mov	r3, r1
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	1a5b      	subs	r3, r3, r1
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4403      	add	r3, r0
 8003228:	3344      	adds	r3, #68	; 0x44
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	fbb2 f1f3 	udiv	r1, r2, r3
 8003230:	fb03 f301 	mul.w	r3, r3, r1
 8003234:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8003236:	2b00      	cmp	r3, #0
 8003238:	d110      	bne.n	800325c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800323a:	78fa      	ldrb	r2, [r7, #3]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	3318      	adds	r3, #24
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800324e:	78f9      	ldrb	r1, [r7, #3]
 8003250:	2300      	movs	r3, #0
 8003252:	2200      	movs	r2, #0
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 fd84 	bl	8003d62 <USBD_LL_Transmit>
 800325a:	e015      	b.n	8003288 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2200      	movs	r2, #0
 8003260:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00b      	beq.n	8003288 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80032a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e015      	b.n	80032e0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	4619      	mov	r1, r3
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fd94 	bl	8003de6 <USBD_LL_GetRxDataSize>
 80032be:	4602      	mov	r2, r0
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80032da:	4611      	mov	r1, r2
 80032dc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80032f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80032fe:	2303      	movs	r3, #3
 8003300:	e01b      	b.n	800333a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d015      	beq.n	8003338 <USBD_CDC_EP0_RxReady+0x50>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003312:	2bff      	cmp	r3, #255	; 0xff
 8003314:	d010      	beq.n	8003338 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8003324:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800332c:	b292      	uxth	r2, r2
 800332e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	22ff      	movs	r2, #255	; 0xff
 8003334:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2243      	movs	r2, #67	; 0x43
 8003350:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8003352:	4b03      	ldr	r3, [pc, #12]	; (8003360 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8003354:	4618      	mov	r0, r3
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	20000094 	.word	0x20000094

08003364 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2243      	movs	r2, #67	; 0x43
 8003370:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8003372:	4b03      	ldr	r3, [pc, #12]	; (8003380 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8003374:	4618      	mov	r0, r3
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	20000050 	.word	0x20000050

08003384 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2243      	movs	r2, #67	; 0x43
 8003390:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8003392:	4b03      	ldr	r3, [pc, #12]	; (80033a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	200000d8 	.word	0x200000d8

080033a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	220a      	movs	r2, #10
 80033b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80033b2:	4b03      	ldr	r3, [pc, #12]	; (80033c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	2000000c 	.word	0x2000000c

080033c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e004      	b.n	80033e2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b087      	sub	sp, #28
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003400:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8003408:	2303      	movs	r3, #3
 800340a:	e008      	b.n	800341e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	371c      	adds	r7, #28
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800342a:	b480      	push	{r7}
 800342c:	b085      	sub	sp, #20
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800343a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8003442:	2303      	movs	r3, #3
 8003444:	e004      	b.n	8003450 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800346a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800347a:	2303      	movs	r3, #3
 800347c:	e01a      	b.n	80034b4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003484:	2b00      	cmp	r3, #0
 8003486:	d114      	bne.n	80034b2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2201      	movs	r2, #1
 800348c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80034a6:	2181      	movs	r1, #129	; 0x81
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 fc5a 	bl	8003d62 <USBD_LL_Transmit>

    ret = USBD_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80034ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e016      	b.n	8003508 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	7c1b      	ldrb	r3, [r3, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d109      	bne.n	80034f6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80034e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034ec:	2101      	movs	r1, #1
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fc58 	bl	8003da4 <USBD_LL_PrepareReceive>
 80034f4:	e007      	b.n	8003506 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80034fc:	2340      	movs	r3, #64	; 0x40
 80034fe:	2101      	movs	r1, #1
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fc4f 	bl	8003da4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	4613      	mov	r3, r2
 800351c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8003524:	2303      	movs	r3, #3
 8003526:	e01f      	b.n	8003568 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	79fa      	ldrb	r2, [r7, #7]
 800355a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 fb35 	bl	8003bcc <USBD_LL_Init>
 8003562:	4603      	mov	r3, r0
 8003564:	75fb      	strb	r3, [r7, #23]

  return ret;
 8003566:	7dfb      	ldrb	r3, [r7, #23]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8003584:	2303      	movs	r3, #3
 8003586:	e016      	b.n	80035b6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00b      	beq.n	80035b4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	f107 020e 	add.w	r2, r7, #14
 80035a8:	4610      	mov	r0, r2
 80035aa:	4798      	blx	r3
 80035ac:	4602      	mov	r2, r0
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fb4c 	bl	8003c64 <USBD_LL_Start>
 80035cc:	4603      	mov	r3, r0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80035e0:	2180      	movs	r1, #128	; 0x80
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fb9e 	bl	8003d24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80035e8:	2100      	movs	r1, #0
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fb9a 	bl	8003d24 <USBD_LL_StallEP>
}
 80035f0:	bf00      	nop
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d036      	beq.n	800367c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8003612:	6938      	ldr	r0, [r7, #16]
 8003614:	f000 f836 	bl	8003684 <USBD_GetLen>
 8003618:	4603      	mov	r3, r0
 800361a:	3301      	adds	r3, #1
 800361c:	b29b      	uxth	r3, r3
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8003626:	7dfb      	ldrb	r3, [r7, #23]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	4413      	add	r3, r2
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	7812      	ldrb	r2, [r2, #0]
 8003630:	701a      	strb	r2, [r3, #0]
  idx++;
 8003632:	7dfb      	ldrb	r3, [r7, #23]
 8003634:	3301      	adds	r3, #1
 8003636:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8003638:	7dfb      	ldrb	r3, [r7, #23]
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	4413      	add	r3, r2
 800363e:	2203      	movs	r2, #3
 8003640:	701a      	strb	r2, [r3, #0]
  idx++;
 8003642:	7dfb      	ldrb	r3, [r7, #23]
 8003644:	3301      	adds	r3, #1
 8003646:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8003648:	e013      	b.n	8003672 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800364a:	7dfb      	ldrb	r3, [r7, #23]
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	4413      	add	r3, r2
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	7812      	ldrb	r2, [r2, #0]
 8003654:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	3301      	adds	r3, #1
 800365a:	613b      	str	r3, [r7, #16]
    idx++;
 800365c:	7dfb      	ldrb	r3, [r7, #23]
 800365e:	3301      	adds	r3, #1
 8003660:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8003662:	7dfb      	ldrb	r3, [r7, #23]
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	4413      	add	r3, r2
 8003668:	2200      	movs	r2, #0
 800366a:	701a      	strb	r2, [r3, #0]
    idx++;
 800366c:	7dfb      	ldrb	r3, [r7, #23]
 800366e:	3301      	adds	r3, #1
 8003670:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1e7      	bne.n	800364a <USBD_GetString+0x52>
 800367a:	e000      	b.n	800367e <USBD_GetString+0x86>
    return;
 800367c:	bf00      	nop
  }
}
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8003694:	e005      	b.n	80036a2 <USBD_GetLen+0x1e>
  {
    len++;
 8003696:	7bfb      	ldrb	r3, [r7, #15]
 8003698:	3301      	adds	r3, #1
 800369a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	3301      	adds	r3, #1
 80036a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f5      	bne.n	8003696 <USBD_GetLen+0x12>
  }

  return len;
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	2100      	movs	r1, #0
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 fb3f 	bl	8003d62 <USBD_LL_Transmit>

  return USBD_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2203      	movs	r2, #3
 80036fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	2100      	movs	r1, #0
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 fb43 	bl	8003da4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800372c:	2200      	movs	r2, #0
 800372e:	4912      	ldr	r1, [pc, #72]	; (8003778 <MX_USB_DEVICE_Init+0x50>)
 8003730:	4812      	ldr	r0, [pc, #72]	; (800377c <MX_USB_DEVICE_Init+0x54>)
 8003732:	f7ff feed 	bl	8003510 <USBD_Init>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800373c:	f7fc ff7e 	bl	800063c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8003740:	490f      	ldr	r1, [pc, #60]	; (8003780 <MX_USB_DEVICE_Init+0x58>)
 8003742:	480e      	ldr	r0, [pc, #56]	; (800377c <MX_USB_DEVICE_Init+0x54>)
 8003744:	f7ff ff14 	bl	8003570 <USBD_RegisterClass>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800374e:	f7fc ff75 	bl	800063c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8003752:	490c      	ldr	r1, [pc, #48]	; (8003784 <MX_USB_DEVICE_Init+0x5c>)
 8003754:	4809      	ldr	r0, [pc, #36]	; (800377c <MX_USB_DEVICE_Init+0x54>)
 8003756:	f7ff fe35 	bl	80033c4 <USBD_CDC_RegisterInterface>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8003760:	f7fc ff6c 	bl	800063c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003764:	4805      	ldr	r0, [pc, #20]	; (800377c <MX_USB_DEVICE_Init+0x54>)
 8003766:	f7ff ff2a 	bl	80035be <USBD_Start>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8003770:	f7fc ff64 	bl	800063c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003774:	bf00      	nop
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20000130 	.word	0x20000130
 800377c:	200003c0 	.word	0x200003c0
 8003780:	20000018 	.word	0x20000018
 8003784:	2000011c 	.word	0x2000011c

08003788 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800378c:	2200      	movs	r2, #0
 800378e:	4905      	ldr	r1, [pc, #20]	; (80037a4 <CDC_Init_FS+0x1c>)
 8003790:	4805      	ldr	r0, [pc, #20]	; (80037a8 <CDC_Init_FS+0x20>)
 8003792:	f7ff fe2c 	bl	80033ee <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8003796:	4905      	ldr	r1, [pc, #20]	; (80037ac <CDC_Init_FS+0x24>)
 8003798:	4803      	ldr	r0, [pc, #12]	; (80037a8 <CDC_Init_FS+0x20>)
 800379a:	f7ff fe46 	bl	800342a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800379e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000e90 	.word	0x20000e90
 80037a8:	200003c0 	.word	0x200003c0
 80037ac:	20000690 	.word	0x20000690

080037b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80037b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	6039      	str	r1, [r7, #0]
 80037ca:	71fb      	strb	r3, [r7, #7]
 80037cc:	4613      	mov	r3, r2
 80037ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	2b23      	cmp	r3, #35	; 0x23
 80037d4:	d84a      	bhi.n	800386c <CDC_Control_FS+0xac>
 80037d6:	a201      	add	r2, pc, #4	; (adr r2, 80037dc <CDC_Control_FS+0x1c>)
 80037d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037dc:	0800386d 	.word	0x0800386d
 80037e0:	0800386d 	.word	0x0800386d
 80037e4:	0800386d 	.word	0x0800386d
 80037e8:	0800386d 	.word	0x0800386d
 80037ec:	0800386d 	.word	0x0800386d
 80037f0:	0800386d 	.word	0x0800386d
 80037f4:	0800386d 	.word	0x0800386d
 80037f8:	0800386d 	.word	0x0800386d
 80037fc:	0800386d 	.word	0x0800386d
 8003800:	0800386d 	.word	0x0800386d
 8003804:	0800386d 	.word	0x0800386d
 8003808:	0800386d 	.word	0x0800386d
 800380c:	0800386d 	.word	0x0800386d
 8003810:	0800386d 	.word	0x0800386d
 8003814:	0800386d 	.word	0x0800386d
 8003818:	0800386d 	.word	0x0800386d
 800381c:	0800386d 	.word	0x0800386d
 8003820:	0800386d 	.word	0x0800386d
 8003824:	0800386d 	.word	0x0800386d
 8003828:	0800386d 	.word	0x0800386d
 800382c:	0800386d 	.word	0x0800386d
 8003830:	0800386d 	.word	0x0800386d
 8003834:	0800386d 	.word	0x0800386d
 8003838:	0800386d 	.word	0x0800386d
 800383c:	0800386d 	.word	0x0800386d
 8003840:	0800386d 	.word	0x0800386d
 8003844:	0800386d 	.word	0x0800386d
 8003848:	0800386d 	.word	0x0800386d
 800384c:	0800386d 	.word	0x0800386d
 8003850:	0800386d 	.word	0x0800386d
 8003854:	0800386d 	.word	0x0800386d
 8003858:	0800386d 	.word	0x0800386d
 800385c:	0800386d 	.word	0x0800386d
 8003860:	0800386d 	.word	0x0800386d
 8003864:	0800386d 	.word	0x0800386d
 8003868:	0800386d 	.word	0x0800386d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800386c:	bf00      	nop
  }

  return (USBD_OK);
 800386e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4805      	ldr	r0, [pc, #20]	; (80038a0 <CDC_Receive_FS+0x24>)
 800388a:	f7ff fdce 	bl	800342a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800388e:	4804      	ldr	r0, [pc, #16]	; (80038a0 <CDC_Receive_FS+0x24>)
 8003890:	f7ff fe14 	bl	80034bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8003894:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	200003c0 	.word	0x200003c0

080038a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80038b4:	4b0d      	ldr	r3, [pc, #52]	; (80038ec <CDC_Transmit_FS+0x48>)
 80038b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80038ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e00b      	b.n	80038e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80038ca:	887b      	ldrh	r3, [r7, #2]
 80038cc:	461a      	mov	r2, r3
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4806      	ldr	r0, [pc, #24]	; (80038ec <CDC_Transmit_FS+0x48>)
 80038d2:	f7ff fd8c 	bl	80033ee <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80038d6:	4805      	ldr	r0, [pc, #20]	; (80038ec <CDC_Transmit_FS+0x48>)
 80038d8:	f7ff fdc0 	bl	800345c <USBD_CDC_TransmitPacket>
 80038dc:	4603      	mov	r3, r0
 80038de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	200003c0 	.word	0x200003c0

080038f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	4613      	mov	r3, r2
 80038fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8003902:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003906:	4618      	mov	r0, r3
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	6039      	str	r1, [r7, #0]
 800391e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2212      	movs	r2, #18
 8003924:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8003926:	4b03      	ldr	r3, [pc, #12]	; (8003934 <USBD_FS_DeviceDescriptor+0x20>)
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	2000014c 	.word	0x2000014c

08003938 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	6039      	str	r1, [r7, #0]
 8003942:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2204      	movs	r2, #4
 8003948:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800394a:	4b03      	ldr	r3, [pc, #12]	; (8003958 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	20000160 	.word	0x20000160

0800395c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	6039      	str	r1, [r7, #0]
 8003966:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d105      	bne.n	800397a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	4907      	ldr	r1, [pc, #28]	; (8003990 <USBD_FS_ProductStrDescriptor+0x34>)
 8003972:	4808      	ldr	r0, [pc, #32]	; (8003994 <USBD_FS_ProductStrDescriptor+0x38>)
 8003974:	f7ff fe40 	bl	80035f8 <USBD_GetString>
 8003978:	e004      	b.n	8003984 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	4904      	ldr	r1, [pc, #16]	; (8003990 <USBD_FS_ProductStrDescriptor+0x34>)
 800397e:	4805      	ldr	r0, [pc, #20]	; (8003994 <USBD_FS_ProductStrDescriptor+0x38>)
 8003980:	f7ff fe3a 	bl	80035f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8003984:	4b02      	ldr	r3, [pc, #8]	; (8003990 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20001690 	.word	0x20001690
 8003994:	08003f0c 	.word	0x08003f0c

08003998 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	6039      	str	r1, [r7, #0]
 80039a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	4904      	ldr	r1, [pc, #16]	; (80039b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80039a8:	4804      	ldr	r0, [pc, #16]	; (80039bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80039aa:	f7ff fe25 	bl	80035f8 <USBD_GetString>
  return USBD_StrDesc;
 80039ae:	4b02      	ldr	r3, [pc, #8]	; (80039b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20001690 	.word	0x20001690
 80039bc:	08003f24 	.word	0x08003f24

080039c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	6039      	str	r1, [r7, #0]
 80039ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	221a      	movs	r2, #26
 80039d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80039d2:	f000 f843 	bl	8003a5c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80039d6:	4b02      	ldr	r3, [pc, #8]	; (80039e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	20000164 	.word	0x20000164

080039e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	6039      	str	r1, [r7, #0]
 80039ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d105      	bne.n	8003a02 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	4907      	ldr	r1, [pc, #28]	; (8003a18 <USBD_FS_ConfigStrDescriptor+0x34>)
 80039fa:	4808      	ldr	r0, [pc, #32]	; (8003a1c <USBD_FS_ConfigStrDescriptor+0x38>)
 80039fc:	f7ff fdfc 	bl	80035f8 <USBD_GetString>
 8003a00:	e004      	b.n	8003a0c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	4904      	ldr	r1, [pc, #16]	; (8003a18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8003a06:	4805      	ldr	r0, [pc, #20]	; (8003a1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8003a08:	f7ff fdf6 	bl	80035f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8003a0c:	4b02      	ldr	r3, [pc, #8]	; (8003a18 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20001690 	.word	0x20001690
 8003a1c:	08003f38 	.word	0x08003f38

08003a20 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	6039      	str	r1, [r7, #0]
 8003a2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8003a2c:	79fb      	ldrb	r3, [r7, #7]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d105      	bne.n	8003a3e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	4907      	ldr	r1, [pc, #28]	; (8003a54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8003a36:	4808      	ldr	r0, [pc, #32]	; (8003a58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8003a38:	f7ff fdde 	bl	80035f8 <USBD_GetString>
 8003a3c:	e004      	b.n	8003a48 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	4904      	ldr	r1, [pc, #16]	; (8003a54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8003a42:	4805      	ldr	r0, [pc, #20]	; (8003a58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8003a44:	f7ff fdd8 	bl	80035f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8003a48:	4b02      	ldr	r3, [pc, #8]	; (8003a54 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20001690 	.word	0x20001690
 8003a58:	08003f44 	.word	0x08003f44

08003a5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003a62:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <Get_SerialNum+0x44>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003a68:	4b0e      	ldr	r3, [pc, #56]	; (8003aa4 <Get_SerialNum+0x48>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003a6e:	4b0e      	ldr	r3, [pc, #56]	; (8003aa8 <Get_SerialNum+0x4c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4413      	add	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d009      	beq.n	8003a96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003a82:	2208      	movs	r2, #8
 8003a84:	4909      	ldr	r1, [pc, #36]	; (8003aac <Get_SerialNum+0x50>)
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f814 	bl	8003ab4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	4908      	ldr	r1, [pc, #32]	; (8003ab0 <Get_SerialNum+0x54>)
 8003a90:	68b8      	ldr	r0, [r7, #8]
 8003a92:	f000 f80f 	bl	8003ab4 <IntToUnicode>
  }
}
 8003a96:	bf00      	nop
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	1fff7a10 	.word	0x1fff7a10
 8003aa4:	1fff7a14 	.word	0x1fff7a14
 8003aa8:	1fff7a18 	.word	0x1fff7a18
 8003aac:	20000166 	.word	0x20000166
 8003ab0:	20000176 	.word	0x20000176

08003ab4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	75fb      	strb	r3, [r7, #23]
 8003aca:	e027      	b.n	8003b1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	0f1b      	lsrs	r3, r3, #28
 8003ad0:	2b09      	cmp	r3, #9
 8003ad2:	d80b      	bhi.n	8003aec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	0f1b      	lsrs	r3, r3, #28
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	7dfb      	ldrb	r3, [r7, #23]
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	4619      	mov	r1, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	440b      	add	r3, r1
 8003ae4:	3230      	adds	r2, #48	; 0x30
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	701a      	strb	r2, [r3, #0]
 8003aea:	e00a      	b.n	8003b02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	0f1b      	lsrs	r3, r3, #28
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	7dfb      	ldrb	r3, [r7, #23]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	4619      	mov	r1, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	440b      	add	r3, r1
 8003afc:	3237      	adds	r2, #55	; 0x37
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	4413      	add	r3, r2
 8003b12:	2200      	movs	r2, #0
 8003b14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	75fb      	strb	r3, [r7, #23]
 8003b1c:	7dfa      	ldrb	r2, [r7, #23]
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d3d3      	bcc.n	8003acc <IntToUnicode+0x18>
  }
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08a      	sub	sp, #40	; 0x28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b3c:	f107 0314 	add.w	r3, r7, #20
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	605a      	str	r2, [r3, #4]
 8003b46:	609a      	str	r2, [r3, #8]
 8003b48:	60da      	str	r2, [r3, #12]
 8003b4a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b54:	d132      	bne.n	8003bbc <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	4b1a      	ldr	r3, [pc, #104]	; (8003bc4 <HAL_PCD_MspInit+0x90>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	4a19      	ldr	r2, [pc, #100]	; (8003bc4 <HAL_PCD_MspInit+0x90>)
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	6313      	str	r3, [r2, #48]	; 0x30
 8003b66:	4b17      	ldr	r3, [pc, #92]	; (8003bc4 <HAL_PCD_MspInit+0x90>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003b72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b80:	2303      	movs	r3, #3
 8003b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003b84:	230a      	movs	r3, #10
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b88:	f107 0314 	add.w	r3, r7, #20
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	480e      	ldr	r0, [pc, #56]	; (8003bc8 <HAL_PCD_MspInit+0x94>)
 8003b90:	f7fc ff64 	bl	8000a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_PCD_MspInit+0x90>)
 8003b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b98:	4a0a      	ldr	r2, [pc, #40]	; (8003bc4 <HAL_PCD_MspInit+0x90>)
 8003b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b9e:	6353      	str	r3, [r2, #52]	; 0x34
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	4b07      	ldr	r3, [pc, #28]	; (8003bc4 <HAL_PCD_MspInit+0x90>)
 8003ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba8:	4a06      	ldr	r2, [pc, #24]	; (8003bc4 <HAL_PCD_MspInit+0x90>)
 8003baa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bae:	6453      	str	r3, [r2, #68]	; 0x44
 8003bb0:	4b04      	ldr	r3, [pc, #16]	; (8003bc4 <HAL_PCD_MspInit+0x90>)
 8003bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	3728      	adds	r7, #40	; 0x28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40020000 	.word	0x40020000

08003bcc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d13c      	bne.n	8003c56 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8003bdc:	4a20      	ldr	r2, [pc, #128]	; (8003c60 <USBD_LL_Init+0x94>)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a1e      	ldr	r2, [pc, #120]	; (8003c60 <USBD_LL_Init+0x94>)
 8003be8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003bec:	4b1c      	ldr	r3, [pc, #112]	; (8003c60 <USBD_LL_Init+0x94>)
 8003bee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003bf2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003bf4:	4b1a      	ldr	r3, [pc, #104]	; (8003c60 <USBD_LL_Init+0x94>)
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003bfa:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <USBD_LL_Init+0x94>)
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003c00:	4b17      	ldr	r3, [pc, #92]	; (8003c60 <USBD_LL_Init+0x94>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003c06:	4b16      	ldr	r3, [pc, #88]	; (8003c60 <USBD_LL_Init+0x94>)
 8003c08:	2202      	movs	r2, #2
 8003c0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003c0c:	4b14      	ldr	r3, [pc, #80]	; (8003c60 <USBD_LL_Init+0x94>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003c12:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <USBD_LL_Init+0x94>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003c18:	4b11      	ldr	r3, [pc, #68]	; (8003c60 <USBD_LL_Init+0x94>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003c1e:	4b10      	ldr	r3, [pc, #64]	; (8003c60 <USBD_LL_Init+0x94>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003c24:	4b0e      	ldr	r3, [pc, #56]	; (8003c60 <USBD_LL_Init+0x94>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003c2a:	480d      	ldr	r0, [pc, #52]	; (8003c60 <USBD_LL_Init+0x94>)
 8003c2c:	f7fd f8b2 	bl	8000d94 <HAL_PCD_Init>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8003c36:	f7fc fd01 	bl	800063c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8003c3a:	2180      	movs	r1, #128	; 0x80
 8003c3c:	4808      	ldr	r0, [pc, #32]	; (8003c60 <USBD_LL_Init+0x94>)
 8003c3e:	f7fd fc03 	bl	8001448 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8003c42:	2240      	movs	r2, #64	; 0x40
 8003c44:	2100      	movs	r1, #0
 8003c46:	4806      	ldr	r0, [pc, #24]	; (8003c60 <USBD_LL_Init+0x94>)
 8003c48:	f7fd fbb7 	bl	80013ba <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8003c4c:	2280      	movs	r2, #128	; 0x80
 8003c4e:	2101      	movs	r1, #1
 8003c50:	4803      	ldr	r0, [pc, #12]	; (8003c60 <USBD_LL_Init+0x94>)
 8003c52:	f7fd fbb2 	bl	80013ba <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	20001890 	.word	0x20001890

08003c64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fd f9a7 	bl	8000fce <HAL_PCD_Start>
 8003c80:	4603      	mov	r3, r0
 8003c82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 f8d8 	bl	8003e3c <USBD_Get_USB_Status>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8003c90:	7bbb      	ldrb	r3, [r7, #14]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	4608      	mov	r0, r1
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	4603      	mov	r3, r0
 8003caa:	70fb      	strb	r3, [r7, #3]
 8003cac:	460b      	mov	r3, r1
 8003cae:	70bb      	strb	r3, [r7, #2]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8003cc2:	78bb      	ldrb	r3, [r7, #2]
 8003cc4:	883a      	ldrh	r2, [r7, #0]
 8003cc6:	78f9      	ldrb	r1, [r7, #3]
 8003cc8:	f7fd f9b4 	bl	8001034 <HAL_PCD_EP_Open>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 f8b2 	bl	8003e3c <USBD_Get_USB_Status>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8003cdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b084      	sub	sp, #16
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8003d00:	78fa      	ldrb	r2, [r7, #3]
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fd f9fd 	bl	8001104 <HAL_PCD_EP_Close>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 f893 	bl	8003e3c <USBD_Get_USB_Status>
 8003d16:	4603      	mov	r3, r0
 8003d18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8003d1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8003d3e:	78fa      	ldrb	r2, [r7, #3]
 8003d40:	4611      	mov	r1, r2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fd fad5 	bl	80012f2 <HAL_PCD_EP_SetStall>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 f874 	bl	8003e3c <USBD_Get_USB_Status>
 8003d54:	4603      	mov	r3, r0
 8003d56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8003d58:	7bbb      	ldrb	r3, [r7, #14]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b086      	sub	sp, #24
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8003d80:	7af9      	ldrb	r1, [r7, #11]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	f7fd fa6a 	bl	800125e <HAL_PCD_EP_Transmit>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8003d8e:	7dfb      	ldrb	r3, [r7, #23]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 f853 	bl	8003e3c <USBD_Get_USB_Status>
 8003d96:	4603      	mov	r3, r0
 8003d98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8003d9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	607a      	str	r2, [r7, #4]
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	460b      	mov	r3, r1
 8003db2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8003dc2:	7af9      	ldrb	r1, [r7, #11]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	f7fd f9e6 	bl	8001198 <HAL_PCD_EP_Receive>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8003dd0:	7dfb      	ldrb	r3, [r7, #23]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 f832 	bl	8003e3c <USBD_Get_USB_Status>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8003ddc:	7dbb      	ldrb	r3, [r7, #22]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	460b      	mov	r3, r1
 8003df0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fd fa16 	bl	800122e <HAL_PCD_EP_GetRxCount>
 8003e02:	4603      	mov	r3, r0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8003e14:	4b03      	ldr	r3, [pc, #12]	; (8003e24 <USBD_static_malloc+0x18>)
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	2000019c 	.word	0x2000019c

08003e28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]

}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d817      	bhi.n	8003e80 <USBD_Get_USB_Status+0x44>
 8003e50:	a201      	add	r2, pc, #4	; (adr r2, 8003e58 <USBD_Get_USB_Status+0x1c>)
 8003e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e56:	bf00      	nop
 8003e58:	08003e69 	.word	0x08003e69
 8003e5c:	08003e6f 	.word	0x08003e6f
 8003e60:	08003e75 	.word	0x08003e75
 8003e64:	08003e7b 	.word	0x08003e7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8003e6c:	e00b      	b.n	8003e86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	73fb      	strb	r3, [r7, #15]
    break;
 8003e72:	e008      	b.n	8003e86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
    break;
 8003e78:	e005      	b.n	8003e86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	73fb      	strb	r3, [r7, #15]
    break;
 8003e7e:	e002      	b.n	8003e86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8003e80:	2303      	movs	r3, #3
 8003e82:	73fb      	strb	r3, [r7, #15]
    break;
 8003e84:	bf00      	nop
  }
  return usb_status;
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <__libc_init_array>:
 8003e94:	b570      	push	{r4, r5, r6, lr}
 8003e96:	4d0d      	ldr	r5, [pc, #52]	; (8003ecc <__libc_init_array+0x38>)
 8003e98:	4c0d      	ldr	r4, [pc, #52]	; (8003ed0 <__libc_init_array+0x3c>)
 8003e9a:	1b64      	subs	r4, r4, r5
 8003e9c:	10a4      	asrs	r4, r4, #2
 8003e9e:	2600      	movs	r6, #0
 8003ea0:	42a6      	cmp	r6, r4
 8003ea2:	d109      	bne.n	8003eb8 <__libc_init_array+0x24>
 8003ea4:	4d0b      	ldr	r5, [pc, #44]	; (8003ed4 <__libc_init_array+0x40>)
 8003ea6:	4c0c      	ldr	r4, [pc, #48]	; (8003ed8 <__libc_init_array+0x44>)
 8003ea8:	f000 f820 	bl	8003eec <_init>
 8003eac:	1b64      	subs	r4, r4, r5
 8003eae:	10a4      	asrs	r4, r4, #2
 8003eb0:	2600      	movs	r6, #0
 8003eb2:	42a6      	cmp	r6, r4
 8003eb4:	d105      	bne.n	8003ec2 <__libc_init_array+0x2e>
 8003eb6:	bd70      	pop	{r4, r5, r6, pc}
 8003eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ebc:	4798      	blx	r3
 8003ebe:	3601      	adds	r6, #1
 8003ec0:	e7ee      	b.n	8003ea0 <__libc_init_array+0xc>
 8003ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec6:	4798      	blx	r3
 8003ec8:	3601      	adds	r6, #1
 8003eca:	e7f2      	b.n	8003eb2 <__libc_init_array+0x1e>
 8003ecc:	08003f6c 	.word	0x08003f6c
 8003ed0:	08003f6c 	.word	0x08003f6c
 8003ed4:	08003f6c 	.word	0x08003f6c
 8003ed8:	08003f70 	.word	0x08003f70

08003edc <memset>:
 8003edc:	4402      	add	r2, r0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d100      	bne.n	8003ee6 <memset+0xa>
 8003ee4:	4770      	bx	lr
 8003ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eea:	e7f9      	b.n	8003ee0 <memset+0x4>

08003eec <_init>:
 8003eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eee:	bf00      	nop
 8003ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef2:	bc08      	pop	{r3}
 8003ef4:	469e      	mov	lr, r3
 8003ef6:	4770      	bx	lr

08003ef8 <_fini>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	bf00      	nop
 8003efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efe:	bc08      	pop	{r3}
 8003f00:	469e      	mov	lr, r3
 8003f02:	4770      	bx	lr
